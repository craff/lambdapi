
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME bool_2Dint_2Da1.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

Data_2EBool_2E_3F_21 : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_1 : hol.proof hol.true.

(; axiom ;)

thm_2 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp p_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; axiom ;)

thm_4 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not (p_1 : hol.term hol.bool => hol.imp p_1 hol.false)).

(; axiom ;)

thm_5 : hol.proof (hol.eq hol.bool hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_7 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda x. ((= x) x)) \lambda x. ((= x) x)) ;)

(; dict ;)

def thm_8 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq A x_1 x_1) (x_1 : hol.term A => hol.eq A x_1 x_1)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq A x_1 x_1).

(; Theorem: |- ((= \lambda x. ((= x) x)) \lambda x. ((= x) x)) ;)

(; dict ;)

def thm_9 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq A x_1 x_1) (x_1 : hol.term A => hol.eq A x_1 x_1)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq A x_1 x_1) (x_1 : hol.term A => hol.eq A x_1 x_1) (x_1 : hol.term A => hol.eq A x_1 x_1) (thm_8 A) (thm_8 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= x) x))) (Data.Bool.! \lambda x. ((= x) x))) ;)

(; dict ;)

def thm_10 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)) (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq A x_1 x_1) (x_1 : hol.term A => hol.eq A x_1 x_1) (thm_7 A) (thm_9 A).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_11 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => hol.REFL A x_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((= x) x)) ;)

(; dict ;)

def thm_12 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)) :=
  A : hol.type => x_1 : hol.term A => thm_11 A x_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((= x) x)) ;)

(; thm ;)

def thm_13 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)) :=
  A : hol.type => hol.EQ_MP (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)) (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)) (thm_10 A) (thm_12 A).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x)))) \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_14 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x)))) \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_15 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (thm_14 A) (thm_14 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x))))) ;)

(; dict ;)

def thm_16 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (thm_7 A) (thm_15 A).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x))) \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_17 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x))) \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_18 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS (hol.arr A hol.bool) (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (thm_17 A x_1) (thm_17 A x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_19 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (thm_7 A) (thm_18 A x_1).

(; Theorem: |- ((= x) y) ;)

(; dict ;)

def thm_20 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_2 y_1) -> hol.proof (hol.eq A x_2 y_1) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_2 y_1) => hyp_1.

(; Theorem: |- ((= y) x) ;)

(; dict ;)

def thm_21 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_1 y_2) -> hol.proof (hol.eq A y_2 x_1) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_1 y_2) => hol.SYM A x_1 y_2 (thm_20 A y_2 x_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_22 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_2 y_1) => thm_21 A x_2 y_1 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_23 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => thm_22 A y_2 x_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_24 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (thm_19 A x_1) (thm_23 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x)))) ;)

(; thm ;)

def thm_25 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) :=
  A : hol.type => hol.EQ_MP (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) (thm_16 A) (thm_24 A).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x)))) \lambda x. (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_26 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x)))) \lambda x. (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_27 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (thm_26 A) (thm_26 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x))))) ;)

(; dict ;)

def thm_28 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (thm_7 A) (thm_27 A).

(; Theorem: |- ((= \lambda y. ((= ((= x) y)) ((= y) x))) \lambda y. ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_29 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)).

(; Theorem: |- ((= \lambda y. ((= ((= x) y)) ((= y) x))) \lambda y. ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_30 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS (hol.arr A hol.bool) (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (thm_29 A x_1) (thm_29 A x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x)))) (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_31 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)) (thm_7 A) (thm_30 A x_1).

(; Theorem: |- ((Data.Bool.==> ((= y) x)) ((= x) y)) ;)

(; dict ;)

def thm_32 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hol.proof (hol.imp (hol.eq A y_2 x_1) (hol.eq A x_1 y_2)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_22 A y_1 x_2) A x_1 y_2.

(; Theorem: |- ((= y) x) ;)

(; dict ;)

def thm_33 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A y_2 x_1) -> hol.proof (hol.eq A y_2 x_1) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => hyp_1 : hol.proof (hol.eq A y_2 x_1) => hyp_1.

(; Theorem: |- ((= x) y) ;)

(; dict ;)

def thm_34 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A y_1 x_2) -> hol.proof (hol.eq A x_2 y_1) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.eq A y_1 x_2) => thm_32 A x_2 y_1 (thm_33 A x_2 y_1 hyp_1).

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_35 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.PROP_EXT (hol.eq A x_2 y_1) (hol.eq A y_1 x_2) (hyp_1 : hol.proof (hol.eq A y_1 x_2) => thm_34 A y_1 x_2 hyp_1) (hyp_1 : hol.proof (hol.eq A x_2 y_1) => thm_21 A x_2 y_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_36 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => thm_35 A y_2 x_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_37 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) (thm_31 A x_1) (thm_36 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x)))) ;)

(; thm ;)

def thm_38 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) :=
  A : hol.type => hol.EQ_MP (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) (thm_28 A) (thm_37 A).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z))))) \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z))))) ;)

(; dict ;)

def thm_39 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))))) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z))))) \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z))))) ;)

(; dict ;)

def thm_40 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))))) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))) (thm_39 A) (thm_39 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z)))))) ;)

(; dict ;)

def thm_41 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))))) (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))) (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))) (thm_7 A) (thm_40 A).

(; Theorem: |- ((= \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z)))) \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z)))) ;)

(; dict ;)

def thm_42 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))) (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))) :=
  A : hol.type => x_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))).

(; Theorem: |- ((= \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z)))) \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z)))) ;)

(; dict ;)

def thm_43 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))) (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS (hol.arr A hol.bool) (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))) (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))) (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))) (thm_42 A x_1) (thm_42 A x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z))))) ;)

(; dict ;)

def thm_44 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))) (hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))) (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))) (thm_7 A) (thm_43 A x_1).

(; Theorem: |- ((= \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z))) \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z))) ;)

(; dict ;)

def thm_45 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 y_1) (hol.eq A y_1 z_3)) (hol.eq A x_2 z_3)) (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 y_1) (hol.eq A y_1 z_3)) (hol.eq A x_2 z_3))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL (hol.arr A hol.bool) (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 y_1) (hol.eq A y_1 z_3)) (hol.eq A x_2 z_3)).

(; Theorem: |- ((= \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z))) \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z))) ;)

(; dict ;)

def thm_46 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 y_1) (hol.eq A y_1 z_3)) (hol.eq A x_2 z_3)) (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 y_1) (hol.eq A y_1 z_3)) (hol.eq A x_2 z_3))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS (hol.arr A hol.bool) (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 y_1) (hol.eq A y_1 z_3)) (hol.eq A x_2 z_3)) (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 y_1) (hol.eq A y_1 z_3)) (hol.eq A x_2 z_3)) (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 y_1) (hol.eq A y_1 z_3)) (hol.eq A x_2 z_3)) (thm_45 A y_1 x_2) (thm_45 A y_1 x_2).

(; Theorem: |- ((= (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z)))) (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z)))) ;)

(; dict ;)

def thm_47 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 y_1) (hol.eq A y_1 z_3)) (hol.eq A x_2 z_3))) (hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 y_1) (hol.eq A y_1 z_3)) (hol.eq A x_2 z_3)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 y_1) (hol.eq A y_1 z_3)) (hol.eq A x_2 z_3)) (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 y_1) (hol.eq A y_1 z_3)) (hol.eq A x_2 z_3)) (thm_7 A) (thm_46 A y_1 x_2).

(; Theorem: |- ((Data.Bool./\ ((= x) y)) ((= y) z)) ;)

(; dict ;)

def thm_48 : A : hol.type -> z_1 : hol.term A -> y_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_3 y_2) (hol.eq A y_2 z_1)) -> hol.proof (hol.and (hol.eq A x_3 y_2) (hol.eq A y_2 z_1)) :=
  A : hol.type => z_1 : hol.term A => y_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 y_2) (hol.eq A y_2 z_1)) => hyp_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_49 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_50 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_51 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_49 q_1 p_2) (thm_50 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_52 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_53 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_54 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_52 p_1) (thm_53 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_55 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_56 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_0 (thm_55 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_57 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_54 p_1) (thm_56 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_58 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_59 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_57 p_2) (thm_58 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_60 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_51 q_1 p_2) (thm_59 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_61 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_62 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_60 q_1 p_2) (thm_61 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_63 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_62 q_1 p_2 hyp_1 p_2.

(; Theorem: |- p ;)

(; dict ;)

def thm_64 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_65 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_66 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_64 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_65 q_1 hyp_2).

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_67 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_66 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_68 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_67 p_2 q_1 hyp_1 hyp_2) (thm_65 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_69 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_68 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_70 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_69 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_71 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_63 q_1 p_2 hyp_1 (thm_70 q_1 p_2).

(; Theorem: |- ((= x) y) ;)

(; dict ;)

def thm_72 : A : hol.type -> z_1 : hol.term A -> y_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_3 y_2) (hol.eq A y_2 z_1)) -> hol.proof (hol.eq A x_3 y_2) :=
  A : hol.type => z_1 : hol.term A => y_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 y_2) (hol.eq A y_2 z_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.eq A y_2 z_1) (hol.eq A x_3 y_2) hyp_1.

(; Theorem: |- ((= x) y) ;)

(; dict ;)

def thm_73 : A : hol.type -> z_1 : hol.term A -> y_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_3 y_2) (hol.eq A y_2 z_1)) -> hol.proof (hol.eq A x_3 y_2) :=
  A : hol.type => z_1 : hol.term A => y_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 y_2) (hol.eq A y_2 z_1)) => hol.PROVE_HYP (hol.and (hol.eq A x_3 y_2) (hol.eq A y_2 z_1)) (hol.eq A x_3 y_2) (thm_48 A z_1 y_2 x_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A x_3 y_2) (hol.eq A y_2 z_1)) => thm_72 A z_1 y_2 x_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_74 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_62 q_1 p_2 hyp_1 q_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_75 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_66 q_2 p_1 hyp_1 hyp_2) (thm_64 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_76 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_75 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_77 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_76 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_78 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_74 q_2 p_1 hyp_1 (thm_77 q_2 p_1).

(; Theorem: |- ((= y) z) ;)

(; dict ;)

def thm_79 : A : hol.type -> x_1 : hol.term A -> z_2 : hol.term A -> y_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_1 y_3) (hol.eq A y_3 z_2)) -> hol.proof (hol.eq A y_3 z_2) :=
  A : hol.type => x_1 : hol.term A => z_2 : hol.term A => y_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_1 y_3) (hol.eq A y_3 z_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.eq A x_1 y_3) (hol.eq A y_3 z_2) hyp_1.

(; Theorem: |- ((= y) z) ;)

(; dict ;)

def thm_80 : A : hol.type -> x_1 : hol.term A -> z_2 : hol.term A -> y_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_1 y_3) (hol.eq A y_3 z_2)) -> hol.proof (hol.eq A y_3 z_2) :=
  A : hol.type => x_1 : hol.term A => z_2 : hol.term A => y_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_1 y_3) (hol.eq A y_3 z_2)) => hol.PROVE_HYP (hol.and (hol.eq A x_1 y_3) (hol.eq A y_3 z_2)) (hol.eq A y_3 z_2) (thm_48 A z_2 y_3 x_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A x_1 y_3) (hol.eq A y_3 z_2)) => thm_79 A x_1 z_2 y_3 hyp_2).

(; Theorem: |- ((= y) z) ;)

(; dict ;)

def thm_81 : A : hol.type -> z_1 : hol.term A -> y_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A y_2 z_1) -> hol.proof (hol.eq A y_2 z_1) :=
  A : hol.type => z_1 : hol.term A => y_2 : hol.term A => hyp_1 : hol.proof (hol.eq A y_2 z_1) => hyp_1.

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_82 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A hol.bool)) (hol.eq A) (hol.eq A)) :=
  A : hol.type => hol.REFL (hol.arr A (hol.arr A hol.bool)) (hol.eq A).

(; Theorem: |- ((= x) z) ;)

(; dict ;)

def thm_83 : A : hol.type -> y_1 : hol.term A -> z_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 y_1) -> hyp_2 : hol.proof (hol.eq A y_1 z_2) -> hol.proof (hol.eq A x_3 z_2) :=
  A : hol.type => y_1 : hol.term A => z_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 y_1) => hyp_2 : hol.proof (hol.eq A y_1 z_2) => hol.TRANS A x_3 y_1 z_2 (thm_20 A y_1 x_3 hyp_1) (thm_81 A z_2 y_1 hyp_2).

(; Theorem: |- ((= (= x)) (= z)) ;)

(; dict ;)

def thm_84 : A : hol.type -> y_1 : hol.term A -> z_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 y_1) -> hyp_2 : hol.proof (hol.eq A y_1 z_2) -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A x_3) (hol.eq A z_2)) :=
  A : hol.type => y_1 : hol.term A => z_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 y_1) => hyp_2 : hol.proof (hol.eq A y_1 z_2) => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) x_3 z_2 (thm_82 A) (thm_83 A y_1 z_2 x_3 hyp_1 hyp_2).

(; Theorem: |- ((= z) z) ;)

(; dict ;)

def thm_85 : A : hol.type -> z_1 : hol.term A -> hol.proof (hol.eq A z_1 z_1) :=
  A : hol.type => z_1 : hol.term A => hol.REFL A z_1.

(; Theorem: |- ((= ((= x) z)) ((= z) z)) ;)

(; dict ;)

def thm_86 : A : hol.type -> y_1 : hol.term A -> z_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 y_1) -> hyp_2 : hol.proof (hol.eq A y_1 z_2) -> hol.proof (hol.eq hol.bool (hol.eq A x_3 z_2) (hol.eq A z_2 z_2)) :=
  A : hol.type => y_1 : hol.term A => z_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 y_1) => hyp_2 : hol.proof (hol.eq A y_1 z_2) => hol.APP_THM A hol.bool (hol.eq A x_3) (hol.eq A z_2) z_2 z_2 (thm_84 A y_1 z_2 x_3 hyp_1 hyp_2) (thm_85 A z_2).

(; Theorem: |- ((= ((= z) z)) ((= x) z)) ;)

(; dict ;)

def thm_87 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> z_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_2 y_1) -> hyp_2 : hol.proof (hol.eq A y_1 z_3) -> hol.proof (hol.eq hol.bool (hol.eq A z_3 z_3) (hol.eq A x_2 z_3)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => z_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_2 y_1) => hyp_2 : hol.proof (hol.eq A y_1 z_3) => hol.SYM hol.bool (hol.eq A x_2 z_3) (hol.eq A z_3 z_3) (thm_86 A y_1 z_3 x_2 hyp_1 hyp_2).

(; Theorem: |- ((= x) z) ;)

(; dict ;)

def thm_88 : A : hol.type -> y_1 : hol.term A -> z_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 y_1) -> hyp_2 : hol.proof (hol.eq A y_1 z_2) -> hol.proof (hol.eq A x_3 z_2) :=
  A : hol.type => y_1 : hol.term A => z_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 y_1) => hyp_2 : hol.proof (hol.eq A y_1 z_2) => hol.PROVE_HYP (hol.eq A y_1 z_2) (hol.eq A x_3 z_2) (thm_81 A z_2 y_1 hyp_2) (hyp_3 : hol.proof (hol.eq A y_1 z_2) => hol.EQ_MP (hol.eq A z_2 z_2) (hol.eq A x_3 z_2) (thm_87 A y_1 x_3 z_2 hyp_1 hyp_3) (thm_85 A z_2)).

(; Theorem: |- ((= x) z) ;)

(; dict ;)

def thm_89 : A : hol.type -> y_1 : hol.term A -> z_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 y_1) -> hyp_2 : hol.proof (hol.eq A y_1 z_2) -> hol.proof (hol.eq A x_3 z_2) :=
  A : hol.type => y_1 : hol.term A => z_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 y_1) => hyp_2 : hol.proof (hol.eq A y_1 z_2) => hol.PROVE_HYP (hol.eq A x_3 y_1) (hol.eq A x_3 z_2) (thm_20 A y_1 x_3 hyp_1) (hyp_3 : hol.proof (hol.eq A x_3 y_1) => thm_88 A y_1 z_2 x_3 hyp_3 hyp_2).

(; Theorem: |- ((= x) z) ;)

(; dict ;)

def thm_90 : A : hol.type -> y_1 : hol.term A -> z_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 y_1) -> hyp_2 : hol.proof (hol.and (hol.eq A x_3 y_1) (hol.eq A y_1 z_2)) -> hol.proof (hol.eq A x_3 z_2) :=
  A : hol.type => y_1 : hol.term A => z_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 y_1) => hyp_2 : hol.proof (hol.and (hol.eq A x_3 y_1) (hol.eq A y_1 z_2)) => hol.PROVE_HYP (hol.eq A y_1 z_2) (hol.eq A x_3 z_2) (thm_80 A x_3 z_2 y_1 hyp_2) (hyp_3 : hol.proof (hol.eq A y_1 z_2) => thm_89 A y_1 z_2 x_3 hyp_1 hyp_3).

(; Theorem: |- ((= x) z) ;)

(; dict ;)

def thm_91 : A : hol.type -> y_1 : hol.term A -> z_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_3 y_1) (hol.eq A y_1 z_2)) -> hol.proof (hol.eq A x_3 z_2) :=
  A : hol.type => y_1 : hol.term A => z_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 y_1) (hol.eq A y_1 z_2)) => hol.PROVE_HYP (hol.eq A x_3 y_1) (hol.eq A x_3 z_2) (thm_73 A z_2 y_1 x_3 hyp_1) (hyp_2 : hol.proof (hol.eq A x_3 y_1) => thm_90 A y_1 z_2 x_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z)) ;)

(; dict ;)

def thm_92 : A : hol.type -> z_1 : hol.term A -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.imp (hol.and (hol.eq A x_3 y_2) (hol.eq A y_2 z_1)) (hol.eq A x_3 z_1)) :=
  A : hol.type => z_1 : hol.term A => y_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 y_2) (hol.eq A y_2 z_1)) => thm_91 A y_2 z_1 x_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z))) ;)

(; dict ;)

def thm_93 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 y_1) (hol.eq A y_1 z_3)) (hol.eq A x_2 z_3))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => z_3 : hol.term A => thm_92 A z_3 y_1 x_2.

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z)))) ;)

(; dict ;)

def thm_94 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => hol.EQ_MP (hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))) (hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))) (thm_47 A y_2 x_1) (thm_93 A y_2 x_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z))))) ;)

(; dict ;)

def thm_95 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))))) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))) (hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3)))) (thm_44 A x_1) (thm_94 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((= x) y)) ((= y) z))) ((= x) z))))) ;)

(; thm ;)

def thm_96 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))))) :=
  A : hol.type => hol.EQ_MP (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))))) (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.forall A (z_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 y_2) (hol.eq A y_2 z_3)) (hol.eq A x_1 z_3))))) (thm_41 A) (thm_95 A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_97 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda y. ((= (\lambda x. (f x) y)) (f y)))) \lambda f. (Data.Bool.! \lambda y. ((= (\lambda x. (f x) y)) (f y)))) ;)

(; dict ;)

def thm_98 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda y. ((= (\lambda x. (f x) y)) (f y)))) \lambda f. (Data.Bool.! \lambda y. ((= (\lambda x. (f x) y)) (f y)))) ;)

(; dict ;)

def thm_99 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) (thm_98 B A) (thm_98 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda y. ((= (\lambda x. (f x) y)) (f y))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda y. ((= (\lambda x. (f x) y)) (f y))))) ;)

(; dict ;)

def thm_100 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) (thm_97 B A) (thm_99 B A).

(; Theorem: |- ((= \lambda y. ((= (\lambda x. (f x) y)) (f y))) \lambda y. ((= (\lambda x. (f x) y)) (f y))) ;)

(; dict ;)

def thm_101 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)) (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.REFL (hol.arr A hol.bool) (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)).

(; Theorem: |- ((= \lambda y. ((= (\lambda x. (f x) y)) (f y))) \lambda y. ((= (\lambda x. (f x) y)) (f y))) ;)

(; dict ;)

def thm_102 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)) (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS (hol.arr A hol.bool) (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)) (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)) (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)) (thm_101 B A f_1) (thm_101 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= (\lambda x. (f x) y)) (f y)))) (Data.Bool.! \lambda y. ((= (\lambda x. (f x) y)) (f y)))) ;)

(; dict ;)

def thm_103 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) (hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)) (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)) (thm_7 A) (thm_102 B A f_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_104 : B : hol.type -> hol.proof (hol.eq (hol.arr B (hol.arr B hol.bool)) (hol.eq B) (hol.eq B)) :=
  B : hol.type => hol.REFL (hol.arr B (hol.arr B hol.bool)) (hol.eq B).

(; Theorem: |- ((= (\lambda x. (f x) y)) (f y)) ;)

(; dict ;)

def thm_105 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.BETA_CONV A B (x_3 : hol.term A => f_2 x_3) y_1.

(; Theorem: |- ((= (= (\lambda x. (f x) y))) (= (f y))) ;)

(; dict ;)

def thm_106 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1)) (hol.eq B (f_2 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1) (thm_104 B) (thm_105 A B y_1 f_2).

(; Theorem: |- ((= (f y)) (f y)) ;)

(; dict ;)

def thm_107 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (f_2 y_1) (f_2 y_1)) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.REFL B (f_2 y_1).

(; Theorem: |- ((= ((= (\lambda x. (f x) y)) (f y))) ((= (f y)) (f y))) ;)

(; dict ;)

def thm_108 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (hol.eq B (f_2 y_1) (f_2 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM B hol.bool (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1)) (hol.eq B (f_2 y_1)) (f_2 y_1) (f_2 y_1) (thm_106 A B y_1 f_2) (thm_107 A B y_1 f_2).

(; Theorem: |- ((= ((= (f y)) (f y))) ((= (\lambda x. (f x) y)) (f y))) ;)

(; dict ;)

def thm_109 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (f_2 y_1) (f_2 y_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.SYM hol.bool (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (hol.eq B (f_2 y_1) (f_2 y_1)) (thm_108 A B y_1 f_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= (\lambda x. (f x) y)) (f y))) ;)

(; dict ;)

def thm_110 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y_2 : hol.term A => hol.EQ_MP (hol.eq B (f_1 y_2) (f_1 y_2)) (hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)) (thm_109 A B y_2 f_1) (thm_107 A B y_2 f_1).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda y. ((= (\lambda x. (f x) y)) (f y)))) ;)

(; dict ;)

def thm_111 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.EQ_MP (hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) (hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) (thm_103 B A f_1) (thm_110 B A f_1).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda y. ((= (\lambda x. (f x) y)) (f y)))) ;)

(; thm ;)

def thm_112 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)))) (thm_100 B A) (thm_111 B A).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= (\lambda x. t1 t2)) t1))) \lambda t1. (Data.Bool.! \lambda t2. ((= (\lambda x. t1 t2)) t1))) ;)

(; dict ;)

def thm_113 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)) (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= (\lambda x. t1 t2)) t1))) \lambda t1. (Data.Bool.! \lambda t2. ((= (\lambda x. t1 t2)) t1))) ;)

(; dict ;)

def thm_114 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)) (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)) (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)) (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)) (thm_113 B A) (thm_113 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (\lambda x. t1 t2)) t1)))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (\lambda x. t1 t2)) t1)))) ;)

(; dict ;)

def thm_115 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1))) (hol.forall A (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)) (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)) (thm_7 A) (thm_114 B A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_116 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B) (hol.forall B)) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B).

(; Theorem: |- ((= \lambda t2. ((= (\lambda x. t1 t2)) t1)) \lambda t2. ((= (\lambda x. t1 t2)) t1)) ;)

(; dict ;)

def thm_117 : A : hol.type -> B : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1) (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)) :=
  A : hol.type => B : hol.type => t1_1 : hol.term A => hol.REFL (hol.arr B hol.bool) (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1).

(; Theorem: |- ((= \lambda t2. ((= (\lambda x. t1 t2)) t1)) \lambda t2. ((= (\lambda x. t1 t2)) t1)) ;)

(; dict ;)

def thm_118 : A : hol.type -> B : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1) (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)) :=
  A : hol.type => B : hol.type => t1_1 : hol.term A => hol.TRANS (hol.arr B hol.bool) (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1) (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1) (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1) (thm_117 A B t1_1) (thm_117 A B t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= (\lambda x. t1 t2)) t1))) (Data.Bool.! \lambda t2. ((= (\lambda x. t1 t2)) t1))) ;)

(; dict ;)

def thm_119 : A : hol.type -> B : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)) (hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1))) :=
  A : hol.type => B : hol.type => t1_1 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1) (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1) (thm_116 B) (thm_118 A B t1_1).

(; Theorem: |- ((= (\lambda x. t1 x)) t1) ;)

(; dict ;)

def thm_120 : B : hol.type -> A : hol.type -> x_1 : hol.term B -> t1_2 : hol.term A -> hol.proof (hol.eq A ((x_3 : hol.term B => t1_2) x_1) t1_2) :=
  B : hol.type => A : hol.type => x_1 : hol.term B => t1_2 : hol.term A => hol.BETA_CONV B A (x_3 : hol.term B => t1_2) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. t1 x)) \lambda x. t1) ;)

(; dict ;)

def thm_121 : A : hol.type -> B : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr B A) (x_2 : hol.term B => (x_3 : hol.term B => t1_1) x_2) (x_2 : hol.term B => t1_1)) :=
  A : hol.type => B : hol.type => t1_1 : hol.term A => hol.ABS_THM B A (x_2 : hol.term B => (x_3 : hol.term B => t1_1) x_2) (x_2 : hol.term B => t1_1) (x_2 : hol.term B => thm_120 B A x_2 t1_1).

(; Theorem: |- ((= t2) t2) ;)

(; dict ;)

def thm_122 : B : hol.type -> t2_1 : hol.term B -> hol.proof (hol.eq B t2_1 t2_1) :=
  B : hol.type => t2_1 : hol.term B => hol.REFL B t2_1.

(; Theorem: |- ((= (\lambda x. (\lambda x. t1 x) t2)) (\lambda x. t1 t2)) ;)

(; dict ;)

def thm_123 : B : hol.type -> A : hol.type -> t2_1 : hol.term B -> t1_2 : hol.term A -> hol.proof (hol.eq A ((x_3 : hol.term B => (x_4 : hol.term B => t1_2) x_3) t2_1) ((x_3 : hol.term B => t1_2) t2_1)) :=
  B : hol.type => A : hol.type => t2_1 : hol.term B => t1_2 : hol.term A => hol.APP_THM B A (x_3 : hol.term B => (x_4 : hol.term B => t1_2) x_3) (x_3 : hol.term B => t1_2) t2_1 t2_1 (thm_121 A B t1_2) (thm_122 B t2_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. t1 x) t2))) (= (\lambda x. t1 t2))) ;)

(; dict ;)

def thm_124 : B : hol.type -> A : hol.type -> t2_1 : hol.term B -> t1_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A ((x_3 : hol.term B => (x_4 : hol.term B => t1_2) x_3) t2_1)) (hol.eq A ((x_3 : hol.term B => t1_2) t2_1))) :=
  B : hol.type => A : hol.type => t2_1 : hol.term B => t1_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) ((x_3 : hol.term B => (x_4 : hol.term B => t1_2) x_3) t2_1) ((x_3 : hol.term B => t1_2) t2_1) (thm_82 A) (thm_123 B A t2_1 t1_2).

(; Theorem: |- ((= (\lambda x. t1 t2)) t1) ;)

(; dict ;)

def thm_125 : B : hol.type -> A : hol.type -> t2_1 : hol.term B -> t1_2 : hol.term A -> hol.proof (hol.eq A ((x_3 : hol.term B => t1_2) t2_1) t1_2) :=
  B : hol.type => A : hol.type => t2_1 : hol.term B => t1_2 : hol.term A => hol.BETA_CONV B A (x_3 : hol.term B => t1_2) t2_1.

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. t1 x) t2)) (\lambda x. t1 t2))) ((= (\lambda x. t1 t2)) t1)) ;)

(; dict ;)

def thm_126 : B : hol.type -> A : hol.type -> t2_1 : hol.term B -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((x_3 : hol.term B => (x_4 : hol.term B => t1_2) x_3) t2_1) ((x_3 : hol.term B => t1_2) t2_1)) (hol.eq A ((x_3 : hol.term B => t1_2) t2_1) t1_2)) :=
  B : hol.type => A : hol.type => t2_1 : hol.term B => t1_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A ((x_3 : hol.term B => (x_4 : hol.term B => t1_2) x_3) t2_1)) (hol.eq A ((x_3 : hol.term B => t1_2) t2_1)) ((x_3 : hol.term B => t1_2) t2_1) t1_2 (thm_124 B A t2_1 t1_2) (thm_125 B A t2_1 t1_2).

(; Theorem: |- ((= (= (\lambda x. t1 t2))) (= t1)) ;)

(; dict ;)

def thm_127 : B : hol.type -> A : hol.type -> t2_1 : hol.term B -> t1_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A ((x_3 : hol.term B => t1_2) t2_1)) (hol.eq A t1_2)) :=
  B : hol.type => A : hol.type => t2_1 : hol.term B => t1_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) ((x_3 : hol.term B => t1_2) t2_1) t1_2 (thm_82 A) (hol.EQ_MP (hol.eq A ((x_3 : hol.term B => (x_4 : hol.term B => t1_2) x_3) t2_1) ((x_3 : hol.term B => t1_2) t2_1)) (hol.eq A ((x_3 : hol.term B => t1_2) t2_1) t1_2) (thm_126 B A t2_1 t1_2) (thm_123 B A t2_1 t1_2)).

(; Theorem: |- ((= t1) t1) ;)

(; dict ;)

def thm_128 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq A t1_1 t1_1) :=
  A : hol.type => t1_1 : hol.term A => hol.REFL A t1_1.

(; Theorem: |- ((= ((= (\lambda x. t1 t2)) t1)) ((= t1) t1)) ;)

(; dict ;)

def thm_129 : B : hol.type -> A : hol.type -> t2_1 : hol.term B -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((x_3 : hol.term B => t1_2) t2_1) t1_2) (hol.eq A t1_2 t1_2)) :=
  B : hol.type => A : hol.type => t2_1 : hol.term B => t1_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A ((x_3 : hol.term B => t1_2) t2_1)) (hol.eq A t1_2) t1_2 t1_2 (thm_127 B A t2_1 t1_2) (thm_128 A t1_2).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_130 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_131 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_130 A x_1) (thm_130 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_132 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_133 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_132 A) (thm_132 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_134 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_7 A) (thm_133 A).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_135 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_136 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_135 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_137 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_136 t_1 hyp_1) thm_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_138 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_139 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_138 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_1).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_140 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_137 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_139 t_1 hyp_1).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_141 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_140 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_142 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_141 A x_1) (thm_11 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_143 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_130 A x_1) (thm_142 A x_1)) A x_1.

(; Theorem: |- ((= ((= t1) t1)) Data.Bool.T) ;)

(; dict ;)

def thm_144 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A t1_1 t1_1) hol.true) :=
  A : hol.type => t1_1 : hol.term A => (A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_131 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_134 A) (thm_143 A) x_1)) A x_1) A t1_1.

(; Theorem: |- ((= ((= (\lambda x. t1 t2)) t1)) Data.Bool.T) ;)

(; dict ;)

def thm_145 : B : hol.type -> A : hol.type -> t2_1 : hol.term B -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((x_3 : hol.term B => t1_2) t2_1) t1_2) hol.true) :=
  B : hol.type => A : hol.type => t2_1 : hol.term B => t1_2 : hol.term A => hol.TRANS hol.bool (hol.eq A ((x_3 : hol.term B => t1_2) t2_1) t1_2) (hol.eq A t1_2 t1_2) hol.true (thm_129 B A t2_1 t1_2) (thm_144 A t1_2).

(; Theorem: |- ((= Data.Bool.T) ((= (\lambda x. t1 t2)) t1)) ;)

(; dict ;)

def thm_146 : B : hol.type -> A : hol.type -> t2_1 : hol.term B -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool hol.true (hol.eq A ((x_3 : hol.term B => t1_2) t2_1) t1_2)) :=
  B : hol.type => A : hol.type => t2_1 : hol.term B => t1_2 : hol.term A => hol.SYM hol.bool (hol.eq A ((x_3 : hol.term B => t1_2) t2_1) t1_2) hol.true (thm_145 B A t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (\lambda x. t1 t2)) t1)) ;)

(; dict ;)

def thm_147 : A : hol.type -> B : hol.type -> t1_1 : hol.term A -> hol.proof (hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)) :=
  A : hol.type => B : hol.type => t1_1 : hol.term A => t2_2 : hol.term B => hol.EQ_MP hol.true (hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1) (thm_146 B A t2_2 t1_1) thm_1.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (\lambda x. t1 t2)) t1))) ;)

(; dict ;)

def thm_148 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1))) :=
  B : hol.type => A : hol.type => t1_1 : hol.term A => hol.EQ_MP (hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)) (hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1)) (thm_119 A B t1_1) (thm_147 A B t1_1).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (\lambda x. t1 t2)) t1))) ;)

(; thm ;)

def thm_149 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall A (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1))) (hol.forall A (t1_1 : hol.term A => hol.forall B (t2_2 : hol.term B => hol.eq A ((x_3 : hol.term B => t1_1) t2_2) t1_1))) (thm_115 B A) (thm_148 B A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_150 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))))) \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))))) ;)

(; dict ;)

def thm_151 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))))) \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))))) ;)

(; dict ;)

def thm_152 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) thm_151 thm_151.

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))))) ;)

(; dict ;)

def thm_153 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) thm_150 thm_152.

(; Theorem: |- ((= \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))) \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))) ;)

(; dict ;)

def thm_154 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) :=
  t1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))).

(; Theorem: |- ((= \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))) \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))) ;)

(; dict ;)

def thm_155 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) :=
  t1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (thm_154 t1_1) (thm_154 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))))) (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))))) ;)

(; dict ;)

def thm_156 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) thm_150 (thm_155 t1_1).

(; Theorem: |- ((= \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))) \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))) ;)

(; dict ;)

def thm_157 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))).

(; Theorem: |- ((= \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))) \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))) ;)

(; dict ;)

def thm_158 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))) (thm_157 t2_1 t1_2) (thm_157 t2_1 t1_2).

(; Theorem: |- ((= (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))) (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))) ;)

(; dict ;)

def thm_159 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3)))) (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))) thm_150 (thm_158 t2_1 t1_2).

(; Theorem: |- ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)) ;)

(; dict ;)

def thm_160 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) -> hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) => hyp_1.

(; Theorem: |- t1 ;)

(; dict ;)

def thm_161 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) -> hol.proof t1_3 :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.and t2_2 t3_1) t1_3 hyp_1.

(; Theorem: |- t1 ;)

(; dict ;)

def thm_162 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) -> hol.proof t1_3 :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) => hol.PROVE_HYP (hol.and t1_3 (hol.and t2_2 t3_1)) t1_3 (thm_160 t3_1 t2_2 t1_3 hyp_1) (hyp_2 : hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) => thm_161 t3_1 t2_2 t1_3 hyp_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_163 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_60 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_164 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_165 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_164 x_2 q_3 p_1 hyp_2 (thm_64 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_166 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_165 p_2 x_3 q_1 hyp_1 hyp_3 (thm_65 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_167 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_166 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_168 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_167 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_169 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_163 q_1 p_2) (thm_168 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_170 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_169 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= t2) ((Data.Bool./\ t1) t2)) ;)

(; dict ;)

def thm_171 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof t1_1 -> hol.proof (hol.eq hol.bool t2_2 (hol.and t1_1 t2_2)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof t1_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) t1_1 t2_2 hyp_1.

(; Theorem: |- ((= t2) ((Data.Bool./\ t1) t2)) ;)

(; dict ;)

def thm_172 : t3_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> t2_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_2 (hol.and t2_3 t3_1)) -> hol.proof (hol.eq hol.bool t2_3 (hol.and t1_2 t2_3)) :=
  t3_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t2_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_2 (hol.and t2_3 t3_1)) => hol.PROVE_HYP t1_2 (hol.eq hol.bool t2_3 (hol.and t1_2 t2_3)) (thm_162 t3_1 t2_3 t1_2 hyp_1) (hyp_2 : hol.proof t1_2 => thm_171 t1_2 t2_3 hyp_2).

(; Theorem: |- ((Data.Bool./\ t2) t3) ;)

(; dict ;)

def thm_173 : t1_1 : hol.term hol.bool -> t3_2 : hol.term hol.bool -> t2_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_1 (hol.and t2_3 t3_2)) -> hol.proof (hol.and t2_3 t3_2) :=
  t1_1 : hol.term hol.bool => t3_2 : hol.term hol.bool => t2_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_1 (hol.and t2_3 t3_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) t1_1 (hol.and t2_3 t3_2) hyp_1.

(; Theorem: |- ((Data.Bool./\ t2) t3) ;)

(; dict ;)

def thm_174 : t1_1 : hol.term hol.bool -> t3_2 : hol.term hol.bool -> t2_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_1 (hol.and t2_3 t3_2)) -> hol.proof (hol.and t2_3 t3_2) :=
  t1_1 : hol.term hol.bool => t3_2 : hol.term hol.bool => t2_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_1 (hol.and t2_3 t3_2)) => hol.PROVE_HYP (hol.and t1_1 (hol.and t2_3 t3_2)) (hol.and t2_3 t3_2) (thm_160 t3_2 t2_3 t1_1 hyp_1) (hyp_2 : hol.proof (hol.and t1_1 (hol.and t2_3 t3_2)) => thm_173 t1_1 t3_2 t2_3 hyp_2).

(; Theorem: |- t2 ;)

(; dict ;)

def thm_175 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t2_2 t3_1) -> hol.proof t2_2 :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t2_2 t3_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) t3_1 t2_2 hyp_1.

(; Theorem: |- t2 ;)

(; dict ;)

def thm_176 : t3_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> t2_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_2 (hol.and t2_3 t3_1)) -> hol.proof t2_3 :=
  t3_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t2_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_2 (hol.and t2_3 t3_1)) => hol.PROVE_HYP (hol.and t2_3 t3_1) t2_3 (thm_174 t1_2 t3_1 t2_3 hyp_1) (hyp_2 : hol.proof (hol.and t2_3 t3_1) => thm_175 t3_1 t2_3 hyp_2).

(; Theorem: |- ((Data.Bool./\ t1) t2) ;)

(; dict ;)

def thm_177 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) -> hol.proof (hol.and t1_3 t2_2) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) => hol.EQ_MP t2_2 (hol.and t1_3 t2_2) (thm_172 t3_1 t1_3 t2_2 hyp_1) (thm_176 t3_1 t1_3 t2_2 hyp_1).

(; Theorem: |- ((= t3) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ;)

(; dict ;)

def thm_178 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> t3_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_2 t2_1) -> hol.proof (hol.eq hol.bool t3_3 (hol.and (hol.and t1_2 t2_1) t3_3)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t3_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_2 t2_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.and t1_2 t2_1) t3_3 hyp_1.

(; Theorem: |- ((= t3) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ;)

(; dict ;)

def thm_179 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> t3_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_2 (hol.and t2_1 t3_3)) -> hol.proof (hol.eq hol.bool t3_3 (hol.and (hol.and t1_2 t2_1) t3_3)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t3_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_2 (hol.and t2_1 t3_3)) => hol.PROVE_HYP (hol.and t1_2 t2_1) (hol.eq hol.bool t3_3 (hol.and (hol.and t1_2 t2_1) t3_3)) (thm_177 t3_3 t2_1 t1_2 hyp_1) (hyp_2 : hol.proof (hol.and t1_2 t2_1) => thm_178 t2_1 t1_2 t3_3 hyp_2).

(; Theorem: |- t3 ;)

(; dict ;)

def thm_180 : t2_1 : hol.term hol.bool -> t3_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t2_1 t3_2) -> hol.proof t3_2 :=
  t2_1 : hol.term hol.bool => t3_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t2_1 t3_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) t2_1 t3_2 hyp_1.

(; Theorem: |- t3 ;)

(; dict ;)

def thm_181 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> t3_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_2 (hol.and t2_1 t3_3)) -> hol.proof t3_3 :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t3_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_2 (hol.and t2_1 t3_3)) => hol.PROVE_HYP (hol.and t2_1 t3_3) t3_3 (thm_173 t1_2 t3_3 t2_1 hyp_1) (hyp_2 : hol.proof (hol.and t2_1 t3_3) => thm_180 t2_1 t3_3 hyp_2).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3) ;)

(; dict ;)

def thm_182 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) -> hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) => hol.EQ_MP t3_1 (hol.and (hol.and t1_3 t2_2) t3_1) (thm_179 t2_2 t1_3 t3_1 hyp_1) (thm_181 t2_2 t1_3 t3_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ;)

(; dict ;)

def thm_183 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) => thm_182 t3_1 t2_2 t1_3 hyp_1.

(; Theorem: |- ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3) ;)

(; dict ;)

def thm_184 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) -> hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) => hyp_1.

(; Theorem: |- ((Data.Bool./\ t1) t2) ;)

(; dict ;)

def thm_185 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) -> hol.proof (hol.and t1_3 t2_2) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) t3_1 (hol.and t1_3 t2_2) hyp_1.

(; Theorem: |- ((Data.Bool./\ t1) t2) ;)

(; dict ;)

def thm_186 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) -> hol.proof (hol.and t1_3 t2_2) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) => hol.PROVE_HYP (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 t2_2) (thm_184 t3_1 t2_2 t1_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) => thm_185 t3_1 t2_2 t1_3 hyp_2).

(; Theorem: |- t1 ;)

(; dict ;)

def thm_187 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_2 t2_1) -> hol.proof t1_2 :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_2 t2_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) t2_1 t1_2 hyp_1.

(; Theorem: |- t1 ;)

(; dict ;)

def thm_188 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) -> hol.proof t1_3 :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) => hol.PROVE_HYP (hol.and t1_3 t2_2) t1_3 (thm_186 t3_1 t2_2 t1_3 hyp_1) (hyp_2 : hol.proof (hol.and t1_3 t2_2) => thm_187 t2_2 t1_3 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ t2) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ;)

(; dict ;)

def thm_189 : t1_1 : hol.term hol.bool -> t3_2 : hol.term hol.bool -> t2_3 : hol.term hol.bool -> hyp_1 : hol.proof t1_1 -> hol.proof (hol.eq hol.bool (hol.and t2_3 t3_2) (hol.and t1_1 (hol.and t2_3 t3_2))) :=
  t1_1 : hol.term hol.bool => t3_2 : hol.term hol.bool => t2_3 : hol.term hol.bool => hyp_1 : hol.proof t1_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) t1_1 (hol.and t2_3 t3_2) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ t2) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ;)

(; dict ;)

def thm_190 : t1_1 : hol.term hol.bool -> t3_2 : hol.term hol.bool -> t2_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.and t1_1 t2_3) t3_2) -> hol.proof (hol.eq hol.bool (hol.and t2_3 t3_2) (hol.and t1_1 (hol.and t2_3 t3_2))) :=
  t1_1 : hol.term hol.bool => t3_2 : hol.term hol.bool => t2_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.and t1_1 t2_3) t3_2) => hol.PROVE_HYP t1_1 (hol.eq hol.bool (hol.and t2_3 t3_2) (hol.and t1_1 (hol.and t2_3 t3_2))) (thm_188 t3_2 t2_3 t1_1 hyp_1) (hyp_2 : hol.proof t1_1 => thm_189 t1_1 t3_2 t2_3 hyp_2).

(; Theorem: |- t2 ;)

(; dict ;)

def thm_191 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_1 t2_2) -> hol.proof t2_2 :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_1 t2_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) t1_1 t2_2 hyp_1.

(; Theorem: |- t2 ;)

(; dict ;)

def thm_192 : t3_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> t2_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.and t1_2 t2_3) t3_1) -> hol.proof t2_3 :=
  t3_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t2_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.and t1_2 t2_3) t3_1) => hol.PROVE_HYP (hol.and t1_2 t2_3) t2_3 (thm_185 t3_1 t2_3 t1_2 hyp_1) (hyp_2 : hol.proof (hol.and t1_2 t2_3) => thm_191 t1_2 t2_3 hyp_2).

(; Theorem: |- ((= t3) ((Data.Bool./\ t2) t3)) ;)

(; dict ;)

def thm_193 : t2_1 : hol.term hol.bool -> t3_2 : hol.term hol.bool -> hyp_1 : hol.proof t2_1 -> hol.proof (hol.eq hol.bool t3_2 (hol.and t2_1 t3_2)) :=
  t2_1 : hol.term hol.bool => t3_2 : hol.term hol.bool => hyp_1 : hol.proof t2_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) t2_1 t3_2 hyp_1.

(; Theorem: |- ((= t3) ((Data.Bool./\ t2) t3)) ;)

(; dict ;)

def thm_194 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t3_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.and t1_1 t2_2) t3_3) -> hol.proof (hol.eq hol.bool t3_3 (hol.and t2_2 t3_3)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t3_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.and t1_1 t2_2) t3_3) => hol.PROVE_HYP t2_2 (hol.eq hol.bool t3_3 (hol.and t2_2 t3_3)) (thm_192 t3_3 t1_1 t2_2 hyp_1) (hyp_2 : hol.proof t2_2 => thm_193 t2_2 t3_3 hyp_2).

(; Theorem: |- t3 ;)

(; dict ;)

def thm_195 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> t3_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.and t1_2 t2_1) t3_3) -> hol.proof t3_3 :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t3_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.and t1_2 t2_1) t3_3) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.and t1_2 t2_1) t3_3 hyp_1.

(; Theorem: |- t3 ;)

(; dict ;)

def thm_196 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> t3_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.and t1_2 t2_1) t3_3) -> hol.proof t3_3 :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t3_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.and t1_2 t2_1) t3_3) => hol.PROVE_HYP (hol.and (hol.and t1_2 t2_1) t3_3) t3_3 (thm_184 t3_3 t2_1 t1_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.and t1_2 t2_1) t3_3) => thm_195 t2_1 t1_2 t3_3 hyp_2).

(; Theorem: |- ((Data.Bool./\ t2) t3) ;)

(; dict ;)

def thm_197 : t1_1 : hol.term hol.bool -> t3_2 : hol.term hol.bool -> t2_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.and t1_1 t2_3) t3_2) -> hol.proof (hol.and t2_3 t3_2) :=
  t1_1 : hol.term hol.bool => t3_2 : hol.term hol.bool => t2_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.and t1_1 t2_3) t3_2) => hol.EQ_MP t3_2 (hol.and t2_3 t3_2) (thm_194 t1_1 t2_3 t3_2 hyp_1) (thm_196 t2_3 t1_1 t3_2 hyp_1).

(; Theorem: |- ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)) ;)

(; dict ;)

def thm_198 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) -> hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) => hol.EQ_MP (hol.and t2_2 t3_1) (hol.and t1_3 (hol.and t2_2 t3_1)) (thm_190 t1_3 t3_1 t2_2 hyp_1) (thm_197 t1_3 t3_1 t2_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ;)

(; dict ;)

def thm_199 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) => thm_198 t3_1 t2_2 t1_3 hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ;)

(; dict ;)

def thm_200 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.PROP_EXT (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1)) (hyp_1 : hol.proof (hol.and t1_3 (hol.and t2_2 t3_1)) => thm_183 t3_1 t2_2 t1_3 (thm_160 t3_1 t2_2 t1_3 hyp_1)) (hyp_1 : hol.proof (hol.and (hol.and t1_3 t2_2) t3_1) => thm_199 t3_1 t2_2 t1_3 (thm_184 t3_1 t2_2 t1_3 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))) ;)

(; dict ;)

def thm_201 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t3_3 : hol.term hol.bool => thm_200 t3_3 t2_1 t1_2.

(; Theorem: |- (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))) ;)

(; dict ;)

def thm_202 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (thm_159 t2_2 t1_1) (thm_201 t2_2 t1_1).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))))) ;)

(; dict ;)

def thm_203 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))))) :=
  t1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (thm_156 t1_1) (thm_202 t1_1).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))))) ;)

(; thm ;)

def thm_204 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))))) :=
  hol.EQ_MP (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))))) thm_153 thm_203.

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1)))) \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1)))) ;)

(; dict ;)

def thm_205 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1)))) \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1)))) ;)

(; dict ;)

def thm_206 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) thm_205 thm_205.

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1))))) ;)

(; dict ;)

def thm_207 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) thm_150 thm_206.

(; Theorem: |- ((= \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1))) \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1))) ;)

(; dict ;)

def thm_208 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)).

(; Theorem: |- ((= \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1))) \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1))) ;)

(; dict ;)

def thm_209 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)) (thm_208 t1_1) (thm_208 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1)))) (Data.Bool.! \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1)))) ;)

(; dict ;)

def thm_210 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)) thm_150 (thm_209 t1_1).

(; Theorem: |- ((Data.Bool./\ t2) t1) ;)

(; dict ;)

def thm_211 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t2_2 t1_1) -> hol.proof (hol.and t2_2 t1_1) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t2_2 t1_1) => hyp_1.

(; Theorem: |- t1 ;)

(; dict ;)

def thm_212 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t2_1 t1_2) -> hol.proof t1_2 :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t2_1 t1_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) t2_1 t1_2 hyp_1.

(; Theorem: |- t1 ;)

(; dict ;)

def thm_213 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t2_1 t1_2) -> hol.proof t1_2 :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t2_1 t1_2) => hol.PROVE_HYP (hol.and t2_1 t1_2) t1_2 (thm_211 t1_2 t2_1 hyp_1) (hyp_2 : hol.proof (hol.and t2_1 t1_2) => thm_212 t2_1 t1_2 hyp_2).

(; Theorem: |- ((= t2) ((Data.Bool./\ t1) t2)) ;)

(; dict ;)

def thm_214 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t2_2 t1_1) -> hol.proof (hol.eq hol.bool t2_2 (hol.and t1_1 t2_2)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t2_2 t1_1) => hol.PROVE_HYP t1_1 (hol.eq hol.bool t2_2 (hol.and t1_1 t2_2)) (thm_213 t2_2 t1_1 hyp_1) (hyp_2 : hol.proof t1_1 => thm_171 t1_1 t2_2 hyp_2).

(; Theorem: |- t2 ;)

(; dict ;)

def thm_215 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t2_2 t1_1) -> hol.proof t2_2 :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t2_2 t1_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) t1_1 t2_2 hyp_1.

(; Theorem: |- t2 ;)

(; dict ;)

def thm_216 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t2_2 t1_1) -> hol.proof t2_2 :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t2_2 t1_1) => hol.PROVE_HYP (hol.and t2_2 t1_1) t2_2 (thm_211 t1_1 t2_2 hyp_1) (hyp_2 : hol.proof (hol.and t2_2 t1_1) => thm_215 t1_1 t2_2 hyp_2).

(; Theorem: |- ((Data.Bool./\ t1) t2) ;)

(; dict ;)

def thm_217 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t2_1 t1_2) -> hol.proof (hol.and t1_2 t2_1) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t2_1 t1_2) => hol.EQ_MP t2_1 (hol.and t1_2 t2_1) (thm_214 t1_2 t2_1 hyp_1) (thm_216 t1_2 t2_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ t2) t1)) ((Data.Bool./\ t1) t2)) ;)

(; dict ;)

def thm_218 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and t2_2 t1_1) (hol.and t1_1 t2_2)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t2_2 t1_1) => thm_217 t2_2 t1_1 hyp_1.

(; Theorem: |- ((= t1) ((Data.Bool./\ t2) t1)) ;)

(; dict ;)

def thm_219 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof t2_1 -> hol.proof (hol.eq hol.bool t1_2 (hol.and t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof t2_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) t2_1 t1_2 hyp_1.

(; Theorem: |- ((= t1) ((Data.Bool./\ t2) t1)) ;)

(; dict ;)

def thm_220 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_2 t2_1) -> hol.proof (hol.eq hol.bool t1_2 (hol.and t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_2 t2_1) => hol.PROVE_HYP t2_1 (hol.eq hol.bool t1_2 (hol.and t2_1 t1_2)) (thm_191 t1_2 t2_1 hyp_1) (hyp_2 : hol.proof t2_1 => thm_219 t2_1 t1_2 hyp_2).

(; Theorem: |- ((Data.Bool./\ t2) t1) ;)

(; dict ;)

def thm_221 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_1 t2_2) -> hol.proof (hol.and t2_2 t1_1) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_1 t2_2) => hol.EQ_MP t1_1 (hol.and t2_2 t1_1) (thm_220 t2_2 t1_1 hyp_1) (thm_187 t2_2 t1_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1)) ;)

(; dict ;)

def thm_222 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and t1_2 t2_1) (hol.and t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_2 t2_1) => thm_221 t1_2 t2_1 hyp_1.

(; Theorem: |- ((Data.Bool./\ t1) t2) ;)

(; dict ;)

def thm_223 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t1_2 t2_1) -> hol.proof (hol.and t1_2 t2_1) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t1_2 t2_1) => hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1)) ;)

(; dict ;)

def thm_224 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t1_2 t2_1) (hol.and t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROP_EXT (hol.and t1_2 t2_1) (hol.and t2_1 t1_2) (hyp_1 : hol.proof (hol.and t2_1 t1_2) => thm_218 t1_2 t2_1 (thm_211 t1_2 t2_1 hyp_1)) (hyp_1 : hol.proof (hol.and t1_2 t2_1) => thm_222 t2_1 t1_2 (thm_223 t2_1 t1_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1))) ;)

(; dict ;)

def thm_225 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => thm_224 t2_2 t1_1.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1)))) ;)

(; dict ;)

def thm_226 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)))) :=
  t1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1))) (thm_210 t1_1) (thm_225 t1_1).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool./\ t1) t2)) ((Data.Bool./\ t2) t1)))) ;)

(; thm ;)

def thm_227 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)))) :=
  hol.EQ_MP (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 t2_2) (hol.and t2_2 t1_1)))) thm_207 thm_226.

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool./\ t) t)) t)) \lambda t. ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_228 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool./\ t) t)) t)) \lambda t. ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_229 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1) thm_228 thm_228.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool./\ t) t)) t))) (Data.Bool.! \lambda t. ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_230 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1) thm_150 thm_229.

(; Theorem: |- ((= t) ((Data.Bool./\ t) t)) ;)

(; dict ;)

def thm_231 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 (hol.and t_1 t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) t_1 t_1 hyp_1.

(; Theorem: |- ((= t) ((Data.Bool./\ t) t)) ;)

(; dict ;)

def thm_232 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 (hol.and t_1 t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROVE_HYP t_1 (hol.eq hol.bool t_1 (hol.and t_1 t_1)) (thm_138 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_231 t_1 hyp_2).

(; Theorem: |- ((Data.Bool./\ t) t) ;)

(; dict ;)

def thm_233 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.and t_1 t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.EQ_MP t_1 (hol.and t_1 t_1) (thm_232 t_1 hyp_1) (thm_138 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> t) ((Data.Bool./\ t) t)) ;)

(; dict ;)

def thm_234 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 (hol.and t_1 t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => thm_233 t_1 hyp_1.

(; Theorem: |- ((Data.Bool./\ t) t) ;)

(; dict ;)

def thm_235 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t_1 t_1) -> hol.proof (hol.and t_1 t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t_1 t_1) => hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_236 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t_1 t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t_1 t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) t_1 t_1 hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_237 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t_1 t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t_1 t_1) => hol.PROVE_HYP (hol.and t_1 t_1) t_1 (thm_235 t_1 hyp_1) (hyp_2 : hol.proof (hol.and t_1 t_1) => thm_236 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_238 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t_1 t_1) => thm_237 t_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_239 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.and t_1 t_1) t_1 (hyp_1 : hol.proof t_1 => thm_234 t_1 (thm_138 t_1 hyp_1)) (hyp_1 : hol.proof (hol.and t_1 t_1) => thm_238 t_1 (thm_235 t_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_240 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => thm_239 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool./\ t) t)) t)) ;)

(; thm ;)

def thm_241 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)) thm_230 thm_240.

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))))) \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))))) ;)

(; dict ;)

def thm_242 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))))) \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))))) ;)

(; dict ;)

def thm_243 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) thm_242 thm_242.

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))))))) ;)

(; dict ;)

def thm_244 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) thm_150 thm_243.

(; Theorem: |- ((= \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))))) \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))))) ;)

(; dict ;)

def thm_245 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) :=
  t1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))).

(; Theorem: |- ((= \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))))) \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))))) ;)

(; dict ;)

def thm_246 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) :=
  t1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))) (thm_245 t1_1) (thm_245 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))))) (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))))) ;)

(; dict ;)

def thm_247 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))) thm_150 (thm_246 t1_1).

(; Theorem: |- ((= \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))) \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))) ;)

(; dict ;)

def thm_248 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3))).

(; Theorem: |- ((= \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))) \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))) ;)

(; dict ;)

def thm_249 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3))) (thm_248 t2_1 t1_2) (thm_248 t2_1 t1_2).

(; Theorem: |- ((= (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))))) (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))))) ;)

(; dict ;)

def thm_250 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3)))) (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3))))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3))) thm_150 (thm_249 t2_1 t1_2).

(; Theorem: |- t3 ;)

(; dict ;)

def thm_251 : t3_1 : hol.term hol.bool -> hyp_1 : hol.proof t3_1 -> hol.proof t3_1 :=
  t3_1 : hol.term hol.bool => hyp_1 : hol.proof t3_1 => hyp_1.

(; Theorem: |- ((= (= ((Data.Bool.\/ P) Q))) (= ((Data.Bool.\/ P) Q))) ;)

(; dict ;)

def thm_252 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_253 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q))) ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))))) ;)

(; dict ;)

def thm_254 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_252 Q_1 P_2) (thm_253 Q_1 P_2).

(; Theorem: |- ((= (= (Data.Bool.\/ P))) (= (Data.Bool.\/ P))) ;)

(; dict ;)

def thm_255 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_256 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1.

(; Theorem: |- ((= ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P))) ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))))) ;)

(; dict ;)

def thm_257 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))))) :=
  P_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))) (thm_255 P_1) (thm_256 P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_258 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool P_1 P_1) :=
  P_1 : hol.term hol.bool => hol.REFL hol.bool P_1.

(; Theorem: |- ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) ;)

(; dict ;)

def thm_259 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1 P_1 thm_2 (thm_258 P_1).

(; Theorem: |- ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_260 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) (thm_257 P_1) (thm_259 P_1).

(; Theorem: |- ((= Q) Q) ;)

(; dict ;)

def thm_261 : Q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool Q_1 Q_1) :=
  Q_1 : hol.term hol.bool => hol.REFL hol.bool Q_1.

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) ;)

(; dict ;)

def thm_262 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or P_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1 Q_1 (thm_260 P_2) (thm_261 Q_1).

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_263 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) (thm_254 Q_1 P_2) (thm_262 Q_1 P_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ((Data.Bool.\/ P) Q)) ;)

(; dict ;)

def thm_264 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (hol.or P_2 Q_1)) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.SYM hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_263 Q_1 P_2).

(; Theorem: |- ((Data.Bool.==> Q) t) ;)

(; dict ;)

def thm_265 : t_1 : hol.term hol.bool -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp Q_2 t_1) -> hol.proof (hol.imp Q_2 t_1) :=
  t_1 : hol.term hol.bool => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp Q_2 t_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_266 : Q_1 : hol.term hol.bool -> hyp_1 : hol.proof Q_1 -> hol.proof Q_1 :=
  Q_1 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_267 : Q_1 : hol.term hol.bool -> t_2 : hol.term hol.bool -> hyp_1 : hol.proof Q_1 -> hyp_2 : hol.proof (hol.imp Q_1 t_2) -> hol.proof t_2 :=
  Q_1 : hol.term hol.bool => t_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => hyp_2 : hol.proof (hol.imp Q_1 t_2) => thm_265 t_2 Q_1 hyp_2 (thm_266 Q_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Q) t)) t) ;)

(; dict ;)

def thm_268 : t_1 : hol.term hol.bool -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof Q_2 -> hol.proof (hol.imp (hol.imp Q_2 t_1) t_1) :=
  t_1 : hol.term hol.bool => Q_2 : hol.term hol.bool => hyp_1 : hol.proof Q_2 => hyp_2 : hol.proof (hol.imp Q_2 t_1) => thm_267 Q_2 t_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> P) t)) ((Data.Bool.==> ((Data.Bool.==> Q) t)) t)) ;)

(; dict ;)

def thm_269 : Q_1 : hol.term hol.bool -> t_2 : hol.term hol.bool -> P_3 : hol.term hol.bool -> hyp_1 : hol.proof Q_1 -> hol.proof (hol.imp (hol.imp P_3 t_2) (hol.imp (hol.imp Q_1 t_2) t_2)) :=
  Q_1 : hol.term hol.bool => t_2 : hol.term hol.bool => P_3 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => hyp_2 : hol.proof (hol.imp P_3 t_2) => thm_268 t_2 Q_1 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool.==> ((Data.Bool.==> P) t)) ((Data.Bool.==> ((Data.Bool.==> Q) t)) t))) ;)

(; dict ;)

def thm_270 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof Q_1 -> hol.proof (hol.forall hol.bool (t_3 : hol.term hol.bool => hol.imp (hol.imp P_2 t_3) (hol.imp (hol.imp Q_1 t_3) t_3))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => t_3 : hol.term hol.bool => thm_269 Q_1 t_3 P_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ P) Q) ;)

(; dict ;)

def thm_271 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof Q_1 -> hol.proof (hol.or P_2 Q_1) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => hol.EQ_MP (hol.forall hol.bool (t_3 : hol.term hol.bool => hol.imp (hol.imp P_2 t_3) (hol.imp (hol.imp Q_1 t_3) t_3))) (hol.or P_2 Q_1) (thm_264 Q_1 P_2) (thm_270 Q_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_272 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof t3_1 -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof t3_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) t3_1 (hol.or t1_3 t2_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_273 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof t3_1 -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof t3_1 => hol.PROVE_HYP t3_1 (hol.or (hol.or t1_3 t2_2) t3_1) (thm_251 t3_1 hyp_1) (hyp_2 : hol.proof t3_1 => thm_272 t3_1 t2_2 t1_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> t3) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ;)

(; dict ;)

def thm_274 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> t3_3 : hol.term hol.bool -> hol.proof (hol.imp t3_3 (hol.or (hol.or t1_2 t2_1) t3_3)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t3_3 : hol.term hol.bool => hyp_1 : hol.proof t3_3 => thm_273 t3_3 t2_1 t1_2 hyp_1.

(; Theorem: |- t2 ;)

(; dict ;)

def thm_275 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof t2_1 -> hol.proof t2_1 :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof t2_1 => hyp_1.

(; Theorem: |- ((Data.Bool.\/ t1) t2) ;)

(; dict ;)

def thm_276 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof t2_1 -> hol.proof (hol.or t1_2 t2_1) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof t2_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) t2_1 t1_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t1) t2) ;)

(; dict ;)

def thm_277 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof t2_1 -> hol.proof (hol.or t1_2 t2_1) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof t2_1 => hol.PROVE_HYP t2_1 (hol.or t1_2 t2_1) (thm_275 t2_1 hyp_1) (hyp_2 : hol.proof t2_1 => thm_276 t2_1 t1_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> P) t) ;)

(; dict ;)

def thm_278 : t_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 t_1) -> hol.proof (hol.imp P_2 t_1) :=
  t_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 t_1) => hyp_1.

(; Theorem: |- P ;)

(; dict ;)

def thm_279 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_280 : P_1 : hol.term hol.bool -> t_2 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hyp_2 : hol.proof (hol.imp P_1 t_2) -> hol.proof t_2 :=
  P_1 : hol.term hol.bool => t_2 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_2 : hol.proof (hol.imp P_1 t_2) => thm_278 t_2 P_1 hyp_2 (thm_279 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Q) t)) t) ;)

(; dict ;)

def thm_281 : P_1 : hol.term hol.bool -> t_2 : hol.term hol.bool -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hyp_2 : hol.proof (hol.imp P_1 t_2) -> hol.proof (hol.imp (hol.imp Q_3 t_2) t_2) :=
  P_1 : hol.term hol.bool => t_2 : hol.term hol.bool => Q_3 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_2 : hol.proof (hol.imp P_1 t_2) => hyp_3 : hol.proof (hol.imp Q_3 t_2) => thm_280 P_1 t_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> P) t)) ((Data.Bool.==> ((Data.Bool.==> Q) t)) t)) ;)

(; dict ;)

def thm_282 : Q_1 : hol.term hol.bool -> t_2 : hol.term hol.bool -> P_3 : hol.term hol.bool -> hyp_1 : hol.proof P_3 -> hol.proof (hol.imp (hol.imp P_3 t_2) (hol.imp (hol.imp Q_1 t_2) t_2)) :=
  Q_1 : hol.term hol.bool => t_2 : hol.term hol.bool => P_3 : hol.term hol.bool => hyp_1 : hol.proof P_3 => hyp_2 : hol.proof (hol.imp P_3 t_2) => thm_281 P_3 t_2 Q_1 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool.==> ((Data.Bool.==> P) t)) ((Data.Bool.==> ((Data.Bool.==> Q) t)) t))) ;)

(; dict ;)

def thm_283 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof P_2 -> hol.proof (hol.forall hol.bool (t_3 : hol.term hol.bool => hol.imp (hol.imp P_2 t_3) (hol.imp (hol.imp Q_1 t_3) t_3))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => t_3 : hol.term hol.bool => thm_282 Q_1 t_3 P_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ P) Q) ;)

(; dict ;)

def thm_284 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof P_2 -> hol.proof (hol.or P_2 Q_1) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => hol.EQ_MP (hol.forall hol.bool (t_3 : hol.term hol.bool => hol.imp (hol.imp P_2 t_3) (hol.imp (hol.imp Q_1 t_3) t_3))) (hol.or P_2 Q_1) (thm_264 Q_1 P_2) (thm_283 Q_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_285 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t1_3 t2_2) -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t1_3 t2_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) t3_1 (hol.or t1_3 t2_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_286 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof t2_2 -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof t2_2 => hol.PROVE_HYP (hol.or t1_3 t2_2) (hol.or (hol.or t1_3 t2_2) t3_1) (thm_277 t2_2 t1_3 hyp_1) (hyp_2 : hol.proof (hol.or t1_3 t2_2) => thm_285 t3_1 t2_2 t1_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> t2) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ;)

(; dict ;)

def thm_287 : t3_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> t2_3 : hol.term hol.bool -> hol.proof (hol.imp t2_3 (hol.or (hol.or t1_2 t2_3) t3_1)) :=
  t3_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t2_3 : hol.term hol.bool => hyp_1 : hol.proof t2_3 => thm_286 t3_1 t2_3 t1_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t2) t3) ;)

(; dict ;)

def thm_288 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t2_2 t3_1) -> hol.proof (hol.or t2_2 t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t2_2 t3_1) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ P) Q) ;)

(; dict ;)

def thm_289 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.or P_2 Q_1) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))) ;)

(; dict ;)

def thm_290 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hol.EQ_MP (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_263 Q_1 P_2) (thm_289 Q_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> P) R)) ((Data.Bool.==> ((Data.Bool.==> Q) R)) R)) ;)

(; dict ;)

def thm_291 : Q_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> P_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_3 Q_1) -> hol.proof (hol.imp (hol.imp P_3 R_2) (hol.imp (hol.imp Q_1 R_2) R_2)) :=
  Q_1 : hol.term hol.bool => R_2 : hol.term hol.bool => P_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_3 Q_1) => thm_290 Q_1 P_3 hyp_1 R_2.

(; Theorem: |- ((Data.Bool.==> P) R) ;)

(; dict ;)

def thm_292 : R_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_1) -> hol.proof (hol.imp P_2 R_1) :=
  R_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Q) R)) R) ;)

(; dict ;)

def thm_293 : P_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_1 R_2) -> hyp_2 : hol.proof (hol.or P_1 Q_3) -> hol.proof (hol.imp (hol.imp Q_3 R_2) R_2) :=
  P_1 : hol.term hol.bool => R_2 : hol.term hol.bool => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_1 R_2) => hyp_2 : hol.proof (hol.or P_1 Q_3) => thm_291 Q_3 R_2 P_1 hyp_2 (thm_292 R_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> Q) R) ;)

(; dict ;)

def thm_294 : R_1 : hol.term hol.bool -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp Q_2 R_1) -> hol.proof (hol.imp Q_2 R_1) :=
  R_1 : hol.term hol.bool => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp Q_2 R_1) => hyp_1.

(; Theorem: |- R ;)

(; dict ;)

def thm_295 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> R_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_3) -> hyp_2 : hol.proof (hol.imp Q_1 R_3) -> hyp_3 : hol.proof (hol.or P_2 Q_1) -> hol.proof R_3 :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_293 P_2 R_3 Q_1 hyp_1 hyp_3 (thm_294 R_3 Q_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_296 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t2_2 (hol.or (hol.or t1_3 t2_2) t3_1)) -> hyp_2 : hol.proof (hol.imp t3_1 (hol.or (hol.or t1_3 t2_2) t3_1)) -> hyp_3 : hol.proof (hol.or t2_2 t3_1) -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t2_2 (hol.or (hol.or t1_3 t2_2) t3_1)) => hyp_2 : hol.proof (hol.imp t3_1 (hol.or (hol.or t1_3 t2_2) t3_1)) => hyp_3 : hol.proof (hol.or t2_2 t3_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) t3_1 t2_2 (hol.or (hol.or t1_3 t2_2) t3_1) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_297 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t2_2 (hol.or (hol.or t1_3 t2_2) t3_1)) -> hyp_2 : hol.proof (hol.imp t3_1 (hol.or (hol.or t1_3 t2_2) t3_1)) -> hyp_3 : hol.proof (hol.or t2_2 t3_1) -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t2_2 (hol.or (hol.or t1_3 t2_2) t3_1)) => hyp_2 : hol.proof (hol.imp t3_1 (hol.or (hol.or t1_3 t2_2) t3_1)) => hyp_3 : hol.proof (hol.or t2_2 t3_1) => hol.PROVE_HYP (hol.or t2_2 t3_1) (hol.or (hol.or t1_3 t2_2) t3_1) (thm_288 t3_1 t2_2 hyp_3) (hyp_4 : hol.proof (hol.or t2_2 t3_1) => thm_296 t3_1 t2_2 t1_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_298 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t3_1 (hol.or (hol.or t1_3 t2_2) t3_1)) -> hyp_2 : hol.proof (hol.or t2_2 t3_1) -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t3_1 (hol.or (hol.or t1_3 t2_2) t3_1)) => hyp_2 : hol.proof (hol.or t2_2 t3_1) => hol.PROVE_HYP (hol.imp t2_2 (hol.or (hol.or t1_3 t2_2) t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1) (thm_287 t3_1 t1_3 t2_2) (hyp_3 : hol.proof (hol.imp t2_2 (hol.or (hol.or t1_3 t2_2) t3_1)) => thm_297 t3_1 t2_2 t1_3 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_299 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t2_2 t3_1) -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t2_2 t3_1) => hol.PROVE_HYP (hol.imp t3_1 (hol.or (hol.or t1_3 t2_2) t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1) (thm_274 t2_2 t1_3 t3_1) (hyp_2 : hol.proof (hol.imp t3_1 (hol.or (hol.or t1_3 t2_2) t3_1)) => thm_298 t3_1 t2_2 t1_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ t2) t3)) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ;)

(; dict ;)

def thm_300 : t1_1 : hol.term hol.bool -> t3_2 : hol.term hol.bool -> t2_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.or t2_3 t3_2) (hol.or (hol.or t1_1 t2_3) t3_2)) :=
  t1_1 : hol.term hol.bool => t3_2 : hol.term hol.bool => t2_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t2_3 t3_2) => thm_299 t3_2 t2_3 t1_1 hyp_1.

(; Theorem: |- t1 ;)

(; dict ;)

def thm_301 : t1_1 : hol.term hol.bool -> hyp_1 : hol.proof t1_1 -> hol.proof t1_1 :=
  t1_1 : hol.term hol.bool => hyp_1 : hol.proof t1_1 => hyp_1.

(; Theorem: |- ((Data.Bool.\/ t1) t2) ;)

(; dict ;)

def thm_302 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof t1_2 -> hol.proof (hol.or t1_2 t2_1) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof t1_2 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) t2_1 t1_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t1) t2) ;)

(; dict ;)

def thm_303 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof t1_2 -> hol.proof (hol.or t1_2 t2_1) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof t1_2 => hol.PROVE_HYP t1_2 (hol.or t1_2 t2_1) (thm_301 t1_2 hyp_1) (hyp_2 : hol.proof t1_2 => thm_302 t2_1 t1_2 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_304 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof t1_3 -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof t1_3 => hol.PROVE_HYP (hol.or t1_3 t2_2) (hol.or (hol.or t1_3 t2_2) t3_1) (thm_303 t2_2 t1_3 hyp_1) (hyp_2 : hol.proof (hol.or t1_3 t2_2) => thm_285 t3_1 t2_2 t1_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> t1) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ;)

(; dict ;)

def thm_305 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.imp t1_3 (hol.or (hol.or t1_3 t2_2) t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof t1_3 => thm_304 t3_1 t2_2 t1_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_306 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_307 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t1_3 (hol.or (hol.or t1_3 t2_2) t3_1)) -> hyp_2 : hol.proof (hol.imp (hol.or t2_2 t3_1) (hol.or (hol.or t1_3 t2_2) t3_1)) -> hyp_3 : hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t1_3 (hol.or (hol.or t1_3 t2_2) t3_1)) => hyp_2 : hol.proof (hol.imp (hol.or t2_2 t3_1) (hol.or (hol.or t1_3 t2_2) t3_1)) => hyp_3 : hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.or t2_2 t3_1) t1_3 (hol.or (hol.or t1_3 t2_2) t3_1) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_308 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t1_3 (hol.or (hol.or t1_3 t2_2) t3_1)) -> hyp_2 : hol.proof (hol.imp (hol.or t2_2 t3_1) (hol.or (hol.or t1_3 t2_2) t3_1)) -> hyp_3 : hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t1_3 (hol.or (hol.or t1_3 t2_2) t3_1)) => hyp_2 : hol.proof (hol.imp (hol.or t2_2 t3_1) (hol.or (hol.or t1_3 t2_2) t3_1)) => hyp_3 : hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) => hol.PROVE_HYP (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1) (thm_306 t3_1 t2_2 t1_3 hyp_3) (hyp_4 : hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) => thm_307 t3_1 t2_2 t1_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_309 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.or t2_2 t3_1) (hol.or (hol.or t1_3 t2_2) t3_1)) -> hyp_2 : hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.or t2_2 t3_1) (hol.or (hol.or t1_3 t2_2) t3_1)) => hyp_2 : hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) => hol.PROVE_HYP (hol.imp t1_3 (hol.or (hol.or t1_3 t2_2) t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1) (thm_305 t3_1 t2_2 t1_3) (hyp_3 : hol.proof (hol.imp t1_3 (hol.or (hol.or t1_3 t2_2) t3_1)) => thm_308 t3_1 t2_2 t1_3 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_310 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) => hol.PROVE_HYP (hol.imp (hol.or t2_2 t3_1) (hol.or (hol.or t1_3 t2_2) t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1) (thm_300 t1_3 t3_1 t2_2) (hyp_2 : hol.proof (hol.imp (hol.or t2_2 t3_1) (hol.or (hol.or t1_3 t2_2) t3_1)) => thm_309 t3_1 t2_2 t1_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ;)

(; dict ;)

def thm_311 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.or t1_3 (hol.or t2_2 t3_1)) (hol.or (hol.or t1_3 t2_2) t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) => thm_310 t3_1 t2_2 t1_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t2) t3) ;)

(; dict ;)

def thm_312 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof t3_1 -> hol.proof (hol.or t2_2 t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof t3_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) t3_1 t2_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t2) t3) ;)

(; dict ;)

def thm_313 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof t3_1 -> hol.proof (hol.or t2_2 t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof t3_1 => hol.PROVE_HYP t3_1 (hol.or t2_2 t3_1) (thm_251 t3_1 hyp_1) (hyp_2 : hol.proof t3_1 => thm_312 t3_1 t2_2 hyp_2).

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_314 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t2_2 t3_1) -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t2_2 t3_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) (hol.or t2_2 t3_1) t1_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_315 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof t3_1 -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof t3_1 => hol.PROVE_HYP (hol.or t2_2 t3_1) (hol.or t1_3 (hol.or t2_2 t3_1)) (thm_313 t3_1 t2_2 hyp_1) (hyp_2 : hol.proof (hol.or t2_2 t3_1) => thm_314 t3_1 t2_2 t1_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> t3) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ;)

(; dict ;)

def thm_316 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> t3_3 : hol.term hol.bool -> hol.proof (hol.imp t3_3 (hol.or t1_2 (hol.or t2_1 t3_3))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t3_3 : hol.term hol.bool => hyp_1 : hol.proof t3_3 => thm_315 t3_3 t2_1 t1_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t2) t3) ;)

(; dict ;)

def thm_317 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof t2_2 -> hol.proof (hol.or t2_2 t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof t2_2 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) t3_1 t2_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t2) t3) ;)

(; dict ;)

def thm_318 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof t2_2 -> hol.proof (hol.or t2_2 t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof t2_2 => hol.PROVE_HYP t2_2 (hol.or t2_2 t3_1) (thm_275 t2_2 hyp_1) (hyp_2 : hol.proof t2_2 => thm_317 t3_1 t2_2 hyp_2).

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_319 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof t2_2 -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof t2_2 => hol.PROVE_HYP (hol.or t2_2 t3_1) (hol.or t1_3 (hol.or t2_2 t3_1)) (thm_318 t3_1 t2_2 hyp_1) (hyp_2 : hol.proof (hol.or t2_2 t3_1) => thm_314 t3_1 t2_2 t1_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> t2) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ;)

(; dict ;)

def thm_320 : t3_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> t2_3 : hol.term hol.bool -> hol.proof (hol.imp t2_3 (hol.or t1_2 (hol.or t2_3 t3_1))) :=
  t3_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t2_3 : hol.term hol.bool => hyp_1 : hol.proof t2_3 => thm_319 t3_1 t2_3 t1_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_321 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof t1_3 -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof t1_3 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) (hol.or t2_2 t3_1) t1_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_322 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof t1_3 -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof t1_3 => hol.PROVE_HYP t1_3 (hol.or t1_3 (hol.or t2_2 t3_1)) (thm_301 t1_3 hyp_1) (hyp_2 : hol.proof t1_3 => thm_321 t3_1 t2_2 t1_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> t1) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ;)

(; dict ;)

def thm_323 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.imp t1_3 (hol.or t1_3 (hol.or t2_2 t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof t1_3 => thm_322 t3_1 t2_2 t1_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t1) t2) ;)

(; dict ;)

def thm_324 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t1_2 t2_1) -> hol.proof (hol.or t1_2 t2_1) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t1_2 t2_1) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_325 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t1_3 (hol.or t1_3 (hol.or t2_2 t3_1))) -> hyp_2 : hol.proof (hol.imp t2_2 (hol.or t1_3 (hol.or t2_2 t3_1))) -> hyp_3 : hol.proof (hol.or t1_3 t2_2) -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t1_3 (hol.or t1_3 (hol.or t2_2 t3_1))) => hyp_2 : hol.proof (hol.imp t2_2 (hol.or t1_3 (hol.or t2_2 t3_1))) => hyp_3 : hol.proof (hol.or t1_3 t2_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) t2_2 t1_3 (hol.or t1_3 (hol.or t2_2 t3_1)) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_326 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t1_3 (hol.or t1_3 (hol.or t2_2 t3_1))) -> hyp_2 : hol.proof (hol.imp t2_2 (hol.or t1_3 (hol.or t2_2 t3_1))) -> hyp_3 : hol.proof (hol.or t1_3 t2_2) -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t1_3 (hol.or t1_3 (hol.or t2_2 t3_1))) => hyp_2 : hol.proof (hol.imp t2_2 (hol.or t1_3 (hol.or t2_2 t3_1))) => hyp_3 : hol.proof (hol.or t1_3 t2_2) => hol.PROVE_HYP (hol.or t1_3 t2_2) (hol.or t1_3 (hol.or t2_2 t3_1)) (thm_324 t2_2 t1_3 hyp_3) (hyp_4 : hol.proof (hol.or t1_3 t2_2) => thm_325 t3_1 t2_2 t1_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_327 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t2_2 (hol.or t1_3 (hol.or t2_2 t3_1))) -> hyp_2 : hol.proof (hol.or t1_3 t2_2) -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t2_2 (hol.or t1_3 (hol.or t2_2 t3_1))) => hyp_2 : hol.proof (hol.or t1_3 t2_2) => hol.PROVE_HYP (hol.imp t1_3 (hol.or t1_3 (hol.or t2_2 t3_1))) (hol.or t1_3 (hol.or t2_2 t3_1)) (thm_323 t3_1 t2_2 t1_3) (hyp_3 : hol.proof (hol.imp t1_3 (hol.or t1_3 (hol.or t2_2 t3_1))) => thm_326 t3_1 t2_2 t1_3 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_328 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t1_3 t2_2) -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t1_3 t2_2) => hol.PROVE_HYP (hol.imp t2_2 (hol.or t1_3 (hol.or t2_2 t3_1))) (hol.or t1_3 (hol.or t2_2 t3_1)) (thm_320 t3_1 t1_3 t2_2) (hyp_2 : hol.proof (hol.imp t2_2 (hol.or t1_3 (hol.or t2_2 t3_1))) => thm_327 t3_1 t2_2 t1_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ;)

(; dict ;)

def thm_329 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.or t1_3 t2_2) (hol.or t1_3 (hol.or t2_2 t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t1_3 t2_2) => thm_328 t3_1 t2_2 t1_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3) ;)

(; dict ;)

def thm_330 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) -> hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_331 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t3_1 (hol.or t1_3 (hol.or t2_2 t3_1))) -> hyp_2 : hol.proof (hol.imp (hol.or t1_3 t2_2) (hol.or t1_3 (hol.or t2_2 t3_1))) -> hyp_3 : hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t3_1 (hol.or t1_3 (hol.or t2_2 t3_1))) => hyp_2 : hol.proof (hol.imp (hol.or t1_3 t2_2) (hol.or t1_3 (hol.or t2_2 t3_1))) => hyp_3 : hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) t3_1 (hol.or t1_3 t2_2) (hol.or t1_3 (hol.or t2_2 t3_1)) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_332 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t3_1 (hol.or t1_3 (hol.or t2_2 t3_1))) -> hyp_2 : hol.proof (hol.imp (hol.or t1_3 t2_2) (hol.or t1_3 (hol.or t2_2 t3_1))) -> hyp_3 : hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t3_1 (hol.or t1_3 (hol.or t2_2 t3_1))) => hyp_2 : hol.proof (hol.imp (hol.or t1_3 t2_2) (hol.or t1_3 (hol.or t2_2 t3_1))) => hyp_3 : hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) => hol.PROVE_HYP (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1)) (thm_330 t3_1 t2_2 t1_3 hyp_3) (hyp_4 : hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) => thm_331 t3_1 t2_2 t1_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_333 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t3_1 (hol.or t1_3 (hol.or t2_2 t3_1))) -> hyp_2 : hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t3_1 (hol.or t1_3 (hol.or t2_2 t3_1))) => hyp_2 : hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) => hol.PROVE_HYP (hol.imp (hol.or t1_3 t2_2) (hol.or t1_3 (hol.or t2_2 t3_1))) (hol.or t1_3 (hol.or t2_2 t3_1)) (thm_329 t3_1 t2_2 t1_3) (hyp_3 : hol.proof (hol.imp (hol.or t1_3 t2_2) (hol.or t1_3 (hol.or t2_2 t3_1))) => thm_332 t3_1 t2_2 t1_3 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)) ;)

(; dict ;)

def thm_334 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) -> hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) => hol.PROVE_HYP (hol.imp t3_1 (hol.or t1_3 (hol.or t2_2 t3_1))) (hol.or t1_3 (hol.or t2_2 t3_1)) (thm_316 t2_2 t1_3 t3_1) (hyp_2 : hol.proof (hol.imp t3_1 (hol.or t1_3 (hol.or t2_2 t3_1))) => thm_333 t3_1 t2_2 t1_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ;)

(; dict ;)

def thm_335 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) => thm_334 t3_1 t2_2 t1_3 hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))) ;)

(; dict ;)

def thm_336 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.PROP_EXT (hol.or (hol.or t1_3 t2_2) t3_1) (hol.or t1_3 (hol.or t2_2 t3_1)) (hyp_1 : hol.proof (hol.or t1_3 (hol.or t2_2 t3_1)) => thm_311 t3_1 t2_2 t1_3 (thm_306 t3_1 t2_2 t1_3 hyp_1)) (hyp_1 : hol.proof (hol.or (hol.or t1_3 t2_2) t3_1) => thm_335 t3_1 t2_2 t1_3 (thm_330 t3_1 t2_2 t1_3 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))) ;)

(; dict ;)

def thm_337 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_2 t2_1) t3_3) (hol.or t1_2 (hol.or t2_1 t3_3)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => t3_3 : hol.term hol.bool => thm_336 t3_3 t2_1 t1_2.

(; Theorem: |- (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3))))) ;)

(; dict ;)

def thm_338 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))) (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))) (thm_250 t2_2 t1_1) (thm_337 t2_2 t1_1).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))))) ;)

(; dict ;)

def thm_339 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))))) :=
  t1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3))))) (thm_247 t1_1) (thm_338 t1_1).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool.\/ ((Data.Bool.\/ t1) t2)) t3)) ((Data.Bool.\/ t1) ((Data.Bool.\/ t2) t3)))))) ;)

(; thm ;)

def thm_340 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))))) :=
  hol.EQ_MP (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.or t1_1 t2_2) t3_3) (hol.or t1_1 (hol.or t2_2 t3_3)))))) thm_244 thm_339.

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1)))) \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1)))) ;)

(; dict ;)

def thm_341 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1)))) \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1)))) ;)

(; dict ;)

def thm_342 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) thm_341 thm_341.

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1))))) ;)

(; dict ;)

def thm_343 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) thm_150 thm_342.

(; Theorem: |- ((= \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1))) \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1))) ;)

(; dict ;)

def thm_344 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)).

(; Theorem: |- ((= \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1))) \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1))) ;)

(; dict ;)

def thm_345 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)) (thm_344 t1_1) (thm_344 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1)))) (Data.Bool.! \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1)))) ;)

(; dict ;)

def thm_346 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)) thm_150 (thm_345 t1_1).

(; Theorem: |- ((Data.Bool.==> t1) ((Data.Bool.\/ t1) t2)) ;)

(; dict ;)

def thm_347 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp t1_2 (hol.or t1_2 t2_1)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof t1_2 => thm_302 t2_1 t1_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> t2) ((Data.Bool.\/ t1) t2)) ;)

(; dict ;)

def thm_348 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.imp t2_2 (hol.or t1_1 t2_2)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof t2_2 => thm_276 t2_2 t1_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t2) t1) ;)

(; dict ;)

def thm_349 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t2_2 t1_1) -> hol.proof (hol.or t2_2 t1_1) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t2_2 t1_1) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ t1) t2) ;)

(; dict ;)

def thm_350 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t1_2 (hol.or t1_2 t2_1)) -> hyp_2 : hol.proof (hol.imp t2_1 (hol.or t1_2 t2_1)) -> hyp_3 : hol.proof (hol.or t2_1 t1_2) -> hol.proof (hol.or t1_2 t2_1) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t1_2 (hol.or t1_2 t2_1)) => hyp_2 : hol.proof (hol.imp t2_1 (hol.or t1_2 t2_1)) => hyp_3 : hol.proof (hol.or t2_1 t1_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) t1_2 t2_1 (hol.or t1_2 t2_1) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((Data.Bool.\/ t1) t2) ;)

(; dict ;)

def thm_351 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t1_2 (hol.or t1_2 t2_1)) -> hyp_2 : hol.proof (hol.imp t2_1 (hol.or t1_2 t2_1)) -> hyp_3 : hol.proof (hol.or t2_1 t1_2) -> hol.proof (hol.or t1_2 t2_1) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t1_2 (hol.or t1_2 t2_1)) => hyp_2 : hol.proof (hol.imp t2_1 (hol.or t1_2 t2_1)) => hyp_3 : hol.proof (hol.or t2_1 t1_2) => hol.PROVE_HYP (hol.or t2_1 t1_2) (hol.or t1_2 t2_1) (thm_349 t1_2 t2_1 hyp_3) (hyp_4 : hol.proof (hol.or t2_1 t1_2) => thm_350 t2_1 t1_2 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ t1) t2) ;)

(; dict ;)

def thm_352 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t1_2 (hol.or t1_2 t2_1)) -> hyp_2 : hol.proof (hol.or t2_1 t1_2) -> hol.proof (hol.or t1_2 t2_1) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t1_2 (hol.or t1_2 t2_1)) => hyp_2 : hol.proof (hol.or t2_1 t1_2) => hol.PROVE_HYP (hol.imp t2_1 (hol.or t1_2 t2_1)) (hol.or t1_2 t2_1) (thm_348 t1_2 t2_1) (hyp_3 : hol.proof (hol.imp t2_1 (hol.or t1_2 t2_1)) => thm_351 t2_1 t1_2 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ t1) t2) ;)

(; dict ;)

def thm_353 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t2_1 t1_2) -> hol.proof (hol.or t1_2 t2_1) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t2_1 t1_2) => hol.PROVE_HYP (hol.imp t1_2 (hol.or t1_2 t2_1)) (hol.or t1_2 t2_1) (thm_347 t2_1 t1_2) (hyp_2 : hol.proof (hol.imp t1_2 (hol.or t1_2 t2_1)) => thm_352 t2_1 t1_2 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ t2) t1)) ((Data.Bool.\/ t1) t2)) ;)

(; dict ;)

def thm_354 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.or t2_2 t1_1) (hol.or t1_1 t2_2)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t2_2 t1_1) => thm_353 t2_2 t1_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t2) t1) ;)

(; dict ;)

def thm_355 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof t2_2 -> hol.proof (hol.or t2_2 t1_1) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof t2_2 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) t1_1 t2_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t2) t1) ;)

(; dict ;)

def thm_356 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof t2_2 -> hol.proof (hol.or t2_2 t1_1) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof t2_2 => hol.PROVE_HYP t2_2 (hol.or t2_2 t1_1) (thm_275 t2_2 hyp_1) (hyp_2 : hol.proof t2_2 => thm_355 t1_1 t2_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> t2) ((Data.Bool.\/ t2) t1)) ;)

(; dict ;)

def thm_357 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.imp t2_2 (hol.or t2_2 t1_1)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof t2_2 => thm_356 t1_1 t2_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t2) t1) ;)

(; dict ;)

def thm_358 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof t1_1 -> hol.proof (hol.or t2_2 t1_1) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof t1_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) t1_1 t2_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t2) t1) ;)

(; dict ;)

def thm_359 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof t1_1 -> hol.proof (hol.or t2_2 t1_1) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof t1_1 => hol.PROVE_HYP t1_1 (hol.or t2_2 t1_1) (thm_301 t1_1 hyp_1) (hyp_2 : hol.proof t1_1 => thm_358 t1_1 t2_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> t1) ((Data.Bool.\/ t2) t1)) ;)

(; dict ;)

def thm_360 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp t1_2 (hol.or t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof t1_2 => thm_359 t1_2 t2_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t2) t1) ;)

(; dict ;)

def thm_361 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t1_1 (hol.or t2_2 t1_1)) -> hyp_2 : hol.proof (hol.imp t2_2 (hol.or t2_2 t1_1)) -> hyp_3 : hol.proof (hol.or t1_1 t2_2) -> hol.proof (hol.or t2_2 t1_1) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t1_1 (hol.or t2_2 t1_1)) => hyp_2 : hol.proof (hol.imp t2_2 (hol.or t2_2 t1_1)) => hyp_3 : hol.proof (hol.or t1_1 t2_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) t2_2 t1_1 (hol.or t2_2 t1_1) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ t2) t1) ;)

(; dict ;)

def thm_362 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t1_1 (hol.or t2_2 t1_1)) -> hyp_2 : hol.proof (hol.imp t2_2 (hol.or t2_2 t1_1)) -> hyp_3 : hol.proof (hol.or t1_1 t2_2) -> hol.proof (hol.or t2_2 t1_1) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t1_1 (hol.or t2_2 t1_1)) => hyp_2 : hol.proof (hol.imp t2_2 (hol.or t2_2 t1_1)) => hyp_3 : hol.proof (hol.or t1_1 t2_2) => hol.PROVE_HYP (hol.or t1_1 t2_2) (hol.or t2_2 t1_1) (thm_324 t2_2 t1_1 hyp_3) (hyp_4 : hol.proof (hol.or t1_1 t2_2) => thm_361 t1_1 t2_2 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ t2) t1) ;)

(; dict ;)

def thm_363 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t2_2 (hol.or t2_2 t1_1)) -> hyp_2 : hol.proof (hol.or t1_1 t2_2) -> hol.proof (hol.or t2_2 t1_1) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t2_2 (hol.or t2_2 t1_1)) => hyp_2 : hol.proof (hol.or t1_1 t2_2) => hol.PROVE_HYP (hol.imp t1_1 (hol.or t2_2 t1_1)) (hol.or t2_2 t1_1) (thm_360 t2_2 t1_1) (hyp_3 : hol.proof (hol.imp t1_1 (hol.or t2_2 t1_1)) => thm_362 t1_1 t2_2 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ t2) t1) ;)

(; dict ;)

def thm_364 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t1_1 t2_2) -> hol.proof (hol.or t2_2 t1_1) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t1_1 t2_2) => hol.PROVE_HYP (hol.imp t2_2 (hol.or t2_2 t1_1)) (hol.or t2_2 t1_1) (thm_357 t1_1 t2_2) (hyp_2 : hol.proof (hol.imp t2_2 (hol.or t2_2 t1_1)) => thm_363 t1_1 t2_2 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1)) ;)

(; dict ;)

def thm_365 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.or t1_2 t2_1) (hol.or t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t1_2 t2_1) => thm_364 t1_2 t2_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1)) ;)

(; dict ;)

def thm_366 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t1_2 t2_1) (hol.or t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROP_EXT (hol.or t1_2 t2_1) (hol.or t2_1 t1_2) (hyp_1 : hol.proof (hol.or t2_1 t1_2) => thm_354 t1_2 t2_1 (thm_349 t1_2 t2_1 hyp_1)) (hyp_1 : hol.proof (hol.or t1_2 t2_1) => thm_365 t2_1 t1_2 (thm_324 t2_1 t1_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1))) ;)

(; dict ;)

def thm_367 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => thm_366 t2_2 t1_1.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1)))) ;)

(; dict ;)

def thm_368 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)))) :=
  t1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1))) (thm_346 t1_1) (thm_367 t1_1).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.\/ t1) t2)) ((Data.Bool.\/ t2) t1)))) ;)

(; thm ;)

def thm_369 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)))) :=
  hol.EQ_MP (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.or t1_1 t2_2) (hol.or t2_2 t1_1)))) thm_343 thm_368.

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.\/ t) t)) t)) \lambda t. ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_370 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.\/ t) t)) t)) \lambda t. ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_371 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1) thm_370 thm_370.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ t) t)) t))) (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_372 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1) thm_150 thm_371.

(; Theorem: |- ((Data.Bool.\/ t) t) ;)

(; dict ;)

def thm_373 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.or t_1 t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) t_1 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t) t) ;)

(; dict ;)

def thm_374 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.or t_1 t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROVE_HYP t_1 (hol.or t_1 t_1) (thm_138 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_373 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> t) ((Data.Bool.\/ t) t)) ;)

(; dict ;)

def thm_375 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 (hol.or t_1 t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => thm_374 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> t) t) ;)

(; dict ;)

def thm_376 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => thm_138 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t) t) ;)

(; dict ;)

def thm_377 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t_1 t_1) -> hol.proof (hol.or t_1 t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t_1 t_1) => hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_378 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t_1 t_1) -> hyp_2 : hol.proof (hol.or t_1 t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 t_1) => hyp_2 : hol.proof (hol.or t_1 t_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) t_1 t_1 t_1 hyp_1 hyp_1 hyp_2.

(; Theorem: |- t ;)

(; dict ;)

def thm_379 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t_1 t_1) -> hyp_2 : hol.proof (hol.or t_1 t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 t_1) => hyp_2 : hol.proof (hol.or t_1 t_1) => hol.PROVE_HYP (hol.or t_1 t_1) t_1 (thm_377 t_1 hyp_2) (hyp_3 : hol.proof (hol.or t_1 t_1) => thm_378 t_1 hyp_1 hyp_3).

(; Theorem: |- t ;)

(; dict ;)

def thm_380 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t_1 t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t_1 t_1) => hol.PROVE_HYP (hol.imp t_1 t_1) t_1 (thm_376 t_1) (hyp_2 : hol.proof (hol.imp t_1 t_1) => thm_379 t_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ t) t)) t) ;)

(; dict ;)

def thm_381 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.or t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t_1 t_1) => thm_380 t_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ t) t)) t) ;)

(; dict ;)

def thm_382 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.or t_1 t_1) t_1 (hyp_1 : hol.proof t_1 => thm_375 t_1 (thm_138 t_1 hyp_1)) (hyp_1 : hol.proof (hol.or t_1 t_1) => thm_381 t_1 (thm_377 t_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_383 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => thm_382 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ t) t)) t)) ;)

(; thm ;)

def thm_384 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1)) thm_372 thm_383.

(; Theorem: |- ((= \lambda t. ((Data.Bool.==> t) t)) \lambda t. ((Data.Bool.==> t) t)) ;)

(; dict ;)

def thm_385 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.imp t_1 t_1) (t_1 : hol.term hol.bool => hol.imp t_1 t_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.imp t_1 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool.==> t) t)) \lambda t. ((Data.Bool.==> t) t)) ;)

(; dict ;)

def thm_386 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.imp t_1 t_1) (t_1 : hol.term hol.bool => hol.imp t_1 t_1)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.imp t_1 t_1) (t_1 : hol.term hol.bool => hol.imp t_1 t_1) (t_1 : hol.term hol.bool => hol.imp t_1 t_1) thm_385 thm_385.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool.==> t) t))) (Data.Bool.! \lambda t. ((Data.Bool.==> t) t))) ;)

(; dict ;)

def thm_387 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.imp t_1 t_1) (t_1 : hol.term hol.bool => hol.imp t_1 t_1) thm_150 thm_386.

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool.==> t) t)) ;)

(; dict ;)

def thm_388 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)) :=
  t_1 : hol.term hol.bool => thm_376 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool.==> t) t)) ;)

(; thm ;)

def thm_389 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)) thm_387 thm_388.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r))))) ;)

(; dict ;)

def thm_390 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r))))) ;)

(; dict ;)

def thm_391 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))) thm_390 thm_390.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r)))))) ;)

(; dict ;)

def thm_392 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))) thm_150 thm_391.

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r)))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r)))) ;)

(; dict ;)

def thm_393 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))).

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r)))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r)))) ;)

(; dict ;)

def thm_394 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))) (thm_393 p_1) (thm_393 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r))))) (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r))))) ;)

(; dict ;)

def thm_395 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))) thm_150 (thm_394 p_1).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r))) \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r))) ;)

(; dict ;)

def thm_396 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.imp q_1 r_3)) (hol.imp (hol.and p_2 q_1) r_3)) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.imp q_1 r_3)) (hol.imp (hol.and p_2 q_1) r_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.imp q_1 r_3)) (hol.imp (hol.and p_2 q_1) r_3)).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r))) \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r))) ;)

(; dict ;)

def thm_397 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.imp q_1 r_3)) (hol.imp (hol.and p_2 q_1) r_3)) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.imp q_1 r_3)) (hol.imp (hol.and p_2 q_1) r_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.imp q_1 r_3)) (hol.imp (hol.and p_2 q_1) r_3)) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.imp q_1 r_3)) (hol.imp (hol.and p_2 q_1) r_3)) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.imp q_1 r_3)) (hol.imp (hol.and p_2 q_1) r_3)) (thm_396 q_1 p_2) (thm_396 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r)))) (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r)))) ;)

(; dict ;)

def thm_398 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.imp q_1 r_3)) (hol.imp (hol.and p_2 q_1) r_3))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.imp q_1 r_3)) (hol.imp (hol.and p_2 q_1) r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.imp q_1 r_3)) (hol.imp (hol.and p_2 q_1) r_3)) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.imp q_1 r_3)) (hol.imp (hol.and p_2 q_1) r_3)) thm_150 (thm_397 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_399 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and p_3 q_2) r_1) -> hol.proof (hol.imp (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_3 q_2) r_1) => hyp_1.

(; Theorem: |- r ;)

(; dict ;)

def thm_400 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hyp_2 : hol.proof (hol.imp (hol.and p_2 q_1) r_3) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_2 : hol.proof (hol.imp (hol.and p_2 q_1) r_3) => thm_399 r_3 q_1 p_2 hyp_2 (thm_61 q_1 p_2 hyp_1).

(; Theorem: |- r ;)

(; dict ;)

def thm_401 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp (hol.and p_2 q_1) r_3) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp (hol.and p_2 q_1) r_3) => hol.PROVE_HYP (hol.and p_2 q_1) r_3 (thm_169 q_1 p_2 hyp_1 hyp_2) (hyp_4 : hol.proof (hol.and p_2 q_1) => thm_400 q_1 p_2 r_3 hyp_4 hyp_3).

(; Theorem: |- ((Data.Bool.==> q) r) ;)

(; dict ;)

def thm_402 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp (hol.and p_1 q_3) r_2) -> hol.proof (hol.imp q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp (hol.and p_1 q_3) r_2) => hyp_3 : hol.proof q_3 => thm_401 q_3 p_1 r_2 hyp_1 hyp_3 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) r)) ;)

(; dict ;)

def thm_403 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and p_3 q_2) r_1) -> hol.proof (hol.imp p_3 (hol.imp q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_3 q_2) r_1) => hyp_2 : hol.proof p_3 => thm_402 p_3 r_1 q_2 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ p) q)) r)) ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ;)

(; dict ;)

def thm_404 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp (hol.and p_3 q_2) r_1) (hol.imp p_3 (hol.imp q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_3 q_2) r_1) => thm_403 r_1 q_2 p_3 hyp_1.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) r)) ;)

(; dict ;)

def thm_405 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 r_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 r_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) r) ;)

(; dict ;)

def thm_406 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 r_2)) -> hol.proof (hol.imp q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 r_2)) => thm_405 r_2 q_3 p_1 hyp_2 (thm_64 p_1 hyp_1).

(; Theorem: |- r ;)

(; dict ;)

def thm_407 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 r_3)) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 r_3)) => thm_406 p_2 r_3 q_1 hyp_1 hyp_3 (thm_65 q_1 hyp_2).

(; Theorem: |- r ;)

(; dict ;)

def thm_408 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.and p_2 q_1) -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 r_3)) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.and p_2 q_1) => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 r_3)) => hol.PROVE_HYP q_1 r_3 (thm_78 p_2 q_1 hyp_2) (hyp_4 : hol.proof q_1 => thm_407 q_1 p_2 r_3 hyp_1 hyp_4 hyp_3).

(; Theorem: |- r ;)

(; dict ;)

def thm_409 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hyp_2 : hol.proof (hol.imp p_2 (hol.imp q_1 r_3)) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_2 : hol.proof (hol.imp p_2 (hol.imp q_1 r_3)) => hol.PROVE_HYP p_2 r_3 (thm_71 q_1 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_408 q_1 p_2 r_3 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_410 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 r_1)) -> hol.proof (hol.imp (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 r_1)) => hyp_2 : hol.proof (hol.and p_3 q_2) => thm_409 q_2 p_3 r_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r)) ;)

(; dict ;)

def thm_411 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 r_1)) (hol.imp (hol.and p_3 q_2) r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 r_1)) => thm_410 r_1 q_2 p_3 hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r)) ;)

(; dict ;)

def thm_412 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_3 (hol.imp q_2 r_1)) (hol.imp (hol.and p_3 q_2) r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.PROP_EXT (hol.imp p_3 (hol.imp q_2 r_1)) (hol.imp (hol.and p_3 q_2) r_1) (hyp_1 : hol.proof (hol.imp (hol.and p_3 q_2) r_1) => thm_404 r_1 q_2 p_3 (thm_399 r_1 q_2 p_3 hyp_1)) (hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 r_1)) => thm_411 r_1 q_2 p_3 (thm_405 r_1 q_2 p_3 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r))) ;)

(; dict ;)

def thm_413 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.imp q_1 r_3)) (hol.imp (hol.and p_2 q_1) r_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => thm_412 r_3 q_1 p_2.

(; Theorem: |- (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r)))) ;)

(; dict ;)

def thm_414 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))) (thm_398 q_2 p_1) (thm_413 q_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r))))) ;)

(; dict ;)

def thm_415 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3)))) (thm_395 p_1) (thm_414 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool./\ p) q)) r))))) ;)

(; thm ;)

def thm_416 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))))) :=
  hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.imp q_2 r_3)) (hol.imp (hol.and p_1 q_2) r_3))))) thm_392 thm_415.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)))))) ;)

(; dict ;)

def thm_417 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)))))) ;)

(; dict ;)

def thm_418 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))) thm_417 thm_417.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))))))) ;)

(; dict ;)

def thm_419 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))) thm_150 thm_418.

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))))) ;)

(; dict ;)

def thm_420 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))).

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))))) ;)

(; dict ;)

def thm_421 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))) (thm_420 p_1) (thm_420 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)))))) (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)))))) ;)

(; dict ;)

def thm_422 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))) thm_150 (thm_421 p_1).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)))) \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)))) ;)

(; dict ;)

def thm_423 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.or q_1 r_3)) (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.or q_1 r_3)) (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.or q_1 r_3)) (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3))).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)))) \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)))) ;)

(; dict ;)

def thm_424 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.or q_1 r_3)) (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.or q_1 r_3)) (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.or q_1 r_3)) (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.or q_1 r_3)) (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.or q_1 r_3)) (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3))) (thm_423 q_1 p_2) (thm_423 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))))) (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))))) ;)

(; dict ;)

def thm_425 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.or q_1 r_3)) (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.or q_1 r_3)) (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.or q_1 r_3)) (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.or q_1 r_3)) (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3))) thm_150 (thm_424 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) r) ;)

(; dict ;)

def thm_426 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 r_1) -> hol.proof (hol.and p_2 r_1) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 r_1) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_427 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 r_1) -> hol.proof p_2 :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 r_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) r_1 p_2 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_428 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 r_1) -> hol.proof p_2 :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 r_1) => hol.PROVE_HYP (hol.and p_2 r_1) p_2 (thm_426 r_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.and p_2 r_1) => thm_427 r_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) r)) p) ;)

(; dict ;)

def thm_429 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_2 r_1) p_2) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 r_1) => thm_428 r_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) q)) p) ;)

(; dict ;)

def thm_430 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_2 q_1) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)) ;)

(; dict ;)

def thm_431 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) -> hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_432 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and p_3 q_2) p_3) -> hyp_2 : hol.proof (hol.imp (hol.and p_3 r_1) p_3) -> hyp_3 : hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) -> hol.proof p_3 :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_3 q_2) p_3) => hyp_2 : hol.proof (hol.imp (hol.and p_3 r_1) p_3) => hyp_3 : hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.and p_3 r_1) (hol.and p_3 q_2) p_3 hyp_1 hyp_2 hyp_3.

(; Theorem: |- p ;)

(; dict ;)

def thm_433 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and p_3 q_2) p_3) -> hyp_2 : hol.proof (hol.imp (hol.and p_3 r_1) p_3) -> hyp_3 : hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) -> hol.proof p_3 :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_3 q_2) p_3) => hyp_2 : hol.proof (hol.imp (hol.and p_3 r_1) p_3) => hyp_3 : hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) => hol.PROVE_HYP (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) p_3 (thm_431 r_1 q_2 p_3 hyp_3) (hyp_4 : hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) => thm_432 r_1 q_2 p_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- p ;)

(; dict ;)

def thm_434 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and p_3 r_2) p_3) -> hyp_2 : hol.proof (hol.or (hol.and p_3 q_1) (hol.and p_3 r_2)) -> hol.proof p_3 :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_3 r_2) p_3) => hyp_2 : hol.proof (hol.or (hol.and p_3 q_1) (hol.and p_3 r_2)) => hol.PROVE_HYP (hol.imp (hol.and p_3 q_1) p_3) p_3 (thm_430 q_1 p_3) (hyp_3 : hol.proof (hol.imp (hol.and p_3 q_1) p_3) => thm_433 r_2 q_1 p_3 hyp_3 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_435 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) -> hol.proof p_3 :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) => hol.PROVE_HYP (hol.imp (hol.and p_3 r_1) p_3) p_3 (thm_429 r_1 p_3) (hyp_2 : hol.proof (hol.imp (hol.and p_3 r_1) p_3) => thm_434 q_2 r_1 p_3 hyp_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ q) r)) ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ;)

(; dict ;)

def thm_436 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool (hol.or q_3 r_2) (hol.and p_1 (hol.or q_3 r_2))) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) p_1 (hol.or q_3 r_2) hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ q) r)) ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ;)

(; dict ;)

def thm_437 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_1 q_3) (hol.and p_1 r_2)) -> hol.proof (hol.eq hol.bool (hol.or q_3 r_2) (hol.and p_1 (hol.or q_3 r_2))) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_1 q_3) (hol.and p_1 r_2)) => hol.PROVE_HYP p_1 (hol.eq hol.bool (hol.or q_3 r_2) (hol.and p_1 (hol.or q_3 r_2))) (thm_435 r_2 q_3 p_1 hyp_1) (hyp_2 : hol.proof p_1 => thm_436 p_1 r_2 q_3 hyp_2).

(; Theorem: |- r ;)

(; dict ;)

def thm_438 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 r_2) -> hol.proof r_2 :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 r_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) p_1 r_2 hyp_1.

(; Theorem: |- r ;)

(; dict ;)

def thm_439 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 r_2) -> hol.proof r_2 :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 r_2) => hol.PROVE_HYP (hol.and p_1 r_2) r_2 (thm_426 r_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and p_1 r_2) => thm_438 p_1 r_2 hyp_2).

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_440 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof r_1 -> hol.proof (hol.or q_2 r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof r_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) r_1 q_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_441 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 r_2) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 r_2) => hol.PROVE_HYP r_2 (hol.or q_3 r_2) (thm_439 p_1 r_2 hyp_1) (hyp_2 : hol.proof r_2 => thm_440 r_2 q_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) r)) ((Data.Bool.\/ q) r)) ;)

(; dict ;)

def thm_442 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_3 r_2) (hol.or q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 r_2) => thm_441 p_3 r_2 q_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_443 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof q_2 -> hol.proof (hol.or q_2 r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof q_2 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) r_1 q_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_444 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_3) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_3) => hol.PROVE_HYP q_3 (hol.or q_3 r_2) (thm_78 p_1 q_3 hyp_1) (hyp_2 : hol.proof q_3 => thm_443 r_2 q_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) q)) ((Data.Bool.\/ q) r)) ;)

(; dict ;)

def thm_445 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_3 q_2) (hol.or q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 q_2) => thm_444 p_3 r_1 q_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_446 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and p_1 q_3) (hol.or q_3 r_2)) -> hyp_2 : hol.proof (hol.imp (hol.and p_1 r_2) (hol.or q_3 r_2)) -> hyp_3 : hol.proof (hol.or (hol.and p_1 q_3) (hol.and p_1 r_2)) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_1 q_3) (hol.or q_3 r_2)) => hyp_2 : hol.proof (hol.imp (hol.and p_1 r_2) (hol.or q_3 r_2)) => hyp_3 : hol.proof (hol.or (hol.and p_1 q_3) (hol.and p_1 r_2)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.and p_1 r_2) (hol.and p_1 q_3) (hol.or q_3 r_2) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_447 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and p_1 q_3) (hol.or q_3 r_2)) -> hyp_2 : hol.proof (hol.imp (hol.and p_1 r_2) (hol.or q_3 r_2)) -> hyp_3 : hol.proof (hol.or (hol.and p_1 q_3) (hol.and p_1 r_2)) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_1 q_3) (hol.or q_3 r_2)) => hyp_2 : hol.proof (hol.imp (hol.and p_1 r_2) (hol.or q_3 r_2)) => hyp_3 : hol.proof (hol.or (hol.and p_1 q_3) (hol.and p_1 r_2)) => hol.PROVE_HYP (hol.or (hol.and p_1 q_3) (hol.and p_1 r_2)) (hol.or q_3 r_2) (thm_431 r_2 q_3 p_1 hyp_3) (hyp_4 : hol.proof (hol.or (hol.and p_1 q_3) (hol.and p_1 r_2)) => thm_446 p_1 r_2 q_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_448 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and p_1 r_2) (hol.or q_3 r_2)) -> hyp_2 : hol.proof (hol.or (hol.and p_1 q_3) (hol.and p_1 r_2)) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_1 r_2) (hol.or q_3 r_2)) => hyp_2 : hol.proof (hol.or (hol.and p_1 q_3) (hol.and p_1 r_2)) => hol.PROVE_HYP (hol.imp (hol.and p_1 q_3) (hol.or q_3 r_2)) (hol.or q_3 r_2) (thm_445 r_2 q_3 p_1) (hyp_3 : hol.proof (hol.imp (hol.and p_1 q_3) (hol.or q_3 r_2)) => thm_447 p_1 r_2 q_3 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_449 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_1 q_3) (hol.and p_1 r_2)) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_1 q_3) (hol.and p_1 r_2)) => hol.PROVE_HYP (hol.imp (hol.and p_1 r_2) (hol.or q_3 r_2)) (hol.or q_3 r_2) (thm_442 q_3 r_2 p_1) (hyp_2 : hol.proof (hol.imp (hol.and p_1 r_2) (hol.or q_3 r_2)) => thm_448 p_1 r_2 q_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool./\ p) ((Data.Bool.\/ q) r)) ;)

(; dict ;)

def thm_450 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) -> hol.proof (hol.and p_3 (hol.or q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) => hol.EQ_MP (hol.or q_2 r_1) (hol.and p_3 (hol.or q_2 r_1)) (thm_437 p_3 r_1 q_2 hyp_1) (thm_449 p_3 r_1 q_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))) ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ;)

(; dict ;)

def thm_451 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) (hol.and p_3 (hol.or q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) => thm_450 r_1 q_2 p_3 hyp_1.

(; Theorem: |- ((Data.Bool./\ p) ((Data.Bool.\/ q) r)) ;)

(; dict ;)

def thm_452 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) -> hol.proof (hol.and p_3 (hol.or q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_453 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) -> hol.proof p_3 :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.or q_2 r_1) p_3 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_454 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) -> hol.proof p_3 :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) => hol.PROVE_HYP (hol.and p_3 (hol.or q_2 r_1)) p_3 (thm_452 r_1 q_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) => thm_453 r_1 q_2 p_3 hyp_2).

(; Theorem: |- ((= r) ((Data.Bool./\ p) r)) ;)

(; dict ;)

def thm_455 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool r_2 (hol.and p_1 r_2)) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) p_1 r_2 hyp_1.

(; Theorem: |- ((= r) ((Data.Bool./\ p) r)) ;)

(; dict ;)

def thm_456 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (hol.or q_1 r_3)) -> hol.proof (hol.eq hol.bool r_3 (hol.and p_2 r_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (hol.or q_1 r_3)) => hol.PROVE_HYP p_2 (hol.eq hol.bool r_3 (hol.and p_2 r_3)) (thm_454 r_3 q_1 p_2 hyp_1) (hyp_2 : hol.proof p_2 => thm_455 p_2 r_3 hyp_2).

(; Theorem: |- r ;)

(; dict ;)

def thm_457 : r_1 : hol.term hol.bool -> hyp_1 : hol.proof r_1 -> hol.proof r_1 :=
  r_1 : hol.term hol.bool => hyp_1 : hol.proof r_1 => hyp_1.

(; Theorem: |- ((Data.Bool./\ p) r) ;)

(; dict ;)

def thm_458 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof r_2 -> hyp_2 : hol.proof (hol.and p_3 (hol.or q_1 r_2)) -> hol.proof (hol.and p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof r_2 => hyp_2 : hol.proof (hol.and p_3 (hol.or q_1 r_2)) => hol.EQ_MP r_2 (hol.and p_3 r_2) (thm_456 q_1 p_3 r_2 hyp_2) (thm_457 r_2 hyp_1).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)) ;)

(; dict ;)

def thm_459 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 r_1) -> hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 r_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) (hol.and p_3 r_1) (hol.and p_3 q_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)) ;)

(; dict ;)

def thm_460 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof r_1 -> hyp_2 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) -> hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof r_1 => hyp_2 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) => hol.PROVE_HYP (hol.and p_3 r_1) (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) (thm_458 q_2 r_1 p_3 hyp_1 hyp_2) (hyp_3 : hol.proof (hol.and p_3 r_1) => thm_459 r_1 q_2 p_3 hyp_3).

(; Theorem: |- ((Data.Bool.==> r) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))) ;)

(; dict ;)

def thm_461 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (hol.or q_1 r_3)) -> hol.proof (hol.imp r_3 (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (hol.or q_1 r_3)) => hyp_2 : hol.proof r_3 => thm_460 r_3 q_1 p_2 hyp_2 hyp_1.

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_462 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (hol.or q_3 r_1)) -> hol.proof (hol.eq hol.bool q_3 (hol.and p_2 q_3)) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (hol.or q_3 r_1)) => hol.PROVE_HYP p_2 (hol.eq hol.bool q_3 (hol.and p_2 q_3)) (thm_453 r_1 q_3 p_2 hyp_1) (hyp_2 : hol.proof p_2 => thm_170 p_2 q_3 hyp_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_463 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof q_2 -> hyp_2 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) -> hol.proof (hol.and p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof q_2 => hyp_2 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) => hol.EQ_MP q_2 (hol.and p_3 q_2) (thm_462 r_1 p_3 q_2 hyp_2) (thm_65 q_2 hyp_1).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)) ;)

(; dict ;)

def thm_464 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 q_2) -> hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 q_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) (hol.and p_3 r_1) (hol.and p_3 q_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)) ;)

(; dict ;)

def thm_465 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof q_2 -> hyp_2 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) -> hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof q_2 => hyp_2 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) => hol.PROVE_HYP (hol.and p_3 q_2) (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) (thm_463 r_1 q_2 p_3 hyp_1 hyp_2) (hyp_3 : hol.proof (hol.and p_3 q_2) => thm_464 r_1 q_2 p_3 hyp_3).

(; Theorem: |- ((Data.Bool.==> q) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))) ;)

(; dict ;)

def thm_466 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (hol.or q_3 r_1)) -> hol.proof (hol.imp q_3 (hol.or (hol.and p_2 q_3) (hol.and p_2 r_1))) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (hol.or q_3 r_1)) => hyp_2 : hol.proof q_3 => thm_465 r_1 q_3 p_2 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_467 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 (hol.or q_3 r_2)) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 (hol.or q_3 r_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) p_1 (hol.or q_3 r_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_468 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 (hol.or q_3 r_2)) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 (hol.or q_3 r_2)) => hol.PROVE_HYP (hol.and p_1 (hol.or q_3 r_2)) (hol.or q_3 r_2) (thm_452 r_2 q_3 p_1 hyp_1) (hyp_2 : hol.proof (hol.and p_1 (hol.or q_3 r_2)) => thm_467 p_1 r_2 q_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)) ;)

(; dict ;)

def thm_469 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp q_2 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) -> hyp_2 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) -> hyp_3 : hol.proof (hol.or q_2 r_1) -> hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp q_2 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) => hyp_2 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) => hyp_3 : hol.proof (hol.or q_2 r_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) r_1 q_2 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)) ;)

(; dict ;)

def thm_470 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) -> hyp_2 : hol.proof (hol.imp q_2 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) -> hyp_3 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) -> hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) => hyp_2 : hol.proof (hol.imp q_2 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) => hyp_3 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) => hol.PROVE_HYP (hol.or q_2 r_1) (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) (thm_468 p_3 r_1 q_2 hyp_1) (hyp_4 : hol.proof (hol.or q_2 r_1) => thm_469 r_1 q_2 p_3 hyp_2 hyp_3 hyp_4).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)) ;)

(; dict ;)

def thm_471 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) -> hyp_2 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) -> hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) => hyp_2 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) => hol.PROVE_HYP (hol.imp q_2 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) (thm_466 r_1 p_3 q_2 hyp_1) (hyp_3 : hol.proof (hol.imp q_2 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) => thm_470 r_1 q_2 p_3 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)) ;)

(; dict ;)

def thm_472 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) -> hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) => hol.PROVE_HYP (hol.imp r_1 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) (thm_461 q_2 p_3 r_1 hyp_1) (hyp_2 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) => thm_471 r_1 q_2 p_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))) ;)

(; dict ;)

def thm_473 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_3 (hol.or q_2 r_1)) (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) => thm_472 r_1 q_2 p_3 hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))) ;)

(; dict ;)

def thm_474 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_3 (hol.or q_2 r_1)) (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.PROP_EXT (hol.and p_3 (hol.or q_2 r_1)) (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) (hyp_1 : hol.proof (hol.or (hol.and p_3 q_2) (hol.and p_3 r_1)) => thm_451 r_1 q_2 p_3 (thm_431 r_1 q_2 p_3 hyp_1)) (hyp_1 : hol.proof (hol.and p_3 (hol.or q_2 r_1)) => thm_473 r_1 q_2 p_3 (thm_452 r_1 q_2 p_3 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)))) ;)

(; dict ;)

def thm_475 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.or q_1 r_3)) (hol.or (hol.and p_2 q_1) (hol.and p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => thm_474 r_3 q_1 p_2.

(; Theorem: |- (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r))))) ;)

(; dict ;)

def thm_476 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))) (thm_425 q_2 p_1) (thm_475 q_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)))))) ;)

(; dict ;)

def thm_477 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3))))) (thm_422 p_1) (thm_476 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) ((Data.Bool./\ p) r)))))) ;)

(; thm ;)

def thm_478 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))))) :=
  hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.or q_2 r_3)) (hol.or (hol.and p_1 q_2) (hol.and p_1 r_3)))))) thm_419 thm_477.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)))))) ;)

(; dict ;)

def thm_479 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)))))) ;)

(; dict ;)

def thm_480 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))) thm_479 thm_479.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))))))) ;)

(; dict ;)

def thm_481 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))) thm_150 thm_480.

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))))) ;)

(; dict ;)

def thm_482 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))).

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))))) ;)

(; dict ;)

def thm_483 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))) (thm_482 p_1) (thm_482 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)))))) (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)))))) ;)

(; dict ;)

def thm_484 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))) thm_150 (thm_483 p_1).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)))) \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)))) ;)

(; dict ;)

def thm_485 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_2 q_1) r_3) (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_2 q_1) r_3) (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_2 q_1) r_3) (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3))).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)))) \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)))) ;)

(; dict ;)

def thm_486 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_2 q_1) r_3) (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_2 q_1) r_3) (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_2 q_1) r_3) (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_2 q_1) r_3) (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_2 q_1) r_3) (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3))) (thm_485 q_1 p_2) (thm_485 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))))) (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))))) ;)

(; dict ;)

def thm_487 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_2 q_1) r_3) (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_2 q_1) r_3) (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_2 q_1) r_3) (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_2 q_1) r_3) (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3))) thm_150 (thm_486 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ q) r) ;)

(; dict ;)

def thm_488 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and q_2 r_1) -> hol.proof (hol.and q_2 r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and q_2 r_1) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_489 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and q_2 r_1) -> hol.proof q_2 :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and q_2 r_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) r_1 q_2 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_490 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and q_2 r_1) -> hol.proof q_2 :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and q_2 r_1) => hol.PROVE_HYP (hol.and q_2 r_1) q_2 (thm_488 r_1 q_2 hyp_1) (hyp_2 : hol.proof (hol.and q_2 r_1) => thm_489 r_1 q_2 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_491 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof (hol.or p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof q_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_492 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and q_2 r_1) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and q_2 r_1) => hol.PROVE_HYP q_2 (hol.or p_3 q_2) (thm_490 r_1 q_2 hyp_1) (hyp_2 : hol.proof q_2 => thm_491 q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ q) r)) ((Data.Bool.\/ p) q)) ;)

(; dict ;)

def thm_493 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and q_3 r_2) (hol.or p_1 q_3)) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and q_3 r_2) => thm_492 r_2 q_3 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_494 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hol.proof (hol.or p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_495 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 r_1) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 r_1) => hol.PROVE_HYP p_3 (hol.or p_3 q_2) (thm_427 r_1 p_3 hyp_1) (hyp_2 : hol.proof p_3 => thm_494 q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) r)) ((Data.Bool.\/ p) q)) ;)

(; dict ;)

def thm_496 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_3 r_2) (hol.or p_3 q_1)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 r_2) => thm_495 r_2 q_1 p_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_497 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) -> hol.proof (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_498 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and p_3 r_1) (hol.or p_3 q_2)) -> hyp_2 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) -> hyp_3 : hol.proof (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_3 r_1) (hol.or p_3 q_2)) => hyp_2 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) => hyp_3 : hol.proof (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.and q_2 r_1) (hol.and p_3 r_1) (hol.or p_3 q_2) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_499 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and p_3 r_1) (hol.or p_3 q_2)) -> hyp_2 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) -> hyp_3 : hol.proof (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_3 r_1) (hol.or p_3 q_2)) => hyp_2 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) => hyp_3 : hol.proof (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) => hol.PROVE_HYP (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) (hol.or p_3 q_2) (thm_497 q_2 r_1 p_3 hyp_3) (hyp_4 : hol.proof (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) => thm_498 r_1 q_2 p_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_500 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) -> hyp_2 : hol.proof (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) => hyp_2 : hol.proof (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) => hol.PROVE_HYP (hol.imp (hol.and p_3 r_1) (hol.or p_3 q_2)) (hol.or p_3 q_2) (thm_496 q_2 r_1 p_3) (hyp_3 : hol.proof (hol.imp (hol.and p_3 r_1) (hol.or p_3 q_2)) => thm_499 r_1 q_2 p_3 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_501 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) => hol.PROVE_HYP (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) (hol.or p_3 q_2) (thm_493 p_3 r_1 q_2) (hyp_2 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) => thm_500 r_1 q_2 p_3 hyp_2 hyp_1).

(; Theorem: |- ((= r) ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ;)

(; dict ;)

def thm_502 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p_2 q_1) -> hol.proof (hol.eq hol.bool r_3 (hol.and (hol.or p_2 q_1) r_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_2 q_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.or p_2 q_1) r_3 hyp_1.

(; Theorem: |- ((= r) ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ;)

(; dict ;)

def thm_503 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)) -> hol.proof (hol.eq hol.bool r_3 (hol.and (hol.or p_2 q_1) r_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)) => hol.PROVE_HYP (hol.or p_2 q_1) (hol.eq hol.bool r_3 (hol.and (hol.or p_2 q_1) r_3)) (thm_501 r_3 q_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.or p_2 q_1) => thm_502 q_1 p_2 r_3 hyp_2).

(; Theorem: |- r ;)

(; dict ;)

def thm_504 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and q_1 r_2) -> hol.proof r_2 :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and q_1 r_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) q_1 r_2 hyp_1.

(; Theorem: |- r ;)

(; dict ;)

def thm_505 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and q_1 r_2) -> hol.proof r_2 :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and q_1 r_2) => hol.PROVE_HYP (hol.and q_1 r_2) r_2 (thm_488 r_2 q_1 hyp_1) (hyp_2 : hol.proof (hol.and q_1 r_2) => thm_504 q_1 r_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ q) r)) r) ;)

(; dict ;)

def thm_506 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and q_2 r_1) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and q_2 r_1) => thm_505 q_2 r_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) r)) r) ;)

(; dict ;)

def thm_507 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_2 r_1) r_1) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 r_1) => thm_438 p_2 r_1 hyp_1.

(; Theorem: |- r ;)

(; dict ;)

def thm_508 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and p_2 r_3) r_3) -> hyp_2 : hol.proof (hol.imp (hol.and q_1 r_3) r_3) -> hyp_3 : hol.proof (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_2 r_3) r_3) => hyp_2 : hol.proof (hol.imp (hol.and q_1 r_3) r_3) => hyp_3 : hol.proof (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.and q_1 r_3) (hol.and p_2 r_3) r_3 hyp_1 hyp_2 hyp_3.

(; Theorem: |- r ;)

(; dict ;)

def thm_509 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and p_2 r_3) r_3) -> hyp_2 : hol.proof (hol.imp (hol.and q_1 r_3) r_3) -> hyp_3 : hol.proof (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_2 r_3) r_3) => hyp_2 : hol.proof (hol.imp (hol.and q_1 r_3) r_3) => hyp_3 : hol.proof (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)) => hol.PROVE_HYP (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)) r_3 (thm_497 q_1 r_3 p_2 hyp_3) (hyp_4 : hol.proof (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)) => thm_508 q_1 p_2 r_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- r ;)

(; dict ;)

def thm_510 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and q_2 r_3) r_3) -> hyp_2 : hol.proof (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)) -> hol.proof r_3 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and q_2 r_3) r_3) => hyp_2 : hol.proof (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)) => hol.PROVE_HYP (hol.imp (hol.and p_1 r_3) r_3) r_3 (thm_507 r_3 p_1) (hyp_3 : hol.proof (hol.imp (hol.and p_1 r_3) r_3) => thm_509 q_2 p_1 r_3 hyp_3 hyp_1 hyp_2).

(; Theorem: |- r ;)

(; dict ;)

def thm_511 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)) => hol.PROVE_HYP (hol.imp (hol.and q_1 r_3) r_3) r_3 (thm_506 r_3 q_1) (hyp_2 : hol.proof (hol.imp (hol.and q_1 r_3) r_3) => thm_510 p_2 q_1 r_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.\/ p) q)) r) ;)

(; dict ;)

def thm_512 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) -> hol.proof (hol.and (hol.or p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) => hol.EQ_MP r_1 (hol.and (hol.or p_3 q_2) r_1) (thm_503 q_2 p_3 r_1 hyp_1) (thm_511 q_2 p_3 r_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ;)

(; dict ;)

def thm_513 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) (hol.and (hol.or p_3 q_1) r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) => thm_512 r_2 q_1 p_3 hyp_1.

(; Theorem: |- ((= r) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_514 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof (hol.eq hol.bool r_2 (hol.and q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => hyp_1 : hol.proof q_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) q_1 r_2 hyp_1.

(; Theorem: |- ((= r) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_515 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof (hol.eq hol.bool r_2 (hol.and q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hol.PROVE_HYP q_1 (hol.eq hol.bool r_2 (hol.and q_1 r_2)) (thm_65 q_1 hyp_1) (hyp_2 : hol.proof q_1 => thm_514 q_1 r_2 hyp_2).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.\/ p) q)) r) ;)

(; dict ;)

def thm_516 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) r_1) -> hol.proof (hol.and (hol.or p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) r_1) => hyp_1.

(; Theorem: |- r ;)

(; dict ;)

def thm_517 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_2 q_1) r_3) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_2 q_1) r_3) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.or p_2 q_1) r_3 hyp_1.

(; Theorem: |- r ;)

(; dict ;)

def thm_518 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_2 q_1) r_3) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_2 q_1) r_3) => hol.PROVE_HYP (hol.and (hol.or p_2 q_1) r_3) r_3 (thm_516 r_3 q_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.or p_2 q_1) r_3) => thm_517 q_1 p_2 r_3 hyp_2).

(; Theorem: |- ((Data.Bool./\ q) r) ;)

(; dict ;)

def thm_519 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof q_3 -> hyp_2 : hol.proof (hol.and (hol.or p_1 q_3) r_2) -> hol.proof (hol.and q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof q_3 => hyp_2 : hol.proof (hol.and (hol.or p_1 q_3) r_2) => hol.EQ_MP r_2 (hol.and q_3 r_2) (thm_515 q_3 r_2 hyp_1) (thm_518 q_3 p_1 r_2 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_520 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and q_1 r_2) -> hol.proof (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and q_1 r_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) (hol.and q_1 r_2) (hol.and p_3 r_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_521 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hyp_2 : hol.proof (hol.and (hol.or p_3 q_1) r_2) -> hol.proof (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_2 : hol.proof (hol.and (hol.or p_3 q_1) r_2) => hol.PROVE_HYP (hol.and q_1 r_2) (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) (thm_519 p_3 r_2 q_1 hyp_1 hyp_2) (hyp_3 : hol.proof (hol.and q_1 r_2) => thm_520 q_1 r_2 p_3 hyp_3).

(; Theorem: |- ((Data.Bool.==> q) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))) ;)

(; dict ;)

def thm_522 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_2 q_3) r_1) -> hol.proof (hol.imp q_3 (hol.or (hol.and p_2 r_1) (hol.and q_3 r_1))) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_2 q_3) r_1) => hyp_2 : hol.proof q_3 => thm_521 q_3 r_1 p_2 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool./\ p) r) ;)

(; dict ;)

def thm_523 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof (hol.and (hol.or p_3 q_1) r_2) -> hol.proof (hol.and p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof (hol.and (hol.or p_3 q_1) r_2) => hol.EQ_MP r_2 (hol.and p_3 r_2) (thm_455 p_3 r_2 hyp_1) (thm_517 q_1 p_3 r_2 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_524 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 r_2) -> hol.proof (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 r_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) (hol.and q_1 r_2) (hol.and p_3 r_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_525 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof (hol.and (hol.or p_3 q_1) r_2) -> hol.proof (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof (hol.and (hol.or p_3 q_1) r_2) => hol.PROVE_HYP (hol.and p_3 r_2) (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) (thm_523 q_1 r_2 p_3 hyp_1 hyp_2) (hyp_3 : hol.proof (hol.and p_3 r_2) => thm_524 q_1 r_2 p_3 hyp_3).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))) ;)

(; dict ;)

def thm_526 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_1) r_2) -> hol.proof (hol.imp p_3 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_1) r_2) => hyp_2 : hol.proof p_3 => thm_525 q_1 r_2 p_3 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_527 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) r_1) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) r_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) r_1 (hol.or p_3 q_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_528 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) r_1) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) r_1) => hol.PROVE_HYP (hol.and (hol.or p_3 q_2) r_1) (hol.or p_3 q_2) (thm_516 r_1 q_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.or p_3 q_2) r_1) => thm_527 r_1 q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_529 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) -> hyp_2 : hol.proof (hol.imp q_1 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) -> hyp_3 : hol.proof (hol.or p_3 q_1) -> hol.proof (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) => hyp_2 : hol.proof (hol.imp q_1 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) => hyp_3 : hol.proof (hol.or p_3 q_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) q_1 p_3 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_530 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_1) r_2) -> hyp_2 : hol.proof (hol.imp p_3 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) -> hyp_3 : hol.proof (hol.imp q_1 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) -> hol.proof (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_1) r_2) => hyp_2 : hol.proof (hol.imp p_3 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) => hyp_3 : hol.proof (hol.imp q_1 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) => hol.PROVE_HYP (hol.or p_3 q_1) (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) (thm_528 r_2 q_1 p_3 hyp_1) (hyp_4 : hol.proof (hol.or p_3 q_1) => thm_529 q_1 r_2 p_3 hyp_2 hyp_3 hyp_4).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_531 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_1) r_2) -> hyp_2 : hol.proof (hol.imp q_1 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) -> hol.proof (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_1) r_2) => hyp_2 : hol.proof (hol.imp q_1 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) => hol.PROVE_HYP (hol.imp p_3 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) (thm_526 q_1 r_2 p_3 hyp_1) (hyp_3 : hol.proof (hol.imp p_3 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) => thm_530 q_1 r_2 p_3 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_532 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_1) r_2) -> hol.proof (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_1) r_2) => hol.PROVE_HYP (hol.imp q_1 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2)) (thm_522 r_2 p_3 q_1 hyp_1) (hyp_2 : hol.proof (hol.imp q_1 (hol.or (hol.and p_3 r_2) (hol.and q_1 r_2))) => thm_531 q_1 r_2 p_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))) ;)

(; dict ;)

def thm_533 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.or p_3 q_2) r_1) (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) r_1) => thm_532 q_2 r_1 p_3 hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))) ;)

(; dict ;)

def thm_534 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.or p_3 q_2) r_1) (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.PROP_EXT (hol.and (hol.or p_3 q_2) r_1) (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) (hyp_1 : hol.proof (hol.or (hol.and p_3 r_1) (hol.and q_2 r_1)) => thm_513 q_2 r_1 p_3 (thm_497 q_2 r_1 p_3 hyp_1)) (hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) r_1) => thm_533 r_1 q_2 p_3 (thm_516 r_1 q_2 p_3 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)))) ;)

(; dict ;)

def thm_535 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_2 q_1) r_3) (hol.or (hol.and p_2 r_3) (hol.and q_1 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => thm_534 r_3 q_1 p_2.

(; Theorem: |- (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r))))) ;)

(; dict ;)

def thm_536 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))) (thm_487 q_2 p_1) (thm_535 q_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)))))) ;)

(; dict ;)

def thm_537 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3))))) (thm_484 p_1) (thm_536 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ ((Data.Bool.\/ p) q)) r)) ((Data.Bool.\/ ((Data.Bool./\ p) r)) ((Data.Bool./\ q) r)))))) ;)

(; thm ;)

def thm_538 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))))) :=
  hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.or p_1 q_2) r_3) (hol.or (hol.and p_1 r_3) (hol.and q_2 r_3)))))) thm_481 thm_537.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)))))) ;)

(; dict ;)

def thm_539 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)))))) ;)

(; dict ;)

def thm_540 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))) thm_539 thm_539.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))))))) ;)

(; dict ;)

def thm_541 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))) thm_150 thm_540.

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))))) ;)

(; dict ;)

def thm_542 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))).

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))))) ;)

(; dict ;)

def thm_543 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))) (thm_542 p_1) (thm_542 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)))))) (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)))))) ;)

(; dict ;)

def thm_544 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))) thm_150 (thm_543 p_1).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)))) \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)))) ;)

(; dict ;)

def thm_545 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.and q_1 r_3)) (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.and q_1 r_3)) (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.and q_1 r_3)) (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3))).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)))) \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)))) ;)

(; dict ;)

def thm_546 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.and q_1 r_3)) (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.and q_1 r_3)) (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.and q_1 r_3)) (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.and q_1 r_3)) (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.and q_1 r_3)) (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3))) (thm_545 q_1 p_2) (thm_545 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))))) (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))))) ;)

(; dict ;)

def thm_547 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.and q_1 r_3)) (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.and q_1 r_3)) (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.and q_1 r_3)) (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.and q_1 r_3)) (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3))) thm_150 (thm_546 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ q) r) ;)

(; dict ;)

def thm_548 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof q_2 -> hyp_2 : hol.proof r_1 -> hol.proof (hol.and q_2 r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof q_2 => hyp_2 : hol.proof r_1 => hol.EQ_MP r_1 (hol.and q_2 r_1) (thm_514 q_2 r_1 hyp_1) (thm_457 r_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_549 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and q_2 r_1) -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and q_2 r_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) (hol.and q_2 r_1) p_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_550 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof q_2 -> hyp_2 : hol.proof r_1 -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof q_2 => hyp_2 : hol.proof r_1 => hol.PROVE_HYP (hol.and q_2 r_1) (hol.or p_3 (hol.and q_2 r_1)) (thm_548 r_1 q_2 hyp_1 hyp_2) (hyp_3 : hol.proof (hol.and q_2 r_1) => thm_549 r_1 q_2 p_3 hyp_3).

(; Theorem: |- ((Data.Bool.==> q) ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ;)

(; dict ;)

def thm_551 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof r_1 -> hol.proof (hol.imp q_3 (hol.or p_2 (hol.and q_3 r_1))) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof r_1 => hyp_2 : hol.proof q_3 => thm_550 r_1 q_3 p_2 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_552 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) (hol.and q_2 r_1) p_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_553 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hol.PROVE_HYP p_3 (hol.or p_3 (hol.and q_2 r_1)) (thm_64 p_3 hyp_1) (hyp_2 : hol.proof p_3 => thm_552 r_1 q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ;)

(; dict ;)

def thm_554 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => thm_553 r_1 q_2 p_3 hyp_1.

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)) ;)

(; dict ;)

def thm_555 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) -> hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_556 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.or p_3 r_1) (hol.or p_3 q_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_557 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => hol.PROVE_HYP (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) (hol.or p_3 q_2) (thm_555 r_1 q_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => thm_556 r_1 q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_558 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) -> hyp_2 : hol.proof (hol.imp q_2 (hol.or p_3 (hol.and q_2 r_1))) -> hyp_3 : hol.proof (hol.or p_3 q_2) -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) => hyp_2 : hol.proof (hol.imp q_2 (hol.or p_3 (hol.and q_2 r_1))) => hyp_3 : hol.proof (hol.or p_3 q_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) q_2 p_3 (hol.or p_3 (hol.and q_2 r_1)) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_559 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) -> hyp_2 : hol.proof (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) -> hyp_3 : hol.proof (hol.imp q_2 (hol.or p_3 (hol.and q_2 r_1))) -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => hyp_2 : hol.proof (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) => hyp_3 : hol.proof (hol.imp q_2 (hol.or p_3 (hol.and q_2 r_1))) => hol.PROVE_HYP (hol.or p_3 q_2) (hol.or p_3 (hol.and q_2 r_1)) (thm_557 r_1 q_2 p_3 hyp_1) (hyp_4 : hol.proof (hol.or p_3 q_2) => thm_558 r_1 q_2 p_3 hyp_2 hyp_3 hyp_4).

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_560 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) -> hyp_2 : hol.proof (hol.imp q_2 (hol.or p_3 (hol.and q_2 r_1))) -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => hyp_2 : hol.proof (hol.imp q_2 (hol.or p_3 (hol.and q_2 r_1))) => hol.PROVE_HYP (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) (hol.or p_3 (hol.and q_2 r_1)) (thm_554 r_1 q_2 p_3) (hyp_3 : hol.proof (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) => thm_559 r_1 q_2 p_3 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_561 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof r_1 -> hyp_2 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof r_1 => hyp_2 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => hol.PROVE_HYP (hol.imp q_2 (hol.or p_3 (hol.and q_2 r_1))) (hol.or p_3 (hol.and q_2 r_1)) (thm_551 r_1 p_3 q_2 hyp_1) (hyp_3 : hol.proof (hol.imp q_2 (hol.or p_3 (hol.and q_2 r_1))) => thm_560 r_1 q_2 p_3 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> r) ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ;)

(; dict ;)

def thm_562 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3)) -> hol.proof (hol.imp r_3 (hol.or p_2 (hol.and q_1 r_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3)) => hyp_2 : hol.proof r_3 => thm_561 r_3 q_1 p_2 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> q) ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ;)

(; dict ;)

def thm_563 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hol.proof (hol.imp q_3 (hol.or p_2 (hol.and q_3 r_1))) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_3 => thm_552 r_1 q_3 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_564 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => hol.PROVE_HYP (hol.imp q_2 (hol.or p_3 (hol.and q_2 r_1))) (hol.or p_3 (hol.and q_2 r_1)) (thm_563 r_1 p_3 q_2 hyp_1) (hyp_3 : hol.proof (hol.imp q_2 (hol.or p_3 (hol.and q_2 r_1))) => thm_560 r_1 q_2 p_3 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ;)

(; dict ;)

def thm_565 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) -> hol.proof (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => hyp_2 : hol.proof p_3 => thm_564 r_1 q_2 p_3 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_566 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_1) (hol.or p_3 r_2)) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_1) (hol.or p_3 r_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.or p_3 q_1) (hol.or p_3 r_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_567 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_1) (hol.or p_3 r_2)) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_1) (hol.or p_3 r_2)) => hol.PROVE_HYP (hol.and (hol.or p_3 q_1) (hol.or p_3 r_2)) (hol.or p_3 r_2) (thm_555 r_2 q_1 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.or p_3 q_1) (hol.or p_3 r_2)) => thm_566 q_1 r_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_568 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) -> hyp_2 : hol.proof (hol.imp r_1 (hol.or p_3 (hol.and q_2 r_1))) -> hyp_3 : hol.proof (hol.or p_3 r_1) -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) => hyp_2 : hol.proof (hol.imp r_1 (hol.or p_3 (hol.and q_2 r_1))) => hyp_3 : hol.proof (hol.or p_3 r_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) r_1 p_3 (hol.or p_3 (hol.and q_2 r_1)) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_569 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) -> hyp_2 : hol.proof (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) -> hyp_3 : hol.proof (hol.imp r_1 (hol.or p_3 (hol.and q_2 r_1))) -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => hyp_2 : hol.proof (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) => hyp_3 : hol.proof (hol.imp r_1 (hol.or p_3 (hol.and q_2 r_1))) => hol.PROVE_HYP (hol.or p_3 r_1) (hol.or p_3 (hol.and q_2 r_1)) (thm_567 q_2 r_1 p_3 hyp_1) (hyp_4 : hol.proof (hol.or p_3 r_1) => thm_568 r_1 q_2 p_3 hyp_2 hyp_3 hyp_4).

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_570 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) -> hyp_2 : hol.proof (hol.imp r_1 (hol.or p_3 (hol.and q_2 r_1))) -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => hyp_2 : hol.proof (hol.imp r_1 (hol.or p_3 (hol.and q_2 r_1))) => hol.PROVE_HYP (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) (hol.or p_3 (hol.and q_2 r_1)) (thm_565 r_1 q_2 p_3 hyp_1) (hyp_3 : hol.proof (hol.imp p_3 (hol.or p_3 (hol.and q_2 r_1))) => thm_569 r_1 q_2 p_3 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_571 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => hol.PROVE_HYP (hol.imp r_1 (hol.or p_3 (hol.and q_2 r_1))) (hol.or p_3 (hol.and q_2 r_1)) (thm_562 q_2 p_3 r_1 hyp_1) (hyp_2 : hol.proof (hol.imp r_1 (hol.or p_3 (hol.and q_2 r_1))) => thm_570 r_1 q_2 p_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))) ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ;)

(; dict ;)

def thm_572 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) (hol.or p_3 (hol.and q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => thm_571 r_1 q_2 p_3 hyp_1.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.\/ p) q)) ;)

(; dict ;)

def thm_573 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.or p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_494 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_574 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) -> hol.proof (hol.or p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_575 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 q_2)) -> hyp_2 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) -> hyp_3 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 q_2)) => hyp_2 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) => hyp_3 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.and q_2 r_1) p_3 (hol.or p_3 q_2) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_576 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 q_2)) -> hyp_2 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) -> hyp_3 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 q_2)) => hyp_2 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) => hyp_3 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) => hol.PROVE_HYP (hol.or p_3 (hol.and q_2 r_1)) (hol.or p_3 q_2) (thm_574 r_1 q_2 p_3 hyp_3) (hyp_4 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) => thm_575 r_1 q_2 p_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_577 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) -> hyp_2 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) => hyp_2 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) => hol.PROVE_HYP (hol.imp p_3 (hol.or p_3 q_2)) (hol.or p_3 q_2) (thm_573 q_2 p_3) (hyp_3 : hol.proof (hol.imp p_3 (hol.or p_3 q_2)) => thm_576 r_1 q_2 p_3 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_578 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) -> hol.proof (hol.or p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) => hol.PROVE_HYP (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) (hol.or p_3 q_2) (thm_493 p_3 r_1 q_2) (hyp_2 : hol.proof (hol.imp (hol.and q_2 r_1) (hol.or p_3 q_2)) => thm_577 r_1 q_2 p_3 hyp_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ p) r)) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))) ;)

(; dict ;)

def thm_579 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p_3 q_1) -> hol.proof (hol.eq hol.bool (hol.or p_3 r_2) (hol.and (hol.or p_3 q_1) (hol.or p_3 r_2))) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_3 q_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.or p_3 q_1) (hol.or p_3 r_2) hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ p) r)) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))) ;)

(; dict ;)

def thm_580 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p_3 (hol.and q_1 r_2)) -> hol.proof (hol.eq hol.bool (hol.or p_3 r_2) (hol.and (hol.or p_3 q_1) (hol.or p_3 r_2))) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_3 (hol.and q_1 r_2)) => hol.PROVE_HYP (hol.or p_3 q_1) (hol.eq hol.bool (hol.or p_3 r_2) (hol.and (hol.or p_3 q_1) (hol.or p_3 r_2))) (thm_578 r_2 q_1 p_3 hyp_1) (hyp_2 : hol.proof (hol.or p_3 q_1) => thm_579 q_1 r_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_581 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof r_1 -> hol.proof (hol.or p_2 r_1) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof r_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) r_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_582 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and q_1 r_2) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and q_1 r_2) => hol.PROVE_HYP r_2 (hol.or p_3 r_2) (thm_504 q_1 r_2 hyp_1) (hyp_2 : hol.proof r_2 => thm_581 r_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ q) r)) ((Data.Bool.\/ p) r)) ;)

(; dict ;)

def thm_583 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and q_3 r_2) (hol.or p_1 r_2)) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and q_3 r_2) => thm_582 q_3 r_2 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_584 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hol.proof (hol.or p_2 r_1) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) r_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_585 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hol.proof (hol.or p_2 r_1) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hol.PROVE_HYP p_2 (hol.or p_2 r_1) (thm_64 p_2 hyp_1) (hyp_2 : hol.proof p_2 => thm_584 r_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.\/ p) r)) ;)

(; dict ;)

def thm_586 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.or p_2 r_1)) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_585 r_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_587 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 r_2)) -> hyp_2 : hol.proof (hol.imp (hol.and q_1 r_2) (hol.or p_3 r_2)) -> hyp_3 : hol.proof (hol.or p_3 (hol.and q_1 r_2)) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 r_2)) => hyp_2 : hol.proof (hol.imp (hol.and q_1 r_2) (hol.or p_3 r_2)) => hyp_3 : hol.proof (hol.or p_3 (hol.and q_1 r_2)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.and q_1 r_2) p_3 (hol.or p_3 r_2) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_588 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 r_2)) -> hyp_2 : hol.proof (hol.imp (hol.and q_1 r_2) (hol.or p_3 r_2)) -> hyp_3 : hol.proof (hol.or p_3 (hol.and q_1 r_2)) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 r_2)) => hyp_2 : hol.proof (hol.imp (hol.and q_1 r_2) (hol.or p_3 r_2)) => hyp_3 : hol.proof (hol.or p_3 (hol.and q_1 r_2)) => hol.PROVE_HYP (hol.or p_3 (hol.and q_1 r_2)) (hol.or p_3 r_2) (thm_574 r_2 q_1 p_3 hyp_3) (hyp_4 : hol.proof (hol.or p_3 (hol.and q_1 r_2)) => thm_587 q_1 r_2 p_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_589 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and q_1 r_2) (hol.or p_3 r_2)) -> hyp_2 : hol.proof (hol.or p_3 (hol.and q_1 r_2)) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and q_1 r_2) (hol.or p_3 r_2)) => hyp_2 : hol.proof (hol.or p_3 (hol.and q_1 r_2)) => hol.PROVE_HYP (hol.imp p_3 (hol.or p_3 r_2)) (hol.or p_3 r_2) (thm_586 r_2 p_3) (hyp_3 : hol.proof (hol.imp p_3 (hol.or p_3 r_2)) => thm_588 q_1 r_2 p_3 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_590 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p_3 (hol.and q_1 r_2)) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_3 (hol.and q_1 r_2)) => hol.PROVE_HYP (hol.imp (hol.and q_1 r_2) (hol.or p_3 r_2)) (hol.or p_3 r_2) (thm_583 p_3 r_2 q_1) (hyp_2 : hol.proof (hol.imp (hol.and q_1 r_2) (hol.or p_3 r_2)) => thm_589 q_1 r_2 p_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)) ;)

(; dict ;)

def thm_591 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) -> hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) => hol.EQ_MP (hol.or p_3 r_1) (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) (thm_580 q_2 r_1 p_3 hyp_1) (thm_590 q_2 r_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))) ;)

(; dict ;)

def thm_592 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.or p_3 (hol.and q_2 r_1)) (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) => thm_591 r_1 q_2 p_3 hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))) ;)

(; dict ;)

def thm_593 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or p_3 (hol.and q_2 r_1)) (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.PROP_EXT (hol.or p_3 (hol.and q_2 r_1)) (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) (hyp_1 : hol.proof (hol.and (hol.or p_3 q_2) (hol.or p_3 r_1)) => thm_572 r_1 q_2 p_3 (thm_555 r_1 q_2 p_3 hyp_1)) (hyp_1 : hol.proof (hol.or p_3 (hol.and q_2 r_1)) => thm_592 r_1 q_2 p_3 (thm_574 r_1 q_2 p_3 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)))) ;)

(; dict ;)

def thm_594 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_2 (hol.and q_1 r_3)) (hol.and (hol.or p_2 q_1) (hol.or p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => thm_593 r_3 q_1 p_2.

(; Theorem: |- (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r))))) ;)

(; dict ;)

def thm_595 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))) (thm_547 q_2 p_1) (thm_594 q_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)))))) ;)

(; dict ;)

def thm_596 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3))))) (thm_544 p_1) (thm_595 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.\/ p) q)) ((Data.Bool.\/ p) r)))))) ;)

(; thm ;)

def thm_597 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))))) :=
  hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or p_1 (hol.and q_2 r_3)) (hol.and (hol.or p_1 q_2) (hol.or p_1 r_3)))))) thm_541 thm_596.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)))))) ;)

(; dict ;)

def thm_598 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)))))) ;)

(; dict ;)

def thm_599 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))) thm_598 thm_598.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))))))) ;)

(; dict ;)

def thm_600 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))) thm_150 thm_599.

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))))) ;)

(; dict ;)

def thm_601 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))).

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))))) ;)

(; dict ;)

def thm_602 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))) (thm_601 p_1) (thm_601 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)))))) (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)))))) ;)

(; dict ;)

def thm_603 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))) thm_150 (thm_602 p_1).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)))) \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)))) ;)

(; dict ;)

def thm_604 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_2 q_1) r_3) (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_2 q_1) r_3) (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_2 q_1) r_3) (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3))).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)))) \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)))) ;)

(; dict ;)

def thm_605 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_2 q_1) r_3) (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_2 q_1) r_3) (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_2 q_1) r_3) (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_2 q_1) r_3) (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_2 q_1) r_3) (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3))) (thm_604 q_1 p_2) (thm_604 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))))) (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))))) ;)

(; dict ;)

def thm_606 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_2 q_1) r_3) (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_2 q_1) r_3) (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_2 q_1) r_3) (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_2 q_1) r_3) (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3))) thm_150 (thm_605 q_1 p_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_607 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof r_1 -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof r_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) r_1 (hol.and p_3 q_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_608 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof r_1 -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof r_1 => hol.PROVE_HYP r_1 (hol.or (hol.and p_3 q_2) r_1) (thm_457 r_1 hyp_1) (hyp_2 : hol.proof r_1 => thm_607 r_1 q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> r) ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ;)

(; dict ;)

def thm_609 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hol.proof (hol.imp r_3 (hol.or (hol.and p_2 q_1) r_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof r_3 => thm_608 r_3 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ;)

(; dict ;)

def thm_610 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof r_1 -> hol.proof (hol.imp p_3 (hol.or (hol.and p_3 q_2) r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof r_1 => hyp_2 : hol.proof p_3 => thm_607 r_1 q_2 p_3 hyp_1.

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)) ;)

(; dict ;)

def thm_611 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 r_2) (hol.or q_1 r_2)) -> hol.proof (hol.and (hol.or p_3 r_2) (hol.or q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 r_2) (hol.or q_1 r_2)) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_612 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 r_2) (hol.or q_1 r_2)) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 r_2) (hol.or q_1 r_2)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.or q_1 r_2) (hol.or p_3 r_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_613 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 r_2) (hol.or q_1 r_2)) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 r_2) (hol.or q_1 r_2)) => hol.PROVE_HYP (hol.and (hol.or p_3 r_2) (hol.or q_1 r_2)) (hol.or p_3 r_2) (thm_611 q_1 r_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.or p_3 r_2) (hol.or q_1 r_2)) => thm_612 q_1 r_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_614 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.or (hol.and p_3 q_2) r_1)) -> hyp_2 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) -> hyp_3 : hol.proof (hol.or p_3 r_1) -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.or (hol.and p_3 q_2) r_1)) => hyp_2 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) => hyp_3 : hol.proof (hol.or p_3 r_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) r_1 p_3 (hol.or (hol.and p_3 q_2) r_1) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_615 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) -> hyp_2 : hol.proof (hol.imp p_3 (hol.or (hol.and p_3 q_2) r_1)) -> hyp_3 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) => hyp_2 : hol.proof (hol.imp p_3 (hol.or (hol.and p_3 q_2) r_1)) => hyp_3 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) => hol.PROVE_HYP (hol.or p_3 r_1) (hol.or (hol.and p_3 q_2) r_1) (thm_613 q_2 r_1 p_3 hyp_1) (hyp_4 : hol.proof (hol.or p_3 r_1) => thm_614 r_1 q_2 p_3 hyp_2 hyp_3 hyp_4).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_616 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof r_1 -> hyp_2 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) -> hyp_3 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof r_1 => hyp_2 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) => hyp_3 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) => hol.PROVE_HYP (hol.imp p_3 (hol.or (hol.and p_3 q_2) r_1)) (hol.or (hol.and p_3 q_2) r_1) (thm_610 r_1 q_2 p_3 hyp_1) (hyp_4 : hol.proof (hol.imp p_3 (hol.or (hol.and p_3 q_2) r_1)) => thm_615 r_1 q_2 p_3 hyp_2 hyp_4 hyp_3).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_617 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof r_1 -> hyp_2 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof r_1 => hyp_2 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) => hol.PROVE_HYP (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) (hol.or (hol.and p_3 q_2) r_1) (thm_609 q_2 p_3 r_1) (hyp_3 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) => thm_616 r_1 q_2 p_3 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> r) ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ;)

(; dict ;)

def thm_618 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3)) -> hol.proof (hol.imp r_3 (hol.or (hol.and p_2 q_1) r_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3)) => hyp_2 : hol.proof r_3 => thm_617 r_3 q_1 p_2 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_619 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 q_2) -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 q_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) r_1 (hol.and p_3 q_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_620 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hol.PROVE_HYP (hol.and p_3 q_2) (hol.or (hol.and p_3 q_2) r_1) (thm_169 q_2 p_3 hyp_1 hyp_2) (hyp_3 : hol.proof (hol.and p_3 q_2) => thm_619 r_1 q_2 p_3 hyp_3).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ;)

(; dict ;)

def thm_621 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof q_2 -> hol.proof (hol.imp p_3 (hol.or (hol.and p_3 q_2) r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof q_2 => hyp_2 : hol.proof p_3 => thm_620 r_1 q_2 p_3 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_622 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof q_2 -> hyp_2 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) -> hyp_3 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof q_2 => hyp_2 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) => hyp_3 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) => hol.PROVE_HYP (hol.imp p_3 (hol.or (hol.and p_3 q_2) r_1)) (hol.or (hol.and p_3 q_2) r_1) (thm_621 r_1 q_2 p_3 hyp_1) (hyp_4 : hol.proof (hol.imp p_3 (hol.or (hol.and p_3 q_2) r_1)) => thm_615 r_1 q_2 p_3 hyp_2 hyp_4 hyp_3).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_623 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof q_2 -> hyp_2 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof q_2 => hyp_2 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) => hol.PROVE_HYP (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) (hol.or (hol.and p_3 q_2) r_1) (thm_609 q_2 p_3 r_1) (hyp_3 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) => thm_622 r_1 q_2 p_3 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> q) ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ;)

(; dict ;)

def thm_624 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_2 r_1) (hol.or q_3 r_1)) -> hol.proof (hol.imp q_3 (hol.or (hol.and p_2 q_3) r_1)) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_2 r_1) (hol.or q_3 r_1)) => hyp_2 : hol.proof q_3 => thm_623 r_1 q_3 p_2 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_625 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_1 r_2) (hol.or q_3 r_2)) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_1 r_2) (hol.or q_3 r_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.or p_1 r_2) (hol.or q_3 r_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_626 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_1 r_2) (hol.or q_3 r_2)) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_1 r_2) (hol.or q_3 r_2)) => hol.PROVE_HYP (hol.and (hol.or p_1 r_2) (hol.or q_3 r_2)) (hol.or q_3 r_2) (thm_611 q_3 r_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.or p_1 r_2) (hol.or q_3 r_2)) => thm_625 p_1 r_2 q_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_627 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp q_2 (hol.or (hol.and p_3 q_2) r_1)) -> hyp_2 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) -> hyp_3 : hol.proof (hol.or q_2 r_1) -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp q_2 (hol.or (hol.and p_3 q_2) r_1)) => hyp_2 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) => hyp_3 : hol.proof (hol.or q_2 r_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) r_1 q_2 (hol.or (hol.and p_3 q_2) r_1) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_628 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) -> hyp_2 : hol.proof (hol.imp q_2 (hol.or (hol.and p_3 q_2) r_1)) -> hyp_3 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) => hyp_2 : hol.proof (hol.imp q_2 (hol.or (hol.and p_3 q_2) r_1)) => hyp_3 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) => hol.PROVE_HYP (hol.or q_2 r_1) (hol.or (hol.and p_3 q_2) r_1) (thm_626 p_3 r_1 q_2 hyp_1) (hyp_4 : hol.proof (hol.or q_2 r_1) => thm_627 r_1 q_2 p_3 hyp_2 hyp_3 hyp_4).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_629 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) -> hyp_2 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) => hyp_2 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) => hol.PROVE_HYP (hol.imp q_2 (hol.or (hol.and p_3 q_2) r_1)) (hol.or (hol.and p_3 q_2) r_1) (thm_624 r_1 p_3 q_2 hyp_1) (hyp_3 : hol.proof (hol.imp q_2 (hol.or (hol.and p_3 q_2) r_1)) => thm_628 r_1 q_2 p_3 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_630 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) => hol.PROVE_HYP (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) (hol.or (hol.and p_3 q_2) r_1) (thm_618 q_2 p_3 r_1 hyp_1) (hyp_2 : hol.proof (hol.imp r_1 (hol.or (hol.and p_3 q_2) r_1)) => thm_629 r_1 q_2 p_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))) ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ;)

(; dict ;)

def thm_631 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.or p_3 r_2) (hol.or q_1 r_2)) (hol.or (hol.and p_3 q_1) r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.or p_3 r_2) (hol.or q_1 r_2)) => thm_630 r_2 q_1 p_3 hyp_1.

(; Theorem: |- ((Data.Bool.==> r) ((Data.Bool.\/ p) r)) ;)

(; dict ;)

def thm_632 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hol.proof (hol.imp r_2 (hol.or p_1 r_2)) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => hyp_1 : hol.proof r_2 => thm_581 r_2 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_633 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 q_1) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 q_1) => hol.PROVE_HYP p_3 (hol.or p_3 r_2) (thm_71 q_1 p_3 hyp_1) (hyp_2 : hol.proof p_3 => thm_584 r_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) q)) ((Data.Bool.\/ p) r)) ;)

(; dict ;)

def thm_634 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_3 q_2) (hol.or p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 q_2) => thm_633 q_2 r_1 p_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((Data.Bool./\ p) q)) r) ;)

(; dict ;)

def thm_635 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_3 q_2) r_1) -> hol.proof (hol.or (hol.and p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_3 q_2) r_1) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_636 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp r_2 (hol.or p_3 r_2)) -> hyp_2 : hol.proof (hol.imp (hol.and p_3 q_1) (hol.or p_3 r_2)) -> hyp_3 : hol.proof (hol.or (hol.and p_3 q_1) r_2) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp r_2 (hol.or p_3 r_2)) => hyp_2 : hol.proof (hol.imp (hol.and p_3 q_1) (hol.or p_3 r_2)) => hyp_3 : hol.proof (hol.or (hol.and p_3 q_1) r_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) r_2 (hol.and p_3 q_1) (hol.or p_3 r_2) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_637 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp r_2 (hol.or p_3 r_2)) -> hyp_2 : hol.proof (hol.imp (hol.and p_3 q_1) (hol.or p_3 r_2)) -> hyp_3 : hol.proof (hol.or (hol.and p_3 q_1) r_2) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp r_2 (hol.or p_3 r_2)) => hyp_2 : hol.proof (hol.imp (hol.and p_3 q_1) (hol.or p_3 r_2)) => hyp_3 : hol.proof (hol.or (hol.and p_3 q_1) r_2) => hol.PROVE_HYP (hol.or (hol.and p_3 q_1) r_2) (hol.or p_3 r_2) (thm_635 r_2 q_1 p_3 hyp_3) (hyp_4 : hol.proof (hol.or (hol.and p_3 q_1) r_2) => thm_636 q_1 r_2 p_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_638 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp r_2 (hol.or p_3 r_2)) -> hyp_2 : hol.proof (hol.or (hol.and p_3 q_1) r_2) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp r_2 (hol.or p_3 r_2)) => hyp_2 : hol.proof (hol.or (hol.and p_3 q_1) r_2) => hol.PROVE_HYP (hol.imp (hol.and p_3 q_1) (hol.or p_3 r_2)) (hol.or p_3 r_2) (thm_634 r_2 q_1 p_3) (hyp_3 : hol.proof (hol.imp (hol.and p_3 q_1) (hol.or p_3 r_2)) => thm_637 q_1 r_2 p_3 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) r) ;)

(; dict ;)

def thm_639 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_3 q_1) r_2) -> hol.proof (hol.or p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_3 q_1) r_2) => hol.PROVE_HYP (hol.imp r_2 (hol.or p_3 r_2)) (hol.or p_3 r_2) (thm_632 p_3 r_2) (hyp_2 : hol.proof (hol.imp r_2 (hol.or p_3 r_2)) => thm_638 q_1 r_2 p_3 hyp_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ q) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))) ;)

(; dict ;)

def thm_640 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p_1 r_2) -> hol.proof (hol.eq hol.bool (hol.or q_3 r_2) (hol.and (hol.or p_1 r_2) (hol.or q_3 r_2))) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_1 r_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.or p_1 r_2) (hol.or q_3 r_2) hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ q) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))) ;)

(; dict ;)

def thm_641 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_1 q_3) r_2) -> hol.proof (hol.eq hol.bool (hol.or q_3 r_2) (hol.and (hol.or p_1 r_2) (hol.or q_3 r_2))) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_1 q_3) r_2) => hol.PROVE_HYP (hol.or p_1 r_2) (hol.eq hol.bool (hol.or q_3 r_2) (hol.and (hol.or p_1 r_2) (hol.or q_3 r_2))) (thm_639 q_3 r_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.or p_1 r_2) => thm_640 p_1 r_2 q_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> r) ((Data.Bool.\/ q) r)) ;)

(; dict ;)

def thm_642 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> hol.proof (hol.imp r_2 (hol.or q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => hyp_1 : hol.proof r_2 => thm_440 r_2 q_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_643 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp r_2 (hol.or q_3 r_2)) -> hyp_2 : hol.proof (hol.imp (hol.and p_1 q_3) (hol.or q_3 r_2)) -> hyp_3 : hol.proof (hol.or (hol.and p_1 q_3) r_2) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp r_2 (hol.or q_3 r_2)) => hyp_2 : hol.proof (hol.imp (hol.and p_1 q_3) (hol.or q_3 r_2)) => hyp_3 : hol.proof (hol.or (hol.and p_1 q_3) r_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) r_2 (hol.and p_1 q_3) (hol.or q_3 r_2) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_644 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp r_2 (hol.or q_3 r_2)) -> hyp_2 : hol.proof (hol.imp (hol.and p_1 q_3) (hol.or q_3 r_2)) -> hyp_3 : hol.proof (hol.or (hol.and p_1 q_3) r_2) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp r_2 (hol.or q_3 r_2)) => hyp_2 : hol.proof (hol.imp (hol.and p_1 q_3) (hol.or q_3 r_2)) => hyp_3 : hol.proof (hol.or (hol.and p_1 q_3) r_2) => hol.PROVE_HYP (hol.or (hol.and p_1 q_3) r_2) (hol.or q_3 r_2) (thm_635 r_2 q_3 p_1 hyp_3) (hyp_4 : hol.proof (hol.or (hol.and p_1 q_3) r_2) => thm_643 p_1 r_2 q_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_645 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp r_2 (hol.or q_3 r_2)) -> hyp_2 : hol.proof (hol.or (hol.and p_1 q_3) r_2) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp r_2 (hol.or q_3 r_2)) => hyp_2 : hol.proof (hol.or (hol.and p_1 q_3) r_2) => hol.PROVE_HYP (hol.imp (hol.and p_1 q_3) (hol.or q_3 r_2)) (hol.or q_3 r_2) (thm_445 r_2 q_3 p_1) (hyp_3 : hol.proof (hol.imp (hol.and p_1 q_3) (hol.or q_3 r_2)) => thm_644 p_1 r_2 q_3 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ q) r) ;)

(; dict ;)

def thm_646 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_1 q_3) r_2) -> hol.proof (hol.or q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_1 q_3) r_2) => hol.PROVE_HYP (hol.imp r_2 (hol.or q_3 r_2)) (hol.or q_3 r_2) (thm_642 q_3 r_2) (hyp_2 : hol.proof (hol.imp r_2 (hol.or q_3 r_2)) => thm_645 p_1 r_2 q_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)) ;)

(; dict ;)

def thm_647 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.and p_3 q_1) r_2) -> hol.proof (hol.and (hol.or p_3 r_2) (hol.or q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_3 q_1) r_2) => hol.EQ_MP (hol.or q_1 r_2) (hol.and (hol.or p_3 r_2) (hol.or q_1 r_2)) (thm_641 p_3 r_2 q_1 hyp_1) (thm_646 p_3 r_2 q_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))) ;)

(; dict ;)

def thm_648 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.or (hol.and p_3 q_2) r_1) (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.and p_3 q_2) r_1) => thm_647 q_2 r_1 p_3 hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))) ;)

(; dict ;)

def thm_649 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.and p_3 q_2) r_1) (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.PROP_EXT (hol.or (hol.and p_3 q_2) r_1) (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) (hyp_1 : hol.proof (hol.and (hol.or p_3 r_1) (hol.or q_2 r_1)) => thm_631 q_2 r_1 p_3 (thm_611 q_2 r_1 p_3 hyp_1)) (hyp_1 : hol.proof (hol.or (hol.and p_3 q_2) r_1) => thm_648 r_1 q_2 p_3 (thm_635 r_1 q_2 p_3 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)))) ;)

(; dict ;)

def thm_650 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_2 q_1) r_3) (hol.and (hol.or p_2 r_3) (hol.or q_1 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => thm_649 r_3 q_1 p_2.

(; Theorem: |- (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r))))) ;)

(; dict ;)

def thm_651 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))) (thm_606 q_2 p_1) (thm_650 q_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)))))) ;)

(; dict ;)

def thm_652 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3))))) (thm_603 p_1) (thm_651 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.\/ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool.\/ p) r)) ((Data.Bool.\/ q) r)))))) ;)

(; thm ;)

def thm_653 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))))) :=
  hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.and p_1 q_2) r_3) (hol.and (hol.or p_1 r_3) (hol.or q_2 r_3)))))) thm_600 thm_652.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)))))) ;)

(; dict ;)

def thm_654 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)))))) ;)

(; dict ;)

def thm_655 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))) thm_654 thm_654.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))))))) ;)

(; dict ;)

def thm_656 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))) thm_150 thm_655.

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))))) ;)

(; dict ;)

def thm_657 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))).

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))))) ;)

(; dict ;)

def thm_658 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))) (thm_657 p_1) (thm_657 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)))))) (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)))))) ;)

(; dict ;)

def thm_659 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))) thm_150 (thm_658 p_1).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)))) \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)))) ;)

(; dict ;)

def thm_660 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.and q_1 r_3)) (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.and q_1 r_3)) (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.and q_1 r_3)) (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3))).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)))) \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)))) ;)

(; dict ;)

def thm_661 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.and q_1 r_3)) (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.and q_1 r_3)) (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.and q_1 r_3)) (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.and q_1 r_3)) (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.and q_1 r_3)) (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3))) (thm_660 q_1 p_2) (thm_660 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))))) (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))))) ;)

(; dict ;)

def thm_662 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.and q_1 r_3)) (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.and q_1 r_3)) (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.and q_1 r_3)) (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.and q_1 r_3)) (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3))) thm_150 (thm_661 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)) ;)

(; dict ;)

def thm_663 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) -> hol.proof (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_664 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) -> hol.proof (hol.imp p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.imp p_3 r_1) (hol.imp p_3 q_2) hyp_1.

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_665 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) -> hol.proof (hol.imp p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) => hol.PROVE_HYP (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) (hol.imp p_3 q_2) (thm_663 r_1 q_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) => thm_664 r_1 q_2 p_3 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_666 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.and (hol.imp p_2 q_3) (hol.imp p_2 r_1)) -> hol.proof q_3 :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.and (hol.imp p_2 q_3) (hol.imp p_2 r_1)) => thm_665 r_1 q_3 p_2 hyp_2 (thm_64 p_2 hyp_1).

(; Theorem: |- q ;)

(; dict ;)

def thm_667 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.and (hol.imp p_2 q_3) (hol.imp p_2 r_1)) -> hol.proof q_3 :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.and (hol.imp p_2 q_3) (hol.imp p_2 r_1)) => hol.PROVE_HYP p_2 q_3 (thm_64 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_666 r_1 p_2 q_3 hyp_3 hyp_2).

(; Theorem: |- ((= r) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_668 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)) -> hol.proof (hol.eq hol.bool r_3 (hol.and q_2 r_3)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)) => hol.PROVE_HYP q_2 (hol.eq hol.bool r_3 (hol.and q_2 r_3)) (thm_667 r_3 p_1 q_2 hyp_1 hyp_2) (hyp_3 : hol.proof q_2 => thm_514 q_2 r_3 hyp_3).

(; Theorem: |- ((Data.Bool.==> p) r) ;)

(; dict ;)

def thm_669 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_3 q_1) (hol.imp p_3 r_2)) -> hol.proof (hol.imp p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_3 q_1) (hol.imp p_3 r_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.imp p_3 q_1) (hol.imp p_3 r_2) hyp_1.

(; Theorem: |- ((Data.Bool.==> p) r) ;)

(; dict ;)

def thm_670 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_3 q_1) (hol.imp p_3 r_2)) -> hol.proof (hol.imp p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_3 q_1) (hol.imp p_3 r_2)) => hol.PROVE_HYP (hol.and (hol.imp p_3 q_1) (hol.imp p_3 r_2)) (hol.imp p_3 r_2) (thm_663 r_2 q_1 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp p_3 q_1) (hol.imp p_3 r_2)) => thm_669 q_1 r_2 p_3 hyp_2).

(; Theorem: |- r ;)

(; dict ;)

def thm_671 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3)) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3)) => thm_670 q_1 r_3 p_2 hyp_2 (thm_64 p_2 hyp_1).

(; Theorem: |- r ;)

(; dict ;)

def thm_672 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3)) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3)) => hol.PROVE_HYP p_2 r_3 (thm_64 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_671 q_1 p_2 r_3 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool./\ q) r) ;)

(; dict ;)

def thm_673 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.and (hol.imp p_1 q_3) (hol.imp p_1 r_2)) -> hol.proof (hol.and q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.and (hol.imp p_1 q_3) (hol.imp p_1 r_2)) => hol.EQ_MP r_2 (hol.and q_3 r_2) (thm_668 p_1 q_3 r_2 hyp_1 hyp_2) (thm_672 q_3 p_1 r_2 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_674 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) -> hol.proof (hol.imp p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) => hyp_2 : hol.proof p_3 => thm_673 p_3 r_1 q_2 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))) ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ;)

(; dict ;)

def thm_675 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) (hol.imp p_3 (hol.and q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) => thm_674 r_1 q_2 p_3 hyp_1.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool./\ q) r)) ;)

(; dict ;)

def thm_676 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.and q_2 r_1)) -> hol.proof (hol.imp p_3 (hol.and q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.and q_2 r_1)) => hyp_1.

(; Theorem: |- ((Data.Bool./\ q) r) ;)

(; dict ;)

def thm_677 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.and q_3 r_2)) -> hol.proof (hol.and q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.and q_3 r_2)) => thm_676 r_2 q_3 p_1 hyp_2 (thm_64 p_1 hyp_1).

(; Theorem: |- q ;)

(; dict ;)

def thm_678 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.imp p_2 (hol.and q_3 r_1)) -> hol.proof q_3 :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.imp p_2 (hol.and q_3 r_1)) => hol.PROVE_HYP (hol.and q_3 r_1) q_3 (thm_677 p_2 r_1 q_3 hyp_1 hyp_2) (hyp_3 : hol.proof (hol.and q_3 r_1) => thm_489 r_1 q_3 hyp_3).

(; Theorem: |- q ;)

(; dict ;)

def thm_679 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.imp p_2 (hol.and q_3 r_1)) -> hol.proof q_3 :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.imp p_2 (hol.and q_3 r_1)) => hol.PROVE_HYP p_2 q_3 (thm_64 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_678 r_1 p_2 q_3 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_680 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.and q_2 r_1)) -> hol.proof (hol.imp p_3 q_2) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.and q_2 r_1)) => hyp_2 : hol.proof p_3 => thm_679 r_1 p_3 q_2 hyp_2 hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> p) r)) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))) ;)

(; dict ;)

def thm_681 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 q_1) -> hol.proof (hol.eq hol.bool (hol.imp p_3 r_2) (hol.and (hol.imp p_3 q_1) (hol.imp p_3 r_2))) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 q_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.imp p_3 q_1) (hol.imp p_3 r_2) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> p) r)) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))) ;)

(; dict ;)

def thm_682 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.and q_1 r_2)) -> hol.proof (hol.eq hol.bool (hol.imp p_3 r_2) (hol.and (hol.imp p_3 q_1) (hol.imp p_3 r_2))) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.and q_1 r_2)) => hol.PROVE_HYP (hol.imp p_3 q_1) (hol.eq hol.bool (hol.imp p_3 r_2) (hol.and (hol.imp p_3 q_1) (hol.imp p_3 r_2))) (thm_680 r_2 q_1 p_3 hyp_1) (hyp_2 : hol.proof (hol.imp p_3 q_1) => thm_681 q_1 r_2 p_3 hyp_2).

(; Theorem: |- r ;)

(; dict ;)

def thm_683 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.imp p_2 (hol.and q_1 r_3)) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.imp p_2 (hol.and q_1 r_3)) => hol.PROVE_HYP (hol.and q_1 r_3) r_3 (thm_677 p_2 r_3 q_1 hyp_1 hyp_2) (hyp_3 : hol.proof (hol.and q_1 r_3) => thm_504 q_1 r_3 hyp_3).

(; Theorem: |- r ;)

(; dict ;)

def thm_684 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.imp p_2 (hol.and q_1 r_3)) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.imp p_2 (hol.and q_1 r_3)) => hol.PROVE_HYP p_2 r_3 (thm_64 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_683 q_1 p_2 r_3 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) r) ;)

(; dict ;)

def thm_685 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.and q_1 r_2)) -> hol.proof (hol.imp p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.and q_1 r_2)) => hyp_2 : hol.proof p_3 => thm_684 q_1 p_3 r_2 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)) ;)

(; dict ;)

def thm_686 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.and q_2 r_1)) -> hol.proof (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.and q_2 r_1)) => hol.EQ_MP (hol.imp p_3 r_1) (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) (thm_682 q_2 r_1 p_3 hyp_1) (thm_685 q_2 r_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))) ;)

(; dict ;)

def thm_687 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp p_3 (hol.and q_2 r_1)) (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.and q_2 r_1)) => thm_686 r_1 q_2 p_3 hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))) ;)

(; dict ;)

def thm_688 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_3 (hol.and q_2 r_1)) (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.PROP_EXT (hol.imp p_3 (hol.and q_2 r_1)) (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) (hyp_1 : hol.proof (hol.and (hol.imp p_3 q_2) (hol.imp p_3 r_1)) => thm_675 r_1 q_2 p_3 (thm_663 r_1 q_2 p_3 hyp_1)) (hyp_1 : hol.proof (hol.imp p_3 (hol.and q_2 r_1)) => thm_687 r_1 q_2 p_3 (thm_676 r_1 q_2 p_3 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)))) ;)

(; dict ;)

def thm_689 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_2 (hol.and q_1 r_3)) (hol.and (hol.imp p_2 q_1) (hol.imp p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => thm_688 r_3 q_1 p_2.

(; Theorem: |- (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r))))) ;)

(; dict ;)

def thm_690 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))) (thm_662 q_2 p_1) (thm_689 q_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)))))) ;)

(; dict ;)

def thm_691 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3))))) (thm_659 p_1) (thm_690 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool.==> p) q)) ((Data.Bool.==> p) r)))))) ;)

(; thm ;)

def thm_692 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))))) :=
  hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp p_1 (hol.and q_2 r_3)) (hol.and (hol.imp p_1 q_2) (hol.imp p_1 r_3)))))) thm_656 thm_691.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)))))) ;)

(; dict ;)

def thm_693 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)))))) ;)

(; dict ;)

def thm_694 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))) thm_693 thm_693.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))))))) ;)

(; dict ;)

def thm_695 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))) thm_150 thm_694.

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))))) ;)

(; dict ;)

def thm_696 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))).

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))))) ;)

(; dict ;)

def thm_697 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))) (thm_696 p_1) (thm_696 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)))))) (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)))))) ;)

(; dict ;)

def thm_698 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))) thm_150 (thm_697 p_1).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)))) \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)))) ;)

(; dict ;)

def thm_699 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_2 q_1) r_3) (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_2 q_1) r_3) (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_2 q_1) r_3) (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3))).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)))) \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)))) ;)

(; dict ;)

def thm_700 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_2 q_1) r_3) (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_2 q_1) r_3) (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_2 q_1) r_3) (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_2 q_1) r_3) (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_2 q_1) r_3) (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3))) (thm_699 q_1 p_2) (thm_699 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))))) (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))))) ;)

(; dict ;)

def thm_701 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_2 q_1) r_3) (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_2 q_1) r_3) (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_2 q_1) r_3) (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_2 q_1) r_3) (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3))) thm_150 (thm_700 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)) ;)

(; dict ;)

def thm_702 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_3 r_2) (hol.imp q_1 r_2)) -> hol.proof (hol.and (hol.imp p_3 r_2) (hol.imp q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_3 r_2) (hol.imp q_1 r_2)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) r) ;)

(; dict ;)

def thm_703 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_1 r_2) (hol.imp q_3 r_2)) -> hol.proof (hol.imp q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_1 r_2) (hol.imp q_3 r_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.imp p_1 r_2) (hol.imp q_3 r_2) hyp_1.

(; Theorem: |- ((Data.Bool.==> q) r) ;)

(; dict ;)

def thm_704 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_1 r_2) (hol.imp q_3 r_2)) -> hol.proof (hol.imp q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_1 r_2) (hol.imp q_3 r_2)) => hol.PROVE_HYP (hol.and (hol.imp p_1 r_2) (hol.imp q_3 r_2)) (hol.imp q_3 r_2) (thm_702 q_3 r_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp p_1 r_2) (hol.imp q_3 r_2)) => thm_703 p_1 r_2 q_3 hyp_2).

(; Theorem: |- r ;)

(; dict ;)

def thm_705 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof q_2 -> hyp_2 : hol.proof (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)) -> hol.proof r_3 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof q_2 => hyp_2 : hol.proof (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)) => thm_704 p_1 r_3 q_2 hyp_2 (thm_65 q_2 hyp_1).

(; Theorem: |- r ;)

(; dict ;)

def thm_706 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof q_2 -> hyp_2 : hol.proof (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)) -> hol.proof r_3 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof q_2 => hyp_2 : hol.proof (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)) => hol.PROVE_HYP q_2 r_3 (thm_65 q_2 hyp_1) (hyp_3 : hol.proof q_2 => thm_705 p_1 q_2 r_3 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) r) ;)

(; dict ;)

def thm_707 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_3 r_2) (hol.imp q_1 r_2)) -> hol.proof (hol.imp p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_3 r_2) (hol.imp q_1 r_2)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.imp q_1 r_2) (hol.imp p_3 r_2) hyp_1.

(; Theorem: |- ((Data.Bool.==> p) r) ;)

(; dict ;)

def thm_708 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_3 r_2) (hol.imp q_1 r_2)) -> hol.proof (hol.imp p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_3 r_2) (hol.imp q_1 r_2)) => hol.PROVE_HYP (hol.and (hol.imp p_3 r_2) (hol.imp q_1 r_2)) (hol.imp p_3 r_2) (thm_702 q_1 r_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp p_3 r_2) (hol.imp q_1 r_2)) => thm_707 q_1 r_2 p_3 hyp_2).

(; Theorem: |- r ;)

(; dict ;)

def thm_709 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3)) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3)) => thm_708 q_1 r_3 p_2 hyp_2 (thm_64 p_2 hyp_1).

(; Theorem: |- r ;)

(; dict ;)

def thm_710 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3)) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3)) => hol.PROVE_HYP p_2 r_3 (thm_64 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_709 q_1 p_2 r_3 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_711 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p_2 q_1) -> hol.proof (hol.or p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_2 q_1) => hyp_1.

(; Theorem: |- r ;)

(; dict ;)

def thm_712 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_2 r_3) -> hyp_2 : hol.proof (hol.imp q_1 r_3) -> hyp_3 : hol.proof (hol.or p_2 q_1) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_2 r_3) => hyp_2 : hol.proof (hol.imp q_1 r_3) => hyp_3 : hol.proof (hol.or p_2 q_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) q_1 p_2 r_3 hyp_1 hyp_2 hyp_3.

(; Theorem: |- r ;)

(; dict ;)

def thm_713 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_2 r_3) -> hyp_2 : hol.proof (hol.imp q_1 r_3) -> hyp_3 : hol.proof (hol.or p_2 q_1) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_2 r_3) => hyp_2 : hol.proof (hol.imp q_1 r_3) => hyp_3 : hol.proof (hol.or p_2 q_1) => hol.PROVE_HYP (hol.or p_2 q_1) r_3 (thm_711 q_1 p_2 hyp_3) (hyp_4 : hol.proof (hol.or p_2 q_1) => thm_712 q_1 p_2 r_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- r ;)

(; dict ;)

def thm_714 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3)) -> hyp_2 : hol.proof (hol.imp q_1 r_3) -> hyp_3 : hol.proof (hol.or p_2 q_1) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3)) => hyp_2 : hol.proof (hol.imp q_1 r_3) => hyp_3 : hol.proof (hol.or p_2 q_1) => hol.PROVE_HYP (hol.imp p_2 r_3) r_3 (hyp_4 : hol.proof p_2 => thm_710 q_1 p_2 r_3 hyp_4 hyp_1) (hyp_4 : hol.proof (hol.imp p_2 r_3) => thm_713 q_1 p_2 r_3 hyp_4 hyp_2 hyp_3).

(; Theorem: |- r ;)

(; dict ;)

def thm_715 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3)) -> hyp_2 : hol.proof (hol.or p_2 q_1) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3)) => hyp_2 : hol.proof (hol.or p_2 q_1) => hol.PROVE_HYP (hol.imp q_1 r_3) r_3 (hyp_3 : hol.proof q_1 => thm_706 p_2 q_1 r_3 hyp_3 hyp_1) (hyp_3 : hol.proof (hol.imp q_1 r_3) => thm_714 q_1 p_2 r_3 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ p) q)) r) ;)

(; dict ;)

def thm_716 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_3 r_1) (hol.imp q_2 r_1)) -> hol.proof (hol.imp (hol.or p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_3 r_1) (hol.imp q_2 r_1)) => hyp_2 : hol.proof (hol.or p_3 q_2) => thm_715 q_2 p_3 r_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ;)

(; dict ;)

def thm_717 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.imp p_3 r_2) (hol.imp q_1 r_2)) (hol.imp (hol.or p_3 q_1) r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_3 r_2) (hol.imp q_1 r_2)) => thm_716 r_2 q_1 p_3 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ p) q)) r) ;)

(; dict ;)

def thm_718 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.or p_3 q_2) r_1) -> hol.proof (hol.imp (hol.or p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.or p_3 q_2) r_1) => hyp_1.

(; Theorem: |- r ;)

(; dict ;)

def thm_719 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.or p_2 q_1) r_3) -> hyp_2 : hol.proof (hol.or p_2 q_1) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.or p_2 q_1) r_3) => hyp_2 : hol.proof (hol.or p_2 q_1) => thm_718 r_3 q_1 p_2 hyp_1 (thm_711 q_1 p_2 hyp_2).

(; Theorem: |- r ;)

(; dict ;)

def thm_720 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.imp (hol.or p_2 q_1) r_3) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.imp (hol.or p_2 q_1) r_3) => hol.PROVE_HYP (hol.or p_2 q_1) r_3 (thm_494 q_1 p_2 hyp_1) (hyp_3 : hol.proof (hol.or p_2 q_1) => thm_719 q_1 p_2 r_3 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> p) r) ;)

(; dict ;)

def thm_721 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.or p_3 q_1) r_2) -> hol.proof (hol.imp p_3 r_2) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.or p_3 q_1) r_2) => hyp_2 : hol.proof p_3 => thm_720 q_1 p_3 r_2 hyp_2 hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> q) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))) ;)

(; dict ;)

def thm_722 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_1 r_2) -> hol.proof (hol.eq hol.bool (hol.imp q_3 r_2) (hol.and (hol.imp p_1 r_2) (hol.imp q_3 r_2))) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_1 r_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.imp p_1 r_2) (hol.imp q_3 r_2) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> q) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))) ;)

(; dict ;)

def thm_723 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.or p_1 q_3) r_2) -> hol.proof (hol.eq hol.bool (hol.imp q_3 r_2) (hol.and (hol.imp p_1 r_2) (hol.imp q_3 r_2))) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.or p_1 q_3) r_2) => hol.PROVE_HYP (hol.imp p_1 r_2) (hol.eq hol.bool (hol.imp q_3 r_2) (hol.and (hol.imp p_1 r_2) (hol.imp q_3 r_2))) (thm_721 q_3 r_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.imp p_1 r_2) => thm_722 p_1 r_2 q_3 hyp_2).

(; Theorem: |- r ;)

(; dict ;)

def thm_724 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof q_2 -> hyp_2 : hol.proof (hol.imp (hol.or p_1 q_2) r_3) -> hol.proof r_3 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof q_2 => hyp_2 : hol.proof (hol.imp (hol.or p_1 q_2) r_3) => hol.PROVE_HYP (hol.or p_1 q_2) r_3 (thm_491 q_2 p_1 hyp_1) (hyp_3 : hol.proof (hol.or p_1 q_2) => thm_719 q_2 p_1 r_3 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> q) r) ;)

(; dict ;)

def thm_725 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.or p_1 q_3) r_2) -> hol.proof (hol.imp q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.or p_1 q_3) r_2) => hyp_2 : hol.proof q_3 => thm_724 p_1 q_3 r_2 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)) ;)

(; dict ;)

def thm_726 : q_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.or p_3 q_1) r_2) -> hol.proof (hol.and (hol.imp p_3 r_2) (hol.imp q_1 r_2)) :=
  q_1 : hol.term hol.bool => r_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.or p_3 q_1) r_2) => hol.EQ_MP (hol.imp q_1 r_2) (hol.and (hol.imp p_3 r_2) (hol.imp q_1 r_2)) (thm_723 p_3 r_2 q_1 hyp_1) (thm_725 p_3 r_2 q_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))) ;)

(; dict ;)

def thm_727 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp (hol.or p_3 q_2) r_1) (hol.and (hol.imp p_3 r_1) (hol.imp q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.or p_3 q_2) r_1) => thm_726 q_2 r_1 p_3 hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))) ;)

(; dict ;)

def thm_728 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.or p_3 q_2) r_1) (hol.and (hol.imp p_3 r_1) (hol.imp q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.PROP_EXT (hol.imp (hol.or p_3 q_2) r_1) (hol.and (hol.imp p_3 r_1) (hol.imp q_2 r_1)) (hyp_1 : hol.proof (hol.and (hol.imp p_3 r_1) (hol.imp q_2 r_1)) => thm_717 q_2 r_1 p_3 (thm_702 q_2 r_1 p_3 hyp_1)) (hyp_1 : hol.proof (hol.imp (hol.or p_3 q_2) r_1) => thm_727 r_1 q_2 p_3 (thm_718 r_1 q_2 p_3 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)))) ;)

(; dict ;)

def thm_729 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_2 q_1) r_3) (hol.and (hol.imp p_2 r_3) (hol.imp q_1 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => thm_728 r_3 q_1 p_2.

(; Theorem: |- (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r))))) ;)

(; dict ;)

def thm_730 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))) (thm_701 q_2 p_1) (thm_729 q_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)))))) ;)

(; dict ;)

def thm_731 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3))))) (thm_698 p_1) (thm_730 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool.==> ((Data.Bool.\/ p) q)) r)) ((Data.Bool./\ ((Data.Bool.==> p) r)) ((Data.Bool.==> q) r)))))) ;)

(; thm ;)

def thm_732 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))))) :=
  hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.or p_1 q_2) r_3) (hol.and (hol.imp p_1 r_3) (hol.imp q_2 r_3)))))) thm_695 thm_731.

(; Theorem: |- ((= \lambda t. ((= (Data.Bool.! \lambda x. t)) t)) \lambda t. ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_733 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= \lambda t. ((= (Data.Bool.! \lambda x. t)) t)) \lambda t. ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_734 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (thm_733 A) (thm_733 A).

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda x. t)) t))) (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda x. t)) t))) ;)

(; dict ;)

def thm_735 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) thm_150 (thm_734 A).

(; Theorem: |- ((= \lambda x. t) \lambda x. t) ;)

(; dict ;)

def thm_736 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => t_1) (x_2 : hol.term A => t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => t_1).

(; Theorem: |- ((= \lambda x. t) \lambda x. t) ;)

(; dict ;)

def thm_737 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => t_1) (x_2 : hol.term A => t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => t_1) (x_2 : hol.term A => t_1) (x_2 : hol.term A => t_1) (thm_736 A t_1) (thm_736 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) (Data.Bool.! \lambda x. t)) ;)

(; dict ;)

def thm_738 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) (hol.forall A (x_2 : hol.term A => t_1))) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => t_1) (x_2 : hol.term A => t_1) (thm_7 A) (thm_737 A t_1).

(; Theorem: |- (Data.Bool.! \lambda x. t) ;)

(; dict ;)

def thm_739 : A : hol.type -> t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.forall A (x_2 : hol.term A => t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => x_2 : hol.term A => thm_138 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> t) (Data.Bool.! \lambda x. t)) ;)

(; dict ;)

def thm_740 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 (hol.forall A (x_2 : hol.term A => t_1))) :=
  A : hol.type => t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.EQ_MP (hol.forall A (x_2 : hol.term A => t_1)) (hol.forall A (x_2 : hol.term A => t_1)) (thm_738 A t_1) (thm_739 A t_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. t) ;)

(; dict ;)

def thm_741 : A : hol.type -> t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => t_1)) -> hol.proof (hol.forall A (x_2 : hol.term A => t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => t_1)) => hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_742 : A : hol.type -> t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => t_1)) -> hol.proof t_1 :=
  A : hol.type => t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => t_1)) => thm_741 A t_1 hyp_1 (hol.witness A).

(; Theorem: |- t ;)

(; dict ;)

def thm_743 : A : hol.type -> t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => t_1)) -> hol.proof t_1 :=
  A : hol.type => t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => t_1)) => hol.PROVE_HYP (hol.forall A (x_2 : hol.term A => t_1)) t_1 (thm_741 A t_1 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_2 : hol.term A => t_1)) => thm_742 A t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_744 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => t_1)) => thm_743 A t_1 hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_745 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.PROP_EXT (hol.forall A (x_2 : hol.term A => t_1)) t_1 (hyp_1 : hol.proof t_1 => thm_740 A t_1 (thm_138 t_1 hyp_1)) (hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => t_1)) => thm_744 A t_1 (thm_741 A t_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_746 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_745 A t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; thm ;)

def thm_747 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) (thm_735 A) (thm_746 A).

(; Theorem: |- ((= \lambda t. ((= (Data.Bool.? \lambda x. t)) t)) \lambda t. ((= (Data.Bool.? \lambda x. t)) t)) ;)

(; dict ;)

def thm_748 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= \lambda t. ((= (Data.Bool.? \lambda x. t)) t)) \lambda t. ((= (Data.Bool.? \lambda x. t)) t)) ;)

(; dict ;)

def thm_749 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (thm_748 A) (thm_748 A).

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= (Data.Bool.? \lambda x. t)) t))) (Data.Bool.! \lambda t. ((= (Data.Bool.? \lambda x. t)) t))) ;)

(; dict ;)

def thm_750 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) thm_150 (thm_749 A).

(; Theorem: |- ((= (\lambda x. t _16)) t) ;)

(; dict ;)

def thm_751 : A : hol.type -> __16_1 : hol.term A -> t_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => t_2) __16_1) t_2) :=
  A : hol.type => __16_1 : hol.term A => t_2 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_3 : hol.term A => t_2) __16_1.

(; Theorem: |- ((= t) (\lambda x. t _16)) ;)

(; dict ;)

def thm_752 : A : hol.type -> __16_1 : hol.term A -> t_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_2 ((x_3 : hol.term A => t_2) __16_1)) :=
  A : hol.type => __16_1 : hol.term A => t_2 : hol.term hol.bool => hol.SYM hol.bool ((x_3 : hol.term A => t_2) __16_1) t_2 (thm_751 A __16_1 t_2).

(; Theorem: |- (\lambda x. t _16) ;)

(; dict ;)

def thm_753 : A : hol.type -> __16_1 : hol.term A -> t_2 : hol.term hol.bool -> hyp_1 : hol.proof t_2 -> hol.proof ((x_3 : hol.term A => t_2) __16_1) :=
  A : hol.type => __16_1 : hol.term A => t_2 : hol.term hol.bool => hyp_1 : hol.proof t_2 => hol.EQ_MP t_2 ((x_3 : hol.term A => t_2) __16_1) (thm_752 A __16_1 t_2) (thm_138 t_2 hyp_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_754 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_755 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_756 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_754 A P_1) (thm_755 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_757 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_758 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_3 A) (thm_757 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_759 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_756 A P_1) (thm_758 A P_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_760 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_759 A P_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_761 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_762 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_761 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_763 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_764 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_762 A Q_3 x_1 P_2 hyp_2 (thm_763 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_765 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_764 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_766 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_765 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_767 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_760 A P_2) (thm_766 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. t) ;)

(; dict ;)

def thm_768 : A : hol.type -> __16_1 : hol.term A -> t_2 : hol.term hol.bool -> hyp_1 : hol.proof ((x_3 : hol.term A => t_2) __16_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => t_2)) :=
  A : hol.type => __16_1 : hol.term A => t_2 : hol.term hol.bool => hyp_1 : hol.proof ((x_3 : hol.term A => t_2) __16_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A __16_1 (x_3 : hol.term A => t_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. t) ;)

(; dict ;)

def thm_769 : A : hol.type -> t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROVE_HYP ((x_2 : hol.term A => t_1) (hol.witness A)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) (thm_753 A (hol.witness A) t_1 hyp_1) (hyp_2 : hol.proof ((x_2 : hol.term A => t_1) (hol.witness A)) => thm_768 A (hol.witness A) t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> t) (Data.Bool.? \lambda x. t)) ;)

(; dict ;)

def thm_770 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1))) :=
  A : hol.type => t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => thm_769 A t_1 hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_771 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_772 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) => hol.EQ_MP p_1 q_2 (thm_771 q_2 p_1 hyp_2) (thm_64 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_773 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_2 : hol.proof p_2 => thm_772 p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= p) q)) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_774 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 q_1) (hol.imp p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => thm_773 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_775 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_774 q_1 p_2) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_776 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_775 A P_1 (thm_759 A P_1).

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_777 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)) ;)

(; dict ;)

def thm_778 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_776 A P_1 (thm_777 A P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_779 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_778 A P_2 hyp_1 Q_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_780 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof Q_2 :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_779 A Q_2 P_1 hyp_2 (thm_761 A Q_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) Q) ;)

(; dict ;)

def thm_781 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_780 A P_2 Q_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) ((Data.Bool.==> (Data.Bool.? P)) Q)) ;)

(; dict ;)

def thm_782 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => thm_781 A Q_1 P_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. t x)) t))) ((Data.Bool.==> (Data.Bool.? \lambda x. t)) t)) ;)

(; dict ;)

def thm_783 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => t_1) x_2) t_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A t_1 (x_2 : hol.term A => t_1).

(; Theorem: |- ((= (\lambda x. t x)) t) ;)

(; dict ;)

def thm_784 : A : hol.type -> x_1 : hol.term A -> t_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => t_2) x_1) t_2) :=
  A : hol.type => x_1 : hol.term A => t_2 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_3 : hol.term A => t_2) x_1.

(; Theorem: |- (\lambda x. t x) ;)

(; dict ;)

def thm_785 : A : hol.type -> x_1 : hol.term A -> t_2 : hol.term hol.bool -> hyp_1 : hol.proof ((x_3 : hol.term A => t_2) x_1) -> hol.proof ((x_3 : hol.term A => t_2) x_1) :=
  A : hol.type => x_1 : hol.term A => t_2 : hol.term hol.bool => hyp_1 : hol.proof ((x_3 : hol.term A => t_2) x_1) => hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_786 : A : hol.type -> x_1 : hol.term A -> t_2 : hol.term hol.bool -> hyp_1 : hol.proof ((x_3 : hol.term A => t_2) x_1) -> hol.proof t_2 :=
  A : hol.type => x_1 : hol.term A => t_2 : hol.term hol.bool => hyp_1 : hol.proof ((x_3 : hol.term A => t_2) x_1) => hol.EQ_MP ((x_3 : hol.term A => t_2) x_1) t_2 (thm_784 A x_1 t_2) (thm_785 A x_1 t_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. t x)) t) ;)

(; dict ;)

def thm_787 : A : hol.type -> x_1 : hol.term A -> t_2 : hol.term hol.bool -> hol.proof (hol.imp ((x_3 : hol.term A => t_2) x_1) t_2) :=
  A : hol.type => x_1 : hol.term A => t_2 : hol.term hol.bool => hyp_1 : hol.proof ((x_3 : hol.term A => t_2) x_1) => thm_376 t_2 (thm_786 A x_1 t_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. t x)) t)) ;)

(; dict ;)

def thm_788 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => t_1) x_2) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => x_2 : hol.term A => thm_787 A x_2 t_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. t)) t) ;)

(; dict ;)

def thm_789 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_783 A t_1 (thm_788 A t_1).

(; Theorem: |- (Data.Bool.? \lambda x. t) ;)

(; dict ;)

def thm_790 : A : hol.type -> t_1 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) => hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_791 : A : hol.type -> t_1 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) -> hol.proof t_1 :=
  A : hol.type => t_1 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) => thm_789 A t_1 (thm_790 A t_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. t)) t) ;)

(; dict ;)

def thm_792 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.PROP_EXT (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1 (hyp_1 : hol.proof t_1 => thm_770 A t_1 (thm_138 t_1 hyp_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) => thm_791 A t_1 hyp_2) (thm_790 A t_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.? \lambda x. t)) t)) ;)

(; dict ;)

def thm_793 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_792 A t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.? \lambda x. t)) t)) ;)

(; thm ;)

def thm_794 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)) (thm_750 A) (thm_793 A).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b)))) \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b)))) ;)

(; dict ;)

def thm_795 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))) (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b)))) \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b)))) ;)

(; dict ;)

def thm_796 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))) (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))) (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))) (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))) thm_795 thm_795.

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b))))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b))))) ;)

(; dict ;)

def thm_797 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)))) (hol.forall hol.bool (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))) (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))) thm_150 thm_796.

(; Theorem: |- ((= \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b))) \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b))) ;)

(; dict ;)

def thm_798 : a_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)) (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))) :=
  a_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)).

(; Theorem: |- ((= \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b))) \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b))) ;)

(; dict ;)

def thm_799 : a_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)) (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))) :=
  a_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)) (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)) (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)) (thm_798 a_1) (thm_798 a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b)))) (Data.Bool.! \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b)))) ;)

(; dict ;)

def thm_800 : a_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))) (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)))) :=
  a_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)) (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)) thm_150 (thm_799 a_1).

(; Theorem: |- a ;)

(; dict ;)

def thm_801 : a_1 : hol.term hol.bool -> hyp_1 : hol.proof a_1 -> hol.proof a_1 :=
  a_1 : hol.term hol.bool => hyp_1 : hol.proof a_1 => hyp_1.

(; Theorem: |- ((Data.Bool.==> a) b) ;)

(; dict ;)

def thm_802 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp a_2 b_1) -> hol.proof (hol.imp a_2 b_1) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp a_2 b_1) => hyp_1.

(; Theorem: |- b ;)

(; dict ;)

def thm_803 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof a_1 -> hyp_2 : hol.proof (hol.imp a_1 b_2) -> hol.proof b_2 :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof a_1 => hyp_2 : hol.proof (hol.imp a_1 b_2) => thm_802 b_2 a_1 hyp_2 (thm_801 a_1 hyp_1).

(; Theorem: |- b ;)

(; dict ;)

def thm_804 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof a_1 -> hyp_2 : hol.proof (hol.imp a_1 b_2) -> hol.proof b_2 :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof a_1 => hyp_2 : hol.proof (hol.imp a_1 b_2) => hol.PROVE_HYP a_1 b_2 (thm_801 a_1 hyp_1) (hyp_3 : hol.proof a_1 => thm_803 a_1 b_2 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> a) b)) b) ;)

(; dict ;)

def thm_805 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof a_2 -> hol.proof (hol.imp (hol.imp a_2 b_1) b_1) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof a_2 => hyp_2 : hol.proof (hol.imp a_2 b_1) => thm_804 a_2 b_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> b) a)) ((Data.Bool.==> ((Data.Bool.==> a) b)) b)) ;)

(; dict ;)

def thm_806 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof a_1 -> hol.proof (hol.imp (hol.imp b_2 a_1) (hol.imp (hol.imp a_1 b_2) b_2)) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof a_1 => hyp_2 : hol.proof (hol.imp b_2 a_1) => thm_805 b_2 a_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b)) ;)

(; dict ;)

def thm_807 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool a_2 b_1) (hol.imp a_2 b_1)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_774 q_1 p_2) b_1 a_2.

(; Theorem: |- ((= a) b) ;)

(; dict ;)

def thm_808 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 b_1) -> hol.proof (hol.eq hol.bool a_2 b_1) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 b_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> a) b) ;)

(; dict ;)

def thm_809 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 b_1) -> hol.proof (hol.imp a_2 b_1) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 b_1) => thm_807 b_1 a_2 (thm_808 b_1 a_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> b) a)) ((Data.Bool./\ ((Data.Bool.==> a) b)) ((Data.Bool.==> b) a))) ;)

(; dict ;)

def thm_810 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp a_1 b_2) -> hol.proof (hol.eq hol.bool (hol.imp b_2 a_1) (hol.and (hol.imp a_1 b_2) (hol.imp b_2 a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp a_1 b_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.imp a_1 b_2) (hol.imp b_2 a_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> b) a)) ((Data.Bool./\ ((Data.Bool.==> a) b)) ((Data.Bool.==> b) a))) ;)

(; dict ;)

def thm_811 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 b_2) -> hol.proof (hol.eq hol.bool (hol.imp b_2 a_1) (hol.and (hol.imp a_1 b_2) (hol.imp b_2 a_1))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 b_2) => hol.PROVE_HYP (hol.imp a_1 b_2) (hol.eq hol.bool (hol.imp b_2 a_1) (hol.and (hol.imp a_1 b_2) (hol.imp b_2 a_1))) (thm_809 b_2 a_1 hyp_1) (hyp_2 : hol.proof (hol.imp a_1 b_2) => thm_810 a_1 b_2 hyp_2).

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_812 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 q_2) => hol.SYM hol.bool p_1 q_2 (thm_771 q_2 p_1 hyp_1).

(; Theorem: |- p ;)

(; dict ;)

def thm_813 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hyp_2 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_2 : hol.proof (hol.eq hol.bool p_2 q_1) => hol.EQ_MP q_1 p_2 (thm_812 p_2 q_1 hyp_2) (thm_65 q_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_814 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 q_2) => hyp_2 : hol.proof q_2 => thm_813 q_2 p_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= p) q)) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_815 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 q_1) (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => thm_814 p_2 q_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> b) a)) ;)

(; dict ;)

def thm_816 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool a_2 b_1) (hol.imp b_1 a_2)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_815 q_1 p_2) b_1 a_2.

(; Theorem: |- ((Data.Bool.==> b) a) ;)

(; dict ;)

def thm_817 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 b_2) -> hol.proof (hol.imp b_2 a_1) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 b_2) => thm_816 b_2 a_1 (thm_808 b_2 a_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> a) b)) ((Data.Bool.==> b) a)) ;)

(; dict ;)

def thm_818 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_2 b_1) -> hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_2 b_1) => hol.EQ_MP (hol.imp b_1 a_2) (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) (thm_811 a_2 b_1 hyp_1) (thm_817 a_2 b_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> b) a) ;)

(; dict ;)

def thm_819 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp a_1 b_2) (hol.imp b_2 a_1)) -> hol.proof (hol.imp b_2 a_1) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp a_1 b_2) (hol.imp b_2 a_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.imp a_1 b_2) (hol.imp b_2 a_1) hyp_1.

(; Theorem: |- ((Data.Bool.==> b) a) ;)

(; dict ;)

def thm_820 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool a_1 b_2) -> hol.proof (hol.imp b_2 a_1) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 b_2) => hol.PROVE_HYP (hol.and (hol.imp a_1 b_2) (hol.imp b_2 a_1)) (hol.imp b_2 a_1) (thm_818 b_2 a_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp a_1 b_2) (hol.imp b_2 a_1)) => thm_819 a_1 b_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> a) b)) b) ;)

(; dict ;)

def thm_821 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof a_2 -> hyp_2 : hol.proof (hol.eq hol.bool a_2 b_1) -> hol.proof (hol.imp (hol.imp a_2 b_1) b_1) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof a_2 => hyp_2 : hol.proof (hol.eq hol.bool a_2 b_1) => thm_806 a_2 b_1 hyp_1 (thm_820 a_2 b_1 hyp_2).

(; Theorem: |- b ;)

(; dict ;)

def thm_822 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof a_1 -> hyp_2 : hol.proof (hol.eq hol.bool a_1 b_2) -> hol.proof b_2 :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof a_1 => hyp_2 : hol.proof (hol.eq hol.bool a_1 b_2) => thm_821 b_2 a_1 hyp_1 hyp_2 (thm_809 b_2 a_1 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b))) ;)

(; dict ;)

def thm_823 : a_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))) :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool a_1 b_2) => hyp_2 : hol.proof a_1 => thm_822 a_1 b_2 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b)))) ;)

(; dict ;)

def thm_824 : hol.proof (hol.forall hol.bool (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)))) :=
  a_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))) (hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2))) (thm_800 a_1) (thm_823 a_1).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((Data.Bool.==> ((= a) b)) ((Data.Bool.==> a) b)))) ;)

(; thm ;)

def thm_825 : hol.proof (hol.forall hol.bool (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)))) :=
  hol.EQ_MP (hol.forall hol.bool (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)))) (hol.forall hol.bool (a_1 : hol.term hol.bool => hol.forall hol.bool (b_2 : hol.term hol.bool => hol.imp (hol.eq hol.bool a_1 b_2) (hol.imp a_1 b_2)))) thm_797 thm_824.

(; Theorem: |- ((= \lambda t. ((= ((= Data.Bool.T) t)) t)) \lambda t. ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_826 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1).

(; Theorem: |- ((= \lambda t. ((= ((= Data.Bool.T) t)) t)) \lambda t. ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_827 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) thm_826 thm_826.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((= Data.Bool.T) t)) t))) (Data.Bool.! \lambda t. ((= ((= Data.Bool.T) t)) t))) ;)

(; dict ;)

def thm_828 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) thm_150 thm_827.

(; Theorem: |- ((Data.Bool.==> t) Data.Bool.T) ;)

(; dict ;)

def thm_829 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => thm_1.

(; Theorem: |- Data.Bool.T ;)

(; dict ;)

def thm_830 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof hol.true :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => thm_829 t_1 (thm_138 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> Data.Bool.T) t) ;)

(; dict ;)

def thm_831 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.imp hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof hol.true => thm_138 t_1 hyp_1.

(; Theorem: |- Data.Bool.T ;)

(; dict ;)

def thm_832 : hyp_1 : hol.proof hol.true -> hol.proof hol.true :=
  hyp_1 : hol.proof hol.true => hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_833 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hyp_2 : hol.proof hol.true -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof hol.true => thm_831 t_1 hyp_1 (thm_832 hyp_2).

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_834 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT hol.true t_1 (hyp_2 : hol.proof t_1 => thm_830 t_1 hyp_2) (hyp_2 : hol.proof hol.true => thm_833 t_1 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> t) ((= Data.Bool.T) t)) ;)

(; dict ;)

def thm_835 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 (hol.eq hol.bool hol.true t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => thm_834 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.T) t) ;)

(; dict ;)

def thm_836 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp hol.true t_1) -> hol.proof (hol.imp hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp hol.true t_1) => hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_837 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.true -> hyp_2 : hol.proof (hol.imp hol.true t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.true => hyp_2 : hol.proof (hol.imp hol.true t_1) => thm_836 t_1 hyp_2 (thm_832 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_838 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp hol.true t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp hol.true t_1) => hol.PROVE_HYP hol.true t_1 thm_1 (hyp_2 : hol.proof hol.true => thm_837 t_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_839 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp hol.true t_1) => thm_838 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> t) Data.Bool.T)) ((Data.Bool.==> ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_840 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp t_1 hol.true) (hol.imp (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 hol.true) => thm_839 t_1.

(; Theorem: |- ((Data.Bool.==> ((= Data.Bool.T) t)) ((Data.Bool.==> Data.Bool.T) t)) ;)

(; dict ;)

def thm_841 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool hol.true t_1) (hol.imp hol.true t_1)) :=
  t_1 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_774 q_1 p_2) t_1 hol.true.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_842 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.T) t) ;)

(; dict ;)

def thm_843 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) -> hol.proof (hol.imp hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) => thm_841 t_1 (thm_842 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) t)) ((Data.Bool.==> t) Data.Bool.T))) ;)

(; dict ;)

def thm_844 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp hol.true t_1) -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) (hol.and (hol.imp hol.true t_1) (hol.imp t_1 hol.true))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp hol.true t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.imp hol.true t_1) (hol.imp t_1 hol.true) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) t)) ((Data.Bool.==> t) Data.Bool.T))) ;)

(; dict ;)

def thm_845 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) (hol.and (hol.imp hol.true t_1) (hol.imp t_1 hol.true))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) => hol.PROVE_HYP (hol.imp hol.true t_1) (hol.eq hol.bool (hol.imp t_1 hol.true) (hol.and (hol.imp hol.true t_1) (hol.imp t_1 hol.true))) (thm_843 t_1 hyp_1) (hyp_2 : hol.proof (hol.imp hol.true t_1) => thm_844 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= Data.Bool.T) t)) ((Data.Bool.==> t) Data.Bool.T)) ;)

(; dict ;)

def thm_846 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool hol.true t_1) (hol.imp t_1 hol.true)) :=
  t_1 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_815 q_1 p_2) t_1 hol.true.

(; Theorem: |- ((Data.Bool.==> t) Data.Bool.T) ;)

(; dict ;)

def thm_847 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) -> hol.proof (hol.imp t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) => thm_846 t_1 (thm_842 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) t)) ((Data.Bool.==> t) Data.Bool.T)) ;)

(; dict ;)

def thm_848 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) -> hol.proof (hol.and (hol.imp hol.true t_1) (hol.imp t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) => hol.EQ_MP (hol.imp t_1 hol.true) (hol.and (hol.imp hol.true t_1) (hol.imp t_1 hol.true)) (thm_845 t_1 hyp_1) (thm_847 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> t) Data.Bool.T) ;)

(; dict ;)

def thm_849 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp hol.true t_1) (hol.imp t_1 hol.true)) -> hol.proof (hol.imp t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp hol.true t_1) (hol.imp t_1 hol.true)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.imp hol.true t_1) (hol.imp t_1 hol.true) hyp_1.

(; Theorem: |- ((Data.Bool.==> t) Data.Bool.T) ;)

(; dict ;)

def thm_850 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) -> hol.proof (hol.imp t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) => hol.PROVE_HYP (hol.and (hol.imp hol.true t_1) (hol.imp t_1 hol.true)) (hol.imp t_1 hol.true) (thm_848 t_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp hol.true t_1) (hol.imp t_1 hol.true)) => thm_849 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_851 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) -> hol.proof (hol.imp (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) => thm_840 t_1 (thm_850 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_852 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) => thm_851 t_1 hyp_1 (thm_843 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_853 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) => thm_852 t_1 hyp_1.

(; Theorem: |- ((= ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_854 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.eq hol.bool hol.true t_1) t_1 (hyp_1 : hol.proof t_1 => thm_835 t_1 (thm_138 t_1 hyp_1)) (hyp_1 : hol.proof (hol.eq hol.bool hol.true t_1) => thm_853 t_1 (thm_842 t_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_855 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => thm_854 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((= Data.Bool.T) t)) t)) ;)

(; thm ;)

def thm_856 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) thm_828 thm_855.

(; Theorem: |- ((= \lambda t. ((= ((= t) Data.Bool.T)) t)) \lambda t. ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_857 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1).

(; Theorem: |- ((= \lambda t. ((= ((= t) Data.Bool.T)) t)) \lambda t. ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_858 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) thm_857 thm_857.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((= t) Data.Bool.T)) t))) (Data.Bool.! \lambda t. ((= ((= t) Data.Bool.T)) t))) ;)

(; dict ;)

def thm_859 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) thm_150 thm_858.

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_860 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.eq hol.bool t_1 hol.true) t_1 (hyp_1 : hol.proof t_1 => thm_139 t_1 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_137 t_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_861 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => thm_860 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((= t) Data.Bool.T)) t)) ;)

(; thm ;)

def thm_862 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) thm_859 thm_861.

(; Theorem: |- ((= \lambda t. ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) \lambda t. ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_863 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)).

(; Theorem: |- ((= \lambda t. ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) \lambda t. ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_864 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) thm_863 thm_863.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)))) (Data.Bool.! \lambda t. ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_865 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) thm_150 thm_864.

(; Theorem: |- ((= (= (Data.Bool.~ t))) (= (Data.Bool.~ t))) ;)

(; dict ;)

def thm_866 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not t_1)) (hol.eq hol.bool (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not t_1)).

(; Theorem: |- ((= (\lambda p. ((Data.Bool.==> p) Data.Bool.F) t)) ((Data.Bool.==> t) Data.Bool.F)) ;)

(; dict ;)

def thm_867 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) t_1) (hol.imp t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) t_1.

(; Theorem: |- ((= ((= (Data.Bool.~ t)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) t))) ((= (Data.Bool.~ t)) ((Data.Bool.==> t) Data.Bool.F))) ;)

(; dict ;)

def thm_868 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not t_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) t_1)) (hol.eq hol.bool (hol.not t_1) (hol.imp t_1 hol.false))) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not t_1)) (hol.eq hol.bool (hol.not t_1)) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) t_1) (hol.imp t_1 hol.false) (thm_866 t_1) (thm_867 t_1).

(; Theorem: |- ((= t) t) ;)

(; dict ;)

def thm_869 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 t_1) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool t_1.

(; Theorem: |- ((= (Data.Bool.~ t)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) t)) ;)

(; dict ;)

def thm_870 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not t_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) t_1)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) t_1 t_1 thm_4 (thm_869 t_1).

(; Theorem: |- ((= (Data.Bool.~ t)) ((Data.Bool.==> t) Data.Bool.F)) ;)

(; dict ;)

def thm_871 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not t_1) (hol.imp t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not t_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) t_1)) (hol.eq hol.bool (hol.not t_1) (hol.imp t_1 hol.false)) (thm_868 t_1) (thm_870 t_1).

(; Theorem: |- (Data.Bool.~ t) ;)

(; dict ;)

def thm_872 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.not t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> t) Data.Bool.F) ;)

(; dict ;)

def thm_873 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.imp t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hol.EQ_MP (hol.not t_1) (hol.imp t_1 hol.false) (thm_871 t_1) (thm_872 t_1 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_874 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hyp_2 : hol.proof (hol.not t_1) -> hol.proof hol.false :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof (hol.not t_1) => thm_873 t_1 hyp_2 (thm_138 t_1 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_875 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hyp_2 : hol.proof (hol.not t_1) -> hol.proof hol.false :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof (hol.not t_1) => hol.PROVE_HYP t_1 hol.false (thm_138 t_1 hyp_1) (hyp_3 : hol.proof t_1 => thm_874 t_1 hyp_3 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_876 : hyp_1 : hol.proof hol.false -> hol.proof hol.false :=
  hyp_1 : hol.proof hol.false => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda p. p) ;)

(; dict ;)

def thm_877 : hyp_1 : hol.proof hol.false -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) :=
  hyp_1 : hol.proof hol.false => hol.EQ_MP hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) thm_5 (thm_876 hyp_1).

(; Theorem: |- P ;)

(; dict ;)

def thm_878 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.false -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_877 hyp_1 P_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_879 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.false -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => (P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_878 P_1 hyp_1) t_1 hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_880 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.false -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => hol.PROVE_HYP hol.false t_1 (thm_876 hyp_1) (hyp_2 : hol.proof hol.false => thm_879 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) t) ;)

(; dict ;)

def thm_881 : t_1 : hol.term hol.bool -> hol.proof (hol.imp hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_880 t_1 hyp_1.

(; Theorem: |- ((= Data.Bool.F) t) ;)

(; dict ;)

def thm_882 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.eq hol.bool hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hol.PROP_EXT hol.false t_1 (hyp_2 : hol.proof t_1 => (hyp_3 : hol.proof t_1 => thm_875 t_1 hyp_3 hyp_1) (thm_138 t_1 hyp_2)) (hyp_2 : hol.proof hol.false => thm_881 t_1 (thm_876 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ t)) ((= Data.Bool.F) t)) ;)

(; dict ;)

def thm_883 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.not t_1) (hol.eq hol.bool hol.false t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => thm_882 t_1 hyp_1.

(; Theorem: |- ((= (= (Data.Bool.~ P))) (= (Data.Bool.~ P))) ;)

(; dict ;)

def thm_884 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)).

(; Theorem: |- ((= (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_885 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1.

(; Theorem: |- ((= ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P))) ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F))) ;)

(; dict ;)

def thm_886 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false))) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1)) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false) (thm_884 P_1) (thm_885 P_1).

(; Theorem: |- ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ;)

(; dict ;)

def thm_887 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1 P_1 thm_4 (thm_258 P_1).

(; Theorem: |- ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_888 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) (thm_886 P_1) (thm_887 P_1).

(; Theorem: |- ((= ((Data.Bool.==> P) Data.Bool.F)) (Data.Bool.~ P)) ;)

(; dict ;)

def thm_889 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp P_1 hol.false) (hol.not P_1)) :=
  P_1 : hol.term hol.bool => hol.SYM hol.bool (hol.not P_1) (hol.imp P_1 hol.false) (thm_888 P_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_890 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => (P_1 : hol.term hol.bool => thm_889 P_1) t_1.

(; Theorem: |- ((Data.Bool.==> t) Data.Bool.F) ;)

(; dict ;)

def thm_891 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t_1 hol.false) -> hol.proof (hol.imp t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 hol.false) => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_892 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hyp_2 : hol.proof (hol.imp t_1 hol.false) -> hol.proof hol.false :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof (hol.imp t_1 hol.false) => thm_891 t_1 hyp_2 (thm_138 t_1 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_893 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hyp_2 : hol.proof (hol.imp t_1 hol.false) -> hol.proof hol.false :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof (hol.imp t_1 hol.false) => hol.PROVE_HYP t_1 hol.false (thm_138 t_1 hyp_1) (hyp_3 : hol.proof t_1 => thm_892 t_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_894 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hyp_2 : hol.proof (hol.imp t_1 hol.false) -> hol.proof (hol.imp (hol.imp hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof (hol.imp t_1 hol.false) => hyp_3 : hol.proof (hol.imp hol.false t_1) => thm_893 t_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> t) Data.Bool.F)) ((Data.Bool.==> ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_895 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.imp (hol.imp t_1 hol.false) (hol.imp (hol.imp hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof (hol.imp t_1 hol.false) => thm_894 t_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((= Data.Bool.F) t)) ((Data.Bool.==> Data.Bool.F) t)) ;)

(; dict ;)

def thm_896 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool hol.false t_1) (hol.imp hol.false t_1)) :=
  t_1 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_774 q_1 p_2) t_1 hol.false.

(; Theorem: |- ((= Data.Bool.F) t) ;)

(; dict ;)

def thm_897 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) -> hol.proof (hol.eq hol.bool hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) t) ;)

(; dict ;)

def thm_898 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) -> hol.proof (hol.imp hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) => thm_896 t_1 (thm_897 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) t)) ((Data.Bool.==> t) Data.Bool.F))) ;)

(; dict ;)

def thm_899 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp hol.false t_1) -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.and (hol.imp hol.false t_1) (hol.imp t_1 hol.false))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp hol.false t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.imp hol.false t_1) (hol.imp t_1 hol.false) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) t)) ((Data.Bool.==> t) Data.Bool.F))) ;)

(; dict ;)

def thm_900 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.and (hol.imp hol.false t_1) (hol.imp t_1 hol.false))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) => hol.PROVE_HYP (hol.imp hol.false t_1) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.and (hol.imp hol.false t_1) (hol.imp t_1 hol.false))) (thm_898 t_1 hyp_1) (hyp_2 : hol.proof (hol.imp hol.false t_1) => thm_899 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= Data.Bool.F) t)) ((Data.Bool.==> t) Data.Bool.F)) ;)

(; dict ;)

def thm_901 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool hol.false t_1) (hol.imp t_1 hol.false)) :=
  t_1 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_815 q_1 p_2) t_1 hol.false.

(; Theorem: |- ((Data.Bool.==> t) Data.Bool.F) ;)

(; dict ;)

def thm_902 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) -> hol.proof (hol.imp t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) => thm_901 t_1 (thm_897 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) t)) ((Data.Bool.==> t) Data.Bool.F)) ;)

(; dict ;)

def thm_903 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) -> hol.proof (hol.and (hol.imp hol.false t_1) (hol.imp t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) => hol.EQ_MP (hol.imp t_1 hol.false) (hol.and (hol.imp hol.false t_1) (hol.imp t_1 hol.false)) (thm_900 t_1 hyp_1) (thm_902 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> t) Data.Bool.F) ;)

(; dict ;)

def thm_904 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp hol.false t_1) (hol.imp t_1 hol.false)) -> hol.proof (hol.imp t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp hol.false t_1) (hol.imp t_1 hol.false)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.imp hol.false t_1) (hol.imp t_1 hol.false) hyp_1.

(; Theorem: |- ((Data.Bool.==> t) Data.Bool.F) ;)

(; dict ;)

def thm_905 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) -> hol.proof (hol.imp t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) => hol.PROVE_HYP (hol.and (hol.imp hol.false t_1) (hol.imp t_1 hol.false)) (hol.imp t_1 hol.false) (thm_903 t_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp hol.false t_1) (hol.imp t_1 hol.false)) => thm_904 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_906 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hyp_2 : hol.proof (hol.eq hol.bool hol.false t_1) -> hol.proof (hol.imp (hol.imp hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof (hol.eq hol.bool hol.false t_1) => thm_895 t_1 hyp_1 (thm_905 t_1 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_907 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hyp_2 : hol.proof (hol.eq hol.bool hol.false t_1) -> hol.proof hol.false :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof (hol.eq hol.bool hol.false t_1) => thm_906 t_1 hyp_1 hyp_2 (thm_898 t_1 hyp_2).

(; Theorem: |- (Data.Bool.~ t) ;)

(; dict ;)

def thm_908 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) -> hol.proof (hol.not t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) => hol.EQ_MP (hol.imp t_1 hol.false) (hol.not t_1) (thm_890 t_1) (hyp_2 : hol.proof t_1 => thm_907 t_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_909 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) => thm_908 t_1 hyp_1.

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_910 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.eq hol.bool hol.false t_1) (hol.not t_1) (hyp_1 : hol.proof (hol.not t_1) => thm_883 t_1 (thm_872 t_1 hyp_1)) (hyp_1 : hol.proof (hol.eq hol.bool hol.false t_1) => thm_909 t_1 (thm_897 t_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_911 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => thm_910 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; thm ;)

def thm_912 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) thm_865 thm_911.

(; Theorem: |- ((= \lambda t. ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) \lambda t. ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_913 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= \lambda t. ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) \lambda t. ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_914 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) thm_913 thm_913.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) (Data.Bool.! \lambda t. ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_915 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) thm_150 thm_914.

(; Theorem: |- ((= t) Data.Bool.F) ;)

(; dict ;)

def thm_916 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.eq hol.bool t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hol.PROP_EXT t_1 hol.false (hyp_2 : hol.proof hol.false => thm_879 t_1 hyp_2) (hyp_2 : hol.proof t_1 => thm_874 t_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ t)) ((= t) Data.Bool.F)) ;)

(; dict ;)

def thm_917 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.not t_1) (hol.eq hol.bool t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => thm_916 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_918 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.imp (hol.imp t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof (hol.imp t_1 hol.false) => thm_892 t_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Data.Bool.F) t)) ((Data.Bool.==> ((Data.Bool.==> t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_919 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.imp (hol.imp hol.false t_1) (hol.imp (hol.imp t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof (hol.imp hol.false t_1) => thm_918 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= t) Data.Bool.F)) ((Data.Bool.==> t) Data.Bool.F)) ;)

(; dict ;)

def thm_920 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.imp t_1 hol.false)) :=
  t_1 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_774 q_1 p_2) hol.false t_1.

(; Theorem: |- ((= t) Data.Bool.F) ;)

(; dict ;)

def thm_921 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof (hol.eq hol.bool t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => hyp_1.

(; Theorem: |- ((Data.Bool.==> t) Data.Bool.F) ;)

(; dict ;)

def thm_922 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof (hol.imp t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => thm_920 t_1 (thm_921 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) ((Data.Bool./\ ((Data.Bool.==> t) Data.Bool.F)) ((Data.Bool.==> Data.Bool.F) t))) ;)

(; dict ;)

def thm_923 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) (hol.and (hol.imp t_1 hol.false) (hol.imp hol.false t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.imp t_1 hol.false) (hol.imp hol.false t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) ((Data.Bool./\ ((Data.Bool.==> t) Data.Bool.F)) ((Data.Bool.==> Data.Bool.F) t))) ;)

(; dict ;)

def thm_924 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) (hol.and (hol.imp t_1 hol.false) (hol.imp hol.false t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => hol.PROVE_HYP (hol.imp t_1 hol.false) (hol.eq hol.bool (hol.imp hol.false t_1) (hol.and (hol.imp t_1 hol.false) (hol.imp hol.false t_1))) (thm_922 t_1 hyp_1) (hyp_2 : hol.proof (hol.imp t_1 hol.false) => thm_923 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= t) Data.Bool.F)) ((Data.Bool.==> Data.Bool.F) t)) ;)

(; dict ;)

def thm_925 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.imp hol.false t_1)) :=
  t_1 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_815 q_1 p_2) hol.false t_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) t) ;)

(; dict ;)

def thm_926 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof (hol.imp hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => thm_925 t_1 (thm_921 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> t) Data.Bool.F)) ((Data.Bool.==> Data.Bool.F) t)) ;)

(; dict ;)

def thm_927 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof (hol.and (hol.imp t_1 hol.false) (hol.imp hol.false t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => hol.EQ_MP (hol.imp hol.false t_1) (hol.and (hol.imp t_1 hol.false) (hol.imp hol.false t_1)) (thm_924 t_1 hyp_1) (thm_926 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) t) ;)

(; dict ;)

def thm_928 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp t_1 hol.false) (hol.imp hol.false t_1)) -> hol.proof (hol.imp hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp t_1 hol.false) (hol.imp hol.false t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.imp t_1 hol.false) (hol.imp hol.false t_1) hyp_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) t) ;)

(; dict ;)

def thm_929 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof (hol.imp hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => hol.PROVE_HYP (hol.and (hol.imp t_1 hol.false) (hol.imp hol.false t_1)) (hol.imp hol.false t_1) (thm_927 t_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp t_1 hol.false) (hol.imp hol.false t_1)) => thm_928 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_930 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hyp_2 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof (hol.imp (hol.imp t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof (hol.eq hol.bool t_1 hol.false) => thm_919 t_1 hyp_1 (thm_929 t_1 hyp_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_931 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hyp_2 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof hol.false :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_2 : hol.proof (hol.eq hol.bool t_1 hol.false) => thm_930 t_1 hyp_1 hyp_2 (thm_922 t_1 hyp_2).

(; Theorem: |- (Data.Bool.~ t) ;)

(; dict ;)

def thm_932 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof (hol.not t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => hol.EQ_MP (hol.imp t_1 hol.false) (hol.not t_1) (thm_890 t_1) (hyp_2 : hol.proof t_1 => thm_931 t_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_933 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => thm_932 t_1 hyp_1.

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_934 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.eq hol.bool t_1 hol.false) (hol.not t_1) (hyp_1 : hol.proof (hol.not t_1) => thm_917 t_1 (thm_872 t_1 hyp_1)) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => thm_933 t_1 (thm_921 t_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_935 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => thm_934 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; thm ;)

def thm_936 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) thm_915 thm_935.

(; Theorem: |- (Data.Bool.~ Data.Bool.T) ;)

(; dict ;)

def thm_937 : hyp_1 : hol.proof hol.false -> hol.proof (hol.not hol.true) :=
  hyp_1 : hol.proof hol.false => (P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_878 P_1 hyp_1) (hol.not hol.true) hyp_1.

(; Theorem: |- (Data.Bool.~ Data.Bool.T) ;)

(; dict ;)

def thm_938 : hyp_1 : hol.proof hol.false -> hol.proof (hol.not hol.true) :=
  hyp_1 : hol.proof hol.false => hol.PROVE_HYP hol.false (hol.not hol.true) (thm_876 hyp_1) (hyp_2 : hol.proof hol.false => thm_937 hyp_2).

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) (Data.Bool.~ Data.Bool.T)) ;)

(; dict ;)

def thm_939 : hol.proof (hol.imp hol.false (hol.not hol.true)) :=
  hyp_1 : hol.proof hol.false => thm_938 hyp_1.

(; Theorem: |- ((= (= (Data.Bool.~ Data.Bool.T))) (= (Data.Bool.~ Data.Bool.T))) ;)

(; dict ;)

def thm_940 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not hol.true)) (hol.eq hol.bool (hol.not hol.true))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not hol.true)).

(; Theorem: |- ((= (\lambda p. ((Data.Bool.==> p) Data.Bool.F) Data.Bool.T)) ((Data.Bool.==> Data.Bool.T) Data.Bool.F)) ;)

(; dict ;)

def thm_941 : hol.proof (hol.eq hol.bool ((p_1 : hol.term hol.bool => hol.imp p_1 hol.false) hol.true) (hol.imp hol.true hol.false)) :=
  hol.BETA_CONV hol.bool hol.bool (p_1 : hol.term hol.bool => hol.imp p_1 hol.false) hol.true.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) Data.Bool.T))) ((= (Data.Bool.~ Data.Bool.T)) ((Data.Bool.==> Data.Bool.T) Data.Bool.F))) ;)

(; dict ;)

def thm_942 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) ((p_1 : hol.term hol.bool => hol.imp p_1 hol.false) hol.true)) (hol.eq hol.bool (hol.not hol.true) (hol.imp hol.true hol.false))) :=
  hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not hol.true)) (hol.eq hol.bool (hol.not hol.true)) ((p_1 : hol.term hol.bool => hol.imp p_1 hol.false) hol.true) (hol.imp hol.true hol.false) thm_940 thm_941.

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_943 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.T)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) Data.Bool.T)) ;)

(; dict ;)

def thm_944 : hol.proof (hol.eq hol.bool (hol.not hol.true) ((p_1 : hol.term hol.bool => hol.imp p_1 hol.false) hol.true)) :=
  hol.APP_THM hol.bool hol.bool hol.not (p_1 : hol.term hol.bool => hol.imp p_1 hol.false) hol.true hol.true thm_4 thm_943.

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.T)) ((Data.Bool.==> Data.Bool.T) Data.Bool.F)) ;)

(; dict ;)

def thm_945 : hol.proof (hol.eq hol.bool (hol.not hol.true) (hol.imp hol.true hol.false)) :=
  hol.EQ_MP (hol.eq hol.bool (hol.not hol.true) ((p_1 : hol.term hol.bool => hol.imp p_1 hol.false) hol.true)) (hol.eq hol.bool (hol.not hol.true) (hol.imp hol.true hol.false)) thm_942 thm_944.

(; Theorem: |- (Data.Bool.~ Data.Bool.T) ;)

(; dict ;)

def thm_946 : hyp_1 : hol.proof (hol.not hol.true) -> hol.proof (hol.not hol.true) :=
  hyp_1 : hol.proof (hol.not hol.true) => hyp_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.T) Data.Bool.F) ;)

(; dict ;)

def thm_947 : hyp_1 : hol.proof (hol.not hol.true) -> hol.proof (hol.imp hol.true hol.false) :=
  hyp_1 : hol.proof (hol.not hol.true) => hol.EQ_MP (hol.not hol.true) (hol.imp hol.true hol.false) thm_945 (thm_946 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_948 : hyp_1 : hol.proof hol.true -> hyp_2 : hol.proof (hol.not hol.true) -> hol.proof hol.false :=
  hyp_1 : hol.proof hol.true => hyp_2 : hol.proof (hol.not hol.true) => thm_947 hyp_2 (thm_832 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_949 : hyp_1 : hol.proof (hol.not hol.true) -> hol.proof hol.false :=
  hyp_1 : hol.proof (hol.not hol.true) => hol.PROVE_HYP hol.true hol.false thm_1 (hyp_2 : hol.proof hol.true => thm_948 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) Data.Bool.F) ;)

(; dict ;)

def thm_950 : hol.proof (hol.imp (hol.not hol.true) hol.false) :=
  hyp_1 : hol.proof (hol.not hol.true) => thm_949 hyp_1.

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F) ;)

(; dict ;)

def thm_951 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) :=
  hol.PROP_EXT (hol.not hol.true) hol.false (hyp_1 : hol.proof hol.false => thm_939 (thm_876 hyp_1)) (hyp_1 : hol.proof (hol.not hol.true) => thm_950 (thm_946 hyp_1)).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) Data.Bool.F)) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_952 : hol.proof (hol.eq hol.bool (hol.imp hol.false hol.false) (hol.not hol.false)) :=
  (P_1 : hol.term hol.bool => thm_889 P_1) hol.false.

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) Data.Bool.F) ;)

(; dict ;)

def thm_953 : hol.proof (hol.imp hol.false hol.false) :=
  hyp_1 : hol.proof hol.false => thm_876 hyp_1.

(; Theorem: |- (Data.Bool.~ Data.Bool.F) ;)

(; dict ;)

def thm_954 : hol.proof (hol.not hol.false) :=
  hol.EQ_MP (hol.imp hol.false hol.false) (hol.not hol.false) thm_952 thm_953.

(; Theorem: |- ((Data.Bool.==> Data.Bool.T) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_955 : hol.proof (hol.imp hol.true (hol.not hol.false)) :=
  hyp_1 : hol.proof hol.true => thm_954.

(; Theorem: |- (Data.Bool.~ Data.Bool.F) ;)

(; dict ;)

def thm_956 : hyp_1 : hol.proof hol.true -> hol.proof (hol.not hol.false) :=
  hyp_1 : hol.proof hol.true => thm_955 (thm_832 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_957 : hol.proof (hol.imp (hol.not hol.false) hol.true) :=
  hyp_1 : hol.proof (hol.not hol.false) => thm_1.

(; Theorem: |- (Data.Bool.~ Data.Bool.F) ;)

(; dict ;)

def thm_958 : hyp_1 : hol.proof (hol.not hol.false) -> hol.proof (hol.not hol.false) :=
  hyp_1 : hol.proof (hol.not hol.false) => hyp_1.

(; Theorem: |- Data.Bool.T ;)

(; dict ;)

def thm_959 : hyp_1 : hol.proof (hol.not hol.false) -> hol.proof hol.true :=
  hyp_1 : hol.proof (hol.not hol.false) => thm_957 (thm_958 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_960 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true) :=
  hol.PROP_EXT (hol.not hol.false) hol.true (hyp_1 : hol.proof hol.true => thm_956 hyp_1) (hyp_1 : hol.proof (hol.not hol.false) => thm_959 hyp_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool./\ Data.Bool.T) t)) t)) \lambda t. ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_961 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool./\ Data.Bool.T) t)) t)) \lambda t. ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_962 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1) thm_961 thm_961.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool./\ Data.Bool.T) t)) t))) (Data.Bool.! \lambda t. ((= ((Data.Bool./\ Data.Bool.T) t)) t))) ;)

(; dict ;)

def thm_963 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1) thm_150 thm_962.

(; Theorem: |- ((= t) ((Data.Bool./\ Data.Bool.T) t)) ;)

(; dict ;)

def thm_964 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.true -> hol.proof (hol.eq hol.bool t_1 (hol.and hol.true t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.true => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) hol.true t_1 hyp_1.

(; Theorem: |- ((= t) ((Data.Bool./\ Data.Bool.T) t)) ;)

(; dict ;)

def thm_965 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.and hol.true t_1)) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP hol.true (hol.eq hol.bool t_1 (hol.and hol.true t_1)) thm_1 (hyp_1 : hol.proof hol.true => thm_964 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ Data.Bool.T) t) ;)

(; dict ;)

def thm_966 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.and hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.EQ_MP t_1 (hol.and hol.true t_1) (thm_965 t_1) (thm_138 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> t) ((Data.Bool./\ Data.Bool.T) t)) ;)

(; dict ;)

def thm_967 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 (hol.and hol.true t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => thm_966 t_1 hyp_1.

(; Theorem: |- ((Data.Bool./\ Data.Bool.T) t) ;)

(; dict ;)

def thm_968 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and hol.true t_1) -> hol.proof (hol.and hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and hol.true t_1) => hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_969 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and hol.true t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and hol.true t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) hol.true t_1 hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_970 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and hol.true t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and hol.true t_1) => hol.PROVE_HYP (hol.and hol.true t_1) t_1 (thm_968 t_1 hyp_1) (hyp_2 : hol.proof (hol.and hol.true t_1) => thm_969 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_971 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and hol.true t_1) => thm_970 t_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_972 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.and hol.true t_1) t_1 (hyp_1 : hol.proof t_1 => thm_967 t_1 (thm_138 t_1 hyp_1)) (hyp_1 : hol.proof (hol.and hol.true t_1) => thm_971 t_1 (thm_968 t_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_973 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => thm_972 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; thm ;)

def thm_974 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)) thm_963 thm_973.

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool./\ t) Data.Bool.T)) t)) \lambda t. ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_975 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool./\ t) Data.Bool.T)) t)) \lambda t. ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_976 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1) thm_975 thm_975.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool./\ t) Data.Bool.T)) t))) (Data.Bool.! \lambda t. ((= ((Data.Bool./\ t) Data.Bool.T)) t))) ;)

(; dict ;)

def thm_977 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1) thm_150 thm_976.

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool./\ t) Data.Bool.T)) ;)

(; dict ;)

def thm_978 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool hol.true (hol.and t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) t_1 hol.true hyp_1.

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool./\ t) Data.Bool.T)) ;)

(; dict ;)

def thm_979 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool hol.true (hol.and t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROVE_HYP t_1 (hol.eq hol.bool hol.true (hol.and t_1 hol.true)) (thm_138 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_978 t_1 hyp_2).

(; Theorem: |- ((Data.Bool./\ t) Data.Bool.T) ;)

(; dict ;)

def thm_980 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.and t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.EQ_MP hol.true (hol.and t_1 hol.true) (thm_979 t_1 hyp_1) thm_1.

(; Theorem: |- ((Data.Bool.==> t) ((Data.Bool./\ t) Data.Bool.T)) ;)

(; dict ;)

def thm_981 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 (hol.and t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => thm_980 t_1 hyp_1.

(; Theorem: |- ((Data.Bool./\ t) Data.Bool.T) ;)

(; dict ;)

def thm_982 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t_1 hol.true) -> hol.proof (hol.and t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t_1 hol.true) => hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_983 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t_1 hol.true) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) hol.true t_1 hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_984 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t_1 hol.true) => hol.PROVE_HYP (hol.and t_1 hol.true) t_1 (thm_982 t_1 hyp_1) (hyp_2 : hol.proof (hol.and t_1 hol.true) => thm_983 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_985 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t_1 hol.true) => thm_984 t_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_986 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.and t_1 hol.true) t_1 (hyp_1 : hol.proof t_1 => thm_981 t_1 (thm_138 t_1 hyp_1)) (hyp_1 : hol.proof (hol.and t_1 hol.true) => thm_985 t_1 (thm_982 t_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_987 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => thm_986 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; thm ;)

def thm_988 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)) thm_977 thm_987.

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) \lambda t. ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_989 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) \lambda t. ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_990 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false) thm_989 thm_989.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F))) (Data.Bool.! \lambda t. ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F))) ;)

(; dict ;)

def thm_991 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false) thm_150 thm_990.

(; Theorem: |- ((Data.Bool./\ Data.Bool.F) t) ;)

(; dict ;)

def thm_992 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.false -> hol.proof (hol.and hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => (P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_878 P_1 hyp_1) (hol.and hol.false t_1) hyp_1.

(; Theorem: |- ((Data.Bool./\ Data.Bool.F) t) ;)

(; dict ;)

def thm_993 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.false -> hol.proof (hol.and hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => hol.PROVE_HYP hol.false (hol.and hol.false t_1) (thm_876 hyp_1) (hyp_2 : hol.proof hol.false => thm_992 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) ((Data.Bool./\ Data.Bool.F) t)) ;)

(; dict ;)

def thm_994 : t_1 : hol.term hol.bool -> hol.proof (hol.imp hol.false (hol.and hol.false t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_993 t_1 hyp_1.

(; Theorem: |- ((Data.Bool./\ Data.Bool.F) t) ;)

(; dict ;)

def thm_995 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and hol.false t_1) -> hol.proof (hol.and hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and hol.false t_1) => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_996 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and hol.false t_1) -> hol.proof hol.false :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and hol.false t_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) t_1 hol.false hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_997 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and hol.false t_1) -> hol.proof hol.false :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and hol.false t_1) => hol.PROVE_HYP (hol.and hol.false t_1) hol.false (thm_995 t_1 hyp_1) (hyp_2 : hol.proof (hol.and hol.false t_1) => thm_996 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_998 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and hol.false t_1) => thm_997 t_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_999 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.and hol.false t_1) hol.false (hyp_1 : hol.proof hol.false => thm_994 t_1 (thm_876 hyp_1)) (hyp_1 : hol.proof (hol.and hol.false t_1) => thm_998 t_1 (thm_995 t_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_1000 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => thm_999 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; thm ;)

def thm_1001 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)) thm_991 thm_1000.

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) \lambda t. ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_1002 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) \lambda t. ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_1003 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false) thm_1002 thm_1002.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F))) (Data.Bool.! \lambda t. ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F))) ;)

(; dict ;)

def thm_1004 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false) thm_150 thm_1003.

(; Theorem: |- ((Data.Bool./\ t) Data.Bool.F) ;)

(; dict ;)

def thm_1005 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.false -> hol.proof (hol.and t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => (P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_878 P_1 hyp_1) (hol.and t_1 hol.false) hyp_1.

(; Theorem: |- ((Data.Bool./\ t) Data.Bool.F) ;)

(; dict ;)

def thm_1006 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.false -> hol.proof (hol.and t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => hol.PROVE_HYP hol.false (hol.and t_1 hol.false) (thm_876 hyp_1) (hyp_2 : hol.proof hol.false => thm_1005 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) ((Data.Bool./\ t) Data.Bool.F)) ;)

(; dict ;)

def thm_1007 : t_1 : hol.term hol.bool -> hol.proof (hol.imp hol.false (hol.and t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_1006 t_1 hyp_1.

(; Theorem: |- ((Data.Bool./\ t) Data.Bool.F) ;)

(; dict ;)

def thm_1008 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t_1 hol.false) -> hol.proof (hol.and t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t_1 hol.false) => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1009 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t_1 hol.false) -> hol.proof hol.false :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t_1 hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) t_1 hol.false hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_1010 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and t_1 hol.false) -> hol.proof hol.false :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t_1 hol.false) => hol.PROVE_HYP (hol.and t_1 hol.false) hol.false (thm_1008 t_1 hyp_1) (hyp_2 : hol.proof (hol.and t_1 hol.false) => thm_1009 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_1011 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and t_1 hol.false) => thm_1010 t_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_1012 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.and t_1 hol.false) hol.false (hyp_1 : hol.proof hol.false => thm_1007 t_1 (thm_876 hyp_1)) (hyp_1 : hol.proof (hol.and t_1 hol.false) => thm_1011 t_1 (thm_1008 t_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_1013 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => thm_1012 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; thm ;)

def thm_1014 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) thm_1004 thm_1013.

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_1015 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_1016 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true) thm_1015 thm_1015.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_1017 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true) thm_150 thm_1016.

(; Theorem: |- ((Data.Bool.\/ Data.Bool.T) t) ;)

(; dict ;)

def thm_1018 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.true -> hol.proof (hol.or hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.true => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) t_1 hol.true hyp_1.

(; Theorem: |- ((Data.Bool.\/ Data.Bool.T) t) ;)

(; dict ;)

def thm_1019 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.true -> hol.proof (hol.or hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.true => hol.PROVE_HYP hol.true (hol.or hol.true t_1) (thm_832 hyp_1) (hyp_2 : hol.proof hol.true => thm_1018 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> Data.Bool.T) ((Data.Bool.\/ Data.Bool.T) t)) ;)

(; dict ;)

def thm_1020 : t_1 : hol.term hol.bool -> hol.proof (hol.imp hol.true (hol.or hol.true t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.true => thm_1019 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T) ;)

(; dict ;)

def thm_1021 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.or hol.true t_1) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or hol.true t_1) => thm_1.

(; Theorem: |- ((Data.Bool.\/ Data.Bool.T) t) ;)

(; dict ;)

def thm_1022 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or hol.true t_1) -> hol.proof (hol.or hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or hol.true t_1) => hyp_1.

(; Theorem: |- Data.Bool.T ;)

(; dict ;)

def thm_1023 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or hol.true t_1) -> hol.proof hol.true :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or hol.true t_1) => thm_1021 t_1 (thm_1022 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T) ;)

(; dict ;)

def thm_1024 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.or hol.true t_1) hol.true (hyp_1 : hol.proof hol.true => thm_1020 t_1 (thm_832 hyp_1)) (hyp_1 : hol.proof (hol.or hol.true t_1) => thm_1023 t_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_1025 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  t_1 : hol.term hol.bool => thm_1024 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; thm ;)

def thm_1026 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true)) thm_1017 thm_1025.

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_1027 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_1028 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true) thm_1027 thm_1027.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T))) ;)

(; dict ;)

def thm_1029 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true) thm_150 thm_1028.

(; Theorem: |- ((Data.Bool.\/ t) Data.Bool.T) ;)

(; dict ;)

def thm_1030 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.true -> hol.proof (hol.or t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.true => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) hol.true t_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t) Data.Bool.T) ;)

(; dict ;)

def thm_1031 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.true -> hol.proof (hol.or t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.true => hol.PROVE_HYP hol.true (hol.or t_1 hol.true) (thm_832 hyp_1) (hyp_2 : hol.proof hol.true => thm_1030 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> Data.Bool.T) ((Data.Bool.\/ t) Data.Bool.T)) ;)

(; dict ;)

def thm_1032 : t_1 : hol.term hol.bool -> hol.proof (hol.imp hol.true (hol.or t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.true => thm_1031 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_1033 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.or t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t_1 hol.true) => thm_1.

(; Theorem: |- ((Data.Bool.\/ t) Data.Bool.T) ;)

(; dict ;)

def thm_1034 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t_1 hol.true) -> hol.proof (hol.or t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t_1 hol.true) => hyp_1.

(; Theorem: |- Data.Bool.T ;)

(; dict ;)

def thm_1035 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t_1 hol.true) -> hol.proof hol.true :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t_1 hol.true) => thm_1033 t_1 (thm_1034 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_1036 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.or t_1 hol.true) hol.true (hyp_1 : hol.proof hol.true => thm_1032 t_1 (thm_832 hyp_1)) (hyp_1 : hol.proof (hol.or t_1 hol.true) => thm_1035 t_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_1037 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => thm_1036 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; thm ;)

def thm_1038 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) thm_1029 thm_1037.

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) \lambda t. ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; dict ;)

def thm_1039 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) \lambda t. ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; dict ;)

def thm_1040 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1) thm_1039 thm_1039.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ Data.Bool.F) t)) t))) (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ Data.Bool.F) t)) t))) ;)

(; dict ;)

def thm_1041 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1) thm_150 thm_1040.

(; Theorem: |- ((Data.Bool.\/ Data.Bool.F) t) ;)

(; dict ;)

def thm_1042 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.or hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) t_1 hol.false hyp_1.

(; Theorem: |- ((Data.Bool.\/ Data.Bool.F) t) ;)

(; dict ;)

def thm_1043 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.or hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROVE_HYP t_1 (hol.or hol.false t_1) (thm_138 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_1042 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> t) ((Data.Bool.\/ Data.Bool.F) t)) ;)

(; dict ;)

def thm_1044 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 (hol.or hol.false t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => thm_1043 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ Data.Bool.F) t) ;)

(; dict ;)

def thm_1045 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or hol.false t_1) -> hol.proof (hol.or hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or hol.false t_1) => hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_1046 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t_1 t_1) -> hyp_2 : hol.proof (hol.imp hol.false t_1) -> hyp_3 : hol.proof (hol.or hol.false t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 t_1) => hyp_2 : hol.proof (hol.imp hol.false t_1) => hyp_3 : hol.proof (hol.or hol.false t_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) t_1 hol.false t_1 hyp_2 hyp_1 hyp_3.

(; Theorem: |- t ;)

(; dict ;)

def thm_1047 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t_1 t_1) -> hyp_2 : hol.proof (hol.imp hol.false t_1) -> hyp_3 : hol.proof (hol.or hol.false t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 t_1) => hyp_2 : hol.proof (hol.imp hol.false t_1) => hyp_3 : hol.proof (hol.or hol.false t_1) => hol.PROVE_HYP (hol.or hol.false t_1) t_1 (thm_1045 t_1 hyp_3) (hyp_4 : hol.proof (hol.or hol.false t_1) => thm_1046 t_1 hyp_1 hyp_2 hyp_4).

(; Theorem: |- t ;)

(; dict ;)

def thm_1048 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t_1 t_1) -> hyp_2 : hol.proof (hol.or hol.false t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 t_1) => hyp_2 : hol.proof (hol.or hol.false t_1) => hol.PROVE_HYP (hol.imp hol.false t_1) t_1 (thm_881 t_1) (hyp_3 : hol.proof (hol.imp hol.false t_1) => thm_1047 t_1 hyp_1 hyp_3 hyp_2).

(; Theorem: |- t ;)

(; dict ;)

def thm_1049 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or hol.false t_1) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or hol.false t_1) => hol.PROVE_HYP (hol.imp t_1 t_1) t_1 (thm_376 t_1) (hyp_2 : hol.proof (hol.imp t_1 t_1) => thm_1048 t_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) t)) t) ;)

(; dict ;)

def thm_1050 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.or hol.false t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or hol.false t_1) => thm_1049 t_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t)) t) ;)

(; dict ;)

def thm_1051 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.or hol.false t_1) t_1 (hyp_1 : hol.proof t_1 => thm_1044 t_1 (thm_138 t_1 hyp_1)) (hyp_1 : hol.proof (hol.or hol.false t_1) => thm_1050 t_1 (thm_1045 t_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; dict ;)

def thm_1052 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  t_1 : hol.term hol.bool => thm_1051 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; thm ;)

def thm_1053 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1)) thm_1041 thm_1052.

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; dict ;)

def thm_1054 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; dict ;)

def thm_1055 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1) thm_1054 thm_1054.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.F)) t))) (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.F)) t))) ;)

(; dict ;)

def thm_1056 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1) thm_150 thm_1055.

(; Theorem: |- ((Data.Bool.\/ t) Data.Bool.F) ;)

(; dict ;)

def thm_1057 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.or t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) hol.false t_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t) Data.Bool.F) ;)

(; dict ;)

def thm_1058 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.or t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROVE_HYP t_1 (hol.or t_1 hol.false) (thm_138 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_1057 t_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> t) ((Data.Bool.\/ t) Data.Bool.F)) ;)

(; dict ;)

def thm_1059 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 (hol.or t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => thm_1058 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t) Data.Bool.F) ;)

(; dict ;)

def thm_1060 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t_1 hol.false) -> hol.proof (hol.or t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t_1 hol.false) => hyp_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_1061 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t_1 t_1) -> hyp_2 : hol.proof (hol.imp hol.false t_1) -> hyp_3 : hol.proof (hol.or t_1 hol.false) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 t_1) => hyp_2 : hol.proof (hol.imp hol.false t_1) => hyp_3 : hol.proof (hol.or t_1 hol.false) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) hol.false t_1 t_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- t ;)

(; dict ;)

def thm_1062 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t_1 t_1) -> hyp_2 : hol.proof (hol.imp hol.false t_1) -> hyp_3 : hol.proof (hol.or t_1 hol.false) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 t_1) => hyp_2 : hol.proof (hol.imp hol.false t_1) => hyp_3 : hol.proof (hol.or t_1 hol.false) => hol.PROVE_HYP (hol.or t_1 hol.false) t_1 (thm_1060 t_1 hyp_3) (hyp_4 : hol.proof (hol.or t_1 hol.false) => thm_1061 t_1 hyp_1 hyp_2 hyp_4).

(; Theorem: |- t ;)

(; dict ;)

def thm_1063 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp hol.false t_1) -> hyp_2 : hol.proof (hol.or t_1 hol.false) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp hol.false t_1) => hyp_2 : hol.proof (hol.or t_1 hol.false) => hol.PROVE_HYP (hol.imp t_1 t_1) t_1 (thm_376 t_1) (hyp_3 : hol.proof (hol.imp t_1 t_1) => thm_1062 t_1 hyp_3 hyp_1 hyp_2).

(; Theorem: |- t ;)

(; dict ;)

def thm_1064 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or t_1 hol.false) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t_1 hol.false) => hol.PROVE_HYP (hol.imp hol.false t_1) t_1 (thm_881 t_1) (hyp_2 : hol.proof (hol.imp hol.false t_1) => thm_1063 t_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ t) Data.Bool.F)) t) ;)

(; dict ;)

def thm_1065 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.or t_1 hol.false) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.or t_1 hol.false) => thm_1064 t_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ t) Data.Bool.F)) t) ;)

(; dict ;)

def thm_1066 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.or t_1 hol.false) t_1 (hyp_1 : hol.proof t_1 => thm_1059 t_1 (thm_138 t_1 hyp_1)) (hyp_1 : hol.proof (hol.or t_1 hol.false) => thm_1065 t_1 (thm_1060 t_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; dict ;)

def thm_1067 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  t_1 : hol.term hol.bool => thm_1066 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; thm ;)

def thm_1068 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1)) thm_1056 thm_1067.

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> Data.Bool.T) t)) t)) \lambda t. ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_1069 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> Data.Bool.T) t)) t)) \lambda t. ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_1070 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1) thm_1069 thm_1069.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> Data.Bool.T) t)) t))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> Data.Bool.T) t)) t))) ;)

(; dict ;)

def thm_1071 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1) thm_150 thm_1070.

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_1072 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.imp hol.true t_1) t_1 (hyp_1 : hol.proof t_1 => thm_831 t_1 hyp_1) (hyp_1 : hol.proof (hol.imp hol.true t_1) => thm_838 t_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_1073 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => thm_1072 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; thm ;)

def thm_1074 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)) thm_1071 thm_1073.

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_1075 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_1076 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) thm_1075 thm_1075.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T))) ;)

(; dict ;)

def thm_1077 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) thm_150 thm_1076.

(; Theorem: |- ((Data.Bool.==> t) Data.Bool.T) ;)

(; dict ;)

def thm_1078 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.true -> hol.proof (hol.imp t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.true => hyp_2 : hol.proof t_1 => thm_832 hyp_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.T) ((Data.Bool.==> t) Data.Bool.T)) ;)

(; dict ;)

def thm_1079 : t_1 : hol.term hol.bool -> hol.proof (hol.imp hol.true (hol.imp t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.true => thm_1078 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_1080 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 hol.true) => thm_1.

(; Theorem: |- ((Data.Bool.==> t) Data.Bool.T) ;)

(; dict ;)

def thm_1081 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t_1 hol.true) -> hol.proof (hol.imp t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 hol.true) => hyp_1.

(; Theorem: |- Data.Bool.T ;)

(; dict ;)

def thm_1082 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t_1 hol.true) -> hol.proof hol.true :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 hol.true) => thm_1080 t_1 (thm_1081 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_1083 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.imp t_1 hol.true) hol.true (hyp_1 : hol.proof hol.true => thm_1079 t_1 (thm_832 hyp_1)) (hyp_1 : hol.proof (hol.imp t_1 hol.true) => thm_1082 t_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_1084 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => thm_1083 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; thm ;)

def thm_1085 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) thm_1077 thm_1084.

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_1086 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_1087 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true) thm_1086 thm_1086.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_1088 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true) thm_150 thm_1087.

(; Theorem: |- ((Data.Bool.==> Data.Bool.T) ((Data.Bool.==> Data.Bool.F) t)) ;)

(; dict ;)

def thm_1089 : t_1 : hol.term hol.bool -> hol.proof (hol.imp hol.true (hol.imp hol.false t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.true => thm_881 t_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) t) ;)

(; dict ;)

def thm_1090 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.true -> hol.proof (hol.imp hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof hol.true => thm_1089 t_1 (thm_832 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_1091 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp hol.false t_1) => thm_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) t) ;)

(; dict ;)

def thm_1092 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp hol.false t_1) -> hol.proof (hol.imp hol.false t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp hol.false t_1) => hyp_1.

(; Theorem: |- Data.Bool.T ;)

(; dict ;)

def thm_1093 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp hol.false t_1) -> hol.proof hol.true :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp hol.false t_1) => thm_1091 t_1 (thm_1092 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_1094 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT (hol.imp hol.false t_1) hol.true (hyp_1 : hol.proof hol.true => thm_1090 t_1 hyp_1) (hyp_1 : hol.proof (hol.imp hol.false t_1) => thm_1093 t_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_1095 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => thm_1094 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; thm ;)

def thm_1096 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) thm_1088 thm_1095.

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) \lambda t. ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_1097 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) \lambda t. ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_1098 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) thm_1097 thm_1097.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_1099 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) thm_150 thm_1098.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_1100 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => thm_890 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; thm ;)

def thm_1101 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) thm_1099 thm_1100.

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_1102 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ;)

(; dict ;)

def thm_1103 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ;)

(; dict ;)

def thm_1104 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (thm_1103 A) (thm_1103 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))))))) (Data.Bool.! \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))))))) ;)

(; dict ;)

def thm_1105 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (thm_1102 A) (thm_1104 A).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_1106 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= ((= Data.Bool.?!) \lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) ((= Data.Bool.?!) \lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) ;)

(; dict ;)

def thm_1107 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) :=
  A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))).

(; Theorem: |- ((= ((= Data.Bool.?!) \lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) ((= Data.Bool.?!) \lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) ;)

(; dict ;)

def thm_1108 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) :=
  A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (thm_1107 A) (thm_1107 A).

(; Theorem: |- ((= \lambda x. (p x)) \lambda x. (p x)) ;)

(; dict ;)

def thm_1109 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => p_1 x_2) (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => p_1 x_2).

(; Theorem: |- ((= (Data.Bool.?! \lambda x. (p x))) (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (p x))) ;)

(; dict ;)

def thm_1110 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2) (x_2 : hol.term A => p_1 x_2) (hol.EQ_MP (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4)))))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4)))))) (thm_1108 A) (thm_6 A)) (thm_1109 A p_1).

(; Theorem: |- ((= (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) p)) ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ;)

(; dict ;)

def thm_1111 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) p_1) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) p_1.

(; Theorem: |- ((= \lambda p. (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) p)) \lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ;)

(; dict ;)

def thm_1112 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) p_1) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) p_1) (p_1 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (p_1 : hol.term (hol.arr A hol.bool) => thm_1111 A p_1).

(; Theorem: |- ((= (\lambda p. (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) p) \lambda x. (p x))) (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (p x))) ;)

(; dict ;)

def thm_1113 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (x_2 : hol.term A => p_1 x_2)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2) (x_2 : hol.term A => p_1 x_2) (thm_1112 A) (thm_1109 A p_1).

(; Theorem: |- ((= (= (\lambda p. (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) p) \lambda x. (p x)))) (= (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (p x)))) ;)

(; dict ;)

def thm_1114 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (x_2 : hol.term A => p_1 x_2)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2)) thm_1106 (thm_1113 A p_1).

(; Theorem: |- ((= (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. (p x) x)) (\lambda x. (p x) y))) ((= x) y)))))) ;)

(; dict ;)

def thm_1115 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => p_1 x_4) x_2) ((x_4 : hol.term A => p_1 x_4) y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2).

(; Theorem: |- ((= ((= (\lambda p. (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) p) \lambda x. (p x))) (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (p x)))) ((= (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. (p x) x)) (\lambda x. (p x) y))) ((= x) y))))))) ;)

(; dict ;)

def thm_1116 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (x_2 : hol.term A => p_1 x_2)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => p_1 x_4) x_2) ((x_4 : hol.term A => p_1 x_4) y_3)) (hol.eq A x_2 y_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2))) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => p_1 x_4) x_2) ((x_4 : hol.term A => p_1 x_4) y_3)) (hol.eq A x_2 y_3))))) (thm_1114 A p_1) (thm_1115 A p_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.? \lambda x. (p x)))) (Data.Bool./\ (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_1117 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))).

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_1118 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_1119 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= (\lambda x. (f x) y)) (f y)) ;)

(; dict ;)

def thm_1120 : A : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => thm_105 A B y_1 f_2) A hol.bool y_1 f_2.

(; Theorem: |- ((= (\lambda x_1. (p x_1) x)) (p x)) ;)

(; dict ;)

def thm_1121 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x__1_3 : hol.term A => p_2 x__1_3) x_1) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A hol.bool) => thm_1120 A y_1 f_2) A x_1 p_2.

(; Theorem: |- ((= (Data.Bool./\ (\lambda x_1. (p x_1) x))) (Data.Bool./\ (p x))) ;)

(; dict ;)

def thm_1122 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((x__1_3 : hol.term A => p_2 x__1_3) x_1)) (hol.and (p_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((x__1_3 : hol.term A => p_2 x__1_3) x_1) (p_2 x_1) thm_1119 (thm_1121 A x_1 p_2).

(; Theorem: |- ((= (\lambda x. (p x) y)) (p y)) ;)

(; dict ;)

def thm_1123 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => p_2 x_3) y_1) (p_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A hol.bool) => thm_1120 A y_1 f_2) A y_1 p_2.

(; Theorem: |- ((= ((Data.Bool./\ (\lambda x_1. (p x_1) x)) (\lambda x. (p x) y))) ((Data.Bool./\ (p x)) (p y))) ;)

(; dict ;)

def thm_1124 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and ((x__1_4 : hol.term A => p_3 x__1_4) x_2) ((x_4 : hol.term A => p_3 x_4) y_1)) (hol.and (p_3 x_2) (p_3 y_1))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and ((x__1_4 : hol.term A => p_3 x__1_4) x_2)) (hol.and (p_3 x_2)) ((x_4 : hol.term A => p_3 x_4) y_1) (p_3 y_1) (thm_1122 A x_2 p_3) (thm_1123 A y_1 p_3).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (p x_1) x)) (\lambda x. (p x) y)))) (Data.Bool.==> ((Data.Bool./\ (p x)) (p y)))) ;)

(; dict ;)

def thm_1125 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.and ((x__1_4 : hol.term A => p_3 x__1_4) x_2) ((x_4 : hol.term A => p_3 x_4) y_1))) (hol.imp (hol.and (p_3 x_2) (p_3 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.and ((x__1_4 : hol.term A => p_3 x__1_4) x_2) ((x_4 : hol.term A => p_3 x_4) y_1)) (hol.and (p_3 x_2) (p_3 y_1)) thm_1118 (thm_1124 A y_1 x_2 p_3).

(; Theorem: |- ((= ((= x) y)) ((= x) y)) ;)

(; dict ;)

def thm_1126 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A x_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq A x_2 y_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (p x_1) x)) (\lambda x. (p x) y))) ((= x) y))) ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))) ;)

(; dict ;)

def thm_1127 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and ((x__1_4 : hol.term A => p_3 x__1_4) x_2) ((x_4 : hol.term A => p_3 x_4) y_1)) (hol.eq A x_2 y_1)) (hol.imp (hol.and (p_3 x_2) (p_3 y_1)) (hol.eq A x_2 y_1))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.and ((x__1_4 : hol.term A => p_3 x__1_4) x_2) ((x_4 : hol.term A => p_3 x_4) y_1))) (hol.imp (hol.and (p_3 x_2) (p_3 y_1))) (hol.eq A x_2 y_1) (hol.eq A x_2 y_1) (thm_1125 A y_1 x_2 p_3) (thm_1126 A y_1 x_2).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (p x_1) x)) (\lambda x. (p x) y))) ((= x) y))) \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))) ;)

(; dict ;)

def thm_1128 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => p_2 x__1_4) x_1) ((x_4 : hol.term A => p_2 x_4) y_3)) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.imp (hol.and (p_2 x_1) (p_2 y_3)) (hol.eq A x_1 y_3))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => p_2 x__1_4) x_1) ((x_4 : hol.term A => p_2 x_4) y_3)) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.imp (hol.and (p_2 x_1) (p_2 y_3)) (hol.eq A x_1 y_3)) (y_3 : hol.term A => thm_1127 A y_3 x_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (p x_1) x)) (\lambda x. (p x) y))) ((= x) y)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))) ;)

(; dict ;)

def thm_1129 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => p_2 x__1_4) x_1) ((x_4 : hol.term A => p_2 x_4) y_3)) (hol.eq A x_1 y_3))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_2 x_1) (p_2 y_3)) (hol.eq A x_1 y_3)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => p_2 x__1_4) x_1) ((x_4 : hol.term A => p_2 x_4) y_3)) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.imp (hol.and (p_2 x_1) (p_2 y_3)) (hol.eq A x_1 y_3)) (thm_7 A) (thm_1128 A x_1 p_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (p x_1) x)) (\lambda x. (p x) y))) ((= x) y)))) \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))) ;)

(; dict ;)

def thm_1130 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => p_1 x__1_4) x_2) ((x_4 : hol.term A => p_1 x_4) y_3)) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => p_1 x__1_4) x_2) ((x_4 : hol.term A => p_1 x_4) y_3)) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))) (x_2 : hol.term A => thm_1129 A x_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (p x_1) x)) (\lambda x. (p x) y))) ((= x) y))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) ;)

(; dict ;)

def thm_1131 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => p_1 x__1_4) x_2) ((x_4 : hol.term A => p_1 x_4) y_3)) (hol.eq A x_2 y_3)))) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => p_1 x__1_4) x_2) ((x_4 : hol.term A => p_1 x_4) y_3)) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))) (thm_7 A) (thm_1130 A p_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x_1. (p x_1) x)) (\lambda x. (p x) y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ;)

(; dict ;)

def thm_1132 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => p_1 x__1_4) x_2) ((x_4 : hol.term A => p_1 x_4) y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x__1_4 : hol.term A => p_1 x__1_4) x_2) ((x_4 : hol.term A => p_1 x_4) y_3)) (hol.eq A x_2 y_3)))) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))) (thm_1117 A p_1) (thm_1131 A p_1).

(; Theorem: |- ((= (\lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))) \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ;)

(; dict ;)

def thm_1133 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => p_1 x_4) x_2) ((x_4 : hol.term A => p_1 x_4) y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.EQ_MP (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_3) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 y_5)) (hol.eq A x_4 y_5))))) p_2) (x_2 : hol.term A => p_1 x_2)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => p_1 x_4) x_2) ((x_4 : hol.term A => p_1 x_4) y_3)) (hol.eq A x_2 y_3)))))) (thm_1116 A p_1) (thm_1113 A p_1)) (thm_1132 A p_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ;)

(; dict ;)

def thm_1134 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_2) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 y_4)) (hol.eq A x_3 y_4))))) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (thm_1110 A p_1) (thm_1133 A p_1).

(; Theorem: |- ((= (= (Data.Bool.?! \lambda x. (p x)))) (= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) ;)

(; dict ;)

def thm_1135 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) thm_1106 (thm_1134 A p_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))))) ;)

(; dict ;)

def thm_1136 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ;)

(; dict ;)

def thm_1137 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) (thm_1135 A p_1) (thm_1136 A p_1).

(; Theorem: |- ((= (= (\lambda _17. ((= _17) Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))))) (= (\lambda _17. ((= _17) Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))))) ;)

(; dict ;)

def thm_1138 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))))) (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))))).

(; Theorem: |- ((= (\lambda _17. ((= _17) Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))))))) ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) Data.Bool.T)) ;)

(; dict ;)

def thm_1139 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV hol.bool hol.bool (__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))).

(; Theorem: |- ((= ((= (\lambda _17. ((= _17) Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))))) (\lambda _17. ((= _17) Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))))) ((= (\lambda _17. ((= _17) Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))))) ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) Data.Bool.T))) ;)

(; dict ;)

def thm_1140 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))))) (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))))) (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))))) ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true) (thm_1138 A p_1) (thm_1139 A p_1).

(; Theorem: |- ((= (\lambda _17. ((= _17) Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))))) ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) Data.Bool.T)) ;)

(; dict ;)

def thm_1141 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV hol.bool hol.bool (__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))).

(; Theorem: |- ((= (= (\lambda _17. ((= _17) Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))))) (= ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) Data.Bool.T))) ;)

(; dict ;)

def thm_1142 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) hol.true))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) hol.true) thm_1106 (thm_1141 A p_1).

(; Theorem: |- ((= ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) Data.Bool.T)) ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) Data.Bool.T)) ;)

(; dict ;)

def thm_1143 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true).

(; Theorem: |- ((= ((= (\lambda _17. ((= _17) Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))))) ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) Data.Bool.T))) ((= ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) Data.Bool.T)) ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) Data.Bool.T))) ;)

(; dict ;)

def thm_1144 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true) (thm_1142 A p_1) (thm_1143 A p_1).

(; Theorem: |- ((= ((= (\lambda _17. ((= _17) Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))))) (\lambda _17. ((= _17) Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))))) ((= ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) Data.Bool.T)) ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) Data.Bool.T))) ;)

(; dict ;)

def thm_1145 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))))) (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true)) (thm_1140 A p_1) (thm_1144 A p_1).

(; Theorem: |- ((= \lambda _17. ((= _17) Data.Bool.T)) \lambda _17. ((= _17) Data.Bool.T)) ;)

(; dict ;)

def thm_1146 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__17_1 : hol.term hol.bool => hol.eq hol.bool __17_1 hol.true) (__17_1 : hol.term hol.bool => hol.eq hol.bool __17_1 hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (__17_1 : hol.term hol.bool => hol.eq hol.bool __17_1 hol.true).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) ;)

(; dict ;)

def thm_1147 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ;)

(; dict ;)

def thm_1148 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ;)

(; dict ;)

def thm_1149 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (thm_1147 A p_1) (thm_1148 A p_1).

(; Theorem: |- ((= (\lambda _17. ((= _17) Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))))) (\lambda _17. ((= _17) Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))))))) ;)

(; dict ;)

def thm_1150 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) thm_1146 (thm_1149 A p_1).

(; Theorem: |- ((= ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) Data.Bool.T)) ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) Data.Bool.T)) ;)

(; dict ;)

def thm_1151 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))))) ((__17_2 : hol.term hol.bool => hol.eq hol.bool __17_2 hol.true) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true)) (thm_1145 A p_1) (thm_1150 A p_1).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_1152 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 x_1) hol.true) :=
  x_1 : hol.term hol.bool => (A : hol.type => x_1 : hol.term A => thm_142 A x_1) hol.bool x_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y))))))) Data.Bool.T) ;)

(; dict ;)

def thm_1153 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_1152 x_1) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) Data.Bool.T) ;)

(; dict ;)

def thm_1154 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true) (thm_1151 A p_1) (thm_1153 A p_1).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) Data.Bool.T) ;)

(; dict ;)

def thm_1155 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 y_3)) (hol.eq A x_2 y_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true (thm_1137 A p_1) (thm_1154 A p_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ;)

(; dict ;)

def thm_1156 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) hol.true (thm_1155 A p_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))))) ;)

(; dict ;)

def thm_1157 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP hol.true (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (thm_1156 A p_1) thm_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ;)

(; dict ;)

def thm_1158 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_1157 A p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ;)

(; thm ;)

def thm_1159 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) (thm_1105 A) (thm_1158 A).

(; Theorem: |- ((= \lambda a. (Data.Bool.? \lambda x. ((= x) a))) \lambda a. (Data.Bool.? \lambda x. ((= x) a))) ;)

(; dict ;)

def thm_1160 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)).

(; Theorem: |- ((= \lambda a. (Data.Bool.? \lambda x. ((= x) a))) \lambda a. (Data.Bool.? \lambda x. ((= x) a))) ;)

(; dict ;)

def thm_1161 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (thm_1160 A) (thm_1160 A).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.? \lambda x. ((= x) a)))) (Data.Bool.! \lambda a. (Data.Bool.? \lambda x. ((= x) a)))) ;)

(; dict ;)

def thm_1162 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (thm_7 A) (thm_1161 A).

(; Theorem: |- ((= (\lambda x. ((= x) a) a)) ((= a) a)) ;)

(; dict ;)

def thm_1163 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool ((x_2 : hol.term A => hol.eq A x_2 a_1) a_1) (hol.eq A a_1 a_1)) :=
  A : hol.type => a_1 : hol.term A => hol.BETA_CONV A hol.bool (x_2 : hol.term A => hol.eq A x_2 a_1) a_1.

(; Theorem: |- ((= ((= a) a)) (\lambda x. ((= x) a) a)) ;)

(; dict ;)

def thm_1164 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A a_1 a_1) ((x_2 : hol.term A => hol.eq A x_2 a_1) a_1)) :=
  A : hol.type => a_1 : hol.term A => hol.SYM hol.bool ((x_2 : hol.term A => hol.eq A x_2 a_1) a_1) (hol.eq A a_1 a_1) (thm_1163 A a_1).

(; Theorem: |- ((= a) a) ;)

(; dict ;)

def thm_1165 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq A a_1 a_1) :=
  A : hol.type => a_1 : hol.term A => hol.REFL A a_1.

(; Theorem: |- (\lambda x. ((= x) a) a) ;)

(; dict ;)

def thm_1166 : A : hol.type -> a_1 : hol.term A -> hol.proof ((x_2 : hol.term A => hol.eq A x_2 a_1) a_1) :=
  A : hol.type => a_1 : hol.term A => hol.EQ_MP (hol.eq A a_1 a_1) ((x_2 : hol.term A => hol.eq A x_2 a_1) a_1) (thm_1164 A a_1) (thm_1165 A a_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((= x) a)) ;)

(; dict ;)

def thm_1167 : A : hol.type -> a_1 : hol.term A -> hyp_1 : hol.proof ((x_2 : hol.term A => hol.eq A x_2 a_1) a_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => hyp_1 : hol.proof ((x_2 : hol.term A => hol.eq A x_2 a_1) a_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A a_1 (x_2 : hol.term A => hol.eq A x_2 a_1) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((= x) a)) ;)

(; dict ;)

def thm_1168 : A : hol.type -> a_1 : hol.term A -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => hol.PROVE_HYP ((x_2 : hol.term A => hol.eq A x_2 a_1) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (thm_1166 A a_1) (hyp_1 : hol.proof ((x_2 : hol.term A => hol.eq A x_2 a_1) a_1) => thm_1167 A a_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.? \lambda x. ((= x) a))) ;)

(; dict ;)

def thm_1169 : A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => thm_1168 A a_1.

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.? \lambda x. ((= x) a))) ;)

(; thm ;)

def thm_1170 : A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) :=
  A : hol.type => hol.EQ_MP (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) (thm_1162 A) (thm_1169 A).

(; Theorem: |- ((= \lambda a. (Data.Bool.?! \lambda x. ((= x) a))) \lambda a. (Data.Bool.?! \lambda x. ((= x) a))) ;)

(; dict ;)

def thm_1171 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)).

(; Theorem: |- ((= \lambda a. (Data.Bool.?! \lambda x. ((= x) a))) \lambda a. (Data.Bool.?! \lambda x. ((= x) a))) ;)

(; dict ;)

def thm_1172 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (thm_1171 A) (thm_1171 A).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.?! \lambda x. ((= x) a)))) (Data.Bool.! \lambda a. (Data.Bool.?! \lambda x. ((= x) a)))) ;)

(; dict ;)

def thm_1173 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (thm_7 A) (thm_1172 A).

(; Theorem: |- ((= Data.Bool.?!) Data.Bool.?!) ;)

(; dict ;)

def thm_1174 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)).

(; Theorem: |- ((= (\lambda x. ((= x) a) x)) ((= x) a)) ;)

(; dict ;)

def thm_1175 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => hol.eq A x_3 a_2) x_1) (hol.eq A x_1 a_2)) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => hol.BETA_CONV A hol.bool (x_3 : hol.term A => hol.eq A x_3 a_2) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. ((= x) a) x)) \lambda x. ((= x) a)) ;)

(; dict ;)

def thm_1176 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2) (x_2 : hol.term A => hol.eq A x_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => hol.ABS_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2) (x_2 : hol.term A => hol.eq A x_2 a_1) (x_2 : hol.term A => thm_1175 A x_2 a_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda x. (\lambda x. ((= x) a) x))) (Data.Bool.?! \lambda x. ((= x) a))) ;)

(; dict ;)

def thm_1177 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2) (x_2 : hol.term A => hol.eq A x_2 a_1) (thm_1174 A) (thm_1176 A a_1).

(; Theorem: |- ((= (= (Data.Bool.?! \lambda x. (\lambda x. ((= x) a) x)))) (= (Data.Bool.?! \lambda x. ((= x) a)))) ;)

(; dict ;)

def thm_1178 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)))) :=
  A : hol.type => a_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) thm_1106 (thm_1177 A a_1).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_1179 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (\lambda x. ((= x) a) x))) (Data.Bool.? \lambda x. ((= x) a))) ;)

(; dict ;)

def thm_1180 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2) (x_2 : hol.term A => hol.eq A x_2 a_1) (thm_1179 A) (thm_1176 A a_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.? \lambda x. (\lambda x. ((= x) a) x)))) (Data.Bool./\ (Data.Bool.? \lambda x. ((= x) a)))) ;)

(; dict ;)

def thm_1181 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)))) :=
  A : hol.type => a_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) thm_1119 (thm_1180 A a_1).

(; Theorem: |- ((= (Data.Bool./\ (\lambda x. ((= x) a) x))) (Data.Bool./\ ((= x) a))) ;)

(; dict ;)

def thm_1182 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((x_3 : hol.term A => hol.eq A x_3 a_2) x_1)) (hol.and (hol.eq A x_1 a_2))) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((x_3 : hol.term A => hol.eq A x_3 a_2) x_1) (hol.eq A x_1 a_2) thm_1119 (thm_1175 A x_1 a_2).

(; Theorem: |- ((= (\lambda x. ((= x) a) x')) ((= x') a)) ;)

(; dict ;)

def thm_1183 : A : hol.type -> x_27_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => hol.eq A x_3 a_2) x_27_1) (hol.eq A x_27_1 a_2)) :=
  A : hol.type => x_27_1 : hol.term A => a_2 : hol.term A => hol.BETA_CONV A hol.bool (x_3 : hol.term A => hol.eq A x_3 a_2) x_27_1.

(; Theorem: |- ((= ((Data.Bool./\ (\lambda x. ((= x) a) x)) (\lambda x. ((= x) a) x'))) ((Data.Bool./\ ((= x) a)) ((= x') a))) ;)

(; dict ;)

def thm_1184 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_3) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_3) x_27_1)) (hol.and (hol.eq A x_2 a_3) (hol.eq A x_27_1 a_3))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => a_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_3) x_2)) (hol.and (hol.eq A x_2 a_3)) ((x_4 : hol.term A => hol.eq A x_4 a_3) x_27_1) (hol.eq A x_27_1 a_3) (thm_1182 A x_2 a_3) (thm_1183 A x_27_1 a_3).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool./\ (\lambda x. ((= x) a) x)) (\lambda x. ((= x) a) x')))) (Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a)))) ;)

(; dict ;)

def thm_1185 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_3) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_3) x_27_1))) (hol.imp (hol.and (hol.eq A x_2 a_3) (hol.eq A x_27_1 a_3)))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => a_3 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_3) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_3) x_27_1)) (hol.and (hol.eq A x_2 a_3) (hol.eq A x_27_1 a_3)) thm_1118 (thm_1184 A x_27_1 x_2 a_3).

(; Theorem: |- ((= ((= x) x')) ((= x) x')) ;)

(; dict ;)

def thm_1186 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_1)) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq A x_2 x_27_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (\lambda x. ((= x) a) x)) (\lambda x. ((= x) a) x'))) ((= x) x'))) ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))) ;)

(; dict ;)

def thm_1187 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_3) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_3) x_27_1)) (hol.eq A x_2 x_27_1)) (hol.imp (hol.and (hol.eq A x_2 a_3) (hol.eq A x_27_1 a_3)) (hol.eq A x_2 x_27_1))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => a_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_3) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_3) x_27_1))) (hol.imp (hol.and (hol.eq A x_2 a_3) (hol.eq A x_27_1 a_3))) (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_1) (thm_1185 A x_27_1 x_2 a_3) (thm_1186 A x_27_1 x_2).

(; Theorem: |- ((= \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. ((= x) a) x)) (\lambda x. ((= x) a) x'))) ((= x) x'))) \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))) ;)

(; dict ;)

def thm_1188 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_2) x_1) ((x_4 : hol.term A => hol.eq A x_4 a_2) x_27_3)) (hol.eq A x_1 x_27_3)) (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 a_2) (hol.eq A x_27_3 a_2)) (hol.eq A x_1 x_27_3))) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => hol.ABS_THM A hol.bool (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_2) x_1) ((x_4 : hol.term A => hol.eq A x_4 a_2) x_27_3)) (hol.eq A x_1 x_27_3)) (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 a_2) (hol.eq A x_27_3 a_2)) (hol.eq A x_1 x_27_3)) (x_27_3 : hol.term A => thm_1187 A x_27_3 x_1 a_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. ((= x) a) x)) (\lambda x. ((= x) a) x'))) ((= x) x')))) (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))) ;)

(; dict ;)

def thm_1189 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_2) x_1) ((x_4 : hol.term A => hol.eq A x_4 a_2) x_27_3)) (hol.eq A x_1 x_27_3))) (hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 a_2) (hol.eq A x_27_3 a_2)) (hol.eq A x_1 x_27_3)))) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_2) x_1) ((x_4 : hol.term A => hol.eq A x_4 a_2) x_27_3)) (hol.eq A x_1 x_27_3)) (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 a_2) (hol.eq A x_27_3 a_2)) (hol.eq A x_1 x_27_3)) (thm_7 A) (thm_1188 A x_1 a_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. ((= x) a) x)) (\lambda x. ((= x) a) x'))) ((= x) x')))) \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))) ;)

(; dict ;)

def thm_1190 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_1) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_1) x_27_3)) (hol.eq A x_2 x_27_3))) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) :=
  A : hol.type => a_1 : hol.term A => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_1) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_1) x_27_3)) (hol.eq A x_2 x_27_3))) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) (x_2 : hol.term A => thm_1189 A x_2 a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. ((= x) a) x)) (\lambda x. ((= x) a) x'))) ((= x) x'))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))))) ;)

(; dict ;)

def thm_1191 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_1) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_1) x_27_3)) (hol.eq A x_2 x_27_3)))) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))))) :=
  A : hol.type => a_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_1) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_1) x_27_3)) (hol.eq A x_2 x_27_3))) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) (thm_7 A) (thm_1190 A a_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (\lambda x. ((= x) a) x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. ((= x) a) x)) (\lambda x. ((= x) a) x'))) ((= x) x')))))) ((Data.Bool./\ (Data.Bool.? \lambda x. ((= x) a))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))))) ;)

(; dict ;)

def thm_1192 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_1) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_1) x_27_3)) (hol.eq A x_2 x_27_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))))) :=
  A : hol.type => a_1 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_1) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_1) x_27_3)) (hol.eq A x_2 x_27_3)))) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) (thm_1181 A a_1) (thm_1191 A a_1).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda x. (\lambda x. ((= x) a) x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (\lambda x. ((= x) a) x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. ((= x) a) x)) (\lambda x. ((= x) a) x'))) ((= x) x'))))))) ((= (Data.Bool.?! \lambda x. ((= x) a))) ((Data.Bool./\ (Data.Bool.? \lambda x. ((= x) a))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))))))) ;)

(; dict ;)

def thm_1193 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_1) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_1) x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))))))) :=
  A : hol.type => a_1 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_1) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_1) x_27_3)) (hol.eq A x_2 x_27_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))))) (thm_1178 A a_1) (thm_1192 A a_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda x. (\lambda x. ((= x) a) x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (\lambda x. ((= x) a) x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. ((= x) a) x)) (\lambda x. ((= x) a) x'))) ((= x) x')))))) ;)

(; dict ;)

def thm_1194 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_1) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_1) x_27_3)) (hol.eq A x_2 x_27_3)))))) :=
  A : hol.type => a_1 : hol.term A => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_1157 A p_1) A (x_2 : hol.term A => hol.eq A x_2 a_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda x. ((= x) a))) ((Data.Bool./\ (Data.Bool.? \lambda x. ((= x) a))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))))) ;)

(; dict ;)

def thm_1195 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))))) :=
  A : hol.type => a_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.eq A x_3 a_1) x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and ((x_4 : hol.term A => hol.eq A x_4 a_1) x_2) ((x_4 : hol.term A => hol.eq A x_4 a_1) x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))))) (thm_1193 A a_1) (thm_1194 A a_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda x. ((= x) a))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))))) (Data.Bool.?! \lambda x. ((= x) a))) ;)

(; dict ;)

def thm_1196 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => hol.SYM hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))))) (thm_1195 A a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))))) ((Data.Bool./\ (Data.Bool.? \lambda x. ((= x) a))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))))) ;)

(; dict ;)

def thm_1197 : A : hol.type -> a_1 : hol.term A -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))))) :=
  A : hol.type => a_1 : hol.term A => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))))) ((Data.Bool./\ (Data.Bool.? \lambda x. ((= x) a))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))))) ;)

(; dict ;)

def thm_1198 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))))) :=
  A : hol.type => a_1 : hol.term A => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))))) (thm_1168 A a_1) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) => thm_1197 A a_1 hyp_1).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))) \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))) ;)

(; dict ;)

def thm_1199 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) :=
  A : hol.type => a_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))) \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))) ;)

(; dict ;)

def thm_1200 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) :=
  A : hol.type => a_1 : hol.term A => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) (thm_1199 A a_1) (thm_1199 A a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))))) ;)

(; dict ;)

def thm_1201 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))))) :=
  A : hol.type => a_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) (thm_7 A) (thm_1200 A a_1).

(; Theorem: |- ((= \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))) \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))) ;)

(; dict ;)

def thm_1202 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)) (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => hol.REFL (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)).

(; Theorem: |- ((= \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))) \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))) ;)

(; dict ;)

def thm_1203 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)) (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => hol.TRANS (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)) (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)) (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)) (thm_1202 A a_1 x_2) (thm_1202 A a_1 x_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))) (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))) ;)

(; dict ;)

def thm_1204 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) (hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)) (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)) (thm_7 A) (thm_1203 A a_1 x_2).

(; Theorem: |- ((Data.Bool./\ ((= x) a)) ((= x') a)) ;)

(; dict ;)

def thm_1205 : A : hol.type -> x_27_1 : hol.term A -> a_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_3 a_2) (hol.eq A x_27_1 a_2)) -> hol.proof (hol.and (hol.eq A x_3 a_2) (hol.eq A x_27_1 a_2)) :=
  A : hol.type => x_27_1 : hol.term A => a_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 a_2) (hol.eq A x_27_1 a_2)) => hyp_1.

(; Theorem: |- ((= x) a) ;)

(; dict ;)

def thm_1206 : A : hol.type -> x_27_1 : hol.term A -> a_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_3 a_2) (hol.eq A x_27_1 a_2)) -> hol.proof (hol.eq A x_3 a_2) :=
  A : hol.type => x_27_1 : hol.term A => a_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 a_2) (hol.eq A x_27_1 a_2)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.eq A x_27_1 a_2) (hol.eq A x_3 a_2) hyp_1.

(; Theorem: |- ((= x) a) ;)

(; dict ;)

def thm_1207 : A : hol.type -> x_27_1 : hol.term A -> a_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_3 a_2) (hol.eq A x_27_1 a_2)) -> hol.proof (hol.eq A x_3 a_2) :=
  A : hol.type => x_27_1 : hol.term A => a_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 a_2) (hol.eq A x_27_1 a_2)) => hol.PROVE_HYP (hol.and (hol.eq A x_3 a_2) (hol.eq A x_27_1 a_2)) (hol.eq A x_3 a_2) (thm_1205 A x_27_1 a_2 x_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A x_3 a_2) (hol.eq A x_27_1 a_2)) => thm_1206 A x_27_1 a_2 x_3 hyp_2).

(; Theorem: |- ((= x') a) ;)

(; dict ;)

def thm_1208 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> x_27_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_1 a_2) (hol.eq A x_27_3 a_2)) -> hol.proof (hol.eq A x_27_3 a_2) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => x_27_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_1 a_2) (hol.eq A x_27_3 a_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.eq A x_1 a_2) (hol.eq A x_27_3 a_2) hyp_1.

(; Theorem: |- ((= x') a) ;)

(; dict ;)

def thm_1209 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> x_27_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_1 a_2) (hol.eq A x_27_3 a_2)) -> hol.proof (hol.eq A x_27_3 a_2) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => x_27_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_1 a_2) (hol.eq A x_27_3 a_2)) => hol.PROVE_HYP (hol.and (hol.eq A x_1 a_2) (hol.eq A x_27_3 a_2)) (hol.eq A x_27_3 a_2) (thm_1205 A x_27_3 a_2 x_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A x_1 a_2) (hol.eq A x_27_3 a_2)) => thm_1208 A x_1 a_2 x_27_3 hyp_2).

(; Theorem: |- ((= x) a) ;)

(; dict ;)

def thm_1210 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_2 a_1) -> hol.proof (hol.eq A x_2 a_1) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_2 a_1) => hyp_1.

(; Theorem: |- ((= x') a) ;)

(; dict ;)

def thm_1211 : A : hol.type -> a_1 : hol.term A -> x_27_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_27_2 a_1) -> hol.proof (hol.eq A x_27_2 a_1) :=
  A : hol.type => a_1 : hol.term A => x_27_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_27_2 a_1) => hyp_1.

(; Theorem: |- ((= (= x)) (= a)) ;)

(; dict ;)

def thm_1212 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_2 a_1) -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A x_2) (hol.eq A a_1)) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_2 a_1) => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) x_2 a_1 (thm_82 A) (thm_1210 A a_1 x_2 hyp_1).

(; Theorem: |- ((= ((= x) x')) ((= a) a)) ;)

(; dict ;)

def thm_1213 : A : hol.type -> a_1 : hol.term A -> x_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 a_1) -> hyp_2 : hol.proof (hol.eq A x_27_2 a_1) -> hol.proof (hol.eq hol.bool (hol.eq A x_3 x_27_2) (hol.eq A a_1 a_1)) :=
  A : hol.type => a_1 : hol.term A => x_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 a_1) => hyp_2 : hol.proof (hol.eq A x_27_2 a_1) => hol.APP_THM A hol.bool (hol.eq A x_3) (hol.eq A a_1) x_27_2 a_1 (thm_1212 A a_1 x_3 hyp_1) (thm_1211 A a_1 x_27_2 hyp_2).

(; Theorem: |- ((= ((= a) a)) Data.Bool.T) ;)

(; dict ;)

def thm_1214 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A a_1 a_1) hol.true) :=
  A : hol.type => a_1 : hol.term A => (A : hol.type => x_1 : hol.term A => thm_142 A x_1) A a_1.

(; Theorem: |- ((= ((= x) x')) Data.Bool.T) ;)

(; dict ;)

def thm_1215 : A : hol.type -> a_1 : hol.term A -> x_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 a_1) -> hyp_2 : hol.proof (hol.eq A x_27_2 a_1) -> hol.proof (hol.eq hol.bool (hol.eq A x_3 x_27_2) hol.true) :=
  A : hol.type => a_1 : hol.term A => x_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 a_1) => hyp_2 : hol.proof (hol.eq A x_27_2 a_1) => hol.TRANS hol.bool (hol.eq A x_3 x_27_2) (hol.eq A a_1 a_1) hol.true (thm_1213 A a_1 x_27_2 x_3 hyp_1 hyp_2) (thm_1214 A a_1).

(; Theorem: |- ((= Data.Bool.T) ((= x) x')) ;)

(; dict ;)

def thm_1216 : A : hol.type -> a_1 : hol.term A -> x_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 a_1) -> hyp_2 : hol.proof (hol.eq A x_27_2 a_1) -> hol.proof (hol.eq hol.bool hol.true (hol.eq A x_3 x_27_2)) :=
  A : hol.type => a_1 : hol.term A => x_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 a_1) => hyp_2 : hol.proof (hol.eq A x_27_2 a_1) => hol.SYM hol.bool (hol.eq A x_3 x_27_2) hol.true (thm_1215 A a_1 x_27_2 x_3 hyp_1 hyp_2).

(; Theorem: |- ((= x) x') ;)

(; dict ;)

def thm_1217 : A : hol.type -> a_1 : hol.term A -> x_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 a_1) -> hyp_2 : hol.proof (hol.eq A x_27_2 a_1) -> hol.proof (hol.eq A x_3 x_27_2) :=
  A : hol.type => a_1 : hol.term A => x_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 a_1) => hyp_2 : hol.proof (hol.eq A x_27_2 a_1) => hol.EQ_MP hol.true (hol.eq A x_3 x_27_2) (thm_1216 A a_1 x_27_2 x_3 hyp_1 hyp_2) thm_1.

(; Theorem: |- ((= x) x') ;)

(; dict ;)

def thm_1218 : A : hol.type -> a_1 : hol.term A -> x_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 a_1) -> hyp_2 : hol.proof (hol.eq A x_27_2 a_1) -> hol.proof (hol.eq A x_3 x_27_2) :=
  A : hol.type => a_1 : hol.term A => x_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 a_1) => hyp_2 : hol.proof (hol.eq A x_27_2 a_1) => hol.PROVE_HYP (hol.eq A x_27_2 a_1) (hol.eq A x_3 x_27_2) (thm_1211 A a_1 x_27_2 hyp_2) (hyp_3 : hol.proof (hol.eq A x_27_2 a_1) => thm_1217 A a_1 x_27_2 x_3 hyp_1 hyp_3).

(; Theorem: |- ((= x) x') ;)

(; dict ;)

def thm_1219 : A : hol.type -> a_1 : hol.term A -> x_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 a_1) -> hyp_2 : hol.proof (hol.eq A x_27_2 a_1) -> hol.proof (hol.eq A x_3 x_27_2) :=
  A : hol.type => a_1 : hol.term A => x_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 a_1) => hyp_2 : hol.proof (hol.eq A x_27_2 a_1) => hol.PROVE_HYP (hol.eq A x_3 a_1) (hol.eq A x_3 x_27_2) (thm_1210 A a_1 x_3 hyp_1) (hyp_3 : hol.proof (hol.eq A x_3 a_1) => thm_1218 A a_1 x_27_2 x_3 hyp_3 hyp_2).

(; Theorem: |- ((= x) x') ;)

(; dict ;)

def thm_1220 : A : hol.type -> a_1 : hol.term A -> x_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 a_1) -> hyp_2 : hol.proof (hol.and (hol.eq A x_3 a_1) (hol.eq A x_27_2 a_1)) -> hol.proof (hol.eq A x_3 x_27_2) :=
  A : hol.type => a_1 : hol.term A => x_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 a_1) => hyp_2 : hol.proof (hol.and (hol.eq A x_3 a_1) (hol.eq A x_27_2 a_1)) => hol.PROVE_HYP (hol.eq A x_27_2 a_1) (hol.eq A x_3 x_27_2) (thm_1209 A x_3 a_1 x_27_2 hyp_2) (hyp_3 : hol.proof (hol.eq A x_27_2 a_1) => thm_1219 A a_1 x_27_2 x_3 hyp_1 hyp_3).

(; Theorem: |- ((= x) x') ;)

(; dict ;)

def thm_1221 : A : hol.type -> a_1 : hol.term A -> x_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_3 a_1) (hol.eq A x_27_2 a_1)) -> hol.proof (hol.eq A x_3 x_27_2) :=
  A : hol.type => a_1 : hol.term A => x_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 a_1) (hol.eq A x_27_2 a_1)) => hol.PROVE_HYP (hol.eq A x_3 a_1) (hol.eq A x_3 x_27_2) (thm_1207 A x_27_2 a_1 x_3 hyp_1) (hyp_2 : hol.proof (hol.eq A x_3 a_1) => thm_1220 A a_1 x_27_2 x_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')) ;)

(; dict ;)

def thm_1222 : A : hol.type -> x_27_1 : hol.term A -> a_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.imp (hol.and (hol.eq A x_3 a_2) (hol.eq A x_27_1 a_2)) (hol.eq A x_3 x_27_1)) :=
  A : hol.type => x_27_1 : hol.term A => a_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 a_2) (hol.eq A x_27_1 a_2)) => thm_1221 A a_2 x_27_1 x_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))) ;)

(; dict ;)

def thm_1223 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => x_27_3 : hol.term A => thm_1222 A x_27_3 a_1 x_2.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x')))) ;)

(; dict ;)

def thm_1224 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP (hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) (hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))) (thm_1204 A a_1 x_2) (thm_1223 A a_1 x_2).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda x. ((= x) a))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) a)) ((= x') a))) ((= x) x'))))) ;)

(; dict ;)

def thm_1225 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))))) :=
  A : hol.type => a_1 : hol.term A => hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))))) (thm_1198 A a_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3)))) (thm_1201 A a_1) (thm_1224 A a_1)).

(; Theorem: |- (Data.Bool.?! \lambda x. ((= x) a)) ;)

(; dict ;)

def thm_1226 : A : hol.type -> a_1 : hol.term A -> hol.proof (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => hol.EQ_MP (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 a_1) (hol.eq A x_27_3 a_1)) (hol.eq A x_2 x_27_3))))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (thm_1196 A a_1) (thm_1225 A a_1).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.?! \lambda x. ((= x) a))) ;)

(; dict ;)

def thm_1227 : A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => thm_1226 A a_1.

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.?! \lambda x. ((= x) a))) ;)

(; thm ;)

def thm_1228 : A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) :=
  A : hol.type => hol.EQ_MP (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) (thm_1173 A) (thm_1227 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a)))) \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1229 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a)))) \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1230 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (thm_1229 A) (thm_1229 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a))))) ;)

(; dict ;)

def thm_1231 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (thm_1102 A) (thm_1230 A).

(; Theorem: |- ((= \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a))) \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1232 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)).

(; Theorem: |- ((= \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a))) \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1233 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (thm_1232 A p_1) (thm_1232 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a)))) (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1234 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (thm_7 A) (thm_1233 A p_1).

(; Theorem: |- ((= (\lambda x. ((Data.Bool./\ ((= a) x)) (p x)) a)) ((Data.Bool./\ ((= a) a)) (p a))) ;)

(; dict ;)

def thm_1235 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)) a_2) (hol.and (hol.eq A a_2 a_2) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.BETA_CONV A hol.bool (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)) a_2.

(; Theorem: |- ((= ((Data.Bool./\ ((= a) a)) (p a))) (\lambda x. ((Data.Bool./\ ((= a) x)) (p x)) a)) ;)

(; dict ;)

def thm_1236 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A a_2 a_2) (p_1 a_2)) ((x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)) a_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.SYM hol.bool ((x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)) a_2) (hol.and (hol.eq A a_2 a_2) (p_1 a_2)) (thm_1235 A p_1 a_2).

(; Theorem: |- ((= (p a)) ((Data.Bool./\ ((= a) a)) (p a))) ;)

(; dict ;)

def thm_1237 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq A a_1 a_1) -> hol.proof (hol.eq hol.bool (p_2 a_1) (hol.and (hol.eq A a_1 a_1) (p_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq A a_1 a_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.eq A a_1 a_1) (p_2 a_1) hyp_1.

(; Theorem: |- ((= (p a)) ((Data.Bool./\ ((= a) a)) (p a))) ;)

(; dict ;)

def thm_1238 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 a_1) (hol.and (hol.eq A a_1 a_1) (p_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.PROVE_HYP (hol.eq A a_1 a_1) (hol.eq hol.bool (p_2 a_1) (hol.and (hol.eq A a_1 a_1) (p_2 a_1))) (thm_1165 A a_1) (hyp_1 : hol.proof (hol.eq A a_1 a_1) => thm_1237 A a_1 p_2 hyp_1).

(; Theorem: |- ((= (p a)) (p a)) ;)

(; dict ;)

def thm_1239 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 a_1) (p_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (p_2 a_1).

(; Theorem: |- ((= (p a)) (p a)) ;)

(; dict ;)

def thm_1240 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 a_1) (p_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (p_2 a_1) (p_2 a_1) (p_2 a_1) (thm_1239 A a_1 p_2) (thm_1239 A a_1 p_2).

(; Theorem: |- (p a) ;)

(; dict ;)

def thm_1241 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 a_1) -> hol.proof (p_2 a_1) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 a_1) => hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= a) a)) (p a)) ;)

(; dict ;)

def thm_1242 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hyp_1 : hol.proof (p_1 a_2) -> hol.proof (hol.and (hol.eq A a_2 a_2) (p_1 a_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hyp_1 : hol.proof (p_1 a_2) => hol.EQ_MP (p_1 a_2) (hol.and (hol.eq A a_2 a_2) (p_1 a_2)) (thm_1238 A a_2 p_1) (hol.EQ_MP (p_1 a_2) (p_1 a_2) (thm_1240 A a_2 p_1) (thm_1241 A a_2 p_1 hyp_1)).

(; Theorem: |- (\lambda x. ((Data.Bool./\ ((= a) x)) (p x)) a) ;)

(; dict ;)

def thm_1243 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hyp_1 : hol.proof (p_1 a_2) -> hol.proof ((x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)) a_2) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hyp_1 : hol.proof (p_1 a_2) => hol.EQ_MP (hol.and (hol.eq A a_2 a_2) (p_1 a_2)) ((x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)) a_2) (thm_1236 A p_1 a_2) (thm_1242 A p_1 a_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x))) ;)

(; dict ;)

def thm_1244 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hyp_1 : hol.proof ((x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)) a_2) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hyp_1 : hol.proof ((x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)) a_2) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A a_2 (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x))) ;)

(; dict ;)

def thm_1245 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hyp_1 : hol.proof (p_1 a_2) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hyp_1 : hol.proof (p_1 a_2) => hol.PROVE_HYP ((x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)) a_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (thm_1243 A p_1 a_2 hyp_1) (hyp_2 : hol.proof ((x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)) a_2) => thm_1244 A p_1 a_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (p a)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) ;)

(; dict ;)

def thm_1246 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (p_2 a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_1 x_3) (p_2 x_3)))) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 a_1) => thm_1245 A p_2 a_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ ((= a) x)) (p x)) x)) (p a)))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1247 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and (hol.eq A a_2 x_4) (p_1 x_4)) x_3) (p_1 a_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (p_1 a_2) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)).

(; Theorem: |- ((Data.Bool./\ ((= a) x)) (p x)) ;)

(; dict ;)

def thm_1248 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_3 x_2) (p_1 x_2)) -> hol.proof (hol.and (hol.eq A a_3 x_2) (p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => a_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_3 x_2) (p_1 x_2)) => hyp_1.

(; Theorem: |- ((= a) x) ;)

(; dict ;)

def thm_1249 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_3 x_2) (p_1 x_2)) -> hol.proof (hol.eq A a_3 x_2) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => a_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_3 x_2) (p_1 x_2)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (p_1 x_2) (hol.eq A a_3 x_2) hyp_1.

(; Theorem: |- ((= a) x) ;)

(; dict ;)

def thm_1250 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A a_3 x_2) (p_1 x_2)) -> hol.proof (hol.eq A a_3 x_2) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => a_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_3 x_2) (p_1 x_2)) => hol.PROVE_HYP (hol.and (hol.eq A a_3 x_2) (p_1 x_2)) (hol.eq A a_3 x_2) (thm_1248 A p_1 x_2 a_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A a_3 x_2) (p_1 x_2)) => thm_1249 A p_1 x_2 a_3 hyp_2).

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_1251 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.eq A a_1 x_2) (p_3 x_2)) -> hol.proof (p_3 x_2) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.eq A a_1 x_2) (p_3 x_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.eq A a_1 x_2) (p_3 x_2) hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_1252 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.eq A a_1 x_2) (p_3 x_2)) -> hol.proof (p_3 x_2) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.eq A a_1 x_2) (p_3 x_2)) => hol.PROVE_HYP (hol.and (hol.eq A a_1 x_2) (p_3 x_2)) (p_3 x_2) (thm_1248 A p_3 x_2 a_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A a_1 x_2) (p_3 x_2)) => thm_1251 A a_1 x_2 p_3 hyp_2).

(; Theorem: |- ((= (= (\lambda _19. (p _19) a))) (= (\lambda _19. (p _19) a))) ;)

(; dict ;)

def thm_1253 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__19_3 : hol.term A => p_2 __19_3) a_1)) (hol.eq hol.bool ((__19_3 : hol.term A => p_2 __19_3) a_1))) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__19_3 : hol.term A => p_2 __19_3) a_1)).

(; Theorem: |- ((= (\lambda _19. (p _19) x)) (p x)) ;)

(; dict ;)

def thm_1254 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__19_3 : hol.term A => p_2 __19_3) x_1) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (__19_3 : hol.term A => p_2 __19_3) x_1.

(; Theorem: |- ((= ((= (\lambda _19. (p _19) a)) (\lambda _19. (p _19) x))) ((= (\lambda _19. (p _19) a)) (p x))) ;)

(; dict ;)

def thm_1255 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__19_4 : hol.term A => p_3 __19_4) a_2) ((__19_4 : hol.term A => p_3 __19_4) x_1)) (hol.eq hol.bool ((__19_4 : hol.term A => p_3 __19_4) a_2) (p_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__19_4 : hol.term A => p_3 __19_4) a_2)) (hol.eq hol.bool ((__19_4 : hol.term A => p_3 __19_4) a_2)) ((__19_4 : hol.term A => p_3 __19_4) x_1) (p_3 x_1) (thm_1253 A a_2 p_3) (thm_1254 A x_1 p_3).

(; Theorem: |- ((= (\lambda _19. (p _19) a)) (p a)) ;)

(; dict ;)

def thm_1256 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__19_3 : hol.term A => p_2 __19_3) a_1) (p_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (__19_3 : hol.term A => p_2 __19_3) a_1.

(; Theorem: |- ((= (= (\lambda _19. (p _19) a))) (= (p a))) ;)

(; dict ;)

def thm_1257 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__19_3 : hol.term A => p_2 __19_3) a_1)) (hol.eq hol.bool (p_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__19_3 : hol.term A => p_2 __19_3) a_1) (p_2 a_1) thm_1106 (thm_1256 A a_1 p_2).

(; Theorem: |- ((= (p x)) (p x)) ;)

(; dict ;)

def thm_1258 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 x_1) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (p_2 x_1).

(; Theorem: |- ((= ((= (\lambda _19. (p _19) a)) (p x))) ((= (p a)) (p x))) ;)

(; dict ;)

def thm_1259 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__19_4 : hol.term A => p_3 __19_4) a_2) (p_3 x_1)) (hol.eq hol.bool (p_3 a_2) (p_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__19_4 : hol.term A => p_3 __19_4) a_2)) (hol.eq hol.bool (p_3 a_2)) (p_3 x_1) (p_3 x_1) (thm_1257 A a_2 p_3) (thm_1258 A x_1 p_3).

(; Theorem: |- ((= ((= (\lambda _19. (p _19) a)) (\lambda _19. (p _19) x))) ((= (p a)) (p x))) ;)

(; dict ;)

def thm_1260 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__19_4 : hol.term A => p_3 __19_4) a_2) ((__19_4 : hol.term A => p_3 __19_4) x_1)) (hol.eq hol.bool (p_3 a_2) (p_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool ((__19_4 : hol.term A => p_3 __19_4) a_2) ((__19_4 : hol.term A => p_3 __19_4) x_1)) (hol.eq hol.bool ((__19_4 : hol.term A => p_3 __19_4) a_2) (p_3 x_1)) (hol.eq hol.bool (p_3 a_2) (p_3 x_1)) (thm_1255 A x_1 a_2 p_3) (thm_1259 A x_1 a_2 p_3).

(; Theorem: |- ((= \lambda _19. (p _19)) \lambda _19. (p _19)) ;)

(; dict ;)

def thm_1261 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (__19_2 : hol.term A => p_1 __19_2) (__19_2 : hol.term A => p_1 __19_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (__19_2 : hol.term A => p_1 __19_2).

(; Theorem: |- ((= a) x) ;)

(; dict ;)

def thm_1262 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A a_2 x_1) -> hol.proof (hol.eq A a_2 x_1) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => hyp_1 : hol.proof (hol.eq A a_2 x_1) => hyp_1.

(; Theorem: |- ((= (\lambda _19. (p _19) a)) (\lambda _19. (p _19) x)) ;)

(; dict ;)

def thm_1263 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq A a_2 x_1) -> hol.proof (hol.eq hol.bool ((__19_4 : hol.term A => p_3 __19_4) a_2) ((__19_4 : hol.term A => p_3 __19_4) x_1)) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq A a_2 x_1) => hol.APP_THM A hol.bool (__19_4 : hol.term A => p_3 __19_4) (__19_4 : hol.term A => p_3 __19_4) a_2 x_1 (thm_1261 A p_3) (thm_1262 A x_1 a_2 hyp_1).

(; Theorem: |- ((= (p a)) (p x)) ;)

(; dict ;)

def thm_1264 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq A a_2 x_1) -> hol.proof (hol.eq hol.bool (p_3 a_2) (p_3 x_1)) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq A a_2 x_1) => hol.EQ_MP (hol.eq hol.bool ((__19_4 : hol.term A => p_3 __19_4) a_2) ((__19_4 : hol.term A => p_3 __19_4) x_1)) (hol.eq hol.bool (p_3 a_2) (p_3 x_1)) (thm_1260 A x_1 a_2 p_3) (thm_1263 A x_1 a_2 p_3 hyp_1).

(; Theorem: |- ((= (p x)) (p a)) ;)

(; dict ;)

def thm_1265 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq A a_1 x_2) -> hol.proof (hol.eq hol.bool (p_3 x_2) (p_3 a_1)) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq A a_1 x_2) => hol.SYM hol.bool (p_3 a_1) (p_3 x_2) (thm_1264 A x_2 a_1 p_3 hyp_1).

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_1266 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (p_2 x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hyp_1.

(; Theorem: |- (p a) ;)

(; dict ;)

def thm_1267 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hyp_2 : hol.proof (hol.eq A a_2 x_1) -> hol.proof (p_3 a_2) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hyp_2 : hol.proof (hol.eq A a_2 x_1) => hol.EQ_MP (p_3 x_1) (p_3 a_2) (thm_1265 A a_2 x_1 p_3 hyp_2) (thm_1266 A x_1 p_3 hyp_1).

(; Theorem: |- (p a) ;)

(; dict ;)

def thm_1268 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq A a_2 x_1) -> hyp_2 : hol.proof (hol.and (hol.eq A a_2 x_1) (p_3 x_1)) -> hol.proof (p_3 a_2) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq A a_2 x_1) => hyp_2 : hol.proof (hol.and (hol.eq A a_2 x_1) (p_3 x_1)) => hol.PROVE_HYP (p_3 x_1) (p_3 a_2) (thm_1252 A a_2 x_1 p_3 hyp_2) (hyp_3 : hol.proof (p_3 x_1) => thm_1267 A x_1 a_2 p_3 hyp_3 hyp_1).

(; Theorem: |- (p a) ;)

(; dict ;)

def thm_1269 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.eq A a_2 x_1) (p_3 x_1)) -> hol.proof (p_3 a_2) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.eq A a_2 x_1) (p_3 x_1)) => hol.PROVE_HYP (hol.eq A a_2 x_1) (p_3 a_2) (thm_1250 A p_3 x_1 a_2 hyp_1) (hyp_2 : hol.proof (hol.eq A a_2 x_1) => thm_1268 A x_1 a_2 p_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((= a) x)) (p x))) (p a)) ;)

(; dict ;)

def thm_1270 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> a_3 : hol.term A -> hol.proof (hol.imp (hol.and (hol.eq A a_3 x_2) (p_1 x_2)) (p_1 a_3)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => a_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A a_3 x_2) (p_1 x_2)) => thm_1269 A x_2 a_3 p_1 hyp_1.

(; Theorem: |- ((= (\lambda x. ((Data.Bool./\ ((= a) x)) (p x)) x)) ((Data.Bool./\ ((= a) x)) (p x))) ;)

(; dict ;)

def thm_1271 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.and (hol.eq A a_3 x_4) (p_2 x_4)) x_1) (hol.and (hol.eq A a_3 x_1) (p_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => a_3 : hol.term A => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.and (hol.eq A a_3 x_4) (p_2 x_4)) x_1.

(; Theorem: |- (\lambda x. ((Data.Bool./\ ((= a) x)) (p x)) x) ;)

(; dict ;)

def thm_1272 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> a_3 : hol.term A -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.eq A a_3 x_4) (p_2 x_4)) x_1) -> hol.proof ((x_4 : hol.term A => hol.and (hol.eq A a_3 x_4) (p_2 x_4)) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => a_3 : hol.term A => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.eq A a_3 x_4) (p_2 x_4)) x_1) => hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= a) x)) (p x)) ;)

(; dict ;)

def thm_1273 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> a_3 : hol.term A -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.eq A a_3 x_4) (p_1 x_4)) x_2) -> hol.proof (hol.and (hol.eq A a_3 x_2) (p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => a_3 : hol.term A => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.eq A a_3 x_4) (p_1 x_4)) x_2) => hol.EQ_MP ((x_4 : hol.term A => hol.and (hol.eq A a_3 x_4) (p_1 x_4)) x_2) (hol.and (hol.eq A a_3 x_2) (p_1 x_2)) (thm_1271 A x_2 p_1 a_3) (thm_1272 A x_2 p_1 a_3 hyp_1).

(; Theorem: |- (p a) ;)

(; dict ;)

def thm_1274 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.eq A a_2 x_4) (p_3 x_4)) x_1) -> hol.proof (p_3 a_2) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.eq A a_2 x_4) (p_3 x_4)) x_1) => thm_1270 A p_3 x_1 a_2 (thm_1273 A p_3 x_1 a_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool./\ ((= a) x)) (p x)) x)) (p a)) ;)

(; dict ;)

def thm_1275 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> a_3 : hol.term A -> hol.proof (hol.imp ((x_4 : hol.term A => hol.and (hol.eq A a_3 x_4) (p_2 x_4)) x_1) (p_2 a_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => a_3 : hol.term A => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (hol.eq A a_3 x_4) (p_2 x_4)) x_1) => thm_1274 A x_1 a_3 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ ((= a) x)) (p x)) x)) (p a))) ;)

(; dict ;)

def thm_1276 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and (hol.eq A a_2 x_4) (p_1 x_4)) x_3) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => x_3 : hol.term A => thm_1275 A x_3 p_1 a_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a)) ;)

(; dict ;)

def thm_1277 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => thm_1247 A p_1 a_2 (thm_1276 A p_1 a_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x))) ;)

(; dict ;)

def thm_1278 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) => hyp_1.

(; Theorem: |- (p a) ;)

(; dict ;)

def thm_1279 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_1 x_3) (p_2 x_3))) -> hol.proof (p_2 a_1) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_1 x_3) (p_2 x_3))) => thm_1277 A p_2 a_1 (thm_1278 A p_2 a_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a)) ;)

(; dict ;)

def thm_1280 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.PROP_EXT (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2) (hyp_1 : hol.proof (p_1 a_2) => thm_1246 A a_2 p_1 (thm_1241 A a_2 p_1 hyp_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) => thm_1279 A a_2 p_1 hyp_2) (thm_1278 A p_1 a_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1281 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => thm_1280 A p_1 a_2.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1282 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (thm_1234 A p_1) (thm_1281 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a)))) ;)

(; thm ;)

def thm_1283 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) (thm_1231 A) (thm_1282 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a)))) \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1284 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a)))) \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1285 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (thm_1284 A) (thm_1284 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a))))) ;)

(; dict ;)

def thm_1286 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (thm_1102 A) (thm_1285 A).

(; Theorem: |- ((= \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a))) \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1287 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)).

(; Theorem: |- ((= \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a))) \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1288 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (thm_1287 A p_1) (thm_1287 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a)))) (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1289 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (thm_7 A) (thm_1288 A p_1).

(; Theorem: |- ((= x) a) ;)

(; dict ;)

def thm_1290 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A a_1 x_2) -> hol.proof (hol.eq A x_2 a_1) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.eq A a_1 x_2) => hol.SYM A a_1 x_2 (thm_1262 A x_2 a_1 hyp_1).

(; Theorem: |- ((= a) x) ;)

(; dict ;)

def thm_1291 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_1 a_2) -> hol.proof (hol.eq A a_2 x_1) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_1 a_2) => hol.SYM A x_1 a_2 (thm_1210 A a_2 x_1 hyp_1).

(; Theorem: |- ((= ((= x) a)) ((= a) x)) ;)

(; dict ;)

def thm_1292 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 a_1) (hol.eq A a_1 x_2)) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => hol.PROP_EXT (hol.eq A x_2 a_1) (hol.eq A a_1 x_2) (hyp_1 : hol.proof (hol.eq A a_1 x_2) => thm_1290 A a_1 x_2 hyp_1) (hyp_1 : hol.proof (hol.eq A x_2 a_1) => thm_1291 A x_2 a_1 hyp_1).

(; Theorem: |- ((= (Data.Bool./\ ((= x) a))) (Data.Bool./\ ((= a) x))) ;)

(; dict ;)

def thm_1293 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.eq A x_2 a_1)) (hol.and (hol.eq A a_1 x_2))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.eq A x_2 a_1) (hol.eq A a_1 x_2) thm_1119 (thm_1292 A a_1 x_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= x) a)) (p x))) ((Data.Bool./\ ((= a) x)) (p x))) ;)

(; dict ;)

def thm_1294 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A x_3 a_2) (p_1 x_3)) (hol.and (hol.eq A a_2 x_3) (p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.eq A x_3 a_2)) (hol.and (hol.eq A a_2 x_3)) (p_1 x_3) (p_1 x_3) (thm_1293 A a_2 x_3) (thm_1258 A x_3 p_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ ((= x) a)) (p x))) \lambda x. ((Data.Bool./\ ((= a) x)) (p x))) ;)

(; dict ;)

def thm_1295 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3)) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3)) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)) (x_3 : hol.term A => thm_1294 A p_1 a_2 x_3).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) ;)

(; dict ;)

def thm_1296 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3)) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)) (thm_1179 A) (thm_1295 A p_1 a_2).

(; Theorem: |- ((= (= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x))))) (= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x))))) ;)

(; dict ;)

def thm_1297 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) thm_1106 (thm_1296 A p_1 a_2).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a))) ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1298 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3)))) (p_1 a_2) (p_1 a_2) (thm_1297 A p_1 a_2) (thm_1239 A a_2 p_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= a) x)) (p x)))) (p a))) ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1299 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.SYM hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (thm_1298 A p_1 a_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a)) ;)

(; dict ;)

def thm_1300 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (thm_1299 A p_1 a_2) (thm_1280 A p_1 a_2).

(; Theorem: |- (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1301 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => thm_1300 A p_1 a_2.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1302 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (thm_1289 A p_1) (thm_1301 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= x) a)) (p x)))) (p a)))) ;)

(; thm ;)

def thm_1303 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) (thm_1286 A) (thm_1302 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a)))) \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1304 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a)))) \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1305 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (thm_1304 A) (thm_1304 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a))))) ;)

(; dict ;)

def thm_1306 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (thm_1102 A) (thm_1305 A).

(; Theorem: |- ((= \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a))) \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1307 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)).

(; Theorem: |- ((= \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a))) \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1308 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (thm_1307 A p_1) (thm_1307 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a)))) (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1309 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (thm_7 A) (thm_1308 A p_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> ((= x) a)) (p x))) \lambda x. ((Data.Bool.==> ((= x) a)) (p x))) ;)

(; dict ;)

def thm_1310 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3)) (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3)).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> ((= x) a)) (p x))) \lambda x. ((Data.Bool.==> ((= x) a)) (p x))) ;)

(; dict ;)

def thm_1311 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3)) (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3)) (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3)) (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3)) (thm_1310 A p_1 a_2) (thm_1310 A p_1 a_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) ;)

(; dict ;)

def thm_1312 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3)) (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3)) (thm_7 A) (thm_1311 A p_1 a_2).

(; Theorem: |- ((= (= (\lambda _21. (p _21) x))) (= (\lambda _21. (p _21) x))) ;)

(; dict ;)

def thm_1313 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__21_3 : hol.term A => p_2 __21_3) x_1)) (hol.eq hol.bool ((__21_3 : hol.term A => p_2 __21_3) x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__21_3 : hol.term A => p_2 __21_3) x_1)).

(; Theorem: |- ((= (\lambda _21. (p _21) a)) (p a)) ;)

(; dict ;)

def thm_1314 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__21_3 : hol.term A => p_2 __21_3) a_1) (p_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (__21_3 : hol.term A => p_2 __21_3) a_1.

(; Theorem: |- ((= ((= (\lambda _21. (p _21) x)) (\lambda _21. (p _21) a))) ((= (\lambda _21. (p _21) x)) (p a))) ;)

(; dict ;)

def thm_1315 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__21_4 : hol.term A => p_3 __21_4) x_2) ((__21_4 : hol.term A => p_3 __21_4) a_1)) (hol.eq hol.bool ((__21_4 : hol.term A => p_3 __21_4) x_2) (p_3 a_1))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__21_4 : hol.term A => p_3 __21_4) x_2)) (hol.eq hol.bool ((__21_4 : hol.term A => p_3 __21_4) x_2)) ((__21_4 : hol.term A => p_3 __21_4) a_1) (p_3 a_1) (thm_1313 A x_2 p_3) (thm_1314 A a_1 p_3).

(; Theorem: |- ((= (\lambda _21. (p _21) x)) (p x)) ;)

(; dict ;)

def thm_1316 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__21_3 : hol.term A => p_2 __21_3) x_1) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (__21_3 : hol.term A => p_2 __21_3) x_1.

(; Theorem: |- ((= (= (\lambda _21. (p _21) x))) (= (p x))) ;)

(; dict ;)

def thm_1317 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__21_3 : hol.term A => p_2 __21_3) x_1)) (hol.eq hol.bool (p_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__21_3 : hol.term A => p_2 __21_3) x_1) (p_2 x_1) thm_1106 (thm_1316 A x_1 p_2).

(; Theorem: |- ((= ((= (\lambda _21. (p _21) x)) (p a))) ((= (p x)) (p a))) ;)

(; dict ;)

def thm_1318 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__21_4 : hol.term A => p_3 __21_4) x_2) (p_3 a_1)) (hol.eq hol.bool (p_3 x_2) (p_3 a_1))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__21_4 : hol.term A => p_3 __21_4) x_2)) (hol.eq hol.bool (p_3 x_2)) (p_3 a_1) (p_3 a_1) (thm_1317 A x_2 p_3) (thm_1239 A a_1 p_3).

(; Theorem: |- ((= ((= (\lambda _21. (p _21) x)) (\lambda _21. (p _21) a))) ((= (p x)) (p a))) ;)

(; dict ;)

def thm_1319 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__21_4 : hol.term A => p_3 __21_4) x_2) ((__21_4 : hol.term A => p_3 __21_4) a_1)) (hol.eq hol.bool (p_3 x_2) (p_3 a_1))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool ((__21_4 : hol.term A => p_3 __21_4) x_2) ((__21_4 : hol.term A => p_3 __21_4) a_1)) (hol.eq hol.bool ((__21_4 : hol.term A => p_3 __21_4) x_2) (p_3 a_1)) (hol.eq hol.bool (p_3 x_2) (p_3 a_1)) (thm_1315 A a_1 x_2 p_3) (thm_1318 A a_1 x_2 p_3).

(; Theorem: |- ((= \lambda _21. (p _21)) \lambda _21. (p _21)) ;)

(; dict ;)

def thm_1320 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (__21_2 : hol.term A => p_1 __21_2) (__21_2 : hol.term A => p_1 __21_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (__21_2 : hol.term A => p_1 __21_2).

(; Theorem: |- ((= (\lambda _21. (p _21) x)) (\lambda _21. (p _21) a)) ;)

(; dict ;)

def thm_1321 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq A x_2 a_1) -> hol.proof (hol.eq hol.bool ((__21_4 : hol.term A => p_3 __21_4) x_2) ((__21_4 : hol.term A => p_3 __21_4) a_1)) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq A x_2 a_1) => hol.APP_THM A hol.bool (__21_4 : hol.term A => p_3 __21_4) (__21_4 : hol.term A => p_3 __21_4) x_2 a_1 (thm_1320 A p_3) (thm_1210 A a_1 x_2 hyp_1).

(; Theorem: |- ((= (p x)) (p a)) ;)

(; dict ;)

def thm_1322 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq A x_2 a_1) -> hol.proof (hol.eq hol.bool (p_3 x_2) (p_3 a_1)) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq A x_2 a_1) => hol.EQ_MP (hol.eq hol.bool ((__21_4 : hol.term A => p_3 __21_4) x_2) ((__21_4 : hol.term A => p_3 __21_4) a_1)) (hol.eq hol.bool (p_3 x_2) (p_3 a_1)) (thm_1319 A a_1 x_2 p_3) (thm_1321 A a_1 x_2 p_3 hyp_1).

(; Theorem: |- ((= (p a)) (p x)) ;)

(; dict ;)

def thm_1323 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq A x_1 a_2) -> hol.proof (hol.eq hol.bool (p_3 a_2) (p_3 x_1)) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq A x_1 a_2) => hol.SYM hol.bool (p_3 x_1) (p_3 a_2) (thm_1322 A a_2 x_1 p_3 hyp_1).

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_1324 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 a_1) -> hyp_2 : hol.proof (hol.eq A x_2 a_1) -> hol.proof (p_3 x_2) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 a_1) => hyp_2 : hol.proof (hol.eq A x_2 a_1) => hol.EQ_MP (p_3 a_1) (p_3 x_2) (thm_1323 A x_2 a_1 p_3 hyp_2) (thm_1241 A a_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= x) a)) (p x)) ;)

(; dict ;)

def thm_1325 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (p_1 a_2) -> hol.proof (hol.imp (hol.eq A x_3 a_2) (p_1 x_3)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (p_1 a_2) => hyp_2 : hol.proof (hol.eq A x_3 a_2) => thm_1324 A a_2 x_3 p_1 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x))) ;)

(; dict ;)

def thm_1326 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hyp_1 : hol.proof (p_1 a_2) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hyp_1 : hol.proof (p_1 a_2) => x_3 : hol.term A => thm_1325 A p_1 a_2 x_3 hyp_1.

(; Theorem: |- ((Data.Bool.==> (p a)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) ;)

(; dict ;)

def thm_1327 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (p_2 a_1) (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_1) (p_2 x_3)))) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 a_1) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_1) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_1) (p_2 x_3))) (thm_1312 A p_2 a_1) (thm_1326 A p_2 a_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> ((= x) x)) p)) p)) ((= ((Data.Bool.==> ((= x) x)) p)) p)) ;)

(; dict ;)

def thm_1328 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1)) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> ((= x) x)) p)) p)) ((= ((Data.Bool.==> ((= x) x)) p)) p)) ;)

(; dict ;)

def thm_1329 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1)) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1) (thm_1328 A p_1 x_2) (thm_1328 A p_1 x_2).

(; Theorem: |- ((= (Data.Bool.==> ((= x) x))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_1330 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq A x_1 x_1)) (hol.imp hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq A x_1 x_1) hol.true thm_1118 (thm_142 A x_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= x) x)) p)) ((Data.Bool.==> Data.Bool.T) p)) ;)

(; dict ;)

def thm_1331 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) (hol.imp hol.true p_1)) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq A x_2 x_2)) (hol.imp hol.true) p_1 p_1 (thm_1330 A x_2) (thm_55 p_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) p)) p) ;)

(; dict ;)

def thm_1332 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true p_1) p_1) :=
  p_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_1072 t_1) p_1.

(; Theorem: |- ((= ((Data.Bool.==> ((= x) x)) p)) p) ;)

(; dict ;)

def thm_1333 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) (hol.imp hol.true p_1) p_1 (thm_1331 A p_1 x_2) (thm_1332 p_1).

(; Theorem: |- ((= (= ((Data.Bool.==> ((= x) x)) p))) (= p)) ;)

(; dict ;)

def thm_1334 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1)) (hol.eq hol.bool p_1)) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp (hol.eq A x_2 x_2) p_1) p_1 thm_1106 (thm_1333 A p_1 x_2).

(; Theorem: |- ((= ((= ((Data.Bool.==> ((= x) x)) p)) p)) ((= p) p)) ;)

(; dict ;)

def thm_1335 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1) (hol.eq hol.bool p_1 p_1)) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1)) (hol.eq hol.bool p_1) p_1 p_1 (thm_1334 A p_1 x_2) (thm_55 p_1).

(; Theorem: |- ((= ((= p) p)) Data.Bool.T) ;)

(; dict ;)

def thm_1336 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool p_1 p_1) hol.true) :=
  p_1 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_1152 x_1) p_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> ((= x) x)) p)) p)) Data.Bool.T) ;)

(; dict ;)

def thm_1337 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1) hol.true) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1) (hol.eq hol.bool p_1 p_1) hol.true (thm_1335 A p_1 x_2) (thm_1336 p_1).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.==> ((= x) x)) p)) p)) ;)

(; dict ;)

def thm_1338 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1)) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => hol.SYM hol.bool (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1) hol.true (thm_1337 A p_1 x_2).

(; Theorem: |- ((= ((Data.Bool.==> ((= a) a)) (p a))) (p a)) ;)

(; dict ;)

def thm_1339 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A a_2 a_2) (p_1 a_2)) (p_1 a_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => (A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => (A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1) (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1) (thm_1329 A p_1 x_2) (hol.EQ_MP hol.true (hol.eq hol.bool (hol.imp (hol.eq A x_2 x_2) p_1) p_1) (thm_1338 A p_1 x_2) thm_1)) A p_1 x_2) A (p_1 a_2) a_2.

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool.==> ((= a) a)) (p a)))) (Data.Bool.==> (p a))) ;)

(; dict ;)

def thm_1340 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.imp (hol.eq A a_2 a_2) (p_1 a_2))) (hol.imp (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.imp (hol.eq A a_2 a_2) (p_1 a_2)) (p_1 a_2) thm_1118 (thm_1339 A p_1 a_2).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= a) a)) (p a))) (p a))) ((Data.Bool.==> (p a)) (p a))) ;)

(; dict ;)

def thm_1341 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq A a_2 a_2) (p_1 a_2)) (p_1 a_2)) (hol.imp (p_1 a_2) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.imp (hol.eq A a_2 a_2) (p_1 a_2))) (hol.imp (p_1 a_2)) (p_1 a_2) (p_1 a_2) (thm_1340 A p_1 a_2) (thm_1239 A a_2 p_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_1342 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_1343 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_1342 t_1) (thm_1342 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_1344 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_1345 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_1344 thm_1344.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) ;)

(; dict ;)

def thm_1346 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_150 thm_1345.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_1347 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_1348 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (thm_1072 t_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => thm_1347 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_1349 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_1350 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (thm_1083 t_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => thm_1349 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_1351 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_1352 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (thm_1094 t_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => thm_1351 t_1 hyp_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_1353 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_1354 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_1353 thm_1353.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_1355 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_150 thm_1354.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_1356 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_140 t_1) (hol.imp t_1 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_1357 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_1356 t_1) (thm_376 t_1).

(; Theorem: |- ((= (= ((Data.Bool.==> t) t))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_1358 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp t_1 t_1) hol.true thm_1106 (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_1342 t_1) (thm_1357 t_1)).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_1359 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true) hol.true hol.true (thm_1358 t_1) thm_943.

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_1360 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true) (thm_1359 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_1361 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_1360 t_1) thm_943.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_1362 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_1363 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_1342 t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) thm_1355 thm_1361 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => thm_1362 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_1364 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_1363 t_1) (thm_890 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_1365 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_1352 t_1) (thm_1364 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_1366 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (thm_1350 t_1) (thm_1365 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_1367 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (thm_1348 t_1) (thm_1366 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_1368 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => thm_1367 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_1369 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_1370 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) thm_1346 thm_1368 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => thm_1369 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_1371 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_1372 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_1370 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => thm_1371 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_1373 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_1374 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_1372 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => thm_1373 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_1375 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_1376 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_1374 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) => thm_1375 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (p a)) (p a))) Data.Bool.T) ;)

(; dict ;)

def thm_1377 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_2 a_1) (p_2 a_1)) hol.true) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_1343 t_1) (thm_1376 t_1)) (p_2 a_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= a) a)) (p a))) (p a))) Data.Bool.T) ;)

(; dict ;)

def thm_1378 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq A a_2 a_2) (p_1 a_2)) (p_1 a_2)) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.imp (hol.eq A a_2 a_2) (p_1 a_2)) (p_1 a_2)) (hol.imp (p_1 a_2) (p_1 a_2)) hol.true (thm_1341 A p_1 a_2) (thm_1377 A a_2 p_1).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> ((Data.Bool.==> ((= a) a)) (p a))) (p a))) ;)

(; dict ;)

def thm_1379 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.imp (hol.eq A a_2 a_2) (p_1 a_2)) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.SYM hol.bool (hol.imp (hol.imp (hol.eq A a_2 a_2) (p_1 a_2)) (p_1 a_2)) hol.true (thm_1378 A p_1 a_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= a) a)) (p a))) (p a)) ;)

(; dict ;)

def thm_1380 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.imp (hol.imp (hol.eq A a_2 a_2) (p_1 a_2)) (p_1 a_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.EQ_MP hol.true (hol.imp (hol.imp (hol.eq A a_2 a_2) (p_1 a_2)) (p_1 a_2)) (thm_1379 A p_1 a_2) thm_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x))) ;)

(; dict ;)

def thm_1381 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= a) a)) (p a)) ;)

(; dict ;)

def thm_1382 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) -> hol.proof (hol.imp (hol.eq A a_2 a_2) (p_1 a_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) => thm_1381 A p_1 a_2 hyp_1 a_2.

(; Theorem: |- (p a) ;)

(; dict ;)

def thm_1383 : A : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_1) (p_2 x_3))) -> hol.proof (p_2 a_1) :=
  A : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_1) (p_2 x_3))) => thm_1380 A p_2 a_1 (thm_1382 A p_2 a_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a)) ;)

(; dict ;)

def thm_1384 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) => thm_1383 A a_2 p_1 hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a)) ;)

(; dict ;)

def thm_1385 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.PROP_EXT (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2) (hyp_1 : hol.proof (p_1 a_2) => thm_1327 A a_2 p_1 (thm_1241 A a_2 p_1 hyp_1)) (hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) => thm_1384 A p_1 a_2 (thm_1381 A p_1 a_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1386 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => thm_1385 A p_1 a_2.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1387 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) (thm_1309 A p_1) (thm_1386 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a)))) ;)

(; thm ;)

def thm_1388 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)))) (thm_1306 A) (thm_1387 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a)))) \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1389 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a)))) \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1390 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (thm_1389 A) (thm_1389 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a))))) ;)

(; dict ;)

def thm_1391 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (thm_1102 A) (thm_1390 A).

(; Theorem: |- ((= \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a))) \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1392 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)).

(; Theorem: |- ((= \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a))) \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1393 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (thm_1392 A p_1) (thm_1392 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a)))) (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1394 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (thm_7 A) (thm_1393 A p_1).

(; Theorem: |- ((= ((= a) x)) ((= x) a)) ;)

(; dict ;)

def thm_1395 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A a_2 x_1) (hol.eq A x_1 a_2)) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => hol.PROP_EXT (hol.eq A a_2 x_1) (hol.eq A x_1 a_2) (hyp_1 : hol.proof (hol.eq A x_1 a_2) => thm_1291 A x_1 a_2 hyp_1) (hyp_1 : hol.proof (hol.eq A a_2 x_1) => thm_1290 A a_2 x_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.==> ((= a) x))) (Data.Bool.==> ((= x) a))) ;)

(; dict ;)

def thm_1396 : A : hol.type -> x_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq A a_2 x_1)) (hol.imp (hol.eq A x_1 a_2))) :=
  A : hol.type => x_1 : hol.term A => a_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq A a_2 x_1) (hol.eq A x_1 a_2) thm_1118 (thm_1395 A x_1 a_2).

(; Theorem: |- ((= ((Data.Bool.==> ((= a) x)) (p x))) ((Data.Bool.==> ((= x) a)) (p x))) ;)

(; dict ;)

def thm_1397 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A a_3 x_2) (p_1 x_2)) (hol.imp (hol.eq A x_2 a_3) (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => a_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq A a_3 x_2)) (hol.imp (hol.eq A x_2 a_3)) (p_1 x_2) (p_1 x_2) (thm_1396 A x_2 a_3) (thm_1258 A x_2 p_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> ((= a) x)) (p x))) \lambda x. ((Data.Bool.==> ((= x) a)) (p x))) ;)

(; dict ;)

def thm_1398 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3)) (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3)) (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3)) (x_3 : hol.term A => thm_1397 A p_1 x_3 a_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) ;)

(; dict ;)

def thm_1399 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3)) (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3)) (thm_7 A) (thm_1398 A p_1 a_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x))))) (= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x))))) ;)

(; dict ;)

def thm_1400 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) thm_1106 (thm_1399 A p_1 a_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a))) ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1401 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3)))) (p_1 a_2) (p_1 a_2) (thm_1400 A p_1 a_2) (thm_1239 A a_2 p_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) a)) (p x)))) (p a))) ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1402 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.SYM hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (thm_1401 A p_1 a_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a)) ;)

(; dict ;)

def thm_1403 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A x_3 a_2) (p_1 x_3))) (p_1 a_2)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)) (thm_1402 A p_1 a_2) (thm_1385 A p_1 a_2).

(; Theorem: |- (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a))) ;)

(; dict ;)

def thm_1404 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => a_2 : hol.term A => thm_1403 A p_1 a_2.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a)))) ;)

(; dict ;)

def thm_1405 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2))) (thm_1394 A p_1) (thm_1404 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda a. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((= a) x)) (p x)))) (p a)))) ;)

(; thm ;)

def thm_1406 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (a_2 : hol.term A => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.eq A a_2 x_3) (p_1 x_3))) (p_1 a_2)))) (thm_1391 A) (thm_1405 A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_1407 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool)))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr B hol.bool))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y))))) \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y))))) ;)

(; dict ;)

def thm_1408 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y))))) \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y))))) ;)

(; dict ;)

def thm_1409 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)))) (thm_1408 B A) (thm_1408 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y)))))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y)))))) ;)

(; dict ;)

def thm_1410 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)))) (thm_1407 B A) (thm_1409 B A).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((p x) y))) \lambda x. (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_1411 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3)) (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3)).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((p x) y))) \lambda x. (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_1412 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3)) (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3)) (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3)) (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3)) (thm_1411 B A p_1) (thm_1411 B A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_1413 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3)) (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3)) (thm_7 A) (thm_1412 B A p_1).

(; Theorem: |- ((= \lambda y. ((p x) y)) \lambda y. ((p x) y)) ;)

(; dict ;)

def thm_1414 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_3 : hol.term B => p_2 x_1 y_3) (y_3 : hol.term B => p_2 x_1 y_3)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr B hol.bool) (y_3 : hol.term B => p_2 x_1 y_3).

(; Theorem: |- ((= \lambda y. ((p x) y)) \lambda y. ((p x) y)) ;)

(; dict ;)

def thm_1415 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_3 : hol.term B => p_2 x_1 y_3) (y_3 : hol.term B => p_2 x_1 y_3)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS (hol.arr B hol.bool) (y_3 : hol.term B => p_2 x_1 y_3) (y_3 : hol.term B => p_2 x_1 y_3) (y_3 : hol.term B => p_2 x_1 y_3) (thm_1414 A B x_1 p_2) (thm_1414 A B x_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((p x) y))) (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_1416 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 x_1 y_3)) (hol.forall B (y_3 : hol.term B => p_2 x_1 y_3))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y_3 : hol.term B => p_2 x_1 y_3) (y_3 : hol.term B => p_2 x_1 y_3) (thm_116 B) (thm_1415 A B x_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y))) ;)

(; dict ;)

def thm_1417 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) -> hol.proof (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((p x) _52)) ;)

(; dict ;)

def thm_1418 : B : hol.type -> A : hol.type -> __52_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => p_2 x_4 y_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3 __52_1)) :=
  B : hol.type => A : hol.type => __52_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => p_2 x_4 y_3))) => thm_1417 A B p_2 hyp_1 __52_1.

(; Theorem: |- ((p _53) _52) ;)

(; dict ;)

def thm_1419 : B : hol.type -> A : hol.type -> __52_1 : hol.term B -> __53_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => hol.forall A (x_5 : hol.term A => p_3 x_5 y_4))) -> hol.proof (p_3 __53_2 __52_1) :=
  B : hol.type => A : hol.type => __52_1 : hol.term B => __53_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => hol.forall A (x_5 : hol.term A => p_3 x_5 y_4))) => thm_1418 B A __52_1 p_3 hyp_1 __53_2.

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_1420 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall B (y__1_4 : hol.term B => hol.forall A (x__1_5 : hol.term A => p_3 x__1_5 y__1_4))) -> hol.proof (p_3 x_2 y_1) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall B (y__1_4 : hol.term B => hol.forall A (x__1_5 : hol.term A => p_3 x__1_5 y__1_4))) => (B : hol.type => A : hol.type => __52_1 : hol.term B => __53_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => hol.forall A (x_5 : hol.term A => p_3 x_5 y_4))) => thm_1419 B A __52_1 __53_2 p_3 hyp_1) B A y_1 x_2 p_3 hyp_1.

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_1421 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall B (y__1_4 : hol.term B => hol.forall A (x__1_5 : hol.term A => p_3 x__1_5 y__1_4))) -> hol.proof (p_3 x_2 y_1) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall B (y__1_4 : hol.term B => hol.forall A (x__1_5 : hol.term A => p_3 x__1_5 y__1_4))) => hol.PROVE_HYP (hol.forall B (y__1_4 : hol.term B => hol.forall A (x__1_5 : hol.term A => p_3 x__1_5 y__1_4))) (p_3 x_2 y_1) ((A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) => thm_1417 A B p_1 hyp_1) A B p_3 hyp_1) (hyp_2 : hol.proof (hol.forall B (y__1_4 : hol.term B => hol.forall A (x__1_5 : hol.term A => p_3 x__1_5 y__1_4))) => thm_1420 B A y_1 x_2 p_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((p x) y)) ;)

(; dict ;)

def thm_1422 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall B (y__1_3 : hol.term B => hol.forall A (x__1_4 : hol.term A => p_2 x__1_4 y__1_3))) -> hol.proof (hol.forall B (y_3 : hol.term B => p_2 x_1 y_3)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall B (y__1_3 : hol.term B => hol.forall A (x__1_4 : hol.term A => p_2 x__1_4 y__1_3))) => y_3 : hol.term B => thm_1421 B A y_3 x_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_1423 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall B (y__1_2 : hol.term B => hol.forall A (x__1_3 : hol.term A => p_1 x__1_3 y__1_2))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall B (y__1_2 : hol.term B => hol.forall A (x__1_3 : hol.term A => p_1 x__1_3 y__1_2))) => x_2 : hol.term A => hol.EQ_MP (hol.forall B (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => p_1 x_2 y_3)) (thm_1416 A B x_2 p_1) (thm_1422 A B x_2 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_1424 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3)))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) => hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (thm_1413 B A p_1) (thm_1423 B A p_1 hyp_1).

(; Theorem: |- ((= \lambda y. (Data.Bool.! \lambda x. ((p x) y))) \lambda y. (Data.Bool.! \lambda x. ((p x) y))) ;)

(; dict ;)

def thm_1425 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)) (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr B hol.bool) (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)).

(; Theorem: |- ((= \lambda y. (Data.Bool.! \lambda x. ((p x) y))) \lambda y. (Data.Bool.! \lambda x. ((p x) y))) ;)

(; dict ;)

def thm_1426 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)) (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS (hol.arr B hol.bool) (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)) (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)) (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)) (thm_1425 A B p_1) (thm_1425 A B p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y)))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y)))) ;)

(; dict ;)

def thm_1427 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)) (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)) (thm_116 B) (thm_1426 A B p_1).

(; Theorem: |- ((= \lambda x. ((p x) y)) \lambda x. ((p x) y)) ;)

(; dict ;)

def thm_1428 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => p_2 x_3 y_1) (x_3 : hol.term A => p_2 x_3 y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => p_2 x_3 y_1).

(; Theorem: |- ((= \lambda x. ((p x) y)) \lambda x. ((p x) y)) ;)

(; dict ;)

def thm_1429 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => p_2 x_3 y_1) (x_3 : hol.term A => p_2 x_3 y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => p_2 x_3 y_1) (x_3 : hol.term A => p_2 x_3 y_1) (x_3 : hol.term A => p_2 x_3 y_1) (thm_1428 B A y_1 p_2) (thm_1428 B A y_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((p x) y))) (Data.Bool.! \lambda x. ((p x) y))) ;)

(; dict ;)

def thm_1430 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 x_3 y_1)) (hol.forall A (x_3 : hol.term A => p_2 x_3 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => p_2 x_3 y_1) (x_3 : hol.term A => p_2 x_3 y_1) (thm_7 A) (thm_1429 B A y_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_1431 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((p _48) y)) ;)

(; dict ;)

def thm_1432 : A : hol.type -> B : hol.type -> __48_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => p_2 x_3 y_4))) -> hol.proof (hol.forall B (y_3 : hol.term B => p_2 __48_1 y_3)) :=
  A : hol.type => B : hol.type => __48_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => p_2 x_3 y_4))) => thm_1431 B A p_2 hyp_1 __48_1.

(; Theorem: |- ((p _48) _49) ;)

(; dict ;)

def thm_1433 : B : hol.type -> A : hol.type -> __49_1 : hol.term B -> __48_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => p_3 x_4 y_5))) -> hol.proof (p_3 __48_2 __49_1) :=
  B : hol.type => A : hol.type => __49_1 : hol.term B => __48_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => p_3 x_4 y_5))) => thm_1432 A B __48_2 p_3 hyp_1 __49_1.

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_1434 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y__1_5 : hol.term B => p_3 x__1_4 y__1_5))) -> hol.proof (p_3 x_2 y_1) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y__1_5 : hol.term B => p_3 x__1_4 y__1_5))) => (B : hol.type => A : hol.type => __49_1 : hol.term B => __48_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => p_3 x_4 y_5))) => thm_1433 B A __49_1 __48_2 p_3 hyp_1) B A y_1 x_2 p_3 hyp_1.

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_1435 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y__1_5 : hol.term B => p_3 x__1_4 y__1_5))) -> hol.proof (p_3 x_2 y_1) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y__1_5 : hol.term B => p_3 x__1_4 y__1_5))) => hol.PROVE_HYP (hol.forall A (x__1_4 : hol.term A => hol.forall B (y__1_5 : hol.term B => p_3 x__1_4 y__1_5))) (p_3 x_2 y_1) ((B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) => thm_1431 B A p_1 hyp_1) B A p_3 hyp_1) (hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y__1_5 : hol.term B => p_3 x__1_4 y__1_5))) => thm_1434 B A y_1 x_2 p_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. ((p x) y)) ;)

(; dict ;)

def thm_1436 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall B (y__1_4 : hol.term B => p_2 x__1_3 y__1_4))) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3 y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall B (y__1_4 : hol.term B => p_2 x__1_3 y__1_4))) => x_3 : hol.term A => thm_1435 B A y_1 x_3 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y))) ;)

(; dict ;)

def thm_1437 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_2 : hol.term A => hol.forall B (y__1_3 : hol.term B => p_1 x__1_2 y__1_3))) -> hol.proof (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_2 : hol.term A => hol.forall B (y__1_3 : hol.term B => p_1 x__1_2 y__1_3))) => y_2 : hol.term B => hol.EQ_MP (hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)) (hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)) (thm_1430 B A y_2 p_1) (thm_1436 B A y_2 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y)))) ;)

(; dict ;)

def thm_1438 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) => hol.EQ_MP (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) (thm_1427 A B p_1) (thm_1437 A B p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y)))) ;)

(; dict ;)

def thm_1439 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.PROP_EXT (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) (hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))) => thm_1424 A B p_1 (thm_1417 A B p_1 hyp_1)) (hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) => thm_1438 B A p_1 (thm_1431 B A p_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((p x) y))))) ;)

(; dict ;)

def thm_1440 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1439 B A p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x_1. (Data.Bool.! \lambda y_1. ((p x_1) y_1)))) (Data.Bool.! \lambda y_1. (Data.Bool.! \lambda x_1. ((p x_1) y_1))))) ;)

(; thm ;)

def thm_1441 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x__1_2 : hol.term A => hol.forall B (y__1_3 : hol.term B => p_1 x__1_2 y__1_3))) (hol.forall B (y__1_2 : hol.term B => hol.forall A (x__1_3 : hol.term A => p_1 x__1_3 y__1_2))))) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall B (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => p_1 x_3 y_2))))) (thm_1410 B A) (thm_1440 B A)) B A.

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))))) \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))))) ;)

(; dict ;)

def thm_1442 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2)))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2)))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))))) \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))))) ;)

(; dict ;)

def thm_1443 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2)))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2)))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2)))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2)))) (thm_1442 B A) (thm_1442 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y)))))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y)))))) ;)

(; dict ;)

def thm_1444 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2)))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2)))) (thm_1407 B A) (thm_1443 B A).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda y. (Data.Bool.? \lambda x. ((p x) y)) x)) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))))) ((Data.Bool.==> (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y))))) ;)

(; dict ;)

def thm_1445 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.forall B (x_2 : hol.term B => hol.imp ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_1 x_4 y_3)) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) B (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((p x) y) x)) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((p x) y))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y))))) ;)

(; dict ;)

def thm_1446 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4 y_1) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => p_2 x_4 y_5))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3 y_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4))))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4))) (x_3 : hol.term A => p_2 x_3 y_1).

(; Theorem: |- ((= (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)) (Data.Bool.? \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_1447 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1.

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((p x) y))) (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)) ;)

(; dict ;)

def thm_1448 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (thm_1447 B A x_1 p_2).

(; Theorem: |- ((= (\lambda y. ((p x) y) y)) ((p x) y)) ;)

(; dict ;)

def thm_1449 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((y_4 : hol.term B => p_3 x_2 y_4) y_1) (p_3 x_2 y_1)) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (y_4 : hol.term B => p_3 x_2 y_4) y_1.

(; Theorem: |- ((= ((p x) y)) (\lambda y. ((p x) y) y)) ;)

(; dict ;)

def thm_1450 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 x_2 y_1) ((y_4 : hol.term B => p_3 x_2 y_4) y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool ((y_4 : hol.term B => p_3 x_2 y_4) y_1) (p_3 x_2 y_1) (thm_1449 A B y_1 x_2 p_3).

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_1451 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_3 x_2 y_1) -> hol.proof (p_3 x_2 y_1) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y_1) => hyp_1.

(; Theorem: |- (\lambda y. ((p x) y) y) ;)

(; dict ;)

def thm_1452 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_3 x_2 y_1) -> hol.proof ((y_4 : hol.term B => p_3 x_2 y_4) y_1) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y_1) => hol.EQ_MP (p_3 x_2 y_1) ((y_4 : hol.term B => p_3 x_2 y_4) y_1) (thm_1450 B A y_1 x_2 p_3) ((B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y_1) => thm_1451 B A y_1 x_2 p_3 hyp_1) B A y_1 x_2 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda y. ((p x) y)) ;)

(; dict ;)

def thm_1453 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((y_4 : hol.term B => p_3 x_2 y_4) y_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_3 x_2 y_4)) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((y_4 : hol.term B => p_3 x_2 y_4) y_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) B y_1 (y_4 : hol.term B => p_3 x_2 y_4) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda y. ((p x) y)) ;)

(; dict ;)

def thm_1454 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_3 x_2 y_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_3 x_2 y_4)) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y_1) => hol.PROVE_HYP ((y_4 : hol.term B => p_3 x_2 y_4) y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_3 x_2 y_4)) (thm_1452 A B y_1 x_2 p_3 hyp_1) (hyp_2 : hol.proof ((y_4 : hol.term B => p_3 x_2 y_4) y_1) => thm_1453 A B y_1 x_2 p_3 hyp_2).

(; Theorem: |- (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x) ;)

(; dict ;)

def thm_1455 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_3 x_2 y_1) -> hol.proof ((x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => p_3 x_4 y_5)) x_2) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y_1) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_3 x_2 y_4)) ((x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => p_3 x_4 y_5)) x_2) (thm_1448 A B x_2 p_3) (thm_1454 A B y_1 x_2 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_1456 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A x_1 (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_1457 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_3 x_2 y_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => p_3 x_4 y_5))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y_1) => hol.PROVE_HYP ((x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => p_3 x_4 y_5)) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => p_3 x_4 y_5))) (thm_1455 B A y_1 x_2 p_3 hyp_1) (hyp_2 : hol.proof ((x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => p_3 x_4 y_5)) x_2) => thm_1456 B A x_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((p x) y)) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_1458 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (p_3 x_2 y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => p_3 x_4 y_5)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y_1) => thm_1457 B A y_1 x_2 p_3 hyp_1.

(; Theorem: |- ((= (\lambda x. ((p x) y) x)) ((p x) y)) ;)

(; dict ;)

def thm_1459 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => p_3 x_4 y_2) x_1) (p_3 x_1 y_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV A hol.bool (x_4 : hol.term A => p_3 x_4 y_2) x_1.

(; Theorem: |- (\lambda x. ((p x) y) x) ;)

(; dict ;)

def thm_1460 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4 y_2) x_1) -> hol.proof ((x_4 : hol.term A => p_3 x_4 y_2) x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4 y_2) x_1) => hyp_1.

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_1461 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4 y_1) x_2) -> hol.proof (p_3 x_2 y_1) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4 y_1) x_2) => hol.EQ_MP ((x_4 : hol.term A => p_3 x_4 y_1) x_2) (p_3 x_2 y_1) (thm_1459 B A x_2 y_1 p_3) (thm_1460 B A x_2 y_1 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_1462 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4 y_2) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => p_3 x_4 y_5))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4 y_2) x_1) => thm_1458 B A y_2 x_1 p_3 (thm_1461 B A y_2 x_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((p x) y) x)) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_1463 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp ((x_4 : hol.term A => p_3 x_4 y_2) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => p_3 x_4 y_5)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4 y_2) x_1) => thm_1462 B A x_1 y_2 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((p x) y) x)) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y))))) ;)

(; dict ;)

def thm_1464 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4 y_1) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => p_2 x_4 y_5))))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_3 : hol.term A => thm_1463 B A x_3 y_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((p x) y))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_1465 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3 y_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1446 B A y_1 p_2 (thm_1464 B A y_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((p x) y)) ;)

(; dict ;)

def thm_1466 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3 y_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3 y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3 y_1)) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_1467 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3 y_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3 y_1)) => thm_1465 B A y_1 p_2 ((B : hol.type => A : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3 y_1)) => thm_1466 B A y_1 p_2 hyp_1) B A y_1 p_2 hyp_1).

(; Theorem: |- ((= (\lambda y. (Data.Bool.? \lambda x. ((p x) y)) y)) (Data.Bool.? \lambda x. ((p x) y))) ;)

(; dict ;)

def thm_1468 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1.

(; Theorem: |- (\lambda y. (Data.Bool.? \lambda x. ((p x) y)) y) ;)

(; dict ;)

def thm_1469 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) -> hol.proof ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((p x) y)) ;)

(; dict ;)

def thm_1470 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3 y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) => hol.EQ_MP ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3 y_1)) (thm_1468 A B y_1 p_2) (thm_1469 A B y_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_1471 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3 y_1)) => thm_1467 B A y_1 p_2 hyp_2) (thm_1470 B A y_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda y. (Data.Bool.? \lambda x. ((p x) y)) y)) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_1472 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) => thm_1471 B A y_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> (\lambda y. (Data.Bool.? \lambda x. ((p x) y)) y)) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y))))) ;)

(; dict ;)

def thm_1473 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.forall B (y_2 : hol.term B => hol.imp ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_1 x_4 y_3)) y_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4))))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => y_2 : hol.term B => thm_1472 A B y_2 p_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y)))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_1474 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1445 A B p_1 (thm_1473 A B p_1).

(; Theorem: |- (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))) ;)

(; dict ;)

def thm_1475 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_1476 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y__1_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_1 x__1_3 y__1_2))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y__1_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_1 x__1_3 y__1_2))) => thm_1474 A B p_1 ((A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))) => thm_1475 A B p_1 hyp_1) A B p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y)))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))))) ;)

(; dict ;)

def thm_1477 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_1 x_4 y_3))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda y. ((p x) y) x)) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y)))))) ((Data.Bool.==> (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))))) ;)

(; dict ;)

def thm_1478 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.forall B (x_3 : hol.term B => hol.imp ((y_4 : hol.term B => p_2 x_1 y_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_2 x_5 y_4))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) B (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3))) (y_3 : hol.term B => p_2 x_1 y_3).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((p x) y))) (\lambda y. (Data.Bool.? \lambda x. ((p x) y)) y)) ;)

(; dict ;)

def thm_1479 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3 y_1)) ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3 y_1)) (thm_1468 A B y_1 p_2).

(; Theorem: |- ((= ((p x) y)) (\lambda x. ((p x) y) x)) ;)

(; dict ;)

def thm_1480 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 x_2 y_1) ((x_4 : hol.term A => p_3 x_4 y_1) x_2)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool ((x_4 : hol.term A => p_3 x_4 y_1) x_2) (p_3 x_2 y_1) (thm_1459 B A x_2 y_1 p_3).

(; Theorem: |- (\lambda x. ((p x) y) x) ;)

(; dict ;)

def thm_1481 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_3 x_1 y_2) -> hol.proof ((x_4 : hol.term A => p_3 x_4 y_2) x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_1 y_2) => hol.EQ_MP (p_3 x_1 y_2) ((x_4 : hol.term A => p_3 x_4 y_2) x_1) (thm_1480 B A y_2 x_1 p_3) (thm_1451 B A y_2 x_1 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((p x) y)) ;)

(; dict ;)

def thm_1482 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4 y_2) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4 y_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4 y_2) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A x_1 (x_4 : hol.term A => p_3 x_4 y_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((p x) y)) ;)

(; dict ;)

def thm_1483 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_3 x_1 y_2) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4 y_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_1 y_2) => hol.PROVE_HYP ((x_4 : hol.term A => p_3 x_4 y_2) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4 y_2)) (thm_1481 B A x_1 y_2 p_3 hyp_1) (hyp_2 : hol.proof ((x_4 : hol.term A => p_3 x_4 y_2) x_1) => thm_1482 B A x_1 y_2 p_3 hyp_2).

(; Theorem: |- (\lambda y. (Data.Bool.? \lambda x. ((p x) y)) y) ;)

(; dict ;)

def thm_1484 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_3 x_1 y_2) -> hol.proof ((y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_3 x_5 y_4)) y_2) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_1 y_2) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4 y_2)) ((y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_3 x_5 y_4)) y_2) (thm_1479 B A y_2 p_3) (thm_1483 B A x_1 y_2 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))) ;)

(; dict ;)

def thm_1485 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) y_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) B y_1 (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))) ;)

(; dict ;)

def thm_1486 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_3 x_2 y_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_3 x_5 y_4))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y_1) => hol.PROVE_HYP ((y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_3 x_5 y_4)) y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_3 x_5 y_4))) (thm_1484 A B x_2 y_1 p_3 hyp_1) (hyp_2 : hol.proof ((y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_3 x_5 y_4)) y_1) => thm_1485 A B y_1 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((p x) y)) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y)))) ;)

(; dict ;)

def thm_1487 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (p_3 x_2 y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_3 x_5 y_4)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y_1) => thm_1486 A B y_1 x_2 p_3 hyp_1.

(; Theorem: |- (\lambda y. ((p x) y) y) ;)

(; dict ;)

def thm_1488 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((y_4 : hol.term B => p_3 x_2 y_4) y_1) -> hol.proof ((y_4 : hol.term B => p_3 x_2 y_4) y_1) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((y_4 : hol.term B => p_3 x_2 y_4) y_1) => hyp_1.

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_1489 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((y_4 : hol.term B => p_3 x_2 y_4) y_1) -> hol.proof (p_3 x_2 y_1) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((y_4 : hol.term B => p_3 x_2 y_4) y_1) => hol.EQ_MP ((y_4 : hol.term B => p_3 x_2 y_4) y_1) (p_3 x_2 y_1) (thm_1449 A B y_1 x_2 p_3) (thm_1488 A B y_1 x_2 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))) ;)

(; dict ;)

def thm_1490 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((y_4 : hol.term B => p_3 x_2 y_4) y_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_3 x_5 y_4))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((y_4 : hol.term B => p_3 x_2 y_4) y_1) => thm_1487 B A y_1 x_2 p_3 (thm_1489 B A y_1 x_2 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda y. ((p x) y) y)) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y)))) ;)

(; dict ;)

def thm_1491 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp ((y_4 : hol.term B => p_3 x_2 y_4) y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_3 x_5 y_4)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((y_4 : hol.term B => p_3 x_2 y_4) y_1) => thm_1490 A B y_1 x_2 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> (\lambda y. ((p x) y) y)) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))))) ;)

(; dict ;)

def thm_1492 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.forall B (y_3 : hol.term B => hol.imp ((y_4 : hol.term B => p_2 x_1 y_4) y_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_2 x_5 y_4))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => y_3 : hol.term B => thm_1491 A B y_3 x_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y)))) ;)

(; dict ;)

def thm_1493 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1478 A B x_1 p_2 (thm_1492 A B x_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda y. ((p x) y)) ;)

(; dict ;)

def thm_1494 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))) ;)

(; dict ;)

def thm_1495 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y__1_3 : hol.term B => p_2 x_1 y__1_3)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y__1_3 : hol.term B => p_2 x_1 y__1_3)) => thm_1493 A B x_1 p_2 ((A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) => thm_1494 A B x_1 p_2 hyp_1) A B x_1 p_2 hyp_1).

(; Theorem: |- (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x) ;)

(; dict ;)

def thm_1496 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) -> hol.proof ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda y. ((p x) y)) ;)

(; dict ;)

def thm_1497 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) => hol.EQ_MP ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (thm_1447 B A x_1 p_2) (thm_1496 B A x_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))) ;)

(; dict ;)

def thm_1498 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) => thm_1495 A B x_1 p_2 hyp_2) (thm_1497 A B x_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y)))) ;)

(; dict ;)

def thm_1499 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4 y_3)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) => thm_1498 A B x_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))))) ;)

(; dict ;)

def thm_1500 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_1 x_4 y_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_2 : hol.term A => thm_1499 B A x_2 p_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y)))) ;)

(; dict ;)

def thm_1501 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1477 B A p_1 (thm_1500 B A p_1).

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_1502 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))) ;)

(; dict ;)

def thm_1503 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y__1_3 : hol.term B => p_1 x__1_2 y__1_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y__1_3 : hol.term B => p_1 x__1_2 y__1_3))) => thm_1501 B A p_1 ((B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) => thm_1502 B A p_1 hyp_1) B A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y)))) ;)

(; dict ;)

def thm_1504 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.PROP_EXT (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))) => thm_1476 B A p_1 hyp_2) (thm_1475 A B p_1 hyp_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) => thm_1503 A B p_1 hyp_2) (thm_1502 B A p_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.? \lambda y. (Data.Bool.? \lambda x. ((p x) y))))) ;)

(; dict ;)

def thm_1505 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_1504 B A p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x_1. (Data.Bool.? \lambda y_1. ((p x_1) y_1)))) (Data.Bool.? \lambda y_1. (Data.Bool.? \lambda x_1. ((p x_1) y_1))))) ;)

(; thm ;)

def thm_1506 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y__1_3 : hol.term B => p_1 x__1_2 y__1_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y__1_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_1 x__1_3 y__1_2))))) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3 y_2))))) (thm_1444 B A) (thm_1505 B A)) B A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_1507 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_1508 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (thm_1507 A) (thm_1507 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))))) ;)

(; dict ;)

def thm_1509 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (thm_1102 A) (thm_1508 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_1510 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_1511 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (thm_1510 A p_1) (thm_1510 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_1512 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (thm_1102 A) (thm_1511 A p_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ (p x)) (q x))) \lambda x. ((Data.Bool./\ (p x)) (q x))) ;)

(; dict ;)

def thm_1513 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3)) (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3)).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ (p x)) (q x))) \lambda x. ((Data.Bool./\ (p x)) (q x))) ;)

(; dict ;)

def thm_1514 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3)) (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3)) (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3)) (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3)) (thm_1513 A q_1 p_2) (thm_1513 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ;)

(; dict ;)

def thm_1515 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3)) (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3)) (thm_7 A) (thm_1514 A q_1 p_2).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))) ;)

(; dict ;)

def thm_1516 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) -> hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_1517 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.forall A (x_3 : hol.term A => q_1 x_3)) (hol.forall A (x_3 : hol.term A => p_2 x_3)) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_1518 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) => hol.PROVE_HYP (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)) (thm_1516 A q_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) => thm_1517 A q_1 p_2 hyp_2).

(; Theorem: |- (p _100) ;)

(; dict ;)

def thm_1519 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> __100_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4)) (hol.forall A (x_4 : hol.term A => q_1 x_4))) -> hol.proof (p_3 __100_2) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => __100_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4)) (hol.forall A (x_4 : hol.term A => q_1 x_4))) => thm_1518 A q_1 p_3 hyp_1 __100_2.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_1520 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_3 x__1_4)) (hol.forall A (x__1_4 : hol.term A => q_1 x__1_4))) -> hol.proof (p_3 x_2) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_3 x__1_4)) (hol.forall A (x__1_4 : hol.term A => q_1 x__1_4))) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => __100_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4)) (hol.forall A (x_4 : hol.term A => q_1 x_4))) => thm_1519 A q_1 __100_2 p_3 hyp_1) A q_1 x_2 p_3 hyp_1.

(; Theorem: |- ((= (q x)) ((Data.Bool./\ (p x)) (q x))) ;)

(; dict ;)

def thm_1521 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_1 x_2) -> hol.proof (hol.eq hol.bool (q_3 x_2) (hol.and (p_1 x_2) (q_3 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_1 x_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (p_1 x_2) (q_3 x_2) hyp_1.

(; Theorem: |- ((= (q x)) ((Data.Bool./\ (p x)) (q x))) ;)

(; dict ;)

def thm_1522 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_1 x__1_4)) (hol.forall A (x__1_4 : hol.term A => q_3 x__1_4))) -> hol.proof (hol.eq hol.bool (q_3 x_2) (hol.and (p_1 x_2) (q_3 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_1 x__1_4)) (hol.forall A (x__1_4 : hol.term A => q_3 x__1_4))) => hol.PROVE_HYP (p_1 x_2) (hol.eq hol.bool (q_3 x_2) (hol.and (p_1 x_2) (q_3 x_2))) (thm_1520 A q_3 x_2 p_1 hyp_1) (hyp_2 : hol.proof (p_1 x_2) => thm_1521 A p_1 x_2 q_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (q x)) ;)

(; dict ;)

def thm_1523 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (q x)) ;)

(; dict ;)

def thm_1524 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) => hol.PROVE_HYP (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => q_2 x_3)) (thm_1516 A q_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) => thm_1523 A p_1 q_2 hyp_2).

(; Theorem: |- (q _101) ;)

(; dict ;)

def thm_1525 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> __101_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4)) (hol.forall A (x_4 : hol.term A => q_3 x_4))) -> hol.proof (q_3 __101_2) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => __101_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4)) (hol.forall A (x_4 : hol.term A => q_3 x_4))) => thm_1524 A p_1 q_3 hyp_1 __101_2.

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_1526 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_1 x__1_4)) (hol.forall A (x__1_4 : hol.term A => q_3 x__1_4))) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_1 x__1_4)) (hol.forall A (x__1_4 : hol.term A => q_3 x__1_4))) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => __101_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4)) (hol.forall A (x_4 : hol.term A => q_3 x_4))) => thm_1525 A p_1 __101_2 q_3 hyp_1) A p_1 x_2 q_3 hyp_1.

(; Theorem: |- ((Data.Bool./\ (p x)) (q x)) ;)

(; dict ;)

def thm_1527 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_3 x__1_4)) (hol.forall A (x__1_4 : hol.term A => q_1 x__1_4))) -> hol.proof (hol.and (p_3 x_2) (q_1 x_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_3 x__1_4)) (hol.forall A (x__1_4 : hol.term A => q_1 x__1_4))) => hol.EQ_MP (q_1 x_2) (hol.and (p_3 x_2) (q_1 x_2)) (thm_1522 A p_3 x_2 q_1 hyp_1) (thm_1526 A p_3 x_2 q_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x))) ;)

(; dict ;)

def thm_1528 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x__1_3 : hol.term A => p_2 x__1_3)) (hol.forall A (x__1_3 : hol.term A => q_1 x__1_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x__1_3 : hol.term A => p_2 x__1_3)) (hol.forall A (x__1_3 : hol.term A => q_1 x__1_3))) => x_3 : hol.term A => thm_1527 A q_1 x_3 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ;)

(; dict ;)

def thm_1529 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (thm_1515 A q_1 p_2) (thm_1528 A q_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (p x))) ;)

(; dict ;)

def thm_1530 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => p_1 x_2) (x_2 : hol.term A => p_1 x_2) (thm_7 A) (thm_1109 A p_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x))) ;)

(; dict ;)

def thm_1531 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) => hyp_1.

(; Theorem: |- ((Data.Bool./\ (p _95)) (q _95)) ;)

(; dict ;)

def thm_1532 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> __95_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) (q_1 x_4))) -> hol.proof (hol.and (p_3 __95_2) (q_1 __95_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => __95_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) (q_1 x_4))) => thm_1531 A q_1 p_3 hyp_1 __95_2.

(; Theorem: |- (p _95) ;)

(; dict ;)

def thm_1533 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> __95_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_3 __95_2) (q_1 __95_2)) -> hol.proof (p_3 __95_2) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => __95_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 __95_2) (q_1 __95_2)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (q_1 __95_2) (p_3 __95_2) hyp_1.

(; Theorem: |- (p _95) ;)

(; dict ;)

def thm_1534 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> __95_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) (q_1 x_4))) -> hol.proof (p_3 __95_2) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => __95_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) (q_1 x_4))) => hol.PROVE_HYP (hol.and (p_3 __95_2) (q_1 __95_2)) (p_3 __95_2) (thm_1532 A q_1 __95_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (p_3 __95_2) (q_1 __95_2)) => thm_1533 A q_1 __95_2 p_3 hyp_2).

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_1535 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and (p_3 x__1_4) (q_1 x__1_4))) -> hol.proof (p_3 x_2) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and (p_3 x__1_4) (q_1 x__1_4))) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => __95_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) (q_1 x_4))) => thm_1534 A q_1 __95_2 p_3 hyp_1) A q_1 x_2 p_3 hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_1536 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and (p_3 x__1_4) (q_1 x__1_4))) -> hol.proof (p_3 x_2) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and (p_3 x__1_4) (q_1 x__1_4))) => hol.PROVE_HYP (hol.forall A (x__1_4 : hol.term A => hol.and (p_3 x__1_4) (q_1 x__1_4))) (p_3 x_2) ((A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) => thm_1531 A q_1 p_2 hyp_1) A q_1 p_3 hyp_1) (hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and (p_3 x__1_4) (q_1 x__1_4))) => thm_1535 A q_1 x_2 p_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_1537 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.and (p_2 x__1_3) (q_1 x__1_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.and (p_2 x__1_3) (q_1 x__1_3))) => x_3 : hol.term A => thm_1536 A q_1 x_3 p_2 hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (q x))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_1538 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => q_2 x_3)) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)) hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (q x))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_1539 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.and (p_1 x__1_3) (q_2 x__1_3))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => q_2 x_3)) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.and (p_1 x__1_3) (q_2 x__1_3))) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => q_2 x_3)) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (hol.EQ_MP (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => p_1 x_3)) (thm_1530 A p_1) (thm_1537 A q_2 p_1 hyp_1)) (hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) => thm_1538 A p_1 q_2 hyp_2).

(; Theorem: |- ((= \lambda x. (q x)) \lambda x. (q x)) ;)

(; dict ;)

def thm_1540 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => q_1 x_2) (x_2 : hol.term A => q_1 x_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => q_1 x_2).

(; Theorem: |- ((= \lambda x. (q x)) \lambda x. (q x)) ;)

(; dict ;)

def thm_1541 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => q_1 x_2) (x_2 : hol.term A => q_1 x_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => q_1 x_2) (x_2 : hol.term A => q_1 x_2) (x_2 : hol.term A => q_1 x_2) (thm_1540 A q_1) (thm_1540 A q_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (q x))) (Data.Bool.! \lambda x. (q x))) ;)

(; dict ;)

def thm_1542 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => q_1 x_2)) (hol.forall A (x_2 : hol.term A => q_1 x_2))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => q_1 x_2) (x_2 : hol.term A => q_1 x_2) (thm_7 A) (thm_1541 A q_1).

(; Theorem: |- ((Data.Bool./\ (p _96)) (q _96)) ;)

(; dict ;)

def thm_1543 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> __96_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) (q_1 x_4))) -> hol.proof (hol.and (p_3 __96_2) (q_1 __96_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => __96_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) (q_1 x_4))) => thm_1531 A q_1 p_3 hyp_1 __96_2.

(; Theorem: |- (q _96) ;)

(; dict ;)

def thm_1544 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> __96_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 __96_2) (q_3 __96_2)) -> hol.proof (q_3 __96_2) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => __96_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_1 __96_2) (q_3 __96_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (p_1 __96_2) (q_3 __96_2) hyp_1.

(; Theorem: |- (q _96) ;)

(; dict ;)

def thm_1545 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> __96_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_1 x_4) (q_3 x_4))) -> hol.proof (q_3 __96_2) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => __96_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_1 x_4) (q_3 x_4))) => hol.PROVE_HYP (hol.and (p_1 __96_2) (q_3 __96_2)) (q_3 __96_2) (thm_1543 A q_3 __96_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (p_1 __96_2) (q_3 __96_2)) => thm_1544 A p_1 __96_2 q_3 hyp_2).

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_1546 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and (p_1 x__1_4) (q_3 x__1_4))) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and (p_1 x__1_4) (q_3 x__1_4))) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => __96_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_1 x_4) (q_3 x_4))) => thm_1545 A p_1 __96_2 q_3 hyp_1) A p_1 x_2 q_3 hyp_1.

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_1547 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_1 x_4) (q_3 x_4))) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_1 x_4) (q_3 x_4))) => hol.PROVE_HYP (hol.forall A (x_4 : hol.term A => hol.and (p_1 x_4) (q_3 x_4))) (q_3 x_2) (thm_1531 A q_3 p_1 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_1 x_4) (q_3 x_4))) => thm_1546 A p_1 x_2 q_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (q x)) ;)

(; dict ;)

def thm_1548 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) => x_3 : hol.term A => thm_1547 A p_1 x_3 q_2 hyp_1.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))) ;)

(; dict ;)

def thm_1549 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.and (p_2 x__1_3) (q_1 x__1_3))) -> hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.and (p_2 x__1_3) (q_1 x__1_3))) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => q_1 x_3)) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) (thm_1539 A p_2 q_1 hyp_1) (hol.EQ_MP (hol.forall A (x_3 : hol.term A => q_1 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)) (thm_1542 A q_1) (thm_1548 A p_2 q_1 hyp_1)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_1550 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) => thm_1549 A q_1 p_2 hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_1551 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) => thm_1529 A q_1 p_2 (thm_1516 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) => thm_1550 A q_1 p_2 (thm_1531 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_1552 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => thm_1551 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_1553 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (thm_1512 A p_1) (thm_1552 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x_1. ((Data.Bool./\ (p x_1)) (q x_1)))) ((Data.Bool./\ (Data.Bool.! \lambda x_1. (p x_1))) (Data.Bool.! \lambda x_1. (q x_1)))))) ;)

(; thm ;)

def thm_1554 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x__1_3 : hol.term A => hol.and (p_1 x__1_3) (q_2 x__1_3))) (hol.and (hol.forall A (x__1_3 : hol.term A => p_1 x__1_3)) (hol.forall A (x__1_3 : hol.term A => q_2 x__1_3)))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (thm_1509 A) (thm_1553 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))))) ;)

(; dict ;)

def thm_1555 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))))) ;)

(; dict ;)

def thm_1556 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))) (thm_1555 A) (thm_1555 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x))))))) ;)

(; dict ;)

def thm_1557 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))) (thm_1102 A) (thm_1556 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x))))) \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x))))) ;)

(; dict ;)

def thm_1558 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x))))) \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x))))) ;)

(; dict ;)

def thm_1559 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))) (thm_1558 A p_1) (thm_1558 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))))) (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))))) ;)

(; dict ;)

def thm_1560 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))) (thm_1102 A) (thm_1559 A p_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ;)

(; dict ;)

def thm_1561 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) => thm_1549 A q_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) => thm_1528 A q_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x))))) ;)

(; dict ;)

def thm_1562 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => thm_1561 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))))) ;)

(; dict ;)

def thm_1563 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))))) (thm_1560 A p_1) (thm_1562 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x_1. (p x_1))) (Data.Bool.! \lambda x_1. (q x_1)))) (Data.Bool.! \lambda x_1. ((Data.Bool./\ (p x_1)) (q x_1)))))) ;)

(; thm ;)

def thm_1564 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x__1_3 : hol.term A => p_1 x__1_3)) (hol.forall A (x__1_3 : hol.term A => q_2 x__1_3))) (hol.forall A (x__1_3 : hol.term A => hol.and (p_1 x__1_3) (q_2 x__1_3)))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3)))))) (thm_1557 A) (thm_1563 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q))))) ;)

(; dict ;)

def thm_1565 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q))))) ;)

(; dict ;)

def thm_1566 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (thm_1565 A) (thm_1565 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)))))) ;)

(; dict ;)

def thm_1567 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (thm_1102 A) (thm_1566 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)))) \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)))) ;)

(; dict ;)

def thm_1568 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)))) \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)))) ;)

(; dict ;)

def thm_1569 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) (thm_1568 A p_1) (thm_1568 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q))))) (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q))))) ;)

(; dict ;)

def thm_1570 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) thm_150 (thm_1569 A p_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)) ;)

(; dict ;)

def thm_1571 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) => hyp_1.

(; Theorem: |- ((Data.Bool./\ (p _128)) q) ;)

(; dict ;)

def thm_1572 : A : hol.type -> q_1 : hol.term hol.bool -> __128_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) q_1)) -> hol.proof (hol.and (p_3 __128_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => __128_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) q_1)) => thm_1571 A q_1 p_3 hyp_1 __128_2.

(; Theorem: |- (p _128) ;)

(; dict ;)

def thm_1573 : A : hol.type -> q_1 : hol.term hol.bool -> __128_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_3 __128_2) q_1) -> hol.proof (p_3 __128_2) :=
  A : hol.type => q_1 : hol.term hol.bool => __128_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 __128_2) q_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) q_1 (p_3 __128_2) hyp_1.

(; Theorem: |- (p _128) ;)

(; dict ;)

def thm_1574 : A : hol.type -> q_1 : hol.term hol.bool -> __128_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) q_1)) -> hol.proof (p_3 __128_2) :=
  A : hol.type => q_1 : hol.term hol.bool => __128_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) q_1)) => hol.PROVE_HYP (hol.and (p_3 __128_2) q_1) (p_3 __128_2) (thm_1572 A q_1 __128_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (p_3 __128_2) q_1) => thm_1573 A q_1 __128_2 p_3 hyp_2).

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_1575 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and (p_3 x__1_4) q_1)) -> hol.proof (p_3 x_2) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and (p_3 x__1_4) q_1)) => (A : hol.type => q_1 : hol.term hol.bool => __128_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) q_1)) => thm_1574 A q_1 __128_2 p_3 hyp_1) A q_1 x_2 p_3 hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_1576 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and (p_3 x__1_4) q_1)) -> hol.proof (p_3 x_2) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and (p_3 x__1_4) q_1)) => hol.PROVE_HYP (hol.forall A (x__1_4 : hol.term A => hol.and (p_3 x__1_4) q_1)) (p_3 x_2) ((A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) => thm_1571 A q_1 p_2 hyp_1) A q_1 p_3 hyp_1) (hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and (p_3 x__1_4) q_1)) => thm_1575 A q_1 x_2 p_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_1577 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.and (p_2 x__1_3) q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.and (p_2 x__1_3) q_1)) => x_3 : hol.term A => thm_1576 A q_1 x_3 p_2 hyp_1.

(; Theorem: |- ((= q) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_1578 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) -> hol.proof (hol.eq hol.bool q_2 (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2 hyp_1.

(; Theorem: |- ((= q) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_1579 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.and (p_1 x__1_3) q_2)) -> hol.proof (hol.eq hol.bool q_2 (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.and (p_1 x__1_3) q_2)) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.eq hol.bool q_2 (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)) (hol.EQ_MP (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => p_1 x_3)) (thm_1530 A p_1) (thm_1577 A q_2 p_1 hyp_1)) (hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) => thm_1578 A p_1 q_2 hyp_2).

(; Theorem: |- ((Data.Bool./\ (p _129)) q) ;)

(; dict ;)

def thm_1580 : A : hol.type -> q_1 : hol.term hol.bool -> __129_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) q_1)) -> hol.proof (hol.and (p_3 __129_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => __129_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and (p_3 x_4) q_1)) => thm_1571 A q_1 p_3 hyp_1 __129_2.

(; Theorem: |- q ;)

(; dict ;)

def thm_1581 : A : hol.type -> __129_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (p_2 __129_1) q_3) -> hol.proof q_3 :=
  A : hol.type => __129_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (p_2 __129_1) q_3) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (p_2 __129_1) q_3 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_1582 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) => hol.PROVE_HYP (hol.and (p_1 (hol.witness A)) q_2) q_2 (thm_1580 A q_2 (hol.witness A) p_1 hyp_1) (hyp_2 : hol.proof (hol.and (p_1 (hol.witness A)) q_2) => thm_1581 A (hol.witness A) p_1 q_2 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_1583 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) q_2 (thm_1571 A q_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) => thm_1582 A p_1 q_2 hyp_2).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1584 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.and (p_2 x__1_3) q_1)) -> hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.and (p_2 x__1_3) q_1)) => hol.EQ_MP q_1 (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (thm_1579 A p_2 q_1 hyp_1) (thm_1583 A p_2 q_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_1585 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) => thm_1584 A q_1 p_2 hyp_1.

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ (p x)) q)) \lambda x. ((Data.Bool./\ (p x)) q)) ;)

(; dict ;)

def thm_1586 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ (p x)) q)) \lambda x. ((Data.Bool./\ (p x)) q)) ;)

(; dict ;)

def thm_1587 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1) (x_3 : hol.term A => hol.and (p_2 x_3) q_1) (x_3 : hol.term A => hol.and (p_2 x_3) q_1) (thm_1586 A q_1 p_2) (thm_1586 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q))) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q))) ;)

(; dict ;)

def thm_1588 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.and (p_2 x_3) q_1) (x_3 : hol.term A => hol.and (p_2 x_3) q_1) (thm_7 A) (thm_1587 A q_1 p_2).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1589 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) -> hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_1590 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) q_1 (hol.forall A (x_3 : hol.term A => p_2 x_3)) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_1591 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) => hol.PROVE_HYP (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => p_2 x_3)) (thm_1589 A q_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) => thm_1590 A q_1 p_2 hyp_2).

(; Theorem: |- (p _127) ;)

(; dict ;)

def thm_1592 : A : hol.type -> q_1 : hol.term hol.bool -> __127_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4)) q_1) -> hol.proof (p_3 __127_2) :=
  A : hol.type => q_1 : hol.term hol.bool => __127_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4)) q_1) => thm_1591 A q_1 p_3 hyp_1 __127_2.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_1593 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_3 x__1_4)) q_1) -> hol.proof (p_3 x_2) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_3 x__1_4)) q_1) => (A : hol.type => q_1 : hol.term hol.bool => __127_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4)) q_1) => thm_1592 A q_1 __127_2 p_3 hyp_1) A q_1 x_2 p_3 hyp_1.

(; Theorem: |- ((= q) ((Data.Bool./\ (p x)) q)) ;)

(; dict ;)

def thm_1594 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq hol.bool q_3 (hol.and (p_2 x_1) q_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term hol.bool => hyp_1 : hol.proof (p_2 x_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (p_2 x_1) q_3 hyp_1.

(; Theorem: |- ((= q) ((Data.Bool./\ (p x)) q)) ;)

(; dict ;)

def thm_1595 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_2 x__1_4)) q_3) -> hol.proof (hol.eq hol.bool q_3 (hol.and (p_2 x_1) q_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_2 x__1_4)) q_3) => hol.PROVE_HYP (p_2 x_1) (hol.eq hol.bool q_3 (hol.and (p_2 x_1) q_3)) (thm_1593 A q_3 x_1 p_2 hyp_1) (hyp_2 : hol.proof (p_2 x_1) => thm_1594 A x_1 p_2 q_3 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_1596 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_1597 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) => hol.PROVE_HYP (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) q_2 (thm_1589 A q_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) => thm_1596 A p_1 q_2 hyp_2).

(; Theorem: |- ((Data.Bool./\ (p x)) q) ;)

(; dict ;)

def thm_1598 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_3 x__1_4)) q_1) -> hol.proof (hol.and (p_3 x_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x__1_4 : hol.term A => p_3 x__1_4)) q_1) => hol.EQ_MP q_1 (hol.and (p_3 x_2) q_1) (thm_1595 A x_2 p_3 q_1 hyp_1) (thm_1597 A p_3 q_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)) ;)

(; dict ;)

def thm_1599 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (hol.forall A (x__1_3 : hol.term A => p_2 x__1_3)) q_1) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x__1_3 : hol.term A => p_2 x__1_3)) q_1) => x_3 : hol.term A => thm_1598 A q_1 x_3 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q))) ;)

(; dict ;)

def thm_1600 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (thm_1588 A q_1 p_2) (thm_1599 A q_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q))) ;)

(; dict ;)

def thm_1601 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) => thm_1585 A q_1 p_2 (thm_1571 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1) => thm_1600 A q_1 p_2 (thm_1589 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q)))) ;)

(; dict ;)

def thm_1602 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => thm_1601 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) q))))) ;)

(; dict ;)

def thm_1603 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (thm_1570 A p_1) (thm_1602 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.! \lambda x_1. (p x_1))) q)) (Data.Bool.! \lambda x_1. ((Data.Bool./\ (p x_1)) q))))) ;)

(; thm ;)

def thm_1604 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x__1_3 : hol.term A => p_1 x__1_3)) q_2) (hol.forall A (x__1_3 : hol.term A => hol.and (p_1 x__1_3) q_2))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) (thm_1567 A) (thm_1603 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x)))))) ;)

(; dict ;)

def thm_1605 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x)))))) ;)

(; dict ;)

def thm_1606 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (thm_1605 A) (thm_1605 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))))))) ;)

(; dict ;)

def thm_1607 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) thm_150 (thm_1606 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))))) \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))))) ;)

(; dict ;)

def thm_1608 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))))) \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))))) ;)

(; dict ;)

def thm_1609 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (thm_1608 A p_1) (thm_1608 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x)))))) (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x)))))) ;)

(; dict ;)

def thm_1610 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (thm_1102 A) (thm_1609 A p_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))) ;)

(; dict ;)

def thm_1611 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) => hyp_1.

(; Theorem: |- ((Data.Bool./\ p) (q _137)) ;)

(; dict ;)

def thm_1612 : A : hol.type -> __137_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and p_3 (q_2 x_4))) -> hol.proof (hol.and p_3 (q_2 __137_1)) :=
  A : hol.type => __137_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and p_3 (q_2 x_4))) => thm_1611 A q_2 p_3 hyp_1 __137_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_1613 : A : hol.type -> __137_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (q_2 __137_1)) -> hol.proof p_3 :=
  A : hol.type => __137_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (q_2 __137_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (q_2 __137_1) p_3 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_1614 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) -> hol.proof p_2 :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) => hol.PROVE_HYP (hol.and p_2 (q_1 (hol.witness A))) p_2 (thm_1612 A (hol.witness A) q_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.and p_2 (q_1 (hol.witness A))) => thm_1613 A (hol.witness A) q_1 p_2 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_1615 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) -> hol.proof p_2 :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) p_2 (thm_1611 A q_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) => thm_1614 A q_1 p_2 hyp_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (q x))) ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_1616 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => q_2 x_3)) (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)) hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (q x))) ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_1617 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => q_2 x_3)) (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) => hol.PROVE_HYP p_1 (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => q_2 x_3)) (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (thm_1615 A q_2 p_1 hyp_1) (hyp_2 : hol.proof p_1 => thm_1616 A p_1 q_2 hyp_2).

(; Theorem: |- ((Data.Bool./\ p) (q _138)) ;)

(; dict ;)

def thm_1618 : A : hol.type -> __138_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and p_3 (q_2 x_4))) -> hol.proof (hol.and p_3 (q_2 __138_1)) :=
  A : hol.type => __138_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and p_3 (q_2 x_4))) => thm_1611 A q_2 p_3 hyp_1 __138_1.

(; Theorem: |- (q _138) ;)

(; dict ;)

def thm_1619 : A : hol.type -> p_1 : hol.term hol.bool -> __138_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (q_3 __138_2)) -> hol.proof (q_3 __138_2) :=
  A : hol.type => p_1 : hol.term hol.bool => __138_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (q_3 __138_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) p_1 (q_3 __138_2) hyp_1.

(; Theorem: |- (q _138) ;)

(; dict ;)

def thm_1620 : A : hol.type -> p_1 : hol.term hol.bool -> __138_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and p_1 (q_3 x_4))) -> hol.proof (q_3 __138_2) :=
  A : hol.type => p_1 : hol.term hol.bool => __138_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and p_1 (q_3 x_4))) => hol.PROVE_HYP (hol.and p_1 (q_3 __138_2)) (q_3 __138_2) (thm_1618 A __138_2 q_3 p_1 hyp_1) (hyp_2 : hol.proof (hol.and p_1 (q_3 __138_2)) => thm_1619 A p_1 __138_2 q_3 hyp_2).

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_1621 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and p_1 (q_3 x__1_4))) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.and p_1 (q_3 x__1_4))) => (A : hol.type => p_1 : hol.term hol.bool => __138_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and p_1 (q_3 x_4))) => thm_1620 A p_1 __138_2 q_3 hyp_1) A p_1 x_2 q_3 hyp_1.

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_1622 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and p_1 (q_3 x_4))) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and p_1 (q_3 x_4))) => hol.PROVE_HYP (hol.forall A (x_4 : hol.term A => hol.and p_1 (q_3 x_4))) (q_3 x_2) (thm_1611 A q_3 p_1 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.and p_1 (q_3 x_4))) => thm_1621 A p_1 x_2 q_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (q x)) ;)

(; dict ;)

def thm_1623 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) => x_3 : hol.term A => thm_1622 A p_1 x_3 q_2 hyp_1.

(; Theorem: |- ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x))) ;)

(; dict ;)

def thm_1624 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) -> hol.proof (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => q_1 x_3)) (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (thm_1617 A p_2 q_1 hyp_1) (hol.EQ_MP (hol.forall A (x_3 : hol.term A => q_1 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)) (thm_1542 A q_1) (thm_1623 A p_2 q_1 hyp_1)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_1625 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) => thm_1624 A q_1 p_2 hyp_1.

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ p) (q x))) \lambda x. ((Data.Bool./\ p) (q x))) ;)

(; dict ;)

def thm_1626 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ p) (q x))) \lambda x. ((Data.Bool./\ p) (q x))) ;)

(; dict ;)

def thm_1627 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)) (thm_1626 A q_1 p_2) (thm_1626 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x)))) ;)

(; dict ;)

def thm_1628 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)) (thm_7 A) (thm_1627 A q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x))) ;)

(; dict ;)

def thm_1629 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) -> hol.proof (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_1630 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) -> hol.proof p_2 :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.forall A (x_3 : hol.term A => q_1 x_3)) p_2 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_1631 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) -> hol.proof p_2 :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) => hol.PROVE_HYP (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) p_2 (thm_1629 A q_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) => thm_1630 A q_1 p_2 hyp_2).

(; Theorem: |- ((= (q x)) ((Data.Bool./\ p) (q x))) ;)

(; dict ;)

def thm_1632 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool (q_3 x_2) (hol.and p_1 (q_3 x_2))) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) p_1 (q_3 x_2) hyp_1.

(; Theorem: |- ((= (q x)) ((Data.Bool./\ p) (q x))) ;)

(; dict ;)

def thm_1633 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (hol.forall A (x_4 : hol.term A => q_3 x_4))) -> hol.proof (hol.eq hol.bool (q_3 x_2) (hol.and p_1 (q_3 x_2))) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (hol.forall A (x_4 : hol.term A => q_3 x_4))) => hol.PROVE_HYP p_1 (hol.eq hol.bool (q_3 x_2) (hol.and p_1 (q_3 x_2))) (thm_1631 A q_3 p_1 hyp_1) (hyp_2 : hol.proof p_1 => thm_1632 A p_1 x_2 q_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (q x)) ;)

(; dict ;)

def thm_1634 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (q x)) ;)

(; dict ;)

def thm_1635 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) => hol.PROVE_HYP (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => q_2 x_3)) (thm_1629 A q_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) => thm_1634 A p_1 q_2 hyp_2).

(; Theorem: |- (q _136) ;)

(; dict ;)

def thm_1636 : A : hol.type -> p_1 : hol.term hol.bool -> __136_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (hol.forall A (x_4 : hol.term A => q_3 x_4))) -> hol.proof (q_3 __136_2) :=
  A : hol.type => p_1 : hol.term hol.bool => __136_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (hol.forall A (x_4 : hol.term A => q_3 x_4))) => thm_1635 A p_1 q_3 hyp_1 __136_2.

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_1637 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (hol.forall A (x__1_4 : hol.term A => q_3 x__1_4))) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (hol.forall A (x__1_4 : hol.term A => q_3 x__1_4))) => (A : hol.type => p_1 : hol.term hol.bool => __136_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (hol.forall A (x_4 : hol.term A => q_3 x_4))) => thm_1636 A p_1 __136_2 q_3 hyp_1) A p_1 x_2 q_3 hyp_1.

(; Theorem: |- ((Data.Bool./\ p) (q x)) ;)

(; dict ;)

def thm_1638 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (hol.forall A (x_4 : hol.term A => q_2 x_4))) -> hol.proof (hol.and p_3 (q_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.forall A (x_4 : hol.term A => q_2 x_4))) => hol.EQ_MP (q_2 x_1) (hol.and p_3 (q_2 x_1)) (thm_1633 A p_3 x_1 q_2 hyp_1) (thm_1637 A p_3 x_1 q_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))) ;)

(; dict ;)

def thm_1639 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) => x_3 : hol.term A => thm_1638 A x_3 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x)))) ;)

(; dict ;)

def thm_1640 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (thm_1628 A q_1 p_2) (thm_1639 A q_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x)))) ;)

(; dict ;)

def thm_1641 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.PROP_EXT (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) => thm_1625 A q_1 p_2 (thm_1611 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (hol.and p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) => thm_1640 A q_1 p_2 (thm_1629 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x))))) ;)

(; dict ;)

def thm_1642 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => thm_1641 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ p) (q x)))))) ;)

(; dict ;)

def thm_1643 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (thm_1610 A p_1) (thm_1642 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.! \lambda x_1. (q x_1)))) (Data.Bool.! \lambda x_1. ((Data.Bool./\ p) (q x_1)))))) ;)

(; thm ;)

def thm_1644 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x__1_3 : hol.term A => q_2 x__1_3))) (hol.forall A (x__1_3 : hol.term A => hol.and p_1 (q_2 x__1_3)))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) (thm_1607 A) (thm_1643 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_1645 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_1646 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (thm_1645 A) (thm_1645 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))))) ;)

(; dict ;)

def thm_1647 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (thm_1102 A) (thm_1646 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_1648 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_1649 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (thm_1648 A p_1) (thm_1648 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_1650 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (thm_1102 A) (thm_1649 A p_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (q x) x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (q x))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))))) ;)

(; dict ;)

def thm_1651 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => q_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_1 x_4) (q_2 x_4))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (x_3 : hol.term A => q_2 x_3).

(; Theorem: |- ((= (\lambda x. ((Data.Bool.\/ (p x)) (q x)) x)) ((Data.Bool.\/ (p x)) (q x))) ;)

(; dict ;)

def thm_1652 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) (hol.or (p_3 x_1) (q_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1.

(; Theorem: |- ((= ((Data.Bool.\/ (p x)) (q x))) (\lambda x. ((Data.Bool.\/ (p x)) (q x)) x)) ;)

(; dict ;)

def thm_1653 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (p_3 x_2) (q_1 x_2)) ((x_4 : hol.term A => hol.or (p_3 x_4) (q_1 x_4)) x_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((x_4 : hol.term A => hol.or (p_3 x_4) (q_1 x_4)) x_2) (hol.or (p_3 x_2) (q_1 x_2)) (thm_1652 A x_2 q_1 p_3).

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_1654 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (q_2 x_1) -> hol.proof (q_2 x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (q_2 x_1) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ (p x)) (q x)) ;)

(; dict ;)

def thm_1655 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (q_1 x_2) -> hol.proof (hol.or (p_3 x_2) (q_1 x_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (q_1 x_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) (q_1 x_2) (p_3 x_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ (p x)) (q x)) ;)

(; dict ;)

def thm_1656 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (q_1 x_2) -> hol.proof (hol.or (p_3 x_2) (q_1 x_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (q_1 x_2) => hol.PROVE_HYP (q_1 x_2) (hol.or (p_3 x_2) (q_1 x_2)) ((A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (q_2 x_1) => thm_1654 A x_1 q_2 hyp_1) A x_2 q_1 hyp_1) (hyp_2 : hol.proof (q_1 x_2) => thm_1655 A q_1 x_2 p_3 hyp_2).

(; Theorem: |- (\lambda x. ((Data.Bool.\/ (p x)) (q x)) x) ;)

(; dict ;)

def thm_1657 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (q_2 x_1) -> hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (q_2 x_1) => hol.EQ_MP (hol.or (p_3 x_1) (q_2 x_1)) ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) (thm_1653 A q_2 x_1 p_3) (thm_1656 A q_2 x_1 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))) ;)

(; dict ;)

def thm_1658 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A x_1 (x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))) ;)

(; dict ;)

def thm_1659 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (q_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (q_2 x_1) => hol.PROVE_HYP ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4))) (thm_1657 A x_1 q_2 p_3 hyp_1) (hyp_2 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) => thm_1658 A x_1 q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (q x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ;)

(; dict ;)

def thm_1660 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (q_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_1 x_4) (q_3 x_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (q_3 x_2) => thm_1659 A x_2 q_3 p_1 hyp_1.

(; Theorem: |- ((= (\lambda x. (q x) x)) (q x)) ;)

(; dict ;)

def thm_1661 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => q_2 x_3) x_1) (q_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => q_2 x_3) x_1.

(; Theorem: |- (\lambda x. (q x) x) ;)

(; dict ;)

def thm_1662 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => q_2 x_3) x_1) -> hol.proof ((x_3 : hol.term A => q_2 x_3) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => q_2 x_3) x_1) => hyp_1.

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_1663 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => q_2 x_3) x_1) -> hol.proof (q_2 x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => q_2 x_3) x_1) => hol.EQ_MP ((x_3 : hol.term A => q_2 x_3) x_1) (q_2 x_1) (thm_1661 A x_1 q_2) (thm_1662 A x_1 q_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))) ;)

(; dict ;)

def thm_1664 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => q_2 x_4) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => q_2 x_4) x_1) => thm_1660 A p_3 x_1 q_2 (thm_1663 A x_1 q_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (q x) x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ;)

(; dict ;)

def thm_1665 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp ((x_4 : hol.term A => q_3 x_4) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_1 x_4) (q_3 x_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => q_3 x_4) x_2) => thm_1664 A x_2 q_3 p_1 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (q x) x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))))) ;)

(; dict ;)

def thm_1666 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => q_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_1 x_4) (q_2 x_4))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => thm_1665 A p_1 x_3 q_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (q x))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ;)

(; dict ;)

def thm_1667 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => thm_1651 A p_1 q_2 (thm_1666 A p_1 q_2).

(; Theorem: |- (Data.Bool.? \lambda x. (q x)) ;)

(; dict ;)

def thm_1668 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => q_1 x_2)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => q_1 x_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => q_1 x_2)) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))) ;)

(; dict ;)

def thm_1669 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3)) => thm_1667 A p_2 q_1 ((A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_2 : hol.term A => q_1 x__1_2)) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => q_1 x_2)) => thm_1668 A q_1 hyp_1) A q_1 hyp_1) A q_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))))) ;)

(; dict ;)

def thm_1670 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_2 x_4) (q_1 x_4))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) (x_3 : hol.term A => p_2 x_3).

(; Theorem: |- ((Data.Bool.\/ (p x)) (q x)) ;)

(; dict ;)

def thm_1671 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hol.proof (hol.or (p_3 x_2) (q_1 x_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) (q_1 x_2) (p_3 x_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ (p x)) (q x)) ;)

(; dict ;)

def thm_1672 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hol.proof (hol.or (p_3 x_2) (q_1 x_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hol.PROVE_HYP (p_3 x_2) (hol.or (p_3 x_2) (q_1 x_2)) (thm_1266 A x_2 p_3 hyp_1) (hyp_2 : hol.proof (p_3 x_2) => thm_1671 A q_1 x_2 p_3 hyp_2).

(; Theorem: |- (\lambda x. ((Data.Bool.\/ (p x)) (q x)) x) ;)

(; dict ;)

def thm_1673 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hol.EQ_MP (hol.or (p_3 x_1) (q_2 x_1)) ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) (thm_1653 A q_2 x_1 p_3) (thm_1672 A q_2 x_1 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))) ;)

(; dict ;)

def thm_1674 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hol.PROVE_HYP ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4))) (thm_1673 A x_1 q_2 p_3 hyp_1) (hyp_2 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) => thm_1658 A x_1 q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (p x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ;)

(; dict ;)

def thm_1675 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) (q_1 x_4)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => thm_1674 A x_2 q_1 p_3 hyp_1.

(; Theorem: |- (\lambda x. (p x) x) ;)

(; dict ;)

def thm_1676 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_1677 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof (p_2 x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => hol.EQ_MP ((x_3 : hol.term A => p_2 x_3) x_1) (p_2 x_1) (thm_1121 A x_1 p_2) (thm_1676 A x_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))) ;)

(; dict ;)

def thm_1678 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_1) => thm_1675 A q_2 x_1 p_3 (thm_1677 A x_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ;)

(; dict ;)

def thm_1679 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp ((x_4 : hol.term A => p_3 x_4) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) (q_1 x_4)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_2) => thm_1678 A x_2 q_1 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))))) ;)

(; dict ;)

def thm_1680 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_2 x_4) (q_1 x_4))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => thm_1679 A q_1 x_3 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ;)

(; dict ;)

def thm_1681 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => thm_1670 A q_1 p_2 (thm_1680 A q_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_1682 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))) ;)

(; dict ;)

def thm_1683 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) => thm_1681 A q_1 p_2 ((A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => thm_1682 A p_1 hyp_1) A p_2 hyp_1).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1684 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))) ;)

(; dict ;)

def thm_1685 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) -> hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) -> hyp_3 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) => hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) => hyp_3 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))) ;)

(; dict ;)

def thm_1686 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) -> hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) -> hyp_3 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) => hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) => hyp_3 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) => hol.PROVE_HYP (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) ((A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => thm_1684 A q_1 p_2 hyp_1) A q_1 p_2 hyp_3) (hyp_4 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) => thm_1685 A q_1 p_2 hyp_1 hyp_2 hyp_4).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))) ;)

(; dict ;)

def thm_1687 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) -> hyp_2 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) => hyp_2 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) => hol.PROVE_HYP (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) (hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => thm_1683 A q_1 p_2 hyp_3) (hyp_3 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) => thm_1686 A q_1 p_2 hyp_3 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))) ;)

(; dict ;)

def thm_1688 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) => hol.PROVE_HYP (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) => thm_1669 A q_1 p_2 hyp_2) (hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) => thm_1687 A q_1 p_2 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ;)

(; dict ;)

def thm_1689 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => thm_1688 A q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool.\/ (p x)) (q x)) x)) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_1690 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.or (p_2 x_4) (q_1 x_4)) x_3) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1 x_4))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)).

(; Theorem: |- ((= (q x)) (\lambda x. (q x) x)) ;)

(; dict ;)

def thm_1691 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (q_2 x_1) ((x_3 : hol.term A => q_2 x_3) x_1)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((x_3 : hol.term A => q_2 x_3) x_1) (q_2 x_1) (thm_1661 A x_1 q_2).

(; Theorem: |- (\lambda x. (q x) x) ;)

(; dict ;)

def thm_1692 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (q_2 x_1) -> hol.proof ((x_3 : hol.term A => q_2 x_3) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (q_2 x_1) => hol.EQ_MP (q_2 x_1) ((x_3 : hol.term A => q_2 x_3) x_1) (thm_1691 A x_1 q_2) (thm_1654 A x_1 q_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (q x)) ;)

(; dict ;)

def thm_1693 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => q_2 x_3) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => q_2 x_3) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A x_1 (x_3 : hol.term A => q_2 x_3) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (q x)) ;)

(; dict ;)

def thm_1694 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (q_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (q_2 x_1) => hol.PROVE_HYP ((x_3 : hol.term A => q_2 x_3) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) (thm_1692 A x_1 q_2 hyp_1) (hyp_2 : hol.proof ((x_3 : hol.term A => q_2 x_3) x_1) => thm_1693 A x_1 q_2 hyp_2).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1695 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1696 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (q_2 x_1) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (q_2 x_1) => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) (thm_1694 A x_1 q_2 hyp_1) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)) => thm_1695 A q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (q x)) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1697 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (q_3 x_2) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_1 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (q_3 x_2) => thm_1696 A x_2 q_3 p_1 hyp_1.

(; Theorem: |- ((= (p x)) (\lambda x_1. (p x_1) x)) ;)

(; dict ;)

def thm_1698 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 x_1) ((x__1_3 : hol.term A => p_2 x__1_3) x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((x__1_3 : hol.term A => p_2 x__1_3) x_1) (p_2 x_1) (thm_1121 A x_1 p_2).

(; Theorem: |- (\lambda x_1. (p x_1) x) ;)

(; dict ;)

def thm_1699 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof ((x__1_3 : hol.term A => p_2 x__1_3) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.EQ_MP (p_2 x_1) ((x__1_3 : hol.term A => p_2 x__1_3) x_1) (thm_1698 A x_1 p_2) (thm_1266 A x_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_1700 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A x_1 (x_3 : hol.term A => p_2 x_3) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_1701 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.PROVE_HYP ((x__1_3 : hol.term A => p_2 x__1_3) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (thm_1699 A x_1 p_2 hyp_1) (hyp_2 : hol.proof ((x__1_3 : hol.term A => p_2 x__1_3) x_1) => thm_1700 A x_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1702 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1703 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) (thm_1701 A x_1 p_3 hyp_1) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) => thm_1702 A q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (p x)) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1704 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (p_3 x_2) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1 x_4)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => thm_1703 A x_2 q_1 p_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ (p x)) (q x)) ;)

(; dict ;)

def thm_1705 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.or (p_3 x_2) (q_1 x_2)) -> hol.proof (hol.or (p_3 x_2) (q_1 x_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (p_3 x_2) (q_1 x_2)) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1706 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) -> hyp_2 : hol.proof (hol.imp (q_2 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) -> hyp_3 : hol.proof (hol.or (p_3 x_1) (q_2 x_1)) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => hyp_2 : hol.proof (hol.imp (q_2 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => hyp_3 : hol.proof (hol.or (p_3 x_1) (q_2 x_1)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (q_2 x_1) (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1707 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) -> hyp_2 : hol.proof (hol.imp (q_2 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) -> hyp_3 : hol.proof (hol.or (p_3 x_1) (q_2 x_1)) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => hyp_2 : hol.proof (hol.imp (q_2 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => hyp_3 : hol.proof (hol.or (p_3 x_1) (q_2 x_1)) => hol.PROVE_HYP (hol.or (p_3 x_1) (q_2 x_1)) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) ((A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (p_3 x_2) (q_1 x_2)) => thm_1705 A q_1 x_2 p_3 hyp_1) A q_2 x_1 p_3 hyp_3) (hyp_4 : hol.proof (hol.or (p_3 x_1) (q_2 x_1)) => thm_1706 A x_1 q_2 p_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1708 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (q_2 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) -> hyp_2 : hol.proof (hol.or (p_3 x_1) (q_2 x_1)) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (q_2 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => hyp_2 : hol.proof (hol.or (p_3 x_1) (q_2 x_1)) => hol.PROVE_HYP (hol.imp (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) (thm_1704 A q_2 x_1 p_3) (hyp_3 : hol.proof (hol.imp (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => thm_1707 A x_1 q_2 p_3 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1709 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.or (p_3 x_1) (q_2 x_1)) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (p_3 x_1) (q_2 x_1)) => hol.PROVE_HYP (hol.imp (q_2 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) (thm_1697 A p_3 x_1 q_2) (hyp_2 : hol.proof (hol.imp (q_2 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => thm_1708 A x_1 q_2 p_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ (p x)) (q x))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1710 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.or (p_3 x_2) (q_1 x_2)) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1 x_4)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (p_3 x_2) (q_1 x_2)) => thm_1709 A x_2 q_1 p_3 hyp_1.

(; Theorem: |- (\lambda x. ((Data.Bool.\/ (p x)) (q x)) x) ;)

(; dict ;)

def thm_1711 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) -> hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ (p x)) (q x)) ;)

(; dict ;)

def thm_1712 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_1 x_4)) x_2) -> hol.proof (hol.or (p_3 x_2) (q_1 x_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_1 x_4)) x_2) => hol.EQ_MP ((x_4 : hol.term A => hol.or (p_3 x_4) (q_1 x_4)) x_2) (hol.or (p_3 x_2) (q_1 x_2)) (thm_1652 A x_2 q_1 p_3) (thm_1711 A x_2 q_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1713 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) => thm_1710 A q_2 x_1 p_3 (thm_1712 A q_2 x_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool.\/ (p x)) (q x)) x)) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1714 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) (q_2 x_4)) x_1) => thm_1713 A x_1 q_2 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool.\/ (p x)) (q x)) x)) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_1715 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.or (p_2 x_4) (q_1 x_4)) x_3) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1 x_4))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => thm_1714 A x_3 q_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1716 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => thm_1690 A q_1 p_2 (thm_1715 A q_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))) ;)

(; dict ;)

def thm_1717 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1718 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.or (p_2 x__1_3) (q_1 x__1_3))) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.or (p_2 x__1_3) (q_1 x__1_3))) => thm_1716 A q_1 p_2 ((A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) => thm_1717 A q_1 p_2 hyp_1) A q_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1719 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => thm_1689 A q_1 p_2 (thm_1684 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) => thm_1718 A q_1 p_2 hyp_2) (thm_1717 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_1720 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => thm_1719 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_1721 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (thm_1650 A p_1) (thm_1720 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x_1. ((Data.Bool.\/ (p x_1)) (q x_1)))) ((Data.Bool.\/ (Data.Bool.? \lambda x_1. (p x_1))) (Data.Bool.? \lambda x_1. (q x_1)))))) ;)

(; thm ;)

def thm_1722 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.or (p_1 x__1_3) (q_2 x__1_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_1 x__1_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_2 x__1_3)))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) (thm_1647 A) (thm_1721 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))))) ;)

(; dict ;)

def thm_1723 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))))) ;)

(; dict ;)

def thm_1724 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) (thm_1723 A) (thm_1723 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))))))) ;)

(; dict ;)

def thm_1725 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) (thm_1102 A) (thm_1724 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))))) \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))))) ;)

(; dict ;)

def thm_1726 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))))) \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))))) ;)

(; dict ;)

def thm_1727 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))) (thm_1726 A p_1) (thm_1726 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))))) (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))))) ;)

(; dict ;)

def thm_1728 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))) (thm_1102 A) (thm_1727 A p_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))) ;)

(; dict ;)

def thm_1729 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) (q_1 x_3))) => thm_1718 A q_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => thm_1688 A q_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x))))) ;)

(; dict ;)

def thm_1730 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => thm_1729 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) (q x)))))) ;)

(; dict ;)

def thm_1731 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3))))) (thm_1728 A p_1) (thm_1730 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x_1. (p x_1))) (Data.Bool.? \lambda x_1. (q x_1)))) (Data.Bool.? \lambda x_1. ((Data.Bool.\/ (p x_1)) (q x_1)))))) ;)

(; thm ;)

def thm_1732 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_1 x__1_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_2 x__1_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.or (p_1 x__1_3) (q_2 x__1_3)))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) (q_2 x_3)))))) (thm_1725 A) (thm_1731 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))))) ;)

(; dict ;)

def thm_1733 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))))) ;)

(; dict ;)

def thm_1734 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (thm_1733 A) (thm_1733 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))))) ;)

(; dict ;)

def thm_1735 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (thm_1102 A) (thm_1734 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))) \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_1736 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))) \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_1737 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) (thm_1736 A p_1) (thm_1736 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))))) (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))))) ;)

(; dict ;)

def thm_1738 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) thm_150 (thm_1737 A p_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool.\/ (p x)) q) x)) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_1739 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4)) q_1))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (x_3 : hol.term A => hol.or (p_2 x_3) q_1).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1740 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof q_1 -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof q_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) q_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1741 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof q_1 -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof q_1 => hol.PROVE_HYP q_1 (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (thm_65 q_1 hyp_1) (hyp_2 : hol.proof q_1 => thm_1740 A q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_1742 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hol.proof (hol.imp q_2 (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof q_2 => thm_1741 A q_2 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1743 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) q_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1744 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2) (thm_1701 A x_1 p_3 hyp_1) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) => thm_1743 A q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (p x)) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_1745 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (p_3 x_2) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => thm_1744 A x_2 q_1 p_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ (p x)) q) ;)

(; dict ;)

def thm_1746 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.or (p_3 x_2) q_1) -> hol.proof (hol.or (p_3 x_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (p_3 x_2) q_1) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1747 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp q_2 (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) -> hyp_2 : hol.proof (hol.imp (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) -> hyp_3 : hol.proof (hol.or (p_3 x_1) q_2) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp q_2 (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) => hyp_2 : hol.proof (hol.imp (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) => hyp_3 : hol.proof (hol.or (p_3 x_1) q_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) q_2 (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1748 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp q_2 (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) -> hyp_2 : hol.proof (hol.imp (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) -> hyp_3 : hol.proof (hol.or (p_3 x_1) q_2) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp q_2 (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) => hyp_2 : hol.proof (hol.imp (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) => hyp_3 : hol.proof (hol.or (p_3 x_1) q_2) => hol.PROVE_HYP (hol.or (p_3 x_1) q_2) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2) ((A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (p_3 x_2) q_1) => thm_1746 A q_1 x_2 p_3 hyp_1) A q_2 x_1 p_3 hyp_3) (hyp_4 : hol.proof (hol.or (p_3 x_1) q_2) => thm_1747 A x_1 q_2 p_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1749 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp q_2 (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) -> hyp_2 : hol.proof (hol.or (p_3 x_1) q_2) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp q_2 (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) => hyp_2 : hol.proof (hol.or (p_3 x_1) q_2) => hol.PROVE_HYP (hol.imp (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2) (thm_1745 A q_2 x_1 p_3) (hyp_3 : hol.proof (hol.imp (p_3 x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) => thm_1748 A x_1 q_2 p_3 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1750 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.or (p_3 x_1) q_2) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (p_3 x_1) q_2) => hol.PROVE_HYP (hol.imp q_2 (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2) (thm_1742 A p_3 q_2) (hyp_2 : hol.proof (hol.imp q_2 (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) => thm_1749 A x_1 q_2 p_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ (p x)) q)) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_1751 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.or (p_3 x_2) q_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (p_3 x_2) q_1) => thm_1750 A x_2 q_1 p_3 hyp_1.

(; Theorem: |- ((= (\lambda x. ((Data.Bool.\/ (p x)) q) x)) ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_1752 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) (hol.or (p_3 x_1) q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1.

(; Theorem: |- (\lambda x. ((Data.Bool.\/ (p x)) q) x) ;)

(; dict ;)

def thm_1753 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) -> hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ (p x)) q) ;)

(; dict ;)

def thm_1754 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_1) x_2) -> hol.proof (hol.or (p_3 x_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_1) x_2) => hol.EQ_MP ((x_4 : hol.term A => hol.or (p_3 x_4) q_1) x_2) (hol.or (p_3 x_2) q_1) (thm_1752 A x_2 q_1 p_3) (thm_1753 A x_2 q_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1755 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) => thm_1751 A q_2 x_1 p_3 (thm_1754 A q_2 x_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool.\/ (p x)) q) x)) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_1756 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) => thm_1755 A x_1 q_2 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool.\/ (p x)) q) x)) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_1757 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.or (p_2 x_4) q_1) x_3) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => thm_1756 A x_3 q_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_1758 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_1739 A q_1 p_2 (thm_1757 A q_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_1759 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1760 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.or (p_2 x__1_3) q_1)) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.or (p_2 x__1_3) q_1)) => thm_1758 A q_1 p_2 ((A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) => thm_1759 A q_1 p_2 hyp_1) A q_1 p_2 hyp_1).

(; Theorem: |- ((= (\lambda x. ((Data.Bool.\/ (p x)) q) _182)) ((Data.Bool.\/ (p _182)) q)) ;)

(; dict ;)

def thm_1761 : A : hol.type -> __182_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) __182_1) (hol.or (p_3 __182_1) q_2)) :=
  A : hol.type => __182_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.or (p_3 x_4) q_2) __182_1.

(; Theorem: |- ((= ((Data.Bool.\/ (p _182)) q)) (\lambda x. ((Data.Bool.\/ (p x)) q) _182)) ;)

(; dict ;)

def thm_1762 : A : hol.type -> q_1 : hol.term hol.bool -> __182_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (p_3 __182_2) q_1) ((x_4 : hol.term A => hol.or (p_3 x_4) q_1) __182_2)) :=
  A : hol.type => q_1 : hol.term hol.bool => __182_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((x_4 : hol.term A => hol.or (p_3 x_4) q_1) __182_2) (hol.or (p_3 __182_2) q_1) (thm_1761 A __182_2 q_1 p_3).

(; Theorem: |- ((Data.Bool.\/ (p _182)) q) ;)

(; dict ;)

def thm_1763 : A : hol.type -> q_1 : hol.term hol.bool -> __182_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof q_1 -> hol.proof (hol.or (p_3 __182_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => __182_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof q_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) q_1 (p_3 __182_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ (p _182)) q) ;)

(; dict ;)

def thm_1764 : A : hol.type -> q_1 : hol.term hol.bool -> __182_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof q_1 -> hol.proof (hol.or (p_3 __182_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => __182_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof q_1 => hol.PROVE_HYP q_1 (hol.or (p_3 __182_2) q_1) (thm_65 q_1 hyp_1) (hyp_2 : hol.proof q_1 => thm_1763 A q_1 __182_2 p_3 hyp_2).

(; Theorem: |- (\lambda x. ((Data.Bool.\/ (p x)) q) _182) ;)

(; dict ;)

def thm_1765 : A : hol.type -> __182_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof q_2 -> hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) __182_1) :=
  A : hol.type => __182_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof q_2 => hol.EQ_MP (hol.or (p_3 __182_1) q_2) ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) __182_1) (thm_1762 A q_2 __182_1 p_3) (thm_1764 A q_2 __182_1 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_1766 : A : hol.type -> __182_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) __182_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) q_2)) :=
  A : hol.type => __182_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) __182_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A __182_1 (x_4 : hol.term A => hol.or (p_3 x_4) q_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_1767 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof q_1 -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof q_1 => hol.PROVE_HYP ((x_3 : hol.term A => hol.or (p_2 x_3) q_1) (hol.witness A)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (thm_1765 A (hol.witness A) q_1 p_2 hyp_1) (hyp_2 : hol.proof ((x_3 : hol.term A => hol.or (p_2 x_3) q_1) (hol.witness A)) => thm_1766 A (hol.witness A) q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_1768 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hol.proof (hol.imp q_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof q_2 => thm_1767 A q_2 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_1769 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_2 x_4) q_1)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (x_3 : hol.term A => p_2 x_3).

(; Theorem: |- ((= ((Data.Bool.\/ (p x)) q)) (\lambda x. ((Data.Bool.\/ (p x)) q) x)) ;)

(; dict ;)

def thm_1770 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (p_3 x_2) q_1) ((x_4 : hol.term A => hol.or (p_3 x_4) q_1) x_2)) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((x_4 : hol.term A => hol.or (p_3 x_4) q_1) x_2) (hol.or (p_3 x_2) q_1) (thm_1752 A x_2 q_1 p_3).

(; Theorem: |- ((Data.Bool.\/ (p x)) q) ;)

(; dict ;)

def thm_1771 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hol.proof (hol.or (p_3 x_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) q_1 (p_3 x_2) hyp_1.

(; Theorem: |- ((Data.Bool.\/ (p x)) q) ;)

(; dict ;)

def thm_1772 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hol.proof (hol.or (p_3 x_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hol.PROVE_HYP (p_3 x_2) (hol.or (p_3 x_2) q_1) (thm_1266 A x_2 p_3 hyp_1) (hyp_2 : hol.proof (p_3 x_2) => thm_1771 A q_1 x_2 p_3 hyp_2).

(; Theorem: |- (\lambda x. ((Data.Bool.\/ (p x)) q) x) ;)

(; dict ;)

def thm_1773 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hol.EQ_MP (hol.or (p_3 x_1) q_2) ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) (thm_1770 A q_2 x_1 p_3) (thm_1772 A q_2 x_1 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_1774 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A x_1 (x_4 : hol.term A => hol.or (p_3 x_4) q_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_1775 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hol.PROVE_HYP ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) q_2)) (thm_1773 A x_1 q_2 p_3 hyp_1) (hyp_2 : hol.proof ((x_4 : hol.term A => hol.or (p_3 x_4) q_2) x_1) => thm_1774 A x_1 q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (p x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_1776 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => thm_1775 A x_2 q_1 p_3 hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_1777 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_1) => thm_1776 A q_2 x_1 p_3 (thm_1677 A x_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_1778 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp ((x_4 : hol.term A => p_3 x_4) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_3 x_4) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_2) => thm_1777 A x_2 q_1 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_1779 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or (p_2 x_4) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => thm_1778 A q_1 x_3 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_1780 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_1769 A q_1 p_2 (thm_1779 A q_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_1781 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => thm_1780 A q_1 p_2 (thm_1682 A p_2 hyp_1).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1782 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) -> hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_1783 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp q_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) -> hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) -> hyp_3 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp q_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) => hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) => hyp_3 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) q_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) hyp_2 hyp_1 hyp_3.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_1784 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp q_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) -> hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) -> hyp_3 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp q_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) => hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) => hyp_3 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) => hol.PROVE_HYP (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) ((A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => thm_1782 A q_1 p_2 hyp_1) A q_1 p_2 hyp_3) (hyp_4 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) => thm_1783 A q_1 p_2 hyp_1 hyp_2 hyp_4).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_1785 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp q_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) -> hyp_2 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp q_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) => hyp_2 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) => hol.PROVE_HYP (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => thm_1781 A q_1 p_2 hyp_3) (hyp_3 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) => thm_1784 A q_1 p_2 hyp_1 hyp_3 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)) ;)

(; dict ;)

def thm_1786 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) => hol.PROVE_HYP (hol.imp q_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (thm_1768 A p_2 q_1) (hyp_2 : hol.proof (hol.imp q_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) => thm_1785 A q_1 p_2 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_1787 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => thm_1786 A q_1 p_2 hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))) ;)

(; dict ;)

def thm_1788 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) => thm_1760 A q_1 p_2 hyp_2) (thm_1759 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => thm_1787 A q_1 p_2 (thm_1782 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q)))) ;)

(; dict ;)

def thm_1789 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => thm_1788 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool.\/ (p x)) q))))) ;)

(; dict ;)

def thm_1790 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2)))) (thm_1738 A p_1) (thm_1789 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.? \lambda x_1. (p x_1))) q)) (Data.Bool.? \lambda x_1. ((Data.Bool.\/ (p x_1)) q))))) ;)

(; thm ;)

def thm_1791 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_1 x__1_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.or (p_1 x__1_3) q_2))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or (p_1 x_3) q_2))))) (thm_1735 A) (thm_1790 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))))) ;)

(; dict ;)

def thm_1792 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))))) ;)

(; dict ;)

def thm_1793 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (thm_1792 A) (thm_1792 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))))))) ;)

(; dict ;)

def thm_1794 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) thm_150 (thm_1793 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))))) \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_1795 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))))) \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_1796 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (thm_1795 A p_1) (thm_1795 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))))) (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))))) ;)

(; dict ;)

def thm_1797 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) (thm_1102 A) (thm_1796 A p_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool.\/ p) (q x)) x)) ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_1798 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3) (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1 x_4))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)).

(; Theorem: |- ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1799 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) -> hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1800 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (q_2 x_1) -> hol.proof (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (q_2 x_1) => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) (thm_1694 A x_1 q_2 hyp_1) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)) => thm_1799 A q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (q x)) ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1801 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (q_3 x_2) (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4)))) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (q_3 x_2) => thm_1800 A x_2 q_3 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1802 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1803 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hol.PROVE_HYP p_2 (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (thm_64 p_2 hyp_1) (hyp_2 : hol.proof p_2 => thm_1802 A q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1804 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_1803 A q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) (q x)) ;)

(; dict ;)

def thm_1805 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p_3 (q_2 x_1)) -> hol.proof (hol.or p_3 (q_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_3 (q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1806 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) -> hyp_2 : hol.proof (hol.imp (q_2 x_1) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) -> hyp_3 : hol.proof (hol.or p_3 (q_2 x_1)) -> hol.proof (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => hyp_2 : hol.proof (hol.imp (q_2 x_1) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => hyp_3 : hol.proof (hol.or p_3 (q_2 x_1)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (q_2 x_1) p_3 (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1807 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) -> hyp_2 : hol.proof (hol.imp (q_2 x_1) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) -> hyp_3 : hol.proof (hol.or p_3 (q_2 x_1)) -> hol.proof (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => hyp_2 : hol.proof (hol.imp (q_2 x_1) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => hyp_3 : hol.proof (hol.or p_3 (q_2 x_1)) => hol.PROVE_HYP (hol.or p_3 (q_2 x_1)) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) ((A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_3 (q_2 x_1)) => thm_1805 A x_1 q_2 p_3 hyp_1) A x_1 q_2 p_3 hyp_3) (hyp_4 : hol.proof (hol.or p_3 (q_2 x_1)) => thm_1806 A x_1 q_2 p_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1808 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (q_2 x_1) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) -> hyp_2 : hol.proof (hol.or p_3 (q_2 x_1)) -> hol.proof (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (q_2 x_1) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => hyp_2 : hol.proof (hol.or p_3 (q_2 x_1)) => hol.PROVE_HYP (hol.imp p_3 (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) (thm_1804 A q_2 p_3) (hyp_3 : hol.proof (hol.imp p_3 (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => thm_1807 A x_1 q_2 p_3 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1809 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p_3 (q_2 x_1)) -> hol.proof (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_3 (q_2 x_1)) => hol.PROVE_HYP (hol.imp (q_2 x_1) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) (thm_1801 A p_3 x_1 q_2) (hyp_2 : hol.proof (hol.imp (q_2 x_1) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) => thm_1808 A x_1 q_2 p_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ p) (q x))) ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1810 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.or p_3 (q_2 x_1)) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_3 (q_2 x_1)) => thm_1809 A x_1 q_2 p_3 hyp_1.

(; Theorem: |- ((= (\lambda x. ((Data.Bool.\/ p) (q x)) x)) ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_1811 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) (hol.or p_3 (q_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1.

(; Theorem: |- (\lambda x. ((Data.Bool.\/ p) (q x)) x) ;)

(; dict ;)

def thm_1812 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) -> hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) (q x)) ;)

(; dict ;)

def thm_1813 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) -> hol.proof (hol.or p_3 (q_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) => hol.EQ_MP ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) (hol.or p_3 (q_2 x_1)) (thm_1811 A x_1 q_2 p_3) (thm_1812 A x_1 q_2 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1814 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) -> hol.proof (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) => thm_1810 A x_1 q_2 p_3 (thm_1813 A x_1 q_2 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool.\/ p) (q x)) x)) ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1815 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.imp ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) (hol.or p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4)))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) => thm_1814 A x_1 q_2 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool.\/ p) (q x)) x)) ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_1816 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.or p_2 (q_1 x_4)) x_3) (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1 x_4))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => x_3 : hol.term A => thm_1815 A x_3 q_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1817 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_1798 A q_1 p_2 (thm_1816 A q_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_1818 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1819 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.or p_2 (q_1 x__1_3))) -> hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.or p_2 (q_1 x__1_3))) => thm_1817 A q_1 p_2 ((A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) => thm_1818 A q_1 p_2 hyp_1) A q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (q x) x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (q x))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_1820 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => q_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or p_1 (q_2 x_4))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (x_3 : hol.term A => q_2 x_3).

(; Theorem: |- ((= ((Data.Bool.\/ p) (q x))) (\lambda x. ((Data.Bool.\/ p) (q x)) x)) ;)

(; dict ;)

def thm_1821 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or p_3 (q_2 x_1)) ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hol.SYM hol.bool ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) (hol.or p_3 (q_2 x_1)) (thm_1811 A x_1 q_2 p_3).

(; Theorem: |- ((Data.Bool.\/ p) (q x)) ;)

(; dict ;)

def thm_1822 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (q_2 x_1) -> hol.proof (hol.or p_3 (q_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (q_2 x_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) (q_2 x_1) p_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) (q x)) ;)

(; dict ;)

def thm_1823 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (q_2 x_1) -> hol.proof (hol.or p_3 (q_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (q_2 x_1) => hol.PROVE_HYP (q_2 x_1) (hol.or p_3 (q_2 x_1)) (thm_1654 A x_1 q_2 hyp_1) (hyp_2 : hol.proof (q_2 x_1) => thm_1822 A x_1 q_2 p_3 hyp_2).

(; Theorem: |- (\lambda x. ((Data.Bool.\/ p) (q x)) x) ;)

(; dict ;)

def thm_1824 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (q_2 x_1) -> hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (q_2 x_1) => hol.EQ_MP (hol.or p_3 (q_2 x_1)) ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) (thm_1821 A x_1 q_2 p_3) (thm_1823 A x_1 q_2 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_1825 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or p_3 (q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A x_1 (x_4 : hol.term A => hol.or p_3 (q_2 x_4)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_1826 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (q_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or p_3 (q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (q_2 x_1) => hol.PROVE_HYP ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or p_3 (q_2 x_4))) (thm_1824 A x_1 q_2 p_3 hyp_1) (hyp_2 : hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) x_1) => thm_1825 A x_1 q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (q x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))) ;)

(; dict ;)

def thm_1827 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (q_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or p_1 (q_3 x_4)))) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (q_3 x_2) => thm_1826 A x_2 q_3 p_1 hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_1828 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => q_2 x_4) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or p_3 (q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => q_2 x_4) x_1) => thm_1827 A p_3 x_1 q_2 (thm_1663 A x_1 q_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (q x) x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))) ;)

(; dict ;)

def thm_1829 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp ((x_4 : hol.term A => q_3 x_4) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or p_1 (q_3 x_4)))) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => q_3 x_4) x_2) => thm_1828 A x_2 q_3 p_1 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (q x) x)) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_1830 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => q_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or p_1 (q_2 x_4))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => thm_1829 A p_1 x_3 q_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (q x))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))) ;)

(; dict ;)

def thm_1831 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => thm_1820 A p_1 q_2 (thm_1830 A p_1 q_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_1832 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) => thm_1831 A p_2 q_1 (thm_1668 A q_1 hyp_1).

(; Theorem: |- ((= (\lambda x. ((Data.Bool.\/ p) (q x)) _191)) ((Data.Bool.\/ p) (q _191))) ;)

(; dict ;)

def thm_1833 : A : hol.type -> __191_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) __191_1) (hol.or p_3 (q_2 __191_1))) :=
  A : hol.type => __191_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.or p_3 (q_2 x_4)) __191_1.

(; Theorem: |- ((= ((Data.Bool.\/ p) (q _191))) (\lambda x. ((Data.Bool.\/ p) (q x)) _191)) ;)

(; dict ;)

def thm_1834 : A : hol.type -> __191_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or p_3 (q_2 __191_1)) ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) __191_1)) :=
  A : hol.type => __191_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hol.SYM hol.bool ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) __191_1) (hol.or p_3 (q_2 __191_1)) (thm_1833 A __191_1 q_2 p_3).

(; Theorem: |- ((Data.Bool.\/ p) (q _191)) ;)

(; dict ;)

def thm_1835 : A : hol.type -> __191_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hol.proof (hol.or p_3 (q_2 __191_1)) :=
  A : hol.type => __191_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) (q_2 __191_1) p_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) (q _191)) ;)

(; dict ;)

def thm_1836 : A : hol.type -> __191_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hol.proof (hol.or p_3 (q_2 __191_1)) :=
  A : hol.type => __191_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hol.PROVE_HYP p_3 (hol.or p_3 (q_2 __191_1)) (thm_64 p_3 hyp_1) (hyp_2 : hol.proof p_3 => thm_1835 A __191_1 q_2 p_3 hyp_2).

(; Theorem: |- (\lambda x. ((Data.Bool.\/ p) (q x)) _191) ;)

(; dict ;)

def thm_1837 : A : hol.type -> __191_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) __191_1) :=
  A : hol.type => __191_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hol.EQ_MP (hol.or p_3 (q_2 __191_1)) ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) __191_1) (thm_1834 A __191_1 q_2 p_3) (thm_1836 A __191_1 q_2 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_1838 : A : hol.type -> __191_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) __191_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.or p_3 (q_2 x_4))) :=
  A : hol.type => __191_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.or p_3 (q_2 x_4)) __191_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A __191_1 (x_4 : hol.term A => hol.or p_3 (q_2 x_4)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_1839 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hol.PROVE_HYP ((x_3 : hol.term A => hol.or p_2 (q_1 x_3)) (hol.witness A)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (thm_1837 A (hol.witness A) q_1 p_2 hyp_1) (hyp_2 : hol.proof ((x_3 : hol.term A => hol.or p_2 (q_1 x_3)) (hol.witness A)) => thm_1838 A (hol.witness A) q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))) ;)

(; dict ;)

def thm_1840 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_1839 A q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1841 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) -> hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_1842 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) -> hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) -> hyp_3 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) => hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) => hyp_3 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_1843 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) -> hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) -> hyp_3 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) => hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) => hyp_3 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) => hol.PROVE_HYP (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) ((A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => thm_1841 A q_1 p_2 hyp_1) A q_1 p_2 hyp_3) (hyp_4 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) => thm_1842 A q_1 p_2 hyp_1 hyp_2 hyp_4).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_1844 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) -> hyp_2 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) => hyp_2 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) => hol.PROVE_HYP (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (thm_1840 A q_1 p_2) (hyp_3 : hol.proof (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) => thm_1843 A q_1 p_2 hyp_3 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))) ;)

(; dict ;)

def thm_1845 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_1 x__1_3))) => hol.PROVE_HYP (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) => thm_1832 A q_1 p_2 hyp_2) (hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) => thm_1844 A q_1 p_2 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))) ;)

(; dict ;)

def thm_1846 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => thm_1845 A q_1 p_2 hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))) ;)

(; dict ;)

def thm_1847 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.PROP_EXT (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) => thm_1819 A q_1 p_2 hyp_2) (thm_1818 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (hol.or p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => thm_1846 A q_1 p_2 (thm_1841 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x))))) ;)

(; dict ;)

def thm_1848 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => thm_1847 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.\/ p) (q x)))))) ;)

(; dict ;)

def thm_1849 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3))))) (thm_1797 A p_1) (thm_1848 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ p) (Data.Bool.? \lambda x_1. (q x_1)))) (Data.Bool.? \lambda x_1. ((Data.Bool.\/ p) (q x_1)))))) ;)

(; thm ;)

def thm_1850 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_2 x__1_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.or p_1 (q_2 x__1_3)))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.or p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.or p_1 (q_2 x_3)))))) (thm_1794 A) (thm_1849 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_1851 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_1852 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (thm_1851 A) (thm_1851 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q))))) ;)

(; dict ;)

def thm_1853 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (thm_1102 A) (thm_1852 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_1854 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_1855 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) (thm_1854 A p_1) (thm_1854 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)))) (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_1856 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) thm_150 (thm_1855 A p_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)))) ;)

(; dict ;)

def thm_1857 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_2 x_4) q_1)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (x_3 : hol.term A => p_2 x_3).

(; Theorem: |- ((= (\lambda x. ((Data.Bool./\ (p x)) q) x)) ((Data.Bool./\ (p x)) q)) ;)

(; dict ;)

def thm_1858 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) (hol.and (p_3 x_1) q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1.

(; Theorem: |- ((= ((Data.Bool./\ (p x)) q)) (\lambda x. ((Data.Bool./\ (p x)) q) x)) ;)

(; dict ;)

def thm_1859 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (p_3 x_2) q_1) ((x_4 : hol.term A => hol.and (p_3 x_4) q_1) x_2)) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((x_4 : hol.term A => hol.and (p_3 x_4) q_1) x_2) (hol.and (p_3 x_2) q_1) (thm_1858 A x_2 q_1 p_3).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1860 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_1861 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_1862 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) => hol.PROVE_HYP (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) q_2 (thm_1860 A q_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) => thm_1861 A p_1 q_2 hyp_2).

(; Theorem: |- ((Data.Bool./\ (p x)) q) ;)

(; dict ;)

def thm_1863 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_1) -> hol.proof (hol.and (p_3 x_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_1) => hol.EQ_MP q_1 (hol.and (p_3 x_2) q_1) (thm_1594 A x_2 p_3 q_1 hyp_1) ((A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) => thm_1862 A p_1 q_2 hyp_1) A p_3 q_1 hyp_2).

(; Theorem: |- (\lambda x. ((Data.Bool./\ (p x)) q) x) ;)

(; dict ;)

def thm_1864 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_2) -> hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_2) => hol.EQ_MP (hol.and (p_3 x_1) q_2) ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) (thm_1859 A q_2 x_1 p_3) (thm_1863 A q_2 x_1 p_3 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)) ;)

(; dict ;)

def thm_1865 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A x_1 (x_4 : hol.term A => hol.and (p_3 x_4) q_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)) ;)

(; dict ;)

def thm_1866 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_2) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_2) => hol.PROVE_HYP ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) q_2)) (thm_1864 A x_1 q_2 p_3 hyp_1 hyp_2) (hyp_3 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) => thm_1865 A x_1 q_2 p_3 hyp_3).

(; Theorem: |- ((Data.Bool.==> (p x)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ;)

(; dict ;)

def thm_1867 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_1) -> hol.proof (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_1) => hyp_2 : hol.proof (p_3 x_2) => thm_1866 A x_2 q_1 p_3 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)) ;)

(; dict ;)

def thm_1868 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_1) -> hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_2) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_1) => hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_2) => thm_1867 A q_2 x_1 p_3 hyp_2 (thm_1677 A x_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ;)

(; dict ;)

def thm_1869 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_1) -> hol.proof (hol.imp ((x_4 : hol.term A => p_3 x_4) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_1) => hyp_2 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_2) => thm_1868 A x_2 q_1 p_3 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)))) ;)

(; dict ;)

def thm_1870 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_2 x_4) q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) => x_3 : hol.term A => thm_1869 A q_1 x_3 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ;)

(; dict ;)

def thm_1871 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) => thm_1857 A q_1 p_2 (thm_1870 A q_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_1872 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) q_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_1873 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => hol.PROVE_HYP (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (thm_1860 A q_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => thm_1872 A q_1 p_2 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)) ;)

(; dict ;)

def thm_1874 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) => thm_1871 A q_1 p_2 hyp_1 ((A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => thm_1873 A q_1 p_2 hyp_1) A q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ;)

(; dict ;)

def thm_1875 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => thm_1874 A q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ (p x)) q) x)) (Data.Bool.? \lambda x. (p x))))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_1876 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and (p_2 x_4) q_1) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (x_3 : hol.term A => hol.and (p_2 x_3) q_1).

(; Theorem: |- ((Data.Bool./\ (p x)) q) ;)

(; dict ;)

def thm_1877 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_3 x_2) q_1) -> hol.proof (hol.and (p_3 x_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 x_2) q_1) => hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_1878 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_3 x_2) q_1) -> hol.proof (p_3 x_2) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 x_2) q_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) q_1 (p_3 x_2) hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_1879 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_3 x_2) q_1) -> hol.proof (p_3 x_2) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 x_2) q_1) => hol.PROVE_HYP (hol.and (p_3 x_2) q_1) (p_3 x_2) (thm_1877 A q_1 x_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (p_3 x_2) q_1) => thm_1878 A q_1 x_2 p_3 hyp_2).

(; Theorem: |- (\lambda x_1. (p x_1) x) ;)

(; dict ;)

def thm_1880 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_3 x_2) q_1) -> hol.proof ((x__1_4 : hol.term A => p_3 x__1_4) x_2) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 x_2) q_1) => hol.EQ_MP (p_3 x_2) ((x__1_4 : hol.term A => p_3 x__1_4) x_2) (thm_1698 A x_2 p_3) ((A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 x_2) q_1) => thm_1879 A q_1 x_2 p_3 hyp_1) A q_1 x_2 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_1881 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_3 x_2) q_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 x_2) q_1) => hol.PROVE_HYP ((x__1_4 : hol.term A => p_3 x__1_4) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (thm_1880 A q_1 x_2 p_3 hyp_1) (hyp_2 : hol.proof ((x__1_4 : hol.term A => p_3 x__1_4) x_2) => thm_1700 A x_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p x)) q)) (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_1882 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.and (p_3 x_2) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4))) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 x_2) q_1) => thm_1881 A q_1 x_2 p_3 hyp_1.

(; Theorem: |- (\lambda x. ((Data.Bool./\ (p x)) q) x) ;)

(; dict ;)

def thm_1883 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) -> hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) => hyp_1.

(; Theorem: |- ((Data.Bool./\ (p x)) q) ;)

(; dict ;)

def thm_1884 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) q_1) x_2) -> hol.proof (hol.and (p_3 x_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) q_1) x_2) => hol.EQ_MP ((x_4 : hol.term A => hol.and (p_3 x_4) q_1) x_2) (hol.and (p_3 x_2) q_1) (thm_1858 A x_2 q_1 p_3) (thm_1883 A x_2 q_1 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_1885 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) => thm_1882 A q_2 x_1 p_3 (thm_1884 A q_2 x_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool./\ (p x)) q) x)) (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_1886 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) => thm_1885 A x_1 q_2 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ (p x)) q) x)) (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_1887 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and (p_2 x_4) q_1) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => thm_1886 A x_3 q_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_1888 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_1876 A q_1 p_2 (thm_1887 A q_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)) ;)

(; dict ;)

def thm_1889 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_1890 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.and (p_2 x__1_3) q_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.and (p_2 x__1_3) q_1)) => thm_1888 A q_1 p_2 ((A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) => thm_1889 A q_1 p_2 hyp_1) A q_1 p_2 hyp_1).

(; Theorem: |- ((= q) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_1891 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) -> hol.proof (hol.eq hol.bool q_2 (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2 hyp_1.

(; Theorem: |- ((= q) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_1892 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.and (p_1 x__1_3) q_2)) -> hol.proof (hol.eq hol.bool q_2 (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.and (p_1 x__1_3) q_2)) => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (hol.eq hol.bool q_2 (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) (thm_1890 A q_2 p_1 hyp_1) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) => thm_1891 A p_1 q_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ (p x)) q) x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) q)) ;)

(; dict ;)

def thm_1893 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and (p_2 x_4) q_1) x_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A q_1 (x_3 : hol.term A => hol.and (p_2 x_3) q_1).

(; Theorem: |- q ;)

(; dict ;)

def thm_1894 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (p_2 x_1) q_3) -> hol.proof q_3 :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (p_2 x_1) q_3) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (p_2 x_1) q_3 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_1895 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (p_2 x_1) q_3) -> hol.proof q_3 :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (p_2 x_1) q_3) => hol.PROVE_HYP (hol.and (p_2 x_1) q_3) q_3 (thm_1877 A q_3 x_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.and (p_2 x_1) q_3) => thm_1894 A x_1 p_2 q_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p x)) q)) q) ;)

(; dict ;)

def thm_1896 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.and (p_3 x_2) q_1) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_3 x_2) q_1) => thm_1895 A x_2 p_3 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_1897 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_2 x_4) q_3) x_1) -> hol.proof q_3 :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_2 x_4) q_3) x_1) => thm_1896 A q_3 x_1 p_2 (thm_1884 A q_3 x_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool./\ (p x)) q) x)) q) ;)

(; dict ;)

def thm_1898 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) q_2) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and (p_3 x_4) q_2) x_1) => thm_1897 A x_1 p_3 q_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ (p x)) q) x)) q)) ;)

(; dict ;)

def thm_1899 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and (p_2 x_4) q_1) x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => thm_1898 A x_3 q_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) q) ;)

(; dict ;)

def thm_1900 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_1893 A q_1 p_2 (thm_1899 A q_1 p_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_1901 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) => thm_1900 A q_2 p_1 (thm_1889 A q_2 p_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_1902 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.and (p_2 x__1_3) q_1)) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.and (p_2 x__1_3) q_1)) => hol.EQ_MP q_1 (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (thm_1892 A p_2 q_1 hyp_1) (thm_1901 A p_2 q_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_1903 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) => thm_1902 A q_1 p_2 hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_1904 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => thm_1875 A q_1 p_2 (thm_1860 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) => thm_1903 A q_1 p_2 (thm_1889 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_1905 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => thm_1904 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_1906 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (thm_1856 A p_1) (thm_1905 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x_1. ((Data.Bool./\ (p x_1)) q))) ((Data.Bool./\ (Data.Bool.? \lambda x_1. (p x_1))) q)))) ;)

(; thm ;)

def thm_1907 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.and (p_1 x__1_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_1 x__1_3)) q_2)))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) (thm_1853 A) (thm_1906 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_1908 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_1909 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (thm_1908 A) (thm_1908 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))))))) ;)

(; dict ;)

def thm_1910 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) thm_150 (thm_1909 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_1911 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_1912 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (thm_1911 A p_1) (thm_1911 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))))) (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_1913 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (thm_1102 A) (thm_1912 A p_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (q x) x)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (q x))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))))) ;)

(; dict ;)

def thm_1914 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => q_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_1 (q_2 x_4))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (x_3 : hol.term A => q_2 x_3).

(; Theorem: |- ((= (\lambda x. ((Data.Bool./\ p) (q x)) x)) ((Data.Bool./\ p) (q x))) ;)

(; dict ;)

def thm_1915 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) (hol.and p_3 (q_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1.

(; Theorem: |- ((= ((Data.Bool./\ p) (q x))) (\lambda x. ((Data.Bool./\ p) (q x)) x)) ;)

(; dict ;)

def thm_1916 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_3 (q_2 x_1)) ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hol.SYM hol.bool ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) (hol.and p_3 (q_2 x_1)) (thm_1915 A x_1 q_2 p_3).

(; Theorem: |- ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1917 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) -> hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_1918 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) -> hol.proof p_2 :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) p_2 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_1919 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) -> hol.proof p_2 :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => hol.PROVE_HYP (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) p_2 (thm_1917 A q_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => thm_1918 A q_1 p_2 hyp_2).

(; Theorem: |- ((= (q x)) ((Data.Bool./\ p) (q x))) ;)

(; dict ;)

def thm_1920 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4))) -> hol.proof (hol.eq hol.bool (q_3 x_2) (hol.and p_1 (q_3 x_2))) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4))) => hol.PROVE_HYP p_1 (hol.eq hol.bool (q_3 x_2) (hol.and p_1 (q_3 x_2))) (thm_1919 A q_3 p_1 hyp_1) (hyp_2 : hol.proof p_1 => thm_1632 A p_1 x_2 q_3 hyp_2).

(; Theorem: |- ((Data.Bool./\ p) (q x)) ;)

(; dict ;)

def thm_1921 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (q_2 x_1) -> hyp_2 : hol.proof (hol.and p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) -> hol.proof (hol.and p_3 (q_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (q_2 x_1) => hyp_2 : hol.proof (hol.and p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) => hol.EQ_MP (q_2 x_1) (hol.and p_3 (q_2 x_1)) (thm_1920 A p_3 x_1 q_2 hyp_2) (thm_1654 A x_1 q_2 hyp_1).

(; Theorem: |- (\lambda x. ((Data.Bool./\ p) (q x)) x) ;)

(; dict ;)

def thm_1922 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (q_2 x_1) -> hyp_2 : hol.proof (hol.and p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) -> hol.proof ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (q_2 x_1) => hyp_2 : hol.proof (hol.and p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) => hol.EQ_MP (hol.and p_3 (q_2 x_1)) ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) (thm_1916 A x_1 q_2 p_3) (thm_1921 A x_1 q_2 p_3 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))) ;)

(; dict ;)

def thm_1923 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_3 (q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A x_1 (x_4 : hol.term A => hol.and p_3 (q_2 x_4)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))) ;)

(; dict ;)

def thm_1924 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (q_2 x_1) -> hyp_2 : hol.proof (hol.and p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_3 (q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (q_2 x_1) => hyp_2 : hol.proof (hol.and p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) => hol.PROVE_HYP ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_3 (q_2 x_4))) (thm_1922 A x_1 q_2 p_3 hyp_1 hyp_2) (hyp_3 : hol.proof ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) => thm_1923 A x_1 q_2 p_3 hyp_3).

(; Theorem: |- ((Data.Bool.==> (q x)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ;)

(; dict ;)

def thm_1925 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4))) -> hol.proof (hol.imp (q_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_1 (q_3 x_4)))) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4))) => hyp_2 : hol.proof (q_3 x_2) => thm_1924 A x_2 q_3 p_1 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))) ;)

(; dict ;)

def thm_1926 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => q_2 x_4) x_1) -> hyp_2 : hol.proof (hol.and p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_3 (q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => q_2 x_4) x_1) => hyp_2 : hol.proof (hol.and p_3 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) => thm_1925 A p_3 x_1 q_2 hyp_2 (thm_1663 A x_1 q_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (q x) x)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ;)

(; dict ;)

def thm_1927 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4))) -> hol.proof (hol.imp ((x_4 : hol.term A => q_3 x_4) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_1 (q_3 x_4)))) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4))) => hyp_2 : hol.proof ((x_4 : hol.term A => q_3 x_4) x_2) => thm_1926 A x_2 q_3 p_1 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (q x) x)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))))) ;)

(; dict ;)

def thm_1928 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => q_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_1 (q_2 x_4))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) => x_3 : hol.term A => thm_1927 A p_1 x_3 q_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (q x))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ;)

(; dict ;)

def thm_1929 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) => thm_1914 A p_1 q_2 (thm_1928 A p_1 q_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (q x)) ;)

(; dict ;)

def thm_1930 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (q x)) ;)

(; dict ;)

def thm_1931 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) => hol.PROVE_HYP (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) (thm_1917 A q_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) => thm_1930 A p_1 q_2 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))) ;)

(; dict ;)

def thm_1932 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => thm_1929 A p_2 q_1 hyp_1 ((A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) => thm_1931 A p_1 q_2 hyp_1) A p_2 q_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ;)

(; dict ;)

def thm_1933 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => thm_1932 A q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ p) (q x)) x)) p))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) p)) ;)

(; dict ;)

def thm_1934 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and p_2 (q_1 x_4)) x_3) p_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) p_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A p_2 (x_3 : hol.term A => hol.and p_2 (q_1 x_3)).

(; Theorem: |- ((Data.Bool./\ p) (q x)) ;)

(; dict ;)

def thm_1935 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (q_2 x_1)) -> hol.proof (hol.and p_3 (q_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (q_2 x_1)) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_1936 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (q_2 x_1)) -> hol.proof p_3 :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (q_2 x_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (q_2 x_1) p_3 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_1937 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (q_2 x_1)) -> hol.proof p_3 :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (q_2 x_1)) => hol.PROVE_HYP (hol.and p_3 (q_2 x_1)) p_3 (thm_1935 A x_1 q_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and p_3 (q_2 x_1)) => thm_1936 A x_1 q_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) (q x))) p) ;)

(; dict ;)

def thm_1938 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_3 (q_2 x_1)) p_3) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (q_2 x_1)) => thm_1937 A x_1 q_2 p_3 hyp_1.

(; Theorem: |- (\lambda x. ((Data.Bool./\ p) (q x)) x) ;)

(; dict ;)

def thm_1939 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) -> hol.proof ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) => hyp_1.

(; Theorem: |- ((Data.Bool./\ p) (q x)) ;)

(; dict ;)

def thm_1940 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) -> hol.proof (hol.and p_3 (q_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) => hol.EQ_MP ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) (hol.and p_3 (q_2 x_1)) (thm_1915 A x_1 q_2 p_3) (thm_1939 A x_1 q_2 p_3 hyp_1).

(; Theorem: |- p ;)

(; dict ;)

def thm_1941 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) -> hol.proof p_3 :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) => thm_1938 A x_1 q_2 p_3 (thm_1940 A x_1 q_2 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool./\ p) (q x)) x)) p) ;)

(; dict ;)

def thm_1942 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.imp ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) p_3) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) => thm_1941 A x_1 q_2 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ p) (q x)) x)) p)) ;)

(; dict ;)

def thm_1943 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and p_2 (q_1 x_4)) x_3) p_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => x_3 : hol.term A => thm_1942 A x_3 q_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) p) ;)

(; dict ;)

def thm_1944 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) p_2) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_1934 A q_1 p_2 (thm_1943 A q_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))) ;)

(; dict ;)

def thm_1945 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_1946 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) -> hol.proof p_2 :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) => thm_1944 A q_1 p_2 (thm_1945 A q_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (q x))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1947 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. (q x))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1948 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) => hol.PROVE_HYP p_1 (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (thm_1946 A q_2 p_1 hyp_1) (hyp_2 : hol.proof p_1 => thm_1947 A p_1 q_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ p) (q x)) x)) (Data.Bool.? \lambda x. (q x))))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1949 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and p_2 (q_1 x_4)) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1 x_4)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)).

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_1950 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (q_3 x_2)) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (q_3 x_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) p_1 (q_3 x_2) hyp_1.

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_1951 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (q_3 x_2)) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (q_3 x_2)) => hol.PROVE_HYP (hol.and p_1 (q_3 x_2)) (q_3 x_2) (thm_1935 A x_2 q_3 p_1 hyp_1) (hyp_2 : hol.proof (hol.and p_1 (q_3 x_2)) => thm_1950 A p_1 x_2 q_3 hyp_2).

(; Theorem: |- (\lambda x. (q x) x) ;)

(; dict ;)

def thm_1952 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_1 (q_3 x_2)) -> hol.proof ((x_4 : hol.term A => q_3 x_4) x_2) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (q_3 x_2)) => hol.EQ_MP (q_3 x_2) ((x_4 : hol.term A => q_3 x_4) x_2) (thm_1691 A x_2 q_3) ((A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_1 (q_3 x_2)) => thm_1951 A p_1 x_2 q_3 hyp_1) A p_1 x_2 q_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (q x)) ;)

(; dict ;)

def thm_1953 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term hol.bool -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and p_2 (q_3 x_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term hol.bool => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and p_2 (q_3 x_1)) => hol.PROVE_HYP ((x_4 : hol.term A => q_3 x_4) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4)) (thm_1952 A p_2 x_1 q_3 hyp_1) (hyp_2 : hol.proof ((x_4 : hol.term A => q_3 x_4) x_1) => thm_1693 A x_1 q_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) (q x))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1954 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_3 (q_2 x_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (q_2 x_1)) => thm_1953 A x_1 p_3 q_2 hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (q x)) ;)

(; dict ;)

def thm_1955 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term hol.bool -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_2 (q_3 x_4)) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term hol.bool => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_2 (q_3 x_4)) x_1) => thm_1954 A x_1 q_3 p_2 (thm_1940 A x_1 q_3 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool./\ p) (q x)) x)) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1956 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hol.proof (hol.imp ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2 x_4))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 (q_2 x_4)) x_1) => thm_1955 A x_1 p_3 q_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ p) (q x)) x)) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1957 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and p_2 (q_1 x_4)) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1 x_4)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => x_3 : hol.term A => thm_1956 A x_3 q_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1958 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_1949 A q_1 p_2 (thm_1957 A q_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. (q x)) ;)

(; dict ;)

def thm_1959 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) => thm_1958 A q_2 p_1 (thm_1945 A q_2 p_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_1960 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) -> hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (thm_1948 A p_2 q_1 hyp_1) (thm_1959 A p_2 q_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1961 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) => thm_1960 A q_1 p_2 hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_1962 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.PROP_EXT (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (hyp_1 : hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => thm_1933 A q_1 p_2 (thm_1917 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) => thm_1961 A q_1 p_2 (thm_1945 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_1963 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => thm_1962 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_1964 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (thm_1913 A p_1) (thm_1963 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x_1. ((Data.Bool./\ p) (q x_1)))) ((Data.Bool./\ p) (Data.Bool.? \lambda x_1. (q x_1)))))) ;)

(; thm ;)

def thm_1965 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.and p_1 (q_2 x__1_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_2 x__1_3)))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))) (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) (thm_1910 A) (thm_1964 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))))) ;)

(; dict ;)

def thm_1966 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))))) ;)

(; dict ;)

def thm_1967 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (thm_1966 A) (thm_1966 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q)))))) ;)

(; dict ;)

def thm_1968 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) thm_150 (thm_1967 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q)))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q)))) ;)

(; dict ;)

def thm_1969 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q)))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q)))) ;)

(; dict ;)

def thm_1970 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) (thm_1969 A p_1) (thm_1969 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))))) (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))))) ;)

(; dict ;)

def thm_1971 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) thm_150 (thm_1970 A p_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. q x)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))))) ((Data.Bool.==> (Data.Bool.? \lambda x. q)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_1972 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => q_2) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_1 q_2)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (x_3 : hol.term A => q_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. p x)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_1973 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_2 q_1)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) (x_3 : hol.term A => p_2).

(; Theorem: |- ((= (\lambda x. ((Data.Bool./\ p) q) _214)) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_1974 : A : hol.type -> __214_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.and p_3 q_2) __214_1) (hol.and p_3 q_2)) :=
  A : hol.type => __214_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.and p_3 q_2) __214_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda x. ((Data.Bool./\ p) q) _214)) ;)

(; dict ;)

def thm_1975 : A : hol.type -> __214_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_3 q_2) ((x_4 : hol.term A => hol.and p_3 q_2) __214_1)) :=
  A : hol.type => __214_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.SYM hol.bool ((x_4 : hol.term A => hol.and p_3 q_2) __214_1) (hol.and p_3 q_2) (thm_1974 A __214_1 q_2 p_3).

(; Theorem: |- (\lambda x. ((Data.Bool./\ p) q) _214) ;)

(; dict ;)

def thm_1976 : A : hol.type -> __214_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof ((x_4 : hol.term A => hol.and p_3 q_2) __214_1) :=
  A : hol.type => __214_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hol.EQ_MP (hol.and p_3 q_2) ((x_4 : hol.term A => hol.and p_3 q_2) __214_1) (thm_1975 A __214_1 q_2 p_3) (thm_169 q_2 p_3 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_1977 : A : hol.type -> __214_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 q_2) __214_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_3 q_2)) :=
  A : hol.type => __214_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 q_2) __214_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A __214_1 (x_4 : hol.term A => hol.and p_3 q_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_1978 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROVE_HYP ((x_3 : hol.term A => hol.and p_2 q_1) (hol.witness A)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) (thm_1976 A (hol.witness A) q_1 p_2 hyp_1 hyp_2) (hyp_3 : hol.proof ((x_3 : hol.term A => hol.and p_2 q_1) (hol.witness A)) => thm_1977 A (hol.witness A) q_1 p_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> p) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_1979 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_2 : hol.proof p_2 => thm_1978 A q_1 p_2 hyp_2 hyp_1.

(; Theorem: |- ((= (\lambda x. p x)) p) ;)

(; dict ;)

def thm_1980 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => p_2) x_1) p_2) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_3 : hol.term A => p_2) x_1.

(; Theorem: |- (\lambda x. p x) ;)

(; dict ;)

def thm_1981 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2) x_1) -> hol.proof ((x_3 : hol.term A => p_2) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term hol.bool => hyp_1 : hol.proof ((x_3 : hol.term A => p_2) x_1) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_1982 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2) x_1) -> hol.proof p_2 :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term hol.bool => hyp_1 : hol.proof ((x_3 : hol.term A => p_2) x_1) => hol.EQ_MP ((x_3 : hol.term A => p_2) x_1) p_2 (thm_1980 A x_1 p_2) (thm_1981 A x_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_1983 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof q_2 -> hyp_2 : hol.proof ((x_4 : hol.term A => p_3) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_3 q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof q_2 => hyp_2 : hol.proof ((x_4 : hol.term A => p_3) x_1) => thm_1979 A q_2 p_3 hyp_1 (thm_1982 A x_1 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (\lambda x. p x)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_1984 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof (hol.imp ((x_4 : hol.term A => p_3) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_3 q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_2 : hol.proof ((x_4 : hol.term A => p_3) x_2) => thm_1983 A x_2 q_1 p_3 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. p x)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_1985 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_2 q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof q_1 => x_3 : hol.term A => thm_1984 A q_1 x_3 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_1986 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof q_1 => thm_1973 A q_1 p_2 (thm_1985 A q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q)) ;)

(; dict ;)

def thm_1987 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. p) ;)

(; dict ;)

def thm_1988 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. p) ;)

(; dict ;)

def thm_1989 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => hol.PROVE_HYP (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (thm_1987 A q_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => thm_1988 A q_1 p_2 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_1990 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => thm_1986 A q_1 p_2 hyp_1 (thm_1989 A q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_1991 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) -> hol.proof (hol.imp q_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) => hyp_2 : hol.proof q_2 => thm_1990 A q_2 p_1 hyp_2 hyp_1.

(; Theorem: |- ((= (\lambda x. q x)) q) ;)

(; dict ;)

def thm_1992 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => q_2) x_1) q_2) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_3 : hol.term A => q_2) x_1.

(; Theorem: |- (\lambda x. q x) ;)

(; dict ;)

def thm_1993 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof ((x_3 : hol.term A => q_2) x_1) -> hol.proof ((x_3 : hol.term A => q_2) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => hyp_1 : hol.proof ((x_3 : hol.term A => q_2) x_1) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_1994 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof ((x_3 : hol.term A => q_2) x_1) -> hol.proof q_2 :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => hyp_1 : hol.proof ((x_3 : hol.term A => q_2) x_1) => hol.EQ_MP ((x_3 : hol.term A => q_2) x_1) q_2 (thm_1992 A x_1 q_2) (thm_1993 A x_1 q_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_1995 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => q_2) x_1) -> hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_3 q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => q_2) x_1) => hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2))) => thm_1991 A p_3 q_2 hyp_2 (thm_1994 A x_1 q_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. q x)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_1996 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3))) -> hol.proof (hol.imp ((x_4 : hol.term A => q_3) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_1 q_3))) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3))) => hyp_2 : hol.proof ((x_4 : hol.term A => q_3) x_2) => thm_1995 A x_2 q_3 p_1 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. q x)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_1997 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => q_2) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and p_1 q_2)))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) => x_3 : hol.term A => thm_1996 A p_1 x_3 q_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. q)) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_1998 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) => thm_1972 A p_1 q_2 (thm_1997 A p_1 q_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. q) ;)

(; dict ;)

def thm_1999 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. q) ;)

(; dict ;)

def thm_2000 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) => hol.PROVE_HYP (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) (thm_1987 A q_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) => thm_1999 A p_1 q_2 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_2001 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => thm_1998 A p_2 q_1 hyp_1 (thm_2000 A p_2 q_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_2002 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => thm_2001 A q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ p) q) x)) (Data.Bool.? \lambda x. p)))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) (Data.Bool.? \lambda x. p))) ;)

(; dict ;)

def thm_2003 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and p_2 q_1) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (x_3 : hol.term A => hol.and p_2 q_1).

(; Theorem: |- ((= (\lambda x. p _212)) p) ;)

(; dict ;)

def thm_2004 : A : hol.type -> __212_1 : hol.term A -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => p_2) __212_1) p_2) :=
  A : hol.type => __212_1 : hol.term A => p_2 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_3 : hol.term A => p_2) __212_1.

(; Theorem: |- ((= p) (\lambda x. p _212)) ;)

(; dict ;)

def thm_2005 : A : hol.type -> __212_1 : hol.term A -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_2 ((x_3 : hol.term A => p_2) __212_1)) :=
  A : hol.type => __212_1 : hol.term A => p_2 : hol.term hol.bool => hol.SYM hol.bool ((x_3 : hol.term A => p_2) __212_1) p_2 (thm_2004 A __212_1 p_2).

(; Theorem: |- (\lambda x. p _212) ;)

(; dict ;)

def thm_2006 : A : hol.type -> q_1 : hol.term hol.bool -> __212_2 : hol.term A -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 q_1) -> hol.proof ((x_4 : hol.term A => p_3) __212_2) :=
  A : hol.type => q_1 : hol.term hol.bool => __212_2 : hol.term A => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 q_1) => hol.EQ_MP p_3 ((x_4 : hol.term A => p_3) __212_2) (thm_2005 A __212_2 p_3) (thm_71 q_1 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. p) ;)

(; dict ;)

def thm_2007 : A : hol.type -> __212_1 : hol.term A -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2) __212_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) :=
  A : hol.type => __212_1 : hol.term A => p_2 : hol.term hol.bool => hyp_1 : hol.proof ((x_3 : hol.term A => p_2) __212_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A __212_1 (x_3 : hol.term A => p_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. p) ;)

(; dict ;)

def thm_2008 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.PROVE_HYP ((x_3 : hol.term A => p_2) (hol.witness A)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (thm_2006 A q_1 (hol.witness A) p_2 hyp_1) (hyp_2 : hol.proof ((x_3 : hol.term A => p_2) (hol.witness A)) => thm_2007 A (hol.witness A) p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) q)) (Data.Bool.? \lambda x. p)) ;)

(; dict ;)

def thm_2009 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_2 q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_2008 A q_1 p_2 hyp_1.

(; Theorem: |- ((= (\lambda x. ((Data.Bool./\ p) q) x)) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_2010 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.and p_3 q_2) x_1) (hol.and p_3 q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.and p_3 q_2) x_1.

(; Theorem: |- (\lambda x. ((Data.Bool./\ p) q) x) ;)

(; dict ;)

def thm_2011 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 q_2) x_1) -> hol.proof ((x_4 : hol.term A => hol.and p_3 q_2) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 q_2) x_1) => hyp_1.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_2012 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 q_2) x_1) -> hol.proof (hol.and p_3 q_2) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 q_2) x_1) => hol.EQ_MP ((x_4 : hol.term A => hol.and p_3 q_2) x_1) (hol.and p_3 q_2) (thm_2010 A x_1 q_2 p_3) (thm_2011 A x_1 q_2 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. p) ;)

(; dict ;)

def thm_2013 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 q_2) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 q_2) x_1) => thm_2009 A q_2 p_3 (thm_2012 A x_1 q_2 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool./\ p) q) x)) (Data.Bool.? \lambda x. p)) ;)

(; dict ;)

def thm_2014 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp ((x_4 : hol.term A => hol.and p_3 q_2) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 q_2) x_1) => thm_2013 A x_1 q_2 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ p) q) x)) (Data.Bool.? \lambda x. p))) ;)

(; dict ;)

def thm_2015 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and p_2 q_1) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term A => thm_2014 A x_3 q_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) (Data.Bool.? \lambda x. p)) ;)

(; dict ;)

def thm_2016 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_2003 A q_1 p_2 (thm_2015 A q_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_2017 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. p) ;)

(; dict ;)

def thm_2018 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) => thm_2016 A q_1 p_2 (thm_2017 A q_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. q)) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) ;)

(; dict ;)

def thm_2019 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. q)) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) ;)

(; dict ;)

def thm_2020 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) (thm_2018 A q_2 p_1 hyp_1) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) => thm_2019 A p_1 q_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ p) q) x)) (Data.Bool.? \lambda x. q)))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) (Data.Bool.? \lambda x. q))) ;)

(; dict ;)

def thm_2021 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and p_2 q_1) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1)) (x_3 : hol.term A => hol.and p_2 q_1).

(; Theorem: |- ((= (\lambda x. q _213)) q) ;)

(; dict ;)

def thm_2022 : A : hol.type -> __213_1 : hol.term A -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => q_2) __213_1) q_2) :=
  A : hol.type => __213_1 : hol.term A => q_2 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_3 : hol.term A => q_2) __213_1.

(; Theorem: |- ((= q) (\lambda x. q _213)) ;)

(; dict ;)

def thm_2023 : A : hol.type -> __213_1 : hol.term A -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_2 ((x_3 : hol.term A => q_2) __213_1)) :=
  A : hol.type => __213_1 : hol.term A => q_2 : hol.term hol.bool => hol.SYM hol.bool ((x_3 : hol.term A => q_2) __213_1) q_2 (thm_2022 A __213_1 q_2).

(; Theorem: |- (\lambda x. q _213) ;)

(; dict ;)

def thm_2024 : A : hol.type -> p_1 : hol.term hol.bool -> __213_2 : hol.term A -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_3) -> hol.proof ((x_4 : hol.term A => q_3) __213_2) :=
  A : hol.type => p_1 : hol.term hol.bool => __213_2 : hol.term A => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_3) => hol.EQ_MP q_3 ((x_4 : hol.term A => q_3) __213_2) (thm_2023 A __213_2 q_3) (thm_78 p_1 q_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. q) ;)

(; dict ;)

def thm_2025 : A : hol.type -> __213_1 : hol.term A -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof ((x_3 : hol.term A => q_2) __213_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) :=
  A : hol.type => __213_1 : hol.term A => q_2 : hol.term hol.bool => hyp_1 : hol.proof ((x_3 : hol.term A => q_2) __213_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A __213_1 (x_3 : hol.term A => q_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. q) ;)

(; dict ;)

def thm_2026 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => hol.PROVE_HYP ((x_3 : hol.term A => q_2) (hol.witness A)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) (thm_2024 A p_1 (hol.witness A) q_2 hyp_1) (hyp_2 : hol.proof ((x_3 : hol.term A => q_2) (hol.witness A)) => thm_2025 A (hol.witness A) q_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) q)) (Data.Bool.? \lambda x. q)) ;)

(; dict ;)

def thm_2027 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_2 q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_2026 A p_2 q_1 hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. q) ;)

(; dict ;)

def thm_2028 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_2 q_3) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_2 q_3) x_1) => thm_2027 A q_3 p_2 (thm_2012 A x_1 q_3 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool./\ p) q) x)) (Data.Bool.? \lambda x. q)) ;)

(; dict ;)

def thm_2029 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp ((x_4 : hol.term A => hol.and p_3 q_2) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.and p_3 q_2) x_1) => thm_2028 A x_1 p_3 q_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ p) q) x)) (Data.Bool.? \lambda x. q))) ;)

(; dict ;)

def thm_2030 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.and p_2 q_1) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term A => thm_2029 A x_3 q_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) (Data.Bool.? \lambda x. q)) ;)

(; dict ;)

def thm_2031 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_2021 A q_1 p_2 (thm_2030 A q_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. q) ;)

(; dict ;)

def thm_2032 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) => thm_2031 A q_2 p_1 (thm_2017 A q_2 p_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q)) ;)

(; dict ;)

def thm_2033 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) (thm_2020 A p_2 q_1 hyp_1) (thm_2032 A p_2 q_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) ;)

(; dict ;)

def thm_2034 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) => thm_2033 A q_1 p_2 hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) ;)

(; dict ;)

def thm_2035 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.PROP_EXT (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) (hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => thm_2002 A q_1 p_2 (thm_1987 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) => thm_2034 A q_1 p_2 (thm_2017 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q)))) ;)

(; dict ;)

def thm_2036 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => thm_2035 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))))) ;)

(; dict ;)

def thm_2037 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (thm_1971 A p_1) (thm_2036 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))))) ;)

(; thm ;)

def thm_2038 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) (thm_1968 A) (thm_2037 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))))) ;)

(; dict ;)

def thm_2039 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))))) ;)

(; dict ;)

def thm_2040 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (thm_2039 A) (thm_2039 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)))))) ;)

(; dict ;)

def thm_2041 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (thm_1102 A) (thm_2040 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)))) \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)))) ;)

(; dict ;)

def thm_2042 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)))) \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)))) ;)

(; dict ;)

def thm_2043 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) (thm_2042 A p_1) (thm_2042 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))))) (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))))) ;)

(; dict ;)

def thm_2044 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))) thm_150 (thm_2043 A p_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))) ;)

(; dict ;)

def thm_2045 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) q_1)) => thm_1902 A q_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => thm_1874 A q_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q)))) ;)

(; dict ;)

def thm_2046 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => thm_2045 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) q))))) ;)

(; dict ;)

def thm_2047 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2)))) (thm_2044 A p_1) (thm_2046 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x_1. (p x_1))) q)) (Data.Bool.? \lambda x_1. ((Data.Bool./\ (p x_1)) q))))) ;)

(; thm ;)

def thm_2048 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_1 x__1_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.and (p_1 x__1_3) q_2))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_1 x_3) q_2))))) (thm_2041 A) (thm_2047 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))))) ;)

(; dict ;)

def thm_2049 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))))) ;)

(; dict ;)

def thm_2050 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (thm_2049 A) (thm_2049 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))))))) ;)

(; dict ;)

def thm_2051 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) thm_150 (thm_2050 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))))) \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))))) ;)

(; dict ;)

def thm_2052 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))))) \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))))) ;)

(; dict ;)

def thm_2053 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (thm_2052 A p_1) (thm_2052 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))))) (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))))) ;)

(; dict ;)

def thm_2054 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))) (thm_1102 A) (thm_2053 A p_1).

(; Theorem: |- ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))) ;)

(; dict ;)

def thm_2055 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.PROP_EXT (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 (q_1 x_3))) => thm_1960 A q_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.and p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) => thm_1932 A q_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x))))) ;)

(; dict ;)

def thm_2056 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => thm_2055 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) (q x)))))) ;)

(; dict ;)

def thm_2057 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3))))) (thm_2054 A p_1) (thm_2056 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) (Data.Bool.? \lambda x_1. (q x_1)))) (Data.Bool.? \lambda x_1. ((Data.Bool./\ p) (q x_1)))))) ;)

(; thm ;)

def thm_2058 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => q_2 x__1_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.and p_1 (q_2 x__1_3)))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.and p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 (q_2 x_3)))))) (thm_2051 A) (thm_2057 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))))) ;)

(; dict ;)

def thm_2059 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))))) ;)

(; dict ;)

def thm_2060 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) (thm_2059 A) (thm_2059 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)))))) ;)

(; dict ;)

def thm_2061 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) thm_150 (thm_2060 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)))) \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_2062 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)))) \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_2063 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))) (thm_2062 A p_1) (thm_2062 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))))) (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))))) ;)

(; dict ;)

def thm_2064 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))) thm_150 (thm_2063 A p_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_2065 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.PROP_EXT (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_2 q_1)) => thm_2033 A q_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => thm_2001 A q_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_2066 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => thm_2065 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))))) ;)

(; dict ;)

def thm_2067 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2)))) (thm_2064 A p_1) (thm_2066 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ (Data.Bool.? \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool./\ p) q))))) ;)

(; thm ;)

def thm_2068 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and p_1 q_2))))) (thm_2061 A) (thm_2067 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))))) ;)

(; dict ;)

def thm_2069 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))))) ;)

(; dict ;)

def thm_2070 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (thm_2069 A) (thm_2069 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)))))) ;)

(; dict ;)

def thm_2071 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) thm_150 (thm_2070 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)))) ;)

(; dict ;)

def thm_2072 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)))) ;)

(; dict ;)

def thm_2073 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) (thm_2072 A p_1) (thm_2072 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))))) (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))))) ;)

(; dict ;)

def thm_2074 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) thm_150 (thm_2073 A p_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool.\/ p) q)) \lambda x. ((Data.Bool.\/ p) q)) ;)

(; dict ;)

def thm_2075 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.or p_2 q_1) (x_3 : hol.term A => hol.or p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.or p_2 q_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool.\/ p) q)) \lambda x. ((Data.Bool.\/ p) q)) ;)

(; dict ;)

def thm_2076 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.or p_2 q_1) (x_3 : hol.term A => hol.or p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.or p_2 q_1) (x_3 : hol.term A => hol.or p_2 q_1) (x_3 : hol.term A => hol.or p_2 q_1) (thm_2075 A q_1 p_2) (thm_2075 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ;)

(; dict ;)

def thm_2077 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.or p_2 q_1) (x_3 : hol.term A => hol.or p_2 q_1) (thm_7 A) (thm_2076 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda x. q) ;)

(; dict ;)

def thm_2078 : A : hol.type -> q_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => q_1)) -> hol.proof (hol.forall A (x_2 : hol.term A => q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => q_1)) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_2079 : A : hol.type -> q_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => q_1)) -> hol.proof q_1 :=
  A : hol.type => q_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => q_1)) => thm_2078 A q_1 hyp_1 (hol.witness A).

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_2080 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => q_1)) -> hol.proof (hol.or p_2 q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => q_1)) => hol.PROVE_HYP q_1 (hol.or p_2 q_1) (thm_2079 A q_1 hyp_1) (hyp_2 : hol.proof q_1 => thm_491 q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_2081 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => q_1)) -> hol.proof (hol.or p_2 q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => q_1)) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => q_1)) (hol.or p_2 q_1) (thm_2078 A q_1 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => q_1)) => thm_2080 A q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. q)) ((Data.Bool.\/ p) q)) ;)

(; dict ;)

def thm_2082 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => q_2)) (hol.or p_1 q_2)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => q_2)) => thm_2081 A q_2 p_1 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. p) ;)

(; dict ;)

def thm_2083 : A : hol.type -> p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1)) -> hol.proof (hol.forall A (x_2 : hol.term A => p_1)) :=
  A : hol.type => p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1)) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_2084 : A : hol.type -> p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1)) -> hol.proof p_1 :=
  A : hol.type => p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1)) => thm_2083 A p_1 hyp_1 (hol.witness A).

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_2085 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) -> hol.proof (hol.or p_2 q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) => hol.PROVE_HYP p_2 (hol.or p_2 q_1) (thm_2084 A p_2 hyp_1) (hyp_2 : hol.proof p_2 => thm_494 q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_2086 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) -> hol.proof (hol.or p_2 q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => p_2)) (hol.or p_2 q_1) (thm_2083 A p_2 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) => thm_2085 A q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. p)) ((Data.Bool.\/ p) q)) ;)

(; dict ;)

def thm_2087 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (hol.or p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) => thm_2086 A q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)) ;)

(; dict ;)

def thm_2088 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) -> hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_2089 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (hol.or p_2 q_1)) -> hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => q_1)) (hol.or p_2 q_1)) -> hyp_3 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) -> hol.proof (hol.or p_2 q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (hol.or p_2 q_1)) => hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => q_1)) (hol.or p_2 q_1)) => hyp_3 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.forall A (x_3 : hol.term A => q_1)) (hol.forall A (x_3 : hol.term A => p_2)) (hol.or p_2 q_1) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_2090 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (hol.or p_2 q_1)) -> hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => q_1)) (hol.or p_2 q_1)) -> hyp_3 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) -> hol.proof (hol.or p_2 q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (hol.or p_2 q_1)) => hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => q_1)) (hol.or p_2 q_1)) => hyp_3 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => hol.PROVE_HYP (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) (hol.or p_2 q_1) (thm_2088 A q_1 p_2 hyp_3) (hyp_4 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => thm_2089 A q_1 p_2 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_2091 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => q_1)) (hol.or p_2 q_1)) -> hyp_2 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) -> hol.proof (hol.or p_2 q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => q_1)) (hol.or p_2 q_1)) => hyp_2 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => hol.PROVE_HYP (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (hol.or p_2 q_1)) (hol.or p_2 q_1) (thm_2087 A q_1 p_2) (hyp_3 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (hol.or p_2 q_1)) => thm_2090 A q_1 p_2 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_2092 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) -> hol.proof (hol.or p_2 q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => hol.PROVE_HYP (hol.imp (hol.forall A (x_3 : hol.term A => q_1)) (hol.or p_2 q_1)) (hol.or p_2 q_1) (thm_2082 A p_2 q_1) (hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => q_1)) (hol.or p_2 q_1)) => thm_2091 A q_1 p_2 hyp_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q)) ;)

(; dict ;)

def thm_2093 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => x_3 : hol.term A => thm_2092 A q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ;)

(; dict ;)

def thm_2094 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) (thm_2077 A q_1 p_2) (thm_2093 A q_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q)) ;)

(; dict ;)

def thm_2095 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) => hyp_1.

(; Theorem: |- ((= \lambda x. q) \lambda x. q) ;)

(; dict ;)

def thm_2096 : A : hol.type -> q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => q_1) (x_2 : hol.term A => q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => q_1).

(; Theorem: |- ((= \lambda x. q) \lambda x. q) ;)

(; dict ;)

def thm_2097 : A : hol.type -> q_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => q_1) (x_2 : hol.term A => q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => q_1) (x_2 : hol.term A => q_1) (x_2 : hol.term A => q_1) (thm_2096 A q_1) (thm_2096 A q_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. q)) (Data.Bool.! \lambda x. q)) ;)

(; dict ;)

def thm_2098 : A : hol.type -> q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => q_1)) (hol.forall A (x_2 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => q_1) (x_2 : hol.term A => q_1) (thm_7 A) (thm_2097 A q_1).

(; Theorem: |- (Data.Bool.! \lambda x. q) ;)

(; dict ;)

def thm_2099 : A : hol.type -> q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof (hol.forall A (x_2 : hol.term A => q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => x_2 : hol.term A => thm_65 q_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)) ;)

(; dict ;)

def thm_2100 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => q_1)) -> hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => q_1)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) (hol.forall A (x_3 : hol.term A => q_1)) (hol.forall A (x_3 : hol.term A => p_2)) hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)) ;)

(; dict ;)

def thm_2101 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) (hol.EQ_MP (hol.forall A (x_3 : hol.term A => q_1)) (hol.forall A (x_3 : hol.term A => q_1)) (thm_2098 A q_1) (thm_2099 A q_1 hyp_1)) (hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => q_1)) => thm_2100 A q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) ;)

(; dict ;)

def thm_2102 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.imp q_2 (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof q_2 => thm_2101 A q_2 p_1 hyp_1.

(; Theorem: |- ((= \lambda x. p) \lambda x. p) ;)

(; dict ;)

def thm_2103 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => p_1) (x_2 : hol.term A => p_1)) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => p_1).

(; Theorem: |- ((= \lambda x. p) \lambda x. p) ;)

(; dict ;)

def thm_2104 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => p_1) (x_2 : hol.term A => p_1)) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => p_1) (x_2 : hol.term A => p_1) (x_2 : hol.term A => p_1) (thm_2103 A p_1) (thm_2103 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. p)) ;)

(; dict ;)

def thm_2105 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => p_1)) (hol.forall A (x_2 : hol.term A => p_1))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => p_1) (x_2 : hol.term A => p_1) (thm_7 A) (thm_2104 A p_1).

(; Theorem: |- (Data.Bool.! \lambda x. p) ;)

(; dict ;)

def thm_2106 : A : hol.type -> p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.forall A (x_2 : hol.term A => p_1)) :=
  A : hol.type => p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => x_2 : hol.term A => thm_64 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)) ;)

(; dict ;)

def thm_2107 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) -> hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) (hol.forall A (x_3 : hol.term A => q_1)) (hol.forall A (x_3 : hol.term A => p_2)) hyp_1.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)) ;)

(; dict ;)

def thm_2108 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => p_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) (hol.EQ_MP (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => p_2)) (thm_2105 A p_2) (thm_2106 A p_2 hyp_1)) (hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) => thm_2107 A q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) ;)

(; dict ;)

def thm_2109 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_2108 A q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p) q) ;)

(; dict ;)

def thm_2110 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) -> hol.proof (hol.or p_2 q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) => thm_2095 A q_1 p_2 hyp_1 (hol.witness A).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)) ;)

(; dict ;)

def thm_2111 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_2 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) -> hyp_2 : hol.proof (hol.imp q_1 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) -> hyp_3 : hol.proof (hol.or p_2 q_1) -> hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_2 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) => hyp_2 : hol.proof (hol.imp q_1 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) => hyp_3 : hol.proof (hol.or p_2 q_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) q_1 p_2 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)) ;)

(; dict ;)

def thm_2112 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) -> hyp_2 : hol.proof (hol.imp p_2 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) -> hyp_3 : hol.proof (hol.imp q_1 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) -> hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) => hyp_2 : hol.proof (hol.imp p_2 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) => hyp_3 : hol.proof (hol.imp q_1 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) => hol.PROVE_HYP (hol.or p_2 q_1) (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) (thm_2110 A q_1 p_2 hyp_1) (hyp_4 : hol.proof (hol.or p_2 q_1) => thm_2111 A q_1 p_2 hyp_2 hyp_3 hyp_4).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)) ;)

(; dict ;)

def thm_2113 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) -> hyp_2 : hol.proof (hol.imp q_1 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) -> hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) => hyp_2 : hol.proof (hol.imp q_1 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) => hol.PROVE_HYP (hol.imp p_2 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) (thm_2109 A q_1 p_2) (hyp_3 : hol.proof (hol.imp p_2 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) => thm_2112 A q_1 p_2 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)) ;)

(; dict ;)

def thm_2114 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) -> hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) => hol.PROVE_HYP (hol.imp q_1 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) (thm_2102 A p_2 q_1) (hyp_2 : hol.proof (hol.imp q_1 (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) => thm_2113 A q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)) ;)

(; dict ;)

def thm_2115 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) -> hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) (thm_2095 A q_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) => thm_2114 A q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) ;)

(; dict ;)

def thm_2116 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) => thm_2115 A q_1 p_2 hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) ;)

(; dict ;)

def thm_2117 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.PROP_EXT (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) (hyp_1 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => thm_2094 A q_1 p_2 (thm_2088 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) => thm_2116 A q_1 p_2 (thm_2095 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q)))) ;)

(; dict ;)

def thm_2118 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => thm_2117 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))))) ;)

(; dict ;)

def thm_2119 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (thm_2074 A p_1) (thm_2118 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))))) ;)

(; thm ;)

def thm_2120 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) (thm_2071 A) (thm_2119 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))))) ;)

(; dict ;)

def thm_2121 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))))) ;)

(; dict ;)

def thm_2122 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))) (thm_2121 A) (thm_2121 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q)))))) ;)

(; dict ;)

def thm_2123 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))) thm_150 (thm_2122 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q)))) \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q)))) ;)

(; dict ;)

def thm_2124 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q)))) \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q)))) ;)

(; dict ;)

def thm_2125 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))) (thm_2124 A p_1) (thm_2124 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))))) (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))))) ;)

(; dict ;)

def thm_2126 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))) thm_150 (thm_2125 A p_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))) ;)

(; dict ;)

def thm_2127 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.PROP_EXT (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) (hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.or p_2 q_1)) => thm_2114 A q_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.or (hol.forall A (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => thm_2093 A q_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q)))) ;)

(; dict ;)

def thm_2128 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => thm_2127 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))))) ;)

(; dict ;)

def thm_2129 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2)))) (thm_2126 A p_1) (thm_2128 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.\/ p) q))))) ;)

(; thm ;)

def thm_2130 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) (hol.forall A (x_3 : hol.term A => hol.or p_1 q_2))))) (thm_2123 A) (thm_2129 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_2131 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_2132 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (thm_2131 A) (thm_2131 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))))) ;)

(; dict ;)

def thm_2133 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) thm_150 (thm_2132 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_2134 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_2135 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (thm_2134 A p_1) (thm_2134 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))))) (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_2136 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (thm_1102 A) (thm_2135 A p_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))) ;)

(; dict ;)

def thm_2137 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) => hyp_1.

(; Theorem: |- ((Data.Bool.==> p) (q _299)) ;)

(; dict ;)

def thm_2138 : A : hol.type -> __299_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp p_3 (q_2 x_4))) -> hol.proof (hol.imp p_3 (q_2 __299_1)) :=
  A : hol.type => __299_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp p_3 (q_2 x_4))) => thm_2137 A q_2 p_3 hyp_1 __299_1.

(; Theorem: |- (q _299) ;)

(; dict ;)

def thm_2139 : A : hol.type -> p_1 : hol.term hol.bool -> __299_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp p_1 (q_3 x_4))) -> hol.proof (q_3 __299_2) :=
  A : hol.type => p_1 : hol.term hol.bool => __299_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp p_1 (q_3 x_4))) => thm_2138 A __299_2 q_3 p_1 hyp_2 (thm_64 p_1 hyp_1).

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_2140 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp p_1 (q_3 x__1_4))) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp p_1 (q_3 x__1_4))) => (A : hol.type => p_1 : hol.term hol.bool => __299_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp p_1 (q_3 x_4))) => thm_2139 A p_1 __299_2 q_3 hyp_1 hyp_2) A p_1 x_2 q_3 hyp_1 hyp_2.

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_2141 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp p_1 (q_3 x__1_4))) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp p_1 (q_3 x__1_4))) => hol.PROVE_HYP p_1 (q_3 x_2) (thm_64 p_1 hyp_1) (hyp_3 : hol.proof p_1 => thm_2140 A p_1 x_2 q_3 hyp_3 hyp_2).

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_2142 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp p_1 (q_3 x__1_4))) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp p_1 (q_3 x__1_4))) => hol.PROVE_HYP (hol.forall A (x__1_4 : hol.term A => hol.imp p_1 (q_3 x__1_4))) (q_3 x_2) ((A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) => thm_2137 A q_1 p_2 hyp_1) A q_3 p_1 hyp_2) (hyp_3 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp p_1 (q_3 x__1_4))) => thm_2141 A p_1 x_2 q_3 hyp_1 hyp_3).

(; Theorem: |- (Data.Bool.! \lambda x. (q x)) ;)

(; dict ;)

def thm_2143 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.imp p_1 (q_2 x__1_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.imp p_1 (q_2 x__1_3))) => x_3 : hol.term A => thm_2142 A p_1 x_3 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x))) ;)

(; dict ;)

def thm_2144 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.imp p_2 (q_1 x__1_3))) -> hol.proof (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.imp p_2 (q_1 x__1_3))) => hyp_2 : hol.proof p_2 => hol.EQ_MP (hol.forall A (x_3 : hol.term A => q_1 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)) (thm_1542 A q_1) (thm_2143 A p_2 q_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_2145 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) => thm_2144 A q_1 p_2 hyp_1.

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> p) (q x))) \lambda x. ((Data.Bool.==> p) (q x))) ;)

(; dict ;)

def thm_2146 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> p) (q x))) \lambda x. ((Data.Bool.==> p) (q x))) ;)

(; dict ;)

def thm_2147 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)) (thm_2146 A q_1 p_2) (thm_2146 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_2148 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)) (thm_7 A) (thm_2147 A q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x))) ;)

(; dict ;)

def thm_2149 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) -> hol.proof (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (q x)) ;)

(; dict ;)

def thm_2150 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) => thm_2149 A q_2 p_1 hyp_2 (thm_64 p_1 hyp_1).

(; Theorem: |- (q _298) ;)

(; dict ;)

def thm_2151 : A : hol.type -> p_1 : hol.term hol.bool -> __298_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.forall A (x_4 : hol.term A => q_3 x_4))) -> hol.proof (q_3 __298_2) :=
  A : hol.type => p_1 : hol.term hol.bool => __298_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.forall A (x_4 : hol.term A => q_3 x_4))) => thm_2150 A p_1 q_3 hyp_1 hyp_2 __298_2.

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_2152 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.forall A (x__1_4 : hol.term A => q_3 x__1_4))) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.forall A (x__1_4 : hol.term A => q_3 x__1_4))) => (A : hol.type => p_1 : hol.term hol.bool => __298_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.forall A (x_4 : hol.term A => q_3 x_4))) => thm_2151 A p_1 __298_2 q_3 hyp_1 hyp_2) A p_1 x_2 q_3 hyp_1 hyp_2.

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_2153 : A : hol.type -> p_1 : hol.term hol.bool -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.forall A (x__1_4 : hol.term A => q_3 x__1_4))) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term hol.bool => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.forall A (x__1_4 : hol.term A => q_3 x__1_4))) => hol.PROVE_HYP p_1 (q_3 x_2) (thm_64 p_1 hyp_1) (hyp_3 : hol.proof p_1 => thm_2152 A p_1 x_2 q_3 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) (q x)) ;)

(; dict ;)

def thm_2154 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term (hol.arr A hol.bool) -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.forall A (x__1_4 : hol.term A => q_2 x__1_4))) -> hol.proof (hol.imp p_3 (q_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term (hol.arr A hol.bool) => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.forall A (x__1_4 : hol.term A => q_2 x__1_4))) => hyp_2 : hol.proof p_3 => thm_2153 A p_3 x_1 q_2 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))) ;)

(; dict ;)

def thm_2155 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_2 (hol.forall A (x__1_3 : hol.term A => q_1 x__1_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_2 (hol.forall A (x__1_3 : hol.term A => q_1 x__1_3))) => x_3 : hol.term A => thm_2154 A x_3 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_2156 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (thm_2148 A q_1 p_2) (thm_2155 A q_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_2157 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.PROP_EXT (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) => thm_2145 A q_1 p_2 (thm_2137 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) => thm_2156 A q_1 p_2 (thm_2149 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_2158 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => thm_2157 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_2159 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (thm_2136 A p_1) (thm_2158 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x_1. (q x_1)))) (Data.Bool.! \lambda x_1. ((Data.Bool.==> p) (q x_1)))))) ;)

(; thm ;)

def thm_2160 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x__1_3 : hol.term A => q_2 x__1_3))) (hol.forall A (x__1_3 : hol.term A => hol.imp p_1 (q_2 x__1_3)))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) (thm_2133 A) (thm_2159 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_2161 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_2162 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (thm_2161 A) (thm_2161 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x))))))) ;)

(; dict ;)

def thm_2163 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) thm_150 (thm_2162 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x))))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_2164 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x))))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_2165 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (thm_2164 A p_1) (thm_2164 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))))) (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_2166 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (thm_1102 A) (thm_2165 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_2167 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.PROP_EXT (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hyp_1 : hol.proof (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) => thm_2155 A q_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) => thm_2144 A q_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_2168 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term (hol.arr A hol.bool) => thm_2167 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_2169 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (thm_2166 A p_1) (thm_2168 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x_1. ((Data.Bool.==> p) (q x_1)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x_1. (q x_1)))))) ;)

(; thm ;)

def thm_2170 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x__1_3 : hol.term A => hol.imp p_1 (q_2 x__1_3))) (hol.imp p_1 (hol.forall A (x__1_3 : hol.term A => q_2 x__1_3)))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (thm_2163 A) (thm_2169 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))))) ;)

(; dict ;)

def thm_2171 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))))) ;)

(; dict ;)

def thm_2172 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (thm_2171 A) (thm_2171 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q)))))) ;)

(; dict ;)

def thm_2173 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (thm_1102 A) (thm_2172 A).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q)))) \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q)))) ;)

(; dict ;)

def thm_2174 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q)))) \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q)))) ;)

(; dict ;)

def thm_2175 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (thm_2174 A p_1) (thm_2174 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))))) (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))))) ;)

(; dict ;)

def thm_2176 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))) thm_150 (thm_2175 A p_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_2177 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4) x_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A q_1 (x_3 : hol.term A => p_2 x_3).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q)) ;)

(; dict ;)

def thm_2178 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (p _320)) q) ;)

(; dict ;)

def thm_2179 : A : hol.type -> q_1 : hol.term hol.bool -> __320_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) q_1)) -> hol.proof (hol.imp (p_3 __320_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => __320_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) q_1)) => thm_2178 A q_1 p_3 hyp_1 __320_2.

(; Theorem: |- (p _320) ;)

(; dict ;)

def thm_2180 : A : hol.type -> __320_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 __320_1) -> hol.proof (p_2 __320_1) :=
  A : hol.type => __320_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 __320_1) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_2181 : A : hol.type -> __320_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (p_2 __320_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) -> hol.proof q_3 :=
  A : hol.type => __320_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term hol.bool => hyp_1 : hol.proof (p_2 __320_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) => thm_2179 A q_3 __320_1 p_2 hyp_2 (thm_2180 A __320_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (p x)) q) ;)

(; dict ;)

def thm_2182 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp (p_3 x__1_4) q_1)) -> hol.proof (hol.imp (p_3 x_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp (p_3 x__1_4) q_1)) => (A : hol.type => q_1 : hol.term hol.bool => __320_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) q_1)) => hyp_2 : hol.proof (p_3 __320_2) => thm_2181 A __320_2 p_3 q_1 hyp_2 hyp_1) A q_1 x_2 p_3 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_2183 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (p_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp (p_2 x__1_4) q_3)) -> hol.proof q_3 :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term hol.bool => hyp_1 : hol.proof (p_2 x_1) => hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp (p_2 x__1_4) q_3)) => thm_2182 A q_3 x_1 p_2 hyp_2 (thm_1266 A x_1 p_2 hyp_1).

(; Theorem: |- q ;)

(; dict ;)

def thm_2184 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (p_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp (p_2 x__1_4) q_3)) -> hol.proof q_3 :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term hol.bool => hyp_1 : hol.proof (p_2 x_1) => hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp (p_2 x__1_4) q_3)) => hol.PROVE_HYP (p_2 x_1) q_3 (thm_1266 A x_1 p_2 hyp_1) (hyp_3 : hol.proof (p_2 x_1) => thm_2183 A x_1 p_2 q_3 hyp_3 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_2185 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (p_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp (p_2 x__1_4) q_3)) -> hol.proof q_3 :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term hol.bool => hyp_1 : hol.proof (p_2 x_1) => hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp (p_2 x__1_4) q_3)) => hol.PROVE_HYP (hol.forall A (x__1_4 : hol.term A => hol.imp (p_2 x__1_4) q_3)) q_3 ((A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) => thm_2178 A q_1 p_2 hyp_1) A q_3 p_2 hyp_2) (hyp_3 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp (p_2 x__1_4) q_3)) => thm_2184 A x_1 p_2 q_3 hyp_1 hyp_3).

(; Theorem: |- q ;)

(; dict ;)

def thm_2186 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp (p_2 x__1_4) q_3)) -> hyp_2 : hol.proof ((x_4 : hol.term A => p_2 x_4) x_1) -> hol.proof q_3 :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp (p_2 x__1_4) q_3)) => hyp_2 : hol.proof ((x_4 : hol.term A => p_2 x_4) x_1) => (hyp_3 : hol.proof (p_2 x_1) => thm_2185 A x_1 p_2 q_3 hyp_3 hyp_1) (thm_1677 A x_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (p x) x)) q) ;)

(; dict ;)

def thm_2187 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp (p_3 x__1_4) q_1)) -> hol.proof (hol.imp ((x_4 : hol.term A => p_3 x_4) x_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.imp (p_3 x__1_4) q_1)) => hyp_2 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_2) => thm_2186 A x_2 p_3 q_1 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) q)) ;)

(; dict ;)

def thm_2188 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.imp (p_2 x__1_3) q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4) x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.imp (p_2 x__1_3) q_1)) => x_3 : hol.term A => thm_2187 A q_1 x_3 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_2189 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.imp (p_2 x__1_3) q_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.imp (p_2 x__1_3) q_1)) => thm_2177 A q_1 p_2 (thm_2188 A q_1 p_2 hyp_1).

(; Theorem: |- q ;)

(; dict ;)

def thm_2190 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.imp (p_1 x__1_3) q_2)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.imp (p_1 x__1_3) q_2)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) => thm_2189 A q_2 p_1 hyp_1 (thm_1682 A p_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_2191 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => thm_2190 A p_2 q_1 hyp_1 hyp_2.

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (p x)) q)) \lambda x. ((Data.Bool.==> (p x)) q)) ;)

(; dict ;)

def thm_2192 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (p x)) q)) \lambda x. ((Data.Bool.==> (p x)) q)) ;)

(; dict ;)

def thm_2193 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1) (thm_2192 A q_1 p_2) (thm_2192 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ;)

(; dict ;)

def thm_2194 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1) (x_3 : hol.term A => hol.imp (p_2 x_3) q_1) (thm_7 A) (thm_2193 A q_1 p_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q) ;)

(; dict ;)

def thm_2195 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_2196 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) -> hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) => hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) => thm_2195 A q_2 p_1 hyp_2 (thm_1682 A p_1 hyp_1).

(; Theorem: |- q ;)

(; dict ;)

def thm_2197 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (p_2 x_1) -> hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_2 x__1_4)) q_3) -> hol.proof q_3 :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term hol.bool => hyp_1 : hol.proof (p_2 x_1) => hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_2 x__1_4)) q_3) => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4)) q_3 (thm_1701 A x_1 p_2 hyp_1) (hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 x_4)) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) => hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) => thm_2196 A p_1 q_2 hyp_1 hyp_2) A p_2 q_3 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (p x)) q) ;)

(; dict ;)

def thm_2198 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_1) -> hol.proof (hol.imp (p_3 x_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_4 : hol.term A => p_3 x__1_4)) q_1) => hyp_2 : hol.proof (p_3 x_2) => thm_2197 A x_2 p_3 q_1 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q)) ;)

(; dict ;)

def thm_2199 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_2 x__1_3)) q_1) => x_3 : hol.term A => thm_2198 A q_1 x_3 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ;)

(; dict ;)

def thm_2200 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (thm_2194 A q_1 p_2) (thm_2199 A q_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ;)

(; dict ;)

def thm_2201 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) => thm_2191 A q_1 p_2 (thm_2178 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => thm_2200 A q_1 p_2 (thm_2195 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q)))) ;)

(; dict ;)

def thm_2202 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => thm_2201 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))))) ;)

(; dict ;)

def thm_2203 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)))) (thm_2176 A p_1) (thm_2202 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> (Data.Bool.? \lambda x_1. (p x_1))) q)) (Data.Bool.! \lambda x_1. ((Data.Bool.==> (p x_1)) q))))) ;)

(; thm ;)

def thm_2204 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_1 x__1_3)) q_2) (hol.forall A (x__1_3 : hol.term A => hol.imp (p_1 x__1_3) q_2))))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2) (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2))))) (thm_2173 A) (thm_2203 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_2205 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_2206 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (thm_2205 A) (thm_2205 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q))))) ;)

(; dict ;)

def thm_2207 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (thm_1102 A) (thm_2206 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_2208 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_2209 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) (thm_2208 A p_1) (thm_2208 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)))) (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_2210 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)) thm_150 (thm_2209 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_2211 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) (hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1) => thm_2199 A q_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) => thm_2189 A q_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_2212 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term hol.bool => thm_2211 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q)))) ;)

(; dict ;)

def thm_2213 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2))) (thm_2210 A p_1) (thm_2212 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x_1. ((Data.Bool.==> (p x_1)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x_1. (p x_1))) q)))) ;)

(; thm ;)

def thm_2214 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x__1_3 : hol.term A => hol.imp (p_1 x__1_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => p_1 x__1_3)) q_2)))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) q_2)))) (thm_2207 A) (thm_2213 A)) A.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q))))) ;)

(; dict ;)

def thm_2215 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q))))) ;)

(; dict ;)

def thm_2216 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (thm_2215 A) (thm_2215 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q)))))) ;)

(; dict ;)

def thm_2217 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) thm_150 (thm_2216 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q)))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q)))) ;)

(; dict ;)

def thm_2218 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q)))) \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q)))) ;)

(; dict ;)

def thm_2219 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) (thm_2218 A p_1) (thm_2218 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q))))) (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q))))) ;)

(; dict ;)

def thm_2220 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))) thm_150 (thm_2219 A p_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> p) q)) \lambda x. ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_2221 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1) (x_3 : hol.term A => hol.imp p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> p) q)) \lambda x. ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_2222 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1) (x_3 : hol.term A => hol.imp p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1) (x_3 : hol.term A => hol.imp p_2 q_1) (x_3 : hol.term A => hol.imp p_2 q_1) (thm_2221 A q_1 p_2) (thm_2221 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ;)

(; dict ;)

def thm_2223 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.imp p_2 q_1) (x_3 : hol.term A => hol.imp p_2 q_1) (thm_7 A) (thm_2222 A q_1 p_2).

(; Theorem: |- ((= (\lambda x. p _341)) p) ;)

(; dict ;)

def thm_2224 : A : hol.type -> __341_1 : hol.term A -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => p_2) __341_1) p_2) :=
  A : hol.type => __341_1 : hol.term A => p_2 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_3 : hol.term A => p_2) __341_1.

(; Theorem: |- ((= p) (\lambda x. p _341)) ;)

(; dict ;)

def thm_2225 : A : hol.type -> __341_1 : hol.term A -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_2 ((x_3 : hol.term A => p_2) __341_1)) :=
  A : hol.type => __341_1 : hol.term A => p_2 : hol.term hol.bool => hol.SYM hol.bool ((x_3 : hol.term A => p_2) __341_1) p_2 (thm_2224 A __341_1 p_2).

(; Theorem: |- (\lambda x. p _341) ;)

(; dict ;)

def thm_2226 : A : hol.type -> __341_1 : hol.term A -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hol.proof ((x_3 : hol.term A => p_2) __341_1) :=
  A : hol.type => __341_1 : hol.term A => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hol.EQ_MP p_2 ((x_3 : hol.term A => p_2) __341_1) (thm_2225 A __341_1 p_2) (thm_64 p_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. p) ;)

(; dict ;)

def thm_2227 : A : hol.type -> __341_1 : hol.term A -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof ((x_3 : hol.term A => p_2) __341_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) :=
  A : hol.type => __341_1 : hol.term A => p_2 : hol.term hol.bool => hyp_1 : hol.proof ((x_3 : hol.term A => p_2) __341_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A __341_1 (x_3 : hol.term A => p_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. p) ;)

(; dict ;)

def thm_2228 : A : hol.type -> p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1)) :=
  A : hol.type => p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROVE_HYP ((x_2 : hol.term A => p_1) (hol.witness A)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1)) (thm_2226 A (hol.witness A) p_1 hyp_1) (hyp_2 : hol.proof ((x_2 : hol.term A => p_1) (hol.witness A)) => thm_2227 A (hol.witness A) p_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q)) ;)

(; dict ;)

def thm_2229 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. p) ;)

(; dict ;)

def thm_2230 : A : hol.type -> p_1 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1)) :=
  A : hol.type => p_1 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1)) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. q) ;)

(; dict ;)

def thm_2231 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) -> hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) -> hol.proof (hol.forall A (x_3 : hol.term A => q_2)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) => hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) => thm_2229 A q_2 p_1 hyp_2 (thm_2230 A p_1 hyp_1).

(; Theorem: |- q ;)

(; dict ;)

def thm_2232 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) -> hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) => hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) => thm_2231 A p_1 q_2 hyp_1 hyp_2 (hol.witness A).

(; Theorem: |- q ;)

(; dict ;)

def thm_2233 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))) => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) q_2 (thm_2228 A p_1 hyp_1) (hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) => thm_2232 A p_1 q_2 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_2234 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) -> hol.proof (hol.imp p_2 q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => hyp_2 : hol.proof p_2 => thm_2233 A p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_2235 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => x_3 : hol.term A => thm_2234 A q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ;)

(; dict ;)

def thm_2236 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) (thm_2223 A q_1 p_2) (thm_2235 A q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) q)) ;)

(; dict ;)

def thm_2237 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2) x_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A q_1 (x_3 : hol.term A => p_2).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_2238 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_2239 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) -> hol.proof (hol.imp p_2 q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) => thm_2238 A q_1 p_2 hyp_1 (hol.witness A).

(; Theorem: |- q ;)

(; dict ;)

def thm_2240 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) => thm_2239 A q_2 p_1 hyp_2 (thm_64 p_1 hyp_1).

(; Theorem: |- q ;)

(; dict ;)

def thm_2241 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) => hol.PROVE_HYP p_1 q_2 (thm_64 p_1 hyp_1) (hyp_3 : hol.proof p_1 => thm_2240 A p_1 q_2 hyp_3 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_2242 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) q_2 (thm_2238 A q_2 p_1 hyp_2) (hyp_3 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) => thm_2241 A p_1 q_2 hyp_1 hyp_3).

(; Theorem: |- q ;)

(; dict ;)

def thm_2243 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp p_2 q_3)) -> hyp_2 : hol.proof ((x_4 : hol.term A => p_2) x_1) -> hol.proof q_3 :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp p_2 q_3)) => hyp_2 : hol.proof ((x_4 : hol.term A => p_2) x_1) => (hyp_3 : hol.proof p_2 => thm_2242 A p_2 q_3 hyp_3 hyp_1) (thm_1982 A x_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (\lambda x. p x)) q) ;)

(; dict ;)

def thm_2244 : A : hol.type -> q_1 : hol.term hol.bool -> x_2 : hol.term A -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp p_3 q_1)) -> hol.proof (hol.imp ((x_4 : hol.term A => p_3) x_2) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp p_3 q_1)) => hyp_2 : hol.proof ((x_4 : hol.term A => p_3) x_2) => thm_2243 A x_2 p_3 q_1 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. p x)) q)) ;)

(; dict ;)

def thm_2245 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2) x_3) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) => x_3 : hol.term A => thm_2244 A q_1 x_3 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. p)) q) ;)

(; dict ;)

def thm_2246 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) => thm_2237 A q_1 p_2 (thm_2245 A q_1 p_2 hyp_1).

(; Theorem: |- q ;)

(; dict ;)

def thm_2247 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) => thm_2246 A q_2 p_1 hyp_1 (thm_2230 A p_1 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. q) ;)

(; dict ;)

def thm_2248 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => q_2)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) => x_3 : hol.term A => thm_2247 A p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q)) ;)

(; dict ;)

def thm_2249 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => q_1)) (hol.forall A (x_3 : hol.term A => q_1)) (thm_2098 A q_1) (thm_2248 A p_2 q_1 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q))) ;)

(; dict ;)

def thm_2250 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) => thm_2249 A q_1 p_2 hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q))) ;)

(; dict ;)

def thm_2251 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.PROP_EXT (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) (hyp_1 : hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2)) (hol.forall A (x_3 : hol.term A => q_1))) => thm_2236 A q_1 p_2 (thm_2229 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp p_2 q_1)) => thm_2250 A q_1 p_2 (thm_2238 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q)))) ;)

(; dict ;)

def thm_2252 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => thm_2251 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q))))) ;)

(; dict ;)

def thm_2253 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2))))) (thm_2220 A p_1) (thm_2252 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. p)) (Data.Bool.! \lambda x. q))))) ;)

(; thm ;)

def thm_2254 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1)) (hol.forall A (x_3 : hol.term A => q_2)))))) (thm_2217 A) (thm_2253 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q))))) ;)

(; dict ;)

def thm_2255 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q))))) \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q))))) ;)

(; dict ;)

def thm_2256 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (thm_2255 A) (thm_2255 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q)))))) ;)

(; dict ;)

def thm_2257 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) thm_150 (thm_2256 A).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q)))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q)))) ;)

(; dict ;)

def thm_2258 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q)))) \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q)))) ;)

(; dict ;)

def thm_2259 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) (thm_2258 A p_1) (thm_2258 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q))))) (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q))))) ;)

(; dict ;)

def thm_2260 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))) thm_150 (thm_2259 A p_1).

(; Theorem: |- ((= (\lambda x. ((Data.Bool.==> p) q) _374)) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_2261 : A : hol.type -> __374_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.imp p_3 q_2) __374_1) (hol.imp p_3 q_2)) :=
  A : hol.type => __374_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.imp p_3 q_2) __374_1.

(; Theorem: |- ((= ((Data.Bool.==> p) q)) (\lambda x. ((Data.Bool.==> p) q) _374)) ;)

(; dict ;)

def thm_2262 : A : hol.type -> __374_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_3 q_2) ((x_4 : hol.term A => hol.imp p_3 q_2) __374_1)) :=
  A : hol.type => __374_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.SYM hol.bool ((x_4 : hol.term A => hol.imp p_3 q_2) __374_1) (hol.imp p_3 q_2) (thm_2261 A __374_1 q_2 p_3).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. q x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. q)) q)) ;)

(; dict ;)

def thm_2263 : A : hol.type -> q_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => q_1) x_2) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => q_1)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A q_1 (x_2 : hol.term A => q_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. q x)) q) ;)

(; dict ;)

def thm_2264 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> hol.proof (hol.imp ((x_3 : hol.term A => q_2) x_1) q_2) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => hyp_1 : hol.proof ((x_3 : hol.term A => q_2) x_1) => thm_1994 A x_1 q_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. q x)) q)) ;)

(; dict ;)

def thm_2265 : A : hol.type -> q_1 : hol.term hol.bool -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => q_1) x_2) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => x_2 : hol.term A => thm_2264 A x_2 q_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. q)) q) ;)

(; dict ;)

def thm_2266 : A : hol.type -> q_1 : hol.term hol.bool -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => q_1)) q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => thm_2263 A q_1 (thm_2265 A q_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q)) ;)

(; dict ;)

def thm_2267 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. q) ;)

(; dict ;)

def thm_2268 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1)) -> hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1)) => hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) => thm_2267 A q_2 p_1 hyp_2 (thm_2083 A p_1 hyp_1).

(; Theorem: |- q ;)

(; dict ;)

def thm_2269 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1)) -> hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1)) => hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) => thm_2266 A q_2 (thm_2268 A p_1 q_2 hyp_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_2270 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) -> hol.proof q_2 :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => p_1)) q_2 (thm_2106 A p_1 hyp_1) (hyp_3 : hol.proof (hol.forall A (x_3 : hol.term A => p_1)) => thm_2269 A p_1 q_2 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_2271 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) -> hol.proof (hol.imp p_2 q_1) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => hyp_2 : hol.proof p_2 => thm_2270 A p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- (\lambda x. ((Data.Bool.==> p) q) _374) ;)

(; dict ;)

def thm_2272 : A : hol.type -> __374_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => p_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2))) -> hol.proof ((x_4 : hol.term A => hol.imp p_3 q_2) __374_1) :=
  A : hol.type => __374_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => p_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2))) => hol.EQ_MP (hol.imp p_3 q_2) ((x_4 : hol.term A => hol.imp p_3 q_2) __374_1) (thm_2262 A __374_1 q_2 p_3) (thm_2271 A q_2 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_2273 : A : hol.type -> __374_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.imp p_3 q_2) __374_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.imp p_3 q_2)) :=
  A : hol.type => __374_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.imp p_3 q_2) __374_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A __374_1 (x_4 : hol.term A => hol.imp p_3 q_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_2274 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => hol.PROVE_HYP ((x_3 : hol.term A => hol.imp p_2 q_1) (hol.witness A)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) (thm_2272 A (hol.witness A) q_1 p_2 hyp_1) (hyp_2 : hol.proof ((x_3 : hol.term A => hol.imp p_2 q_1) (hol.witness A)) => thm_2273 A (hol.witness A) q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ;)

(; dict ;)

def thm_2275 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => thm_2274 A q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool.==> p) q) x)) (Data.Bool.? \lambda x. q)))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) (Data.Bool.? \lambda x. q))) ;)

(; dict ;)

def thm_2276 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.imp p_2 q_1) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1)) (x_3 : hol.term A => hol.imp p_2 q_1).

(; Theorem: |- ((= (\lambda x. q _373)) q) ;)

(; dict ;)

def thm_2277 : A : hol.type -> __373_1 : hol.term A -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => q_2) __373_1) q_2) :=
  A : hol.type => __373_1 : hol.term A => q_2 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_3 : hol.term A => q_2) __373_1.

(; Theorem: |- ((= q) (\lambda x. q _373)) ;)

(; dict ;)

def thm_2278 : A : hol.type -> __373_1 : hol.term A -> q_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_2 ((x_3 : hol.term A => q_2) __373_1)) :=
  A : hol.type => __373_1 : hol.term A => q_2 : hol.term hol.bool => hol.SYM hol.bool ((x_3 : hol.term A => q_2) __373_1) q_2 (thm_2277 A __373_1 q_2).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_2279 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_2 q_1) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_2280 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 q_2) => thm_2279 q_2 p_1 hyp_2 (thm_64 p_1 hyp_1).

(; Theorem: |- (\lambda x. q _373) ;)

(; dict ;)

def thm_2281 : A : hol.type -> p_1 : hol.term hol.bool -> __373_2 : hol.term A -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 q_3) -> hol.proof ((x_4 : hol.term A => q_3) __373_2) :=
  A : hol.type => p_1 : hol.term hol.bool => __373_2 : hol.term A => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 q_3) => hol.EQ_MP q_3 ((x_4 : hol.term A => q_3) __373_2) (thm_2278 A __373_2 q_3) (thm_2280 p_1 q_3 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. q) ;)

(; dict ;)

def thm_2282 : A : hol.type -> __373_1 : hol.term A -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof ((x_3 : hol.term A => q_2) __373_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) :=
  A : hol.type => __373_1 : hol.term A => q_2 : hol.term hol.bool => hyp_1 : hol.proof ((x_3 : hol.term A => q_2) __373_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A __373_1 (x_3 : hol.term A => q_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. q) ;)

(; dict ;)

def thm_2283 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 q_2) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 q_2) => hol.PROVE_HYP ((x_3 : hol.term A => q_2) (hol.witness A)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) (thm_2281 A p_1 (hol.witness A) q_2 hyp_1 hyp_2) (hyp_3 : hol.proof ((x_3 : hol.term A => q_2) (hol.witness A)) => thm_2282 A (hol.witness A) q_2 hyp_3).

(; Theorem: |- (Data.Bool.? \lambda x. q) ;)

(; dict ;)

def thm_2284 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1)) -> hyp_2 : hol.proof (hol.imp p_1 q_2) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1)) => hyp_2 : hol.proof (hol.imp p_1 q_2) => hol.PROVE_HYP p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) (thm_2084 A p_1 hyp_1) (hyp_3 : hol.proof p_1 => thm_2283 A p_1 q_2 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) q)) (Data.Bool.? \lambda x. q)) ;)

(; dict ;)

def thm_2285 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) -> hol.proof (hol.imp (hol.imp p_2 q_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) => hyp_2 : hol.proof (hol.imp p_2 q_1) => thm_2284 A p_2 q_1 hyp_1 hyp_2.

(; Theorem: |- ((= (\lambda x. ((Data.Bool.==> p) q) x)) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_2286 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.imp p_3 q_2) x_1) (hol.imp p_3 q_2)) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.imp p_3 q_2) x_1.

(; Theorem: |- (\lambda x. ((Data.Bool.==> p) q) x) ;)

(; dict ;)

def thm_2287 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.imp p_3 q_2) x_1) -> hol.proof ((x_4 : hol.term A => hol.imp p_3 q_2) x_1) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.imp p_3 q_2) x_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_2288 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.imp p_3 q_2) x_1) -> hol.proof (hol.imp p_3 q_2) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof ((x_4 : hol.term A => hol.imp p_3 q_2) x_1) => hol.EQ_MP ((x_4 : hol.term A => hol.imp p_3 q_2) x_1) (hol.imp p_3 q_2) (thm_2286 A x_1 q_2 p_3) (thm_2287 A x_1 q_2 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. q) ;)

(; dict ;)

def thm_2289 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_2)) -> hyp_2 : hol.proof ((x_4 : hol.term A => hol.imp p_2 q_3) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_2)) => hyp_2 : hol.proof ((x_4 : hol.term A => hol.imp p_2 q_3) x_1) => thm_2285 A q_3 p_2 hyp_1 (thm_2288 A x_1 q_3 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool.==> p) q) x)) (Data.Bool.? \lambda x. q)) ;)

(; dict ;)

def thm_2290 : A : hol.type -> x_1 : hol.term A -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3)) -> hol.proof (hol.imp ((x_4 : hol.term A => hol.imp p_3 q_2) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_2))) :=
  A : hol.type => x_1 : hol.term A => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3)) => hyp_2 : hol.proof ((x_4 : hol.term A => hol.imp p_3 q_2) x_1) => thm_2289 A x_1 p_3 q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool.==> p) q) x)) (Data.Bool.? \lambda x. q))) ;)

(; dict ;)

def thm_2291 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.imp p_2 q_1) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) => x_3 : hol.term A => thm_2290 A x_3 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) (Data.Bool.? \lambda x. q)) ;)

(; dict ;)

def thm_2292 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) => thm_2276 A q_1 p_2 (thm_2291 A q_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_2293 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. q) ;)

(; dict ;)

def thm_2294 : A : hol.type -> p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) => thm_2292 A q_2 p_1 hyp_1 (thm_2293 A q_2 p_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q)) ;)

(; dict ;)

def thm_2295 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => p_2)) => thm_2294 A p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q))) ;)

(; dict ;)

def thm_2296 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) => thm_2295 A q_1 p_2 hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q))) ;)

(; dict ;)

def thm_2297 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1)))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.PROP_EXT (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) (hyp_1 : hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1))) => thm_2275 A q_1 p_2 (thm_2267 A q_1 p_2 hyp_1)) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 q_1)) => thm_2296 A q_1 p_2 (thm_2293 A q_1 p_2 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q)))) ;)

(; dict ;)

def thm_2298 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) :=
  A : hol.type => p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => thm_2297 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q))))) ;)

(; dict ;)

def thm_2299 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2))))) (thm_2260 A p_1) (thm_2298 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.? \lambda x. ((Data.Bool.==> p) q))) ((Data.Bool.==> (Data.Bool.! \lambda x. p)) (Data.Bool.? \lambda x. q))))) ;)

(; thm ;)

def thm_2300 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 q_2)) (hol.imp (hol.forall A (x_3 : hol.term A => p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2)))))) (thm_2257 A) (thm_2299 A).

(; Theorem: |- ((= \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))))) \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))))) ;)

(; dict ;)

def thm_2301 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))).

(; Theorem: |- ((= \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))))) \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))))) ;)

(; dict ;)

def thm_2302 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))) thm_2301 thm_2301.

(; Theorem: |- ((= (Data.Bool.! \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))))))) (Data.Bool.! \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))))))) ;)

(; dict ;)

def thm_2303 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))))) (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))) thm_150 thm_2302.

(; Theorem: |- ((= \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))))) \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))))) ;)

(; dict ;)

def thm_2304 : p1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))) :=
  p1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))).

(; Theorem: |- ((= \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))))) \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))))) ;)

(; dict ;)

def thm_2305 : p1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))) :=
  p1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))) (thm_2304 p1_1) (thm_2304 p1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))))) (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))))) ;)

(; dict ;)

def thm_2306 : p1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))) (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))))) :=
  p1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))) thm_150 (thm_2305 p1_1).

(; Theorem: |- ((= \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))) \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))) ;)

(; dict ;)

def thm_2307 : p2_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4))))) :=
  p2_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4)))).

(; Theorem: |- ((= \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))) \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))) ;)

(; dict ;)

def thm_2308 : p2_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4))))) :=
  p2_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4)))) (thm_2307 p2_1 p1_2) (thm_2307 p2_1 p1_2).

(; Theorem: |- ((= (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))))) (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))))) ;)

(; dict ;)

def thm_2309 : p2_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4))))) (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4)))))) :=
  p2_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4)))) thm_150 (thm_2308 p2_1 p1_2).

(; Theorem: |- ((= \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))) \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))) ;)

(; dict ;)

def thm_2310 : q1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.and p1_3 q1_1) (hol.and p2_2 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.and p1_3 q1_1) (hol.and p2_2 q2_4)))) :=
  q1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.and p1_3 q1_1) (hol.and p2_2 q2_4))).

(; Theorem: |- ((= \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))) \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))) ;)

(; dict ;)

def thm_2311 : q1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.and p1_3 q1_1) (hol.and p2_2 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.and p1_3 q1_1) (hol.and p2_2 q2_4)))) :=
  q1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.and p1_3 q1_1) (hol.and p2_2 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.and p1_3 q1_1) (hol.and p2_2 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.and p1_3 q1_1) (hol.and p2_2 q2_4))) (thm_2310 q1_1 p2_2 p1_3) (thm_2310 q1_1 p2_2 p1_3).

(; Theorem: |- ((= (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))) (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))) ;)

(; dict ;)

def thm_2312 : q1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.and p1_3 q1_1) (hol.and p2_2 q2_4)))) (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.and p1_3 q1_1) (hol.and p2_2 q2_4))))) :=
  q1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.and p1_3 q1_1) (hol.and p2_2 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.and p1_3 q1_1) (hol.and p2_2 q2_4))) thm_150 (thm_2311 q1_1 p2_2 p1_3).

(; Theorem: |- ((Data.Bool./\ p1) q1) ;)

(; dict ;)

def thm_2313 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p1_2 q1_1) -> hol.proof (hol.and p1_2 q1_1) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p1_2 q1_1) => hyp_1.

(; Theorem: |- p1 ;)

(; dict ;)

def thm_2314 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p1_2 q1_1) -> hol.proof p1_2 :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p1_2 q1_1) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) q1_1 p1_2 hyp_1.

(; Theorem: |- p1 ;)

(; dict ;)

def thm_2315 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p1_2 q1_1) -> hol.proof p1_2 :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p1_2 q1_1) => hol.PROVE_HYP (hol.and p1_2 q1_1) p1_2 (thm_2313 q1_1 p1_2 hyp_1) (hyp_2 : hol.proof (hol.and p1_2 q1_1) => thm_2314 q1_1 p1_2 hyp_2).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2)) ;)

(; dict ;)

def thm_2316 : q2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> p1_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_2 q2_1)) -> hol.proof (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_2 q2_1)) :=
  q2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => p1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_2 q2_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> p1) p2) ;)

(; dict ;)

def thm_2317 : q2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> p1_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_2 q2_1)) -> hol.proof (hol.imp p1_4 p2_3) :=
  q2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => p1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_2 q2_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.imp q1_2 q2_1) (hol.imp p1_4 p2_3) hyp_1.

(; Theorem: |- ((Data.Bool.==> p1) p2) ;)

(; dict ;)

def thm_2318 : q2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> p1_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_2 q2_1)) -> hol.proof (hol.imp p1_4 p2_3) :=
  q2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => p1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_2 q2_1)) => hol.PROVE_HYP (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_2 q2_1)) (hol.imp p1_4 p2_3) (thm_2316 q2_1 q1_2 p2_3 p1_4 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_2 q2_1)) => thm_2317 q2_1 q1_2 p2_3 p1_4 hyp_2).

(; Theorem: |- p1 ;)

(; dict ;)

def thm_2319 : p1_1 : hol.term hol.bool -> hyp_1 : hol.proof p1_1 -> hol.proof p1_1 :=
  p1_1 : hol.term hol.bool => hyp_1 : hol.proof p1_1 => hyp_1.

(; Theorem: |- p2 ;)

(; dict ;)

def thm_2320 : q2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hyp_1 : hol.proof p1_3 -> hyp_2 : hol.proof (hol.and (hol.imp p1_3 p2_4) (hol.imp q1_2 q2_1)) -> hol.proof p2_4 :=
  q2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof p1_3 => hyp_2 : hol.proof (hol.and (hol.imp p1_3 p2_4) (hol.imp q1_2 q2_1)) => thm_2318 q2_1 q1_2 p2_4 p1_3 hyp_2 (thm_2319 p1_3 hyp_1).

(; Theorem: |- p2 ;)

(; dict ;)

def thm_2321 : q2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p1_3 q1_2) -> hyp_2 : hol.proof (hol.and (hol.imp p1_3 p2_4) (hol.imp q1_2 q2_1)) -> hol.proof p2_4 :=
  q2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p1_3 q1_2) => hyp_2 : hol.proof (hol.and (hol.imp p1_3 p2_4) (hol.imp q1_2 q2_1)) => hol.PROVE_HYP p1_3 p2_4 (thm_2315 q1_2 p1_3 hyp_1) (hyp_3 : hol.proof p1_3 => thm_2320 q2_1 q1_2 p1_3 p2_4 hyp_3 hyp_2).

(; Theorem: |- ((= q2) ((Data.Bool./\ p2) q2)) ;)

(; dict ;)

def thm_2322 : p2_1 : hol.term hol.bool -> q2_2 : hol.term hol.bool -> hyp_1 : hol.proof p2_1 -> hol.proof (hol.eq hol.bool q2_2 (hol.and p2_1 q2_2)) :=
  p2_1 : hol.term hol.bool => q2_2 : hol.term hol.bool => hyp_1 : hol.proof p2_1 => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) p2_1 q2_2 hyp_1.

(; Theorem: |- ((= q2) ((Data.Bool./\ p2) q2)) ;)

(; dict ;)

def thm_2323 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> q2_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p1_2 q1_1) -> hyp_2 : hol.proof (hol.and (hol.imp p1_2 p2_3) (hol.imp q1_1 q2_4)) -> hol.proof (hol.eq hol.bool q2_4 (hol.and p2_3 q2_4)) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => q2_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p1_2 q1_1) => hyp_2 : hol.proof (hol.and (hol.imp p1_2 p2_3) (hol.imp q1_1 q2_4)) => hol.PROVE_HYP p2_3 (hol.eq hol.bool q2_4 (hol.and p2_3 q2_4)) (thm_2321 q2_4 q1_1 p1_2 p2_3 hyp_1 hyp_2) (hyp_3 : hol.proof p2_3 => thm_2322 p2_3 q2_4 hyp_3).

(; Theorem: |- q1 ;)

(; dict ;)

def thm_2324 : p1_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p1_1 q1_2) -> hol.proof q1_2 :=
  p1_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p1_1 q1_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) p1_1 q1_2 hyp_1.

(; Theorem: |- q1 ;)

(; dict ;)

def thm_2325 : p1_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p1_1 q1_2) -> hol.proof q1_2 :=
  p1_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p1_1 q1_2) => hol.PROVE_HYP (hol.and p1_1 q1_2) q1_2 (thm_2313 q1_2 p1_1 hyp_1) (hyp_2 : hol.proof (hol.and p1_1 q1_2) => thm_2324 p1_1 q1_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> q1) q2) ;)

(; dict ;)

def thm_2326 : p2_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> q2_3 : hol.term hol.bool -> q1_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_4 q2_3)) -> hol.proof (hol.imp q1_4 q2_3) :=
  p2_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => q2_3 : hol.term hol.bool => q1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_4 q2_3)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.imp p1_2 p2_1) (hol.imp q1_4 q2_3) hyp_1.

(; Theorem: |- ((Data.Bool.==> q1) q2) ;)

(; dict ;)

def thm_2327 : p2_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> q2_3 : hol.term hol.bool -> q1_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_4 q2_3)) -> hol.proof (hol.imp q1_4 q2_3) :=
  p2_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => q2_3 : hol.term hol.bool => q1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_4 q2_3)) => hol.PROVE_HYP (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_4 q2_3)) (hol.imp q1_4 q2_3) (thm_2316 q2_3 q1_4 p2_1 p1_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_4 q2_3)) => thm_2326 p2_1 p1_2 q2_3 q1_4 hyp_2).

(; Theorem: |- q1 ;)

(; dict ;)

def thm_2328 : q1_1 : hol.term hol.bool -> hyp_1 : hol.proof q1_1 -> hol.proof q1_1 :=
  q1_1 : hol.term hol.bool => hyp_1 : hol.proof q1_1 => hyp_1.

(; Theorem: |- q2 ;)

(; dict ;)

def thm_2329 : p2_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> q1_3 : hol.term hol.bool -> q2_4 : hol.term hol.bool -> hyp_1 : hol.proof q1_3 -> hyp_2 : hol.proof (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) -> hol.proof q2_4 :=
  p2_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => q1_3 : hol.term hol.bool => q2_4 : hol.term hol.bool => hyp_1 : hol.proof q1_3 => hyp_2 : hol.proof (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) => thm_2327 p2_1 p1_2 q2_4 q1_3 hyp_2 (thm_2328 q1_3 hyp_1).

(; Theorem: |- q2 ;)

(; dict ;)

def thm_2330 : p2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> q2_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p1_3 q1_2) -> hyp_2 : hol.proof (hol.and (hol.imp p1_3 p2_1) (hol.imp q1_2 q2_4)) -> hol.proof q2_4 :=
  p2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => q2_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p1_3 q1_2) => hyp_2 : hol.proof (hol.and (hol.imp p1_3 p2_1) (hol.imp q1_2 q2_4)) => hol.PROVE_HYP q1_2 q2_4 (thm_2325 p1_3 q1_2 hyp_1) (hyp_3 : hol.proof q1_2 => thm_2329 p2_1 p1_3 q1_2 q2_4 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool./\ p2) q2) ;)

(; dict ;)

def thm_2331 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> q2_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p1_2 q1_1) -> hyp_2 : hol.proof (hol.and (hol.imp p1_2 p2_4) (hol.imp q1_1 q2_3)) -> hol.proof (hol.and p2_4 q2_3) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => q2_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p1_2 q1_1) => hyp_2 : hol.proof (hol.and (hol.imp p1_2 p2_4) (hol.imp q1_1 q2_3)) => hol.EQ_MP q2_3 (hol.and p2_4 q2_3) (thm_2323 q1_1 p1_2 p2_4 q2_3 hyp_1 hyp_2) (thm_2330 p2_4 q1_1 p1_2 q2_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)) ;)

(; dict ;)

def thm_2332 : q2_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> q1_3 : hol.term hol.bool -> p1_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_2) (hol.imp q1_3 q2_1)) -> hol.proof (hol.imp (hol.and p1_4 q1_3) (hol.and p2_2 q2_1)) :=
  q2_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => q1_3 : hol.term hol.bool => p1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_2) (hol.imp q1_3 q2_1)) => hyp_2 : hol.proof (hol.and p1_4 q1_3) => thm_2331 q1_3 p1_4 q2_1 p2_2 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))) ;)

(; dict ;)

def thm_2333 : q2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> p1_4 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_2 q2_1)) (hol.imp (hol.and p1_4 q1_2) (hol.and p2_3 q2_1))) :=
  q2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => p1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_2 q2_1)) => thm_2332 q2_1 p2_3 q1_2 p1_4 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))) ;)

(; dict ;)

def thm_2334 : q1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.and p1_3 q1_1) (hol.and p2_2 q2_4)))) :=
  q1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => q2_4 : hol.term hol.bool => thm_2333 q2_4 q1_1 p2_2 p1_3.

(; Theorem: |- (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))) ;)

(; dict ;)

def thm_2335 : p2_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4))))) :=
  p2_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => q1_3 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4)))) (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_2 q1_3) (hol.and p2_1 q2_4)))) (thm_2312 q1_3 p2_1 p1_2) (thm_2334 q1_3 p2_1 p1_2).

(; Theorem: |- (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2)))))) ;)

(; dict ;)

def thm_2336 : p1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))) :=
  p1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))) (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))) (thm_2309 p2_2 p1_1) (thm_2335 p2_2 p1_1).

(; Theorem: |- (Data.Bool.! \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))))) ;)

(; dict ;)

def thm_2337 : hol.proof (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))))) :=
  p1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))) (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4)))))) (thm_2306 p1_1) (thm_2336 p1_1).

(; Theorem: |- (Data.Bool.! \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool./\ p1) q1)) ((Data.Bool./\ p2) q2))))))) ;)

(; thm ;)

def thm_2338 : hol.proof (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))))) :=
  hol.EQ_MP (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))))) (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.and p1_1 q1_3) (hol.and p2_2 q2_4))))))) thm_2303 thm_2337.

(; Theorem: |- ((= \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))))) \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))))) ;)

(; dict ;)

def thm_2339 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))).

(; Theorem: |- ((= \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))))) \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))))) ;)

(; dict ;)

def thm_2340 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))) thm_2339 thm_2339.

(; Theorem: |- ((= (Data.Bool.! \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))))))) (Data.Bool.! \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))))))) ;)

(; dict ;)

def thm_2341 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))))) (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))) thm_150 thm_2340.

(; Theorem: |- ((= \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))))) \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))))) ;)

(; dict ;)

def thm_2342 : p1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))) :=
  p1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))).

(; Theorem: |- ((= \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))))) \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))))) ;)

(; dict ;)

def thm_2343 : p1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))) :=
  p1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))) (thm_2342 p1_1) (thm_2342 p1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))))) (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))))) ;)

(; dict ;)

def thm_2344 : p1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))) (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))))) :=
  p1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))) thm_150 (thm_2343 p1_1).

(; Theorem: |- ((= \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))) \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))) ;)

(; dict ;)

def thm_2345 : p2_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4))))) :=
  p2_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4)))).

(; Theorem: |- ((= \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))) \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))) ;)

(; dict ;)

def thm_2346 : p2_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4))))) :=
  p2_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4)))) (thm_2345 p2_1 p1_2) (thm_2345 p2_1 p1_2).

(; Theorem: |- ((= (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))))) (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))))) ;)

(; dict ;)

def thm_2347 : p2_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4))))) (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4)))))) :=
  p2_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4)))) thm_150 (thm_2346 p2_1 p1_2).

(; Theorem: |- ((= \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))) \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))) ;)

(; dict ;)

def thm_2348 : q1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.or p1_3 q1_1) (hol.or p2_2 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.or p1_3 q1_1) (hol.or p2_2 q2_4)))) :=
  q1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.or p1_3 q1_1) (hol.or p2_2 q2_4))).

(; Theorem: |- ((= \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))) \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))) ;)

(; dict ;)

def thm_2349 : q1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.or p1_3 q1_1) (hol.or p2_2 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.or p1_3 q1_1) (hol.or p2_2 q2_4)))) :=
  q1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.or p1_3 q1_1) (hol.or p2_2 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.or p1_3 q1_1) (hol.or p2_2 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.or p1_3 q1_1) (hol.or p2_2 q2_4))) (thm_2348 q1_1 p2_2 p1_3) (thm_2348 q1_1 p2_2 p1_3).

(; Theorem: |- ((= (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))) (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))) ;)

(; dict ;)

def thm_2350 : q1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.or p1_3 q1_1) (hol.or p2_2 q2_4)))) (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.or p1_3 q1_1) (hol.or p2_2 q2_4))))) :=
  q1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.or p1_3 q1_1) (hol.or p2_2 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.or p1_3 q1_1) (hol.or p2_2 q2_4))) thm_150 (thm_2349 q1_1 p2_2 p1_3).

(; Theorem: |- ((Data.Bool.\/ p2) q2) ;)

(; dict ;)

def thm_2351 : q2_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> hyp_1 : hol.proof q2_1 -> hol.proof (hol.or p2_2 q2_1) :=
  q2_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => hyp_1 : hol.proof q2_1 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof Q_1 => thm_271 Q_1 P_2 hyp_1) q2_1 p2_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p2) q2) ;)

(; dict ;)

def thm_2352 : p1_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> q2_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hyp_1 : hol.proof q1_2 -> hyp_2 : hol.proof (hol.and (hol.imp p1_1 p2_4) (hol.imp q1_2 q2_3)) -> hol.proof (hol.or p2_4 q2_3) :=
  p1_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => q2_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof q1_2 => hyp_2 : hol.proof (hol.and (hol.imp p1_1 p2_4) (hol.imp q1_2 q2_3)) => hol.PROVE_HYP q2_3 (hol.or p2_4 q2_3) (thm_2329 p2_4 p1_1 q1_2 q2_3 hyp_1 hyp_2) (hyp_3 : hol.proof q2_3 => thm_2351 q2_3 p2_4 hyp_3).

(; Theorem: |- ((Data.Bool.==> q1) ((Data.Bool.\/ p2) q2)) ;)

(; dict ;)

def thm_2353 : p1_1 : hol.term hol.bool -> q2_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> q1_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p1_1 p2_3) (hol.imp q1_4 q2_2)) -> hol.proof (hol.imp q1_4 (hol.or p2_3 q2_2)) :=
  p1_1 : hol.term hol.bool => q2_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => q1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p1_1 p2_3) (hol.imp q1_4 q2_2)) => hyp_2 : hol.proof q1_4 => thm_2352 p1_1 q1_4 q2_2 p2_3 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p2) q2) ;)

(; dict ;)

def thm_2354 : q2_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> hyp_1 : hol.proof p2_2 -> hol.proof (hol.or p2_2 q2_1) :=
  q2_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => hyp_1 : hol.proof p2_2 => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof P_2 => thm_284 Q_1 P_2 hyp_1) q2_1 p2_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p2) q2) ;)

(; dict ;)

def thm_2355 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> q2_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hyp_1 : hol.proof p1_2 -> hyp_2 : hol.proof (hol.and (hol.imp p1_2 p2_4) (hol.imp q1_1 q2_3)) -> hol.proof (hol.or p2_4 q2_3) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => q2_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof p1_2 => hyp_2 : hol.proof (hol.and (hol.imp p1_2 p2_4) (hol.imp q1_1 q2_3)) => hol.PROVE_HYP p2_4 (hol.or p2_4 q2_3) (thm_2320 q2_3 q1_1 p1_2 p2_4 hyp_1 hyp_2) (hyp_3 : hol.proof p2_4 => thm_2354 q2_3 p2_4 hyp_3).

(; Theorem: |- ((Data.Bool.==> p1) ((Data.Bool.\/ p2) q2)) ;)

(; dict ;)

def thm_2356 : q1_1 : hol.term hol.bool -> q2_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> p1_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_1 q2_2)) -> hol.proof (hol.imp p1_4 (hol.or p2_3 q2_2)) :=
  q1_1 : hol.term hol.bool => q2_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => p1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_1 q2_2)) => hyp_2 : hol.proof p1_4 => thm_2355 q1_1 p1_4 q2_2 p2_3 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ p1) q1) ;)

(; dict ;)

def thm_2357 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or p1_2 q1_1) -> hol.proof (hol.or p1_2 q1_1) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or p1_2 q1_1) => hyp_1.

(; Theorem: |- ((Data.Bool.\/ p2) q2) ;)

(; dict ;)

def thm_2358 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> q2_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p1_2 (hol.or p2_4 q2_3)) -> hyp_2 : hol.proof (hol.imp q1_1 (hol.or p2_4 q2_3)) -> hyp_3 : hol.proof (hol.or p1_2 q1_1) -> hol.proof (hol.or p2_4 q2_3) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => q2_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p1_2 (hol.or p2_4 q2_3)) => hyp_2 : hol.proof (hol.imp q1_1 (hol.or p2_4 q2_3)) => hyp_3 : hol.proof (hol.or p1_2 q1_1) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) q1_1 p1_2 (hol.or p2_4 q2_3) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ p2) q2) ;)

(; dict ;)

def thm_2359 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> q2_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p1_2 (hol.or p2_4 q2_3)) -> hyp_2 : hol.proof (hol.imp q1_1 (hol.or p2_4 q2_3)) -> hyp_3 : hol.proof (hol.or p1_2 q1_1) -> hol.proof (hol.or p2_4 q2_3) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => q2_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p1_2 (hol.or p2_4 q2_3)) => hyp_2 : hol.proof (hol.imp q1_1 (hol.or p2_4 q2_3)) => hyp_3 : hol.proof (hol.or p1_2 q1_1) => hol.PROVE_HYP (hol.or p1_2 q1_1) (hol.or p2_4 q2_3) (thm_2357 q1_1 p1_2 hyp_3) (hyp_4 : hol.proof (hol.or p1_2 q1_1) => thm_2358 q1_1 p1_2 q2_3 p2_4 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.\/ p2) q2) ;)

(; dict ;)

def thm_2360 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> q2_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p1_2 p2_4) (hol.imp q1_1 q2_3)) -> hyp_2 : hol.proof (hol.imp q1_1 (hol.or p2_4 q2_3)) -> hyp_3 : hol.proof (hol.or p1_2 q1_1) -> hol.proof (hol.or p2_4 q2_3) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => q2_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p1_2 p2_4) (hol.imp q1_1 q2_3)) => hyp_2 : hol.proof (hol.imp q1_1 (hol.or p2_4 q2_3)) => hyp_3 : hol.proof (hol.or p1_2 q1_1) => hol.PROVE_HYP (hol.imp p1_2 (hol.or p2_4 q2_3)) (hol.or p2_4 q2_3) (thm_2356 q1_1 q2_3 p2_4 p1_2 hyp_1) (hyp_4 : hol.proof (hol.imp p1_2 (hol.or p2_4 q2_3)) => thm_2359 q1_1 p1_2 q2_3 p2_4 hyp_4 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.\/ p2) q2) ;)

(; dict ;)

def thm_2361 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> q2_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p1_2 p2_4) (hol.imp q1_1 q2_3)) -> hyp_2 : hol.proof (hol.or p1_2 q1_1) -> hol.proof (hol.or p2_4 q2_3) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => q2_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p1_2 p2_4) (hol.imp q1_1 q2_3)) => hyp_2 : hol.proof (hol.or p1_2 q1_1) => hol.PROVE_HYP (hol.imp q1_1 (hol.or p2_4 q2_3)) (hol.or p2_4 q2_3) (thm_2353 p1_2 q2_3 p2_4 q1_1 hyp_1) (hyp_3 : hol.proof (hol.imp q1_1 (hol.or p2_4 q2_3)) => thm_2360 q1_1 p1_2 q2_3 p2_4 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)) ;)

(; dict ;)

def thm_2362 : q2_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> q1_3 : hol.term hol.bool -> p1_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_2) (hol.imp q1_3 q2_1)) -> hol.proof (hol.imp (hol.or p1_4 q1_3) (hol.or p2_2 q2_1)) :=
  q2_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => q1_3 : hol.term hol.bool => p1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_2) (hol.imp q1_3 q2_1)) => hyp_2 : hol.proof (hol.or p1_4 q1_3) => thm_2361 q1_3 p1_4 q2_1 p2_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))) ;)

(; dict ;)

def thm_2363 : q2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> p1_4 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_2 q2_1)) (hol.imp (hol.or p1_4 q1_2) (hol.or p2_3 q2_1))) :=
  q2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => p1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p1_4 p2_3) (hol.imp q1_2 q2_1)) => thm_2362 q2_1 p2_3 q1_2 p1_4 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))) ;)

(; dict ;)

def thm_2364 : q1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_3 p2_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.or p1_3 q1_1) (hol.or p2_2 q2_4)))) :=
  q1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => q2_4 : hol.term hol.bool => thm_2363 q2_4 q1_1 p2_2 p1_3.

(; Theorem: |- (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))) ;)

(; dict ;)

def thm_2365 : p2_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4))))) :=
  p2_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => q1_3 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4)))) (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_2 p2_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_2 q1_3) (hol.or p2_1 q2_4)))) (thm_2350 q1_3 p2_1 p1_2) (thm_2364 q1_3 p2_1 p1_2).

(; Theorem: |- (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2)))))) ;)

(; dict ;)

def thm_2366 : p1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))) :=
  p1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))) (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))) (thm_2347 p2_2 p1_1) (thm_2365 p2_2 p1_1).

(; Theorem: |- (Data.Bool.! \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))))) ;)

(; dict ;)

def thm_2367 : hol.proof (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))))) :=
  p1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))) (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4)))))) (thm_2344 p1_1) (thm_2366 p1_1).

(; Theorem: |- (Data.Bool.! \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p1) p2)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.\/ p1) q1)) ((Data.Bool.\/ p2) q2))))))) ;)

(; thm ;)

def thm_2368 : hol.proof (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))))) :=
  hol.EQ_MP (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))))) (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p1_1 p2_2) (hol.imp q1_3 q2_4)) (hol.imp (hol.or p1_1 q1_3) (hol.or p2_2 q2_4))))))) thm_2341 thm_2367.

(; Theorem: |- ((= \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))))) \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))))) ;)

(; dict ;)

def thm_2369 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))).

(; Theorem: |- ((= \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))))) \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))))) ;)

(; dict ;)

def thm_2370 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) thm_2369 thm_2369.

(; Theorem: |- ((= (Data.Bool.! \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))))))) (Data.Bool.! \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))))))) ;)

(; dict ;)

def thm_2371 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))))) (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) thm_150 thm_2370.

(; Theorem: |- ((= \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))))) \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))))) ;)

(; dict ;)

def thm_2372 : p1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) :=
  p1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))).

(; Theorem: |- ((= \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))))) \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))))) ;)

(; dict ;)

def thm_2373 : p1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) :=
  p1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))) (thm_2372 p1_1) (thm_2372 p1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))))) (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))))) ;)

(; dict ;)

def thm_2374 : p1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))))) :=
  p1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))) (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))) thm_150 (thm_2373 p1_1).

(; Theorem: |- ((= \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))) \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))) ;)

(; dict ;)

def thm_2375 : p1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))) :=
  p1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))).

(; Theorem: |- ((= \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))) \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))) ;)

(; dict ;)

def thm_2376 : p1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))) :=
  p1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))) (thm_2375 p1_1 p2_2) (thm_2375 p1_1 p2_2).

(; Theorem: |- ((= (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))))) (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))))) ;)

(; dict ;)

def thm_2377 : p1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))) (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) :=
  p1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))) (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))) thm_150 (thm_2376 p1_1 p2_2).

(; Theorem: |- ((= \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))) \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))) ;)

(; dict ;)

def thm_2378 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.imp p1_2 q1_1) (hol.imp p2_3 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.imp p1_2 q1_1) (hol.imp p2_3 q2_4)))) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.imp p1_2 q1_1) (hol.imp p2_3 q2_4))).

(; Theorem: |- ((= \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))) \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))) ;)

(; dict ;)

def thm_2379 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.imp p1_2 q1_1) (hol.imp p2_3 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.imp p1_2 q1_1) (hol.imp p2_3 q2_4)))) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.imp p1_2 q1_1) (hol.imp p2_3 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.imp p1_2 q1_1) (hol.imp p2_3 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.imp p1_2 q1_1) (hol.imp p2_3 q2_4))) (thm_2378 q1_1 p1_2 p2_3) (thm_2378 q1_1 p1_2 p2_3).

(; Theorem: |- ((= (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))) (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))) ;)

(; dict ;)

def thm_2380 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.imp p1_2 q1_1) (hol.imp p2_3 q2_4)))) (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.imp p1_2 q1_1) (hol.imp p2_3 q2_4))))) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.imp p1_2 q1_1) (hol.imp p2_3 q2_4))) (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.imp p1_2 q1_1) (hol.imp p2_3 q2_4))) thm_150 (thm_2379 q1_1 p1_2 p2_3).

(; Theorem: |- p2 ;)

(; dict ;)

def thm_2381 : p2_1 : hol.term hol.bool -> hyp_1 : hol.proof p2_1 -> hol.proof p2_1 :=
  p2_1 : hol.term hol.bool => hyp_1 : hol.proof p2_1 => hyp_1.

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2)) ;)

(; dict ;)

def thm_2382 : q2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p2_4 p1_3) (hol.imp q1_2 q2_1)) -> hol.proof (hol.and (hol.imp p2_4 p1_3) (hol.imp q1_2 q2_1)) :=
  q2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p2_4 p1_3) (hol.imp q1_2 q2_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> p2) p1) ;)

(; dict ;)

def thm_2383 : q2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p2_4 p1_3) (hol.imp q1_2 q2_1)) -> hol.proof (hol.imp p2_4 p1_3) :=
  q2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p2_4 p1_3) (hol.imp q1_2 q2_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.imp q1_2 q2_1) (hol.imp p2_4 p1_3) hyp_1.

(; Theorem: |- ((Data.Bool.==> p2) p1) ;)

(; dict ;)

def thm_2384 : q2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p2_4 p1_3) (hol.imp q1_2 q2_1)) -> hol.proof (hol.imp p2_4 p1_3) :=
  q2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p2_4 p1_3) (hol.imp q1_2 q2_1)) => hol.PROVE_HYP (hol.and (hol.imp p2_4 p1_3) (hol.imp q1_2 q2_1)) (hol.imp p2_4 p1_3) (thm_2382 q2_1 q1_2 p1_3 p2_4 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp p2_4 p1_3) (hol.imp q1_2 q2_1)) => thm_2383 q2_1 q1_2 p1_3 p2_4 hyp_2).

(; Theorem: |- p1 ;)

(; dict ;)

def thm_2385 : q2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> p1_4 : hol.term hol.bool -> hyp_1 : hol.proof p2_3 -> hyp_2 : hol.proof (hol.and (hol.imp p2_3 p1_4) (hol.imp q1_2 q2_1)) -> hol.proof p1_4 :=
  q2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => p1_4 : hol.term hol.bool => hyp_1 : hol.proof p2_3 => hyp_2 : hol.proof (hol.and (hol.imp p2_3 p1_4) (hol.imp q1_2 q2_1)) => thm_2384 q2_1 q1_2 p1_4 p2_3 hyp_2 (thm_2381 p2_3 hyp_1).

(; Theorem: |- p1 ;)

(; dict ;)

def thm_2386 : q2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> p1_4 : hol.term hol.bool -> hyp_1 : hol.proof p2_3 -> hyp_2 : hol.proof (hol.and (hol.imp p2_3 p1_4) (hol.imp q1_2 q2_1)) -> hol.proof p1_4 :=
  q2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => p1_4 : hol.term hol.bool => hyp_1 : hol.proof p2_3 => hyp_2 : hol.proof (hol.and (hol.imp p2_3 p1_4) (hol.imp q1_2 q2_1)) => hol.PROVE_HYP p2_3 p1_4 (thm_2381 p2_3 hyp_1) (hyp_3 : hol.proof p2_3 => thm_2385 q2_1 q1_2 p2_3 p1_4 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> p1) q1) ;)

(; dict ;)

def thm_2387 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p1_2 q1_1) -> hol.proof (hol.imp p1_2 q1_1) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p1_2 q1_1) => hyp_1.

(; Theorem: |- q1 ;)

(; dict ;)

def thm_2388 : p1_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> hyp_1 : hol.proof p1_1 -> hyp_2 : hol.proof (hol.imp p1_1 q1_2) -> hol.proof q1_2 :=
  p1_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => hyp_1 : hol.proof p1_1 => hyp_2 : hol.proof (hol.imp p1_1 q1_2) => thm_2387 q1_2 p1_1 hyp_2 (thm_2319 p1_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q1) q2) ;)

(; dict ;)

def thm_2389 : p1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> q2_3 : hol.term hol.bool -> q1_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_4 q2_3)) -> hol.proof (hol.imp q1_4 q2_3) :=
  p1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => q2_3 : hol.term hol.bool => q1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_4 q2_3)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.imp p2_2 p1_1) (hol.imp q1_4 q2_3) hyp_1.

(; Theorem: |- ((Data.Bool.==> q1) q2) ;)

(; dict ;)

def thm_2390 : p1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> q2_3 : hol.term hol.bool -> q1_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_4 q2_3)) -> hol.proof (hol.imp q1_4 q2_3) :=
  p1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => q2_3 : hol.term hol.bool => q1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_4 q2_3)) => hol.PROVE_HYP (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_4 q2_3)) (hol.imp q1_4 q2_3) (thm_2382 q2_3 q1_4 p1_1 p2_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_4 q2_3)) => thm_2389 p1_1 p2_2 q2_3 q1_4 hyp_2).

(; Theorem: |- q2 ;)

(; dict ;)

def thm_2391 : p1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> q1_3 : hol.term hol.bool -> q2_4 : hol.term hol.bool -> hyp_1 : hol.proof q1_3 -> hyp_2 : hol.proof (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) -> hol.proof q2_4 :=
  p1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => q1_3 : hol.term hol.bool => q2_4 : hol.term hol.bool => hyp_1 : hol.proof q1_3 => hyp_2 : hol.proof (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) => thm_2390 p1_1 p2_2 q2_4 q1_3 hyp_2 (thm_2328 q1_3 hyp_1).

(; Theorem: |- q2 ;)

(; dict ;)

def thm_2392 : q1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> q2_4 : hol.term hol.bool -> hyp_1 : hol.proof p1_3 -> hyp_2 : hol.proof (hol.and (hol.imp p2_2 p1_3) (hol.imp q1_1 q2_4)) -> hyp_3 : hol.proof (hol.imp p1_3 q1_1) -> hol.proof q2_4 :=
  q1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => q2_4 : hol.term hol.bool => hyp_1 : hol.proof p1_3 => hyp_2 : hol.proof (hol.and (hol.imp p2_2 p1_3) (hol.imp q1_1 q2_4)) => hyp_3 : hol.proof (hol.imp p1_3 q1_1) => hol.PROVE_HYP q1_1 q2_4 (thm_2388 p1_3 q1_1 hyp_1 hyp_3) (hyp_4 : hol.proof q1_1 => thm_2391 p1_3 p2_2 q1_1 q2_4 hyp_4 hyp_2).

(; Theorem: |- q2 ;)

(; dict ;)

def thm_2393 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> q2_4 : hol.term hol.bool -> hyp_1 : hol.proof p2_3 -> hyp_2 : hol.proof (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) -> hyp_3 : hol.proof (hol.imp p1_2 q1_1) -> hol.proof q2_4 :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => q2_4 : hol.term hol.bool => hyp_1 : hol.proof p2_3 => hyp_2 : hol.proof (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) => hyp_3 : hol.proof (hol.imp p1_2 q1_1) => hol.PROVE_HYP p1_2 q2_4 (thm_2386 q2_4 q1_1 p2_3 p1_2 hyp_1 hyp_2) (hyp_4 : hol.proof p1_2 => thm_2392 q1_1 p2_3 p1_2 q2_4 hyp_4 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> p2) q2) ;)

(; dict ;)

def thm_2394 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> q2_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p2_4 p1_2) (hol.imp q1_1 q2_3)) -> hyp_2 : hol.proof (hol.imp p1_2 q1_1) -> hol.proof (hol.imp p2_4 q2_3) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => q2_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p2_4 p1_2) (hol.imp q1_1 q2_3)) => hyp_2 : hol.proof (hol.imp p1_2 q1_1) => hyp_3 : hol.proof p2_4 => thm_2393 q1_1 p1_2 p2_4 q2_3 hyp_3 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)) ;)

(; dict ;)

def thm_2395 : q2_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> q1_3 : hol.term hol.bool -> p1_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p2_2 p1_4) (hol.imp q1_3 q2_1)) -> hol.proof (hol.imp (hol.imp p1_4 q1_3) (hol.imp p2_2 q2_1)) :=
  q2_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => q1_3 : hol.term hol.bool => p1_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p2_2 p1_4) (hol.imp q1_3 q2_1)) => hyp_2 : hol.proof (hol.imp p1_4 q1_3) => thm_2394 q1_3 p1_4 q2_1 p2_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))) ;)

(; dict ;)

def thm_2396 : q2_1 : hol.term hol.bool -> q1_2 : hol.term hol.bool -> p1_3 : hol.term hol.bool -> p2_4 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.imp p2_4 p1_3) (hol.imp q1_2 q2_1)) (hol.imp (hol.imp p1_3 q1_2) (hol.imp p2_4 q2_1))) :=
  q2_1 : hol.term hol.bool => q1_2 : hol.term hol.bool => p1_3 : hol.term hol.bool => p2_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p2_4 p1_3) (hol.imp q1_2 q2_1)) => thm_2395 q2_1 p2_4 q1_2 p1_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))) ;)

(; dict ;)

def thm_2397 : q1_1 : hol.term hol.bool -> p1_2 : hol.term hol.bool -> p2_3 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_3 p1_2) (hol.imp q1_1 q2_4)) (hol.imp (hol.imp p1_2 q1_1) (hol.imp p2_3 q2_4)))) :=
  q1_1 : hol.term hol.bool => p1_2 : hol.term hol.bool => p2_3 : hol.term hol.bool => q2_4 : hol.term hol.bool => thm_2396 q2_4 q1_1 p1_2 p2_3.

(; Theorem: |- (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))) ;)

(; dict ;)

def thm_2398 : p1_1 : hol.term hol.bool -> p2_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))) :=
  p1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => q1_3 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))) (hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))) (thm_2380 q1_3 p1_1 p2_2) (thm_2397 q1_3 p1_1 p2_2).

(; Theorem: |- (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2)))))) ;)

(; dict ;)

def thm_2399 : p1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) :=
  p1_1 : hol.term hol.bool => p2_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))) (hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))) (thm_2377 p1_1 p2_2) (thm_2398 p1_1 p2_2).

(; Theorem: |- (Data.Bool.! \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))))) ;)

(; dict ;)

def thm_2400 : hol.proof (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))))) :=
  p1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) (hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4)))))) (thm_2374 p1_1) (thm_2399 p1_1).

(; Theorem: |- (Data.Bool.! \lambda p1. (Data.Bool.! \lambda p2. (Data.Bool.! \lambda q1. (Data.Bool.! \lambda q2. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> p2) p1)) ((Data.Bool.==> q1) q2))) ((Data.Bool.==> ((Data.Bool.==> p1) q1)) ((Data.Bool.==> p2) q2))))))) ;)

(; thm ;)

def thm_2401 : hol.proof (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))))) :=
  hol.EQ_MP (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))))) (hol.forall hol.bool (p1_1 : hol.term hol.bool => hol.forall hol.bool (p2_2 : hol.term hol.bool => hol.forall hol.bool (q1_3 : hol.term hol.bool => hol.forall hol.bool (q2_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp p2_2 p1_1) (hol.imp q1_3 q2_4)) (hol.imp (hol.imp p1_1 q1_3) (hol.imp p2_2 q2_4))))))) thm_2371 thm_2400.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q))))) \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_2402 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q))))) \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_2403 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))) thm_2402 thm_2402.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q)))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q)))))) ;)

(; dict ;)

def thm_2404 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))) thm_150 thm_2403.

(; Theorem: |- ((= \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q)))) \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_2405 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))) (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))).

(; Theorem: |- ((= \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q)))) \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_2406 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))) (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))) (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))) (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))) (thm_2405 p_1) (thm_2405 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q))))) (Data.Bool.! \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_2407 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))) (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))) thm_150 (thm_2406 p_1).

(; Theorem: |- ((= ((Data.Bool.==> q) Data.Bool.F)) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_2408 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp q_1 hol.false) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => (P_1 : hol.term hol.bool => thm_889 P_1) q_1.

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_2409 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp q_2 p_1) -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp q_2 p_1) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_2410 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hyp_2 : hol.proof (hol.imp q_1 p_2) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_2 : hol.proof (hol.imp q_1 p_2) => thm_2409 p_2 q_1 hyp_2 (thm_65 q_1 hyp_1).

(; Theorem: |- p ;)

(; dict ;)

def thm_2411 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hyp_2 : hol.proof (hol.imp q_1 p_2) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_2 : hol.proof (hol.imp q_1 p_2) => hol.PROVE_HYP q_1 p_2 (thm_65 q_1 hyp_1) (hyp_3 : hol.proof q_1 => thm_2410 q_1 p_2 hyp_3 hyp_2).

(; Theorem: |- ((= (= (Data.Bool.~ p))) (= (Data.Bool.~ p))) ;)

(; dict ;)

def thm_2412 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not p_1)) (hol.eq hol.bool (hol.not p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not p_1)).

(; Theorem: |- ((= (\lambda p. ((Data.Bool.==> p) Data.Bool.F) p)) ((Data.Bool.==> p) Data.Bool.F)) ;)

(; dict ;)

def thm_2413 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) p_1) (hol.imp p_1 hol.false)) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) p_1.

(; Theorem: |- ((= ((= (Data.Bool.~ p)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) p))) ((= (Data.Bool.~ p)) ((Data.Bool.==> p) Data.Bool.F))) ;)

(; dict ;)

def thm_2414 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not p_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) p_1)) (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false))) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not p_1)) (hol.eq hol.bool (hol.not p_1)) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) p_1) (hol.imp p_1 hol.false) (thm_2412 p_1) (thm_2413 p_1).

(; Theorem: |- ((= (Data.Bool.~ p)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) p)) ;)

(; dict ;)

def thm_2415 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not p_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) p_1 p_1 thm_4 (thm_55 p_1).

(; Theorem: |- ((= (Data.Bool.~ p)) ((Data.Bool.==> p) Data.Bool.F)) ;)

(; dict ;)

def thm_2416 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not p_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) p_1)) (hol.eq hol.bool (hol.not p_1) (hol.imp p_1 hol.false)) (thm_2414 p_1) (thm_2415 p_1).

(; Theorem: |- (Data.Bool.~ p) ;)

(; dict ;)

def thm_2417 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not p_1) -> hol.proof (hol.not p_1) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not p_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> p) Data.Bool.F) ;)

(; dict ;)

def thm_2418 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not p_1) -> hol.proof (hol.imp p_1 hol.false) :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not p_1) => hol.EQ_MP (hol.not p_1) (hol.imp p_1 hol.false) (thm_2416 p_1) (thm_2417 p_1 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_2419 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.not p_1) -> hol.proof hol.false :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.not p_1) => thm_2418 p_1 hyp_2 (thm_64 p_1 hyp_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_2420 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof q_2 -> hyp_2 : hol.proof (hol.not p_1) -> hyp_3 : hol.proof (hol.imp q_2 p_1) -> hol.proof hol.false :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof q_2 => hyp_2 : hol.proof (hol.not p_1) => hyp_3 : hol.proof (hol.imp q_2 p_1) => hol.PROVE_HYP p_1 hol.false (thm_2411 q_2 p_1 hyp_1 hyp_3) (hyp_4 : hol.proof p_1 => thm_2419 p_1 hyp_4 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) Data.Bool.F) ;)

(; dict ;)

def thm_2421 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not p_1) -> hyp_2 : hol.proof (hol.imp q_2 p_1) -> hol.proof (hol.imp q_2 hol.false) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.not p_1) => hyp_2 : hol.proof (hol.imp q_2 p_1) => hyp_3 : hol.proof q_2 => thm_2420 p_1 q_2 hyp_3 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.~ q) ;)

(; dict ;)

def thm_2422 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not p_1) -> hyp_2 : hol.proof (hol.imp q_2 p_1) -> hol.proof (hol.not q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.not p_1) => hyp_2 : hol.proof (hol.imp q_2 p_1) => hol.EQ_MP (hol.imp q_2 hol.false) (hol.not q_2) (thm_2408 q_2) (thm_2421 p_1 q_2 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q)) ;)

(; dict ;)

def thm_2423 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp q_1 p_2) -> hol.proof (hol.imp (hol.not p_2) (hol.not q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp q_1 p_2) => hyp_2 : hol.proof (hol.not p_2) => thm_2422 p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q))) ;)

(; dict ;)

def thm_2424 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp q_2 p_1) => thm_2423 q_2 p_1 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q)))) ;)

(; dict ;)

def thm_2425 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => thm_2424 p_1 q_2.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q))))) ;)

(; dict ;)

def thm_2426 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2)))) (thm_2407 p_1) (thm_2425 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> ((Data.Bool.==> q) p)) ((Data.Bool.==> (Data.Bool.~ p)) (Data.Bool.~ q))))) ;)

(; thm ;)

def thm_2427 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))))) :=
  hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.imp q_2 p_1) (hol.imp (hol.not p_1) (hol.not q_2))))) thm_2404 thm_2426.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_2428 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_2429 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (thm_2428 A) (thm_2428 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))))) ;)

(; dict ;)

def thm_2430 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (thm_1102 A) (thm_2429 A).

(; Theorem: |- ((= \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_2431 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_2432 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (thm_2431 A p_1) (thm_2431 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_2433 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (thm_1102 A) (thm_2432 A p_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x))) ;)

(; dict ;)

def thm_2434 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_2435 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) -> hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => p_1 x_2)) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (p x)) (q x))) ((Data.Bool.==> (p x)) (q x))) ;)

(; dict ;)

def thm_2436 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_3 x_2) (q_1 x_2)) (hol.imp (p_3 x_2) (q_1 x_2))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.imp (p_3 x_2) (q_1 x_2)).

(; Theorem: |- ((= ((Data.Bool.==> (p x)) (q x))) ((Data.Bool.==> (p x)) (q x))) ;)

(; dict ;)

def thm_2437 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_3 x_2) (q_1 x_2)) (hol.imp (p_3 x_2) (q_1 x_2))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.imp (p_3 x_2) (q_1 x_2)) (hol.imp (p_3 x_2) (q_1 x_2)) (hol.imp (p_3 x_2) (q_1 x_2)) (thm_2436 A q_1 x_2 p_3) (thm_2436 A q_1 x_2 p_3).

(; Theorem: |- ((Data.Bool.==> (p x)) (q x)) ;)

(; dict ;)

def thm_2438 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (q_1 x_4))) -> hol.proof (hol.imp (p_3 x_2) (q_1 x_2)) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (q_1 x_4))) => thm_2434 A q_1 p_3 hyp_1 x_2.

(; Theorem: |- ((= ((= (p x)) Data.Bool.T)) ((= (p x)) Data.Bool.T)) ;)

(; dict ;)

def thm_2439 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_2 x_1) hol.true).

(; Theorem: |- ((= ((= (p x)) Data.Bool.T)) ((= (p x)) Data.Bool.T)) ;)

(; dict ;)

def thm_2440 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true) (thm_2439 A x_1 p_2) (thm_2439 A x_1 p_2).

(; Theorem: |- ((= (p x)) ((= (p x)) Data.Bool.T)) ;)

(; dict ;)

def thm_2441 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 x_1) (hol.eq hol.bool (p_2 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_140 t_1) (p_2 x_1).

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_2442 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (p_2 x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => thm_2435 A p_2 hyp_1 x_1.

(; Theorem: |- ((= (p x)) Data.Bool.T) ;)

(; dict ;)

def thm_2443 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool (p_2 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.EQ_MP (p_2 x_1) (hol.eq hol.bool (p_2 x_1) hol.true) (thm_2441 A x_1 p_2) (thm_2442 A x_1 p_2 hyp_1).

(; Theorem: |- ((= Data.Bool.T) (p x)) ;)

(; dict ;)

def thm_2444 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) -> hol.proof (hol.eq hol.bool hol.true (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.SYM hol.bool (p_2 x_1) hol.true ((A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => hol.EQ_MP (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true) (thm_2440 A x_1 p_2) (thm_2443 A x_1 p_2 hyp_1)) A x_1 p_2 hyp_1).

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_2445 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (q_3 x_4))) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4)) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (q_3 x_4))) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (q_1 x_4))) => hol.EQ_MP (hol.imp (p_3 x_2) (q_1 x_2)) (hol.imp (p_3 x_2) (q_1 x_2)) (thm_2437 A q_1 x_2 p_3) (thm_2438 A q_1 x_2 p_3 hyp_1)) A q_3 x_2 p_1 hyp_2 (hol.EQ_MP hol.true (p_1 x_2) (thm_2444 A x_2 p_1 hyp_1) thm_1).

(; Theorem: |- (Data.Bool.! \lambda x. (q x)) ;)

(; dict ;)

def thm_2446 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) -> hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) => x_3 : hol.term A => thm_2445 A p_1 x_3 q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. (q x)) ;)

(; dict ;)

def thm_2447 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) -> hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)) (thm_2435 A p_1 hyp_1) (hyp_3 : hol.proof (hol.forall A (x_3 : hol.term A => p_1 x_3)) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => q_2 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)) (thm_1542 A q_2) (thm_2446 A p_1 q_2 hyp_3 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))) ;)

(; dict ;)

def thm_2448 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3)) => thm_2447 A p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))) ;)

(; dict ;)

def thm_2449 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))) (thm_2434 A q_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) => thm_2448 A q_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_2450 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) => thm_2449 A q_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_2451 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => thm_2450 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) ;)

(; dict ;)

def thm_2452 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (thm_2433 A p_1) (thm_2451 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))))) ;)

(; thm ;)

def thm_2453 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (thm_2430 A) (thm_2452 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_2454 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_2455 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (thm_2454 A) (thm_2454 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))))) ;)

(; dict ;)

def thm_2456 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (thm_1102 A) (thm_2455 A).

(; Theorem: |- ((= \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))) \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_2457 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))).

(; Theorem: |- ((= \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))) \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_2458 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (thm_2457 A p_1) (thm_2457 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_2459 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))) (thm_1102 A) (thm_2458 A p_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. (q x))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_2460 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1 x_4)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)) (x_3 : hol.term A => p_2 x_3).

(; Theorem: |- (q x) ;)

(; dict ;)

def thm_2461 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_1 x_2) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (q_3 x_4))) -> hol.proof (q_3 x_2) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_1 x_2) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (q_3 x_4))) => thm_2438 A q_3 x_2 p_1 hyp_2 (thm_1266 A x_2 p_1 hyp_1).

(; Theorem: |- (\lambda x. (q x) x) ;)

(; dict ;)

def thm_2462 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_1 x_2) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (q_3 x_4))) -> hol.proof ((x_4 : hol.term A => q_3 x_4) x_2) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_1 x_2) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (q_3 x_4))) => hol.EQ_MP (q_3 x_2) ((x_4 : hol.term A => q_3 x_4) x_2) (thm_1691 A x_2 q_3) (thm_2461 A p_1 x_2 q_3 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. (q x)) ;)

(; dict ;)

def thm_2463 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (q_3 x_4))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (q_3 x_4))) => hol.PROVE_HYP ((x_4 : hol.term A => q_3 x_4) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4)) (thm_2462 A p_2 x_1 q_3 hyp_1 hyp_2) (hyp_3 : hol.proof ((x_4 : hol.term A => q_3 x_4) x_1) => thm_1693 A x_1 q_3 hyp_3).

(; Theorem: |- ((Data.Bool.==> (p x)) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_2464 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (q_1 x_4))) -> hol.proof (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1 x_4))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (q_1 x_4))) => hyp_2 : hol.proof (p_3 x_2) => thm_2463 A x_2 p_3 q_1 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (q x)) ;)

(; dict ;)

def thm_2465 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> q_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (q_3 x_4))) -> hyp_2 : hol.proof ((x_4 : hol.term A => p_2 x_4) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_3 x_4)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => q_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (q_3 x_4))) => hyp_2 : hol.proof ((x_4 : hol.term A => p_2 x_4) x_1) => thm_2464 A q_3 x_1 p_2 hyp_1 (thm_1677 A x_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_2466 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (q_1 x_4))) -> hol.proof (hol.imp ((x_4 : hol.term A => p_3 x_4) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1 x_4))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (q_1 x_4))) => hyp_2 : hol.proof ((x_4 : hol.term A => p_3 x_4) x_2) => thm_2465 A x_2 p_3 q_1 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_2467 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 x_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => q_1 x_4)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) => x_3 : hol.term A => thm_2466 A q_1 x_3 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))) ;)

(; dict ;)

def thm_2468 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) => thm_2460 A q_1 p_2 (thm_2467 A q_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (q x)) ;)

(; dict ;)

def thm_2469 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> q_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) => thm_2468 A q_2 p_1 hyp_1 (thm_1682 A p_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))) ;)

(; dict ;)

def thm_2470 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) => thm_2469 A p_2 q_1 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x))))) ;)

(; dict ;)

def thm_2471 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => q_2 : hol.term (hol.arr A hol.bool) => thm_2470 A q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) ;)

(; dict ;)

def thm_2472 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))))) (thm_2459 A p_1) (thm_2471 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (q x)))))) ;)

(; thm ;)

def thm_2473 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (q_2 x_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_1 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3)))))) (thm_2456 A) (thm_2472 A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_2474 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr A hol.bool))) (hol.forall (hol.arr A (hol.arr A hol.bool)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr A hol.bool))).

(; Theorem: |- ((= \lambda r. (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))))) \lambda r. (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))))) ;)

(; dict ;)

def thm_2475 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))).

(; Theorem: |- ((= \lambda r. (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))))) \lambda r. (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))))) ;)

(; dict ;)

def thm_2476 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))) (thm_2475 A) (thm_2475 A).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))))))) (Data.Bool.! \lambda r. (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))))))) ;)

(; dict ;)

def thm_2477 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool))) (hol.forall (hol.arr A (hol.arr A hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))) (thm_2474 A) (thm_2476 A).

(; Theorem: |- ((= \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))))) \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))))) ;)

(; dict ;)

def thm_2478 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))).

(; Theorem: |- ((= \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))))) \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))))) ;)

(; dict ;)

def thm_2479 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))) (thm_2478 A r_1) (thm_2478 A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))))) (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))))) ;)

(; dict ;)

def thm_2480 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool))) (hol.forall (hol.arr A (hol.arr A hol.bool))) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))) (thm_2474 A) (thm_2479 A r_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y)))))) ;)

(; dict ;)

def thm_2481 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) -> hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x)))) ;)

(; dict ;)

def thm_2482 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x)))) ;)

(; dict ;)

def thm_2483 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) => hol.PROVE_HYP (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (thm_2481 A r_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) => thm_2482 A r_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))) ;)

(; dict ;)

def thm_2484 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_1 x_3 y_4) (p_1 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))))) -> hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_1 x_3 y_4) (p_1 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_1 x_3 y_4) (p_1 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) hyp_1.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))) ;)

(; dict ;)

def thm_2485 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_1 x_3 y_4) (p_1 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))))) -> hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_1 x_3 y_4) (p_1 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))))) => hol.PROVE_HYP (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_1 x_3 y_4) (p_1 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) (thm_2481 A r_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_1 x_3 y_4) (p_1 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))))) => thm_2484 A p_1 r_2 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x)))) ;)

(; dict ;)

def thm_2486 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (p_1 x_2 y_3) (p_1 y_3 x_2)))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (p_1 x_2 y_3) (p_1 y_3 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (p_1 x_2 y_3) (p_1 y_3 x_2)))) => hyp_1.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))) ;)

(; dict ;)

def thm_2487 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) -> hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) ;)

(; dict ;)

def thm_2488 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) ;)

(; dict ;)

def thm_2489 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) => hol.PROVE_HYP (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (thm_2487 A p_1 r_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) => thm_2488 A p_1 r_2 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y)))) ;)

(; dict ;)

def thm_2490 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y)))) ;)

(; dict ;)

def thm_2491 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) => hol.PROVE_HYP (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))) (thm_2487 A p_1 r_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4))))) => thm_2490 A p_1 r_2 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y)))) ;)

(; dict ;)

def thm_2492 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))) => hyp_1.

(; Theorem: |- ((= (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x)) (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) ;)

(; dict ;)

def thm_2493 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) x_1) (hol.forall A (y_3 : hol.term A => hol.or (r_2 x_1 y_3) (r_2 y_3 x_1)))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) x_1.

(; Theorem: |- ((= (Data.Bool.==> (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x))) (Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) ;)

(; dict ;)

def thm_2494 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) x_1)) (hol.imp (hol.forall A (y_3 : hol.term A => hol.or (r_2 x_1 y_3) (r_2 y_3 x_1))))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) x_1) (hol.forall A (y_3 : hol.term A => hol.or (r_2 x_1 y_3) (r_2 y_3 x_1))) thm_1118 (thm_2493 A x_1 r_2).

(; Theorem: |- ((= (\lambda x. (Data.Bool.! \lambda y. ((p x) y)) x)) (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_2495 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)) x_1) (hol.forall A (y_3 : hol.term A => p_2 x_1 y_3))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)) x_1.

(; Theorem: |- ((= ((Data.Bool.==> (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x)) (\lambda x. (Data.Bool.! \lambda y. ((p x) y)) x))) ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_2496 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_3 x_4 y_5) (r_3 y_5 x_4))) x_2) ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_2)) (hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2))) (hol.forall A (y_4 : hol.term A => p_1 x_2 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_3 x_4 y_5) (r_3 y_5 x_4))) x_2)) (hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)))) ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_2) (hol.forall A (y_4 : hol.term A => p_1 x_2 y_4)) (thm_2494 A x_2 r_3) (thm_2495 A x_2 p_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x)) (\lambda x. (Data.Bool.! \lambda y. ((p x) y)) x))) \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_2497 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3) ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3)) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3) ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3)) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))) (x_3 : hol.term A => thm_2496 A p_1 x_3 r_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x)) (\lambda x. (Data.Bool.! \lambda y. ((p x) y)) x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y))))) ;)

(; dict ;)

def thm_2498 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3) ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3) ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3)) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))) (thm_7 A) (thm_2497 A p_1 r_2).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x)) (\lambda x. (Data.Bool.! \lambda y. ((p x) y)) x))))) (Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y)))))) ;)

(; dict ;)

def thm_2499 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3) ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3) ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) thm_1118 (thm_2498 A p_1 r_2).

(; Theorem: |- ((= \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x)) \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) ;)

(; dict ;)

def thm_2500 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3))) x_2) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.or (r_1 x_2 y_3) (r_1 y_3 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3))) x_2) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.or (r_1 x_2 y_3) (r_1 y_3 x_2))) (x_2 : hol.term A => thm_2493 A x_2 r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) ;)

(; dict ;)

def thm_2501 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3))) x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.or (r_1 x_2 y_3) (r_1 y_3 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3))) x_2) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.or (r_1 x_2 y_3) (r_1 y_3 x_2))) (thm_7 A) (thm_2500 A r_1).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x)))) (Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))))) ;)

(; dict ;)

def thm_2502 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3))) x_2))) (hol.imp (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.or (r_1 x_2 y_3) (r_1 y_3 x_2)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3))) x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.or (r_1 x_2 y_3) (r_1 y_3 x_2)))) thm_1118 (thm_2501 A r_1).

(; Theorem: |- ((= \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((p x) y)) x)) \lambda x. (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_2503 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)) x_2) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => p_1 x_2 y_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)) x_2) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => p_1 x_2 y_3)) (x_2 : hol.term A => thm_2495 A x_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((p x) y)) x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_2504 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)) x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => p_1 x_2 y_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)) x_2) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => p_1 x_2 y_3)) (thm_7 A) (thm_2503 A p_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((p x) y)) x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))))) ;)

(; dict ;)

def thm_2505 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3)) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))))) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3)) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))) (thm_2502 A r_2) (thm_2504 A p_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x)) (\lambda x. (Data.Bool.! \lambda y. ((p x) y)) x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((p x) y)) x))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y))))) ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))))) ;)

(; dict ;)

def thm_2506 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3) ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3)) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3) ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))))) (hol.imp (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3)) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) (thm_2499 A p_1 r_2) (thm_2505 A p_1 r_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x)) (\lambda x. (Data.Bool.! \lambda y. ((p x) y)) x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) x))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. ((p x) y)) x)))) ;)

(; dict ;)

def thm_2507 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3) ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3)) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => thm_2450 A q_1 p_2) A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y))))) ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))))) ;)

(; dict ;)

def thm_2508 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3) ((x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.or (r_2 x_4 y_5) (r_2 y_5 x_4))) x_3)) (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => p_1 x_4 y_5)) x_3)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))))) (thm_2506 A p_1 r_2) (thm_2507 A p_1 r_2).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y)))) \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_2509 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y)))) \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_2510 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))) (thm_2509 A p_1 r_2) (thm_2509 A p_1 r_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y))))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y))))) ;)

(; dict ;)

def thm_2511 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))) (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4))) (thm_7 A) (thm_2510 A p_1 r_2).

(; Theorem: |- ((= (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y)) ((Data.Bool.\/ ((r x) y)) ((r y) x))) ;)

(; dict ;)

def thm_2512 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool ((y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) y_1) (hol.or (r_3 x_2 y_1) (r_3 y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.BETA_CONV A hol.bool (y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) y_1.

(; Theorem: |- ((= (Data.Bool.==> (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y))) (Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x)))) ;)

(; dict ;)

def thm_2513 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp ((y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) y_1)) (hol.imp (hol.or (r_3 x_2 y_1) (r_3 y_1 x_2)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp ((y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) y_1) (hol.or (r_3 x_2 y_1) (r_3 y_1 x_2)) thm_1118 (thm_2512 A y_1 x_2 r_3).

(; Theorem: |- ((= (\lambda y. ((p x) y) y)) ((p x) y)) ;)

(; dict ;)

def thm_2514 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool ((y_4 : hol.term A => p_3 x_2 y_4) y_1) (p_3 x_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.BETA_CONV A hol.bool (y_4 : hol.term A => p_3 x_2 y_4) y_1.

(; Theorem: |- ((= ((Data.Bool.==> (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y)) (\lambda y. ((p x) y) y))) ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y))) ;)

(; dict ;)

def thm_2515 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp ((y_5 : hol.term A => hol.or (r_4 x_3 y_5) (r_4 y_5 x_3)) y_2) ((y_5 : hol.term A => p_1 x_3 y_5) y_2)) (hol.imp (hol.or (r_4 x_3 y_2) (r_4 y_2 x_3)) (p_1 x_3 y_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp ((y_5 : hol.term A => hol.or (r_4 x_3 y_5) (r_4 y_5 x_3)) y_2)) (hol.imp (hol.or (r_4 x_3 y_2) (r_4 y_2 x_3))) ((y_5 : hol.term A => p_1 x_3 y_5) y_2) (p_1 x_3 y_2) (thm_2513 A y_2 x_3 r_4) (thm_2514 A y_2 x_3 p_1).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y)) (\lambda y. ((p x) y) y))) \lambda y. ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y))) ;)

(; dict ;)

def thm_2516 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_4 : hol.term A => hol.imp ((y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4) ((y_5 : hol.term A => p_1 x_2 y_5) y_4)) (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (y_4 : hol.term A => hol.imp ((y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4) ((y_5 : hol.term A => p_1 x_2 y_5) y_4)) (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4)) (y_4 : hol.term A => thm_2515 A p_1 y_4 x_2 r_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y)) (\lambda y. ((p x) y) y)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y)))) ;)

(; dict ;)

def thm_2517 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp ((y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4) ((y_5 : hol.term A => p_1 x_2 y_5) y_4))) (hol.forall A (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_4 : hol.term A => hol.imp ((y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4) ((y_5 : hol.term A => p_1 x_2 y_5) y_4)) (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4)) (thm_7 A) (thm_2516 A p_1 x_2 r_3).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y)) (\lambda y. ((p x) y) y))))) (Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y))))) ;)

(; dict ;)

def thm_2518 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp ((y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4) ((y_5 : hol.term A => p_1 x_2 y_5) y_4)))) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.forall A (y_4 : hol.term A => hol.imp ((y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4) ((y_5 : hol.term A => p_1 x_2 y_5) y_4))) (hol.forall A (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4))) thm_1118 (thm_2517 A p_1 x_2 r_3).

(; Theorem: |- ((= \lambda y. (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y)) \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))) ;)

(; dict ;)

def thm_2519 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => (y_4 : hol.term A => hol.or (r_2 x_1 y_4) (r_2 y_4 x_1)) y_3) (y_3 : hol.term A => hol.or (r_2 x_1 y_3) (r_2 y_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (y_3 : hol.term A => (y_4 : hol.term A => hol.or (r_2 x_1 y_4) (r_2 y_4 x_1)) y_3) (y_3 : hol.term A => hol.or (r_2 x_1 y_3) (r_2 y_3 x_1)) (y_3 : hol.term A => thm_2512 A y_3 x_1 r_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y))) (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) ;)

(; dict ;)

def thm_2520 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.or (r_2 x_1 y_4) (r_2 y_4 x_1)) y_3)) (hol.forall A (y_3 : hol.term A => hol.or (r_2 x_1 y_3) (r_2 y_3 x_1)))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => (y_4 : hol.term A => hol.or (r_2 x_1 y_4) (r_2 y_4 x_1)) y_3) (y_3 : hol.term A => hol.or (r_2 x_1 y_3) (r_2 y_3 x_1)) (thm_7 A) (thm_2519 A x_1 r_2).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y)))) (Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) ;)

(; dict ;)

def thm_2521 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.or (r_2 x_1 y_4) (r_2 y_4 x_1)) y_3))) (hol.imp (hol.forall A (y_3 : hol.term A => hol.or (r_2 x_1 y_3) (r_2 y_3 x_1))))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.or (r_2 x_1 y_4) (r_2 y_4 x_1)) y_3)) (hol.forall A (y_3 : hol.term A => hol.or (r_2 x_1 y_3) (r_2 y_3 x_1))) thm_1118 (thm_2520 A x_1 r_2).

(; Theorem: |- ((= \lambda y. (\lambda y. ((p x) y) y)) \lambda y. ((p x) y)) ;)

(; dict ;)

def thm_2522 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => (y_4 : hol.term A => p_2 x_1 y_4) y_3) (y_3 : hol.term A => p_2 x_1 y_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (y_3 : hol.term A => (y_4 : hol.term A => p_2 x_1 y_4) y_3) (y_3 : hol.term A => p_2 x_1 y_3) (y_3 : hol.term A => thm_2514 A y_3 x_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (\lambda y. ((p x) y) y))) (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_2523 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => p_2 x_1 y_4) y_3)) (hol.forall A (y_3 : hol.term A => p_2 x_1 y_3))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => (y_4 : hol.term A => p_2 x_1 y_4) y_3) (y_3 : hol.term A => p_2 x_1 y_3) (thm_7 A) (thm_2522 A x_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y))) (Data.Bool.! \lambda y. (\lambda y. ((p x) y) y)))) ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_2524 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => (y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4)) (hol.forall A (y_4 : hol.term A => (y_5 : hol.term A => p_1 x_2 y_5) y_4))) (hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2))) (hol.forall A (y_4 : hol.term A => p_1 x_2 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => (y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4))) (hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)))) (hol.forall A (y_4 : hol.term A => (y_5 : hol.term A => p_1 x_2 y_5) y_4)) (hol.forall A (y_4 : hol.term A => p_1 x_2 y_4)) (thm_2521 A x_2 r_3) (thm_2523 A x_2 p_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y)) (\lambda y. ((p x) y) y)))) ((Data.Bool.==> (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y))) (Data.Bool.! \lambda y. (\lambda y. ((p x) y) y))))) ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y)))) ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y))))) ;)

(; dict ;)

def thm_2525 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp ((y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4) ((y_5 : hol.term A => p_1 x_2 y_5) y_4))) (hol.imp (hol.forall A (y_4 : hol.term A => (y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4)) (hol.forall A (y_4 : hol.term A => (y_5 : hol.term A => p_1 x_2 y_5) y_4)))) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4))) (hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2))) (hol.forall A (y_4 : hol.term A => p_1 x_2 y_4))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp ((y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4) ((y_5 : hol.term A => p_1 x_2 y_5) y_4)))) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4)))) (hol.imp (hol.forall A (y_4 : hol.term A => (y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4)) (hol.forall A (y_4 : hol.term A => (y_5 : hol.term A => p_1 x_2 y_5) y_4))) (hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2))) (hol.forall A (y_4 : hol.term A => p_1 x_2 y_4))) (thm_2518 A p_1 x_2 r_3) (thm_2524 A p_1 x_2 r_3).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_2526 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) (q y)))) ((Data.Bool.==> (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda y. (q y))))) ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) (q y)))) ((Data.Bool.==> (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda y. (q y))))) ;)

(; dict ;)

def thm_2527 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (q_1 y_3))) (hol.imp (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3)))) (hol.imp (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (q_1 y_3))) (hol.imp (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.imp (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (q_1 y_3))) (hol.imp (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3)))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (q x)))) ((Data.Bool.==> (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) (q y)))) ((Data.Bool.==> (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda y. (q y))))) ;)

(; dict ;)

def thm_2528 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.imp (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (q_1 y_3))) (hol.imp (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.imp (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (q_1 y_3))) (hol.imp (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3)))) (thm_2526 A q_1 p_2) (thm_2527 A q_1 p_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) (q y)))) ((Data.Bool.==> (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda y. (q y)))) ;)

(; dict ;)

def thm_2529 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (q_1 y_3))) (hol.imp (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (q_1 x_3))) (hol.imp (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.imp (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (q_1 y_3))) (hol.imp (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3)))) (thm_2528 A q_1 p_2) (thm_2450 A q_1 p_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y)) (\lambda y. ((p x) y) y)))) ((Data.Bool.==> (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)) y))) (Data.Bool.! \lambda y. (\lambda y. ((p x) y) y)))) ;)

(; dict ;)

def thm_2530 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp ((y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4) ((y_5 : hol.term A => p_1 x_2 y_5) y_4))) (hol.imp (hol.forall A (y_4 : hol.term A => (y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4)) (hol.forall A (y_4 : hol.term A => (y_5 : hol.term A => p_1 x_2 y_5) y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => thm_2529 A q_1 p_2) A q_1 p_2) A (y_4 : hol.term A => p_1 x_2 y_4) (y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y)))) ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_2531 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4))) (hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2))) (hol.forall A (y_4 : hol.term A => p_1 x_2 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp ((y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4) ((y_5 : hol.term A => p_1 x_2 y_5) y_4))) (hol.imp (hol.forall A (y_4 : hol.term A => (y_5 : hol.term A => hol.or (r_3 x_2 y_5) (r_3 y_5 x_2)) y_4)) (hol.forall A (y_4 : hol.term A => (y_5 : hol.term A => p_1 x_2 y_5) y_4)))) (hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4))) (hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2))) (hol.forall A (y_4 : hol.term A => p_1 x_2 y_4)))) (thm_2525 A p_1 x_2 r_3) (thm_2530 A p_1 x_2 r_3).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y))) \lambda y. ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y))) ;)

(; dict ;)

def thm_2532 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4)) (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL (hol.arr A hol.bool) (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4)).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y))) \lambda y. ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y))) ;)

(; dict ;)

def thm_2533 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4)) (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS (hol.arr A hol.bool) (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4)) (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4)) (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4)) (thm_2532 A p_1 x_2 r_3) (thm_2532 A p_1 x_2 r_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y)))) ;)

(; dict ;)

def thm_2534 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4))) (hol.forall A (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4)) (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4)) (thm_7 A) (thm_2533 A p_1 x_2 r_3).

(; Theorem: |- ((r y) x) ;)

(; dict ;)

def thm_2535 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (r_3 y_2 x_1) -> hol.proof (r_3 y_2 x_1) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (r_3 y_2 x_1) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> ((p x) y)) ((= ((p y) x)) Data.Bool.T))) ((Data.Bool.==> ((p x) y)) ((= ((p y) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_2536 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (p_3 x_2 y_1) (hol.eq hol.bool (p_3 y_1 x_2) hol.true)) (hol.imp (p_3 x_2 y_1) (hol.eq hol.bool (p_3 y_1 x_2) hol.true))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.imp (p_3 x_2 y_1) (hol.eq hol.bool (p_3 y_1 x_2) hol.true)).

(; Theorem: |- ((= ((Data.Bool.==> ((p x) y)) ((= ((p y) x)) Data.Bool.T))) ((Data.Bool.==> ((p x) y)) ((= ((p y) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_2537 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (p_3 x_2 y_1) (hol.eq hol.bool (p_3 y_1 x_2) hol.true)) (hol.imp (p_3 x_2 y_1) (hol.eq hol.bool (p_3 y_1 x_2) hol.true))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.imp (p_3 x_2 y_1) (hol.eq hol.bool (p_3 y_1 x_2) hol.true)) (hol.imp (p_3 x_2 y_1) (hol.eq hol.bool (p_3 y_1 x_2) hol.true)) (hol.imp (p_3 x_2 y_1) (hol.eq hol.bool (p_3 y_1 x_2) hol.true)) (thm_2536 A y_1 x_2 p_3) (thm_2536 A y_1 x_2 p_3).

(; Theorem: |- ((= ((p y) x)) ((= ((p y) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_2538 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 y_2 x_1) (hol.eq hol.bool (p_3 y_2 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => (t_1 : hol.term hol.bool => thm_140 t_1) (p_3 y_2 x_1).

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))) ;)

(; dict ;)

def thm_2539 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) -> hol.proof (hol.forall A (y_3 : hol.term A => hol.imp (p_2 x_1 y_3) (p_2 y_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) => thm_2486 A p_2 hyp_1 x_1.

(; Theorem: |- ((Data.Bool.==> ((p x) y)) ((p y) x)) ;)

(; dict ;)

def thm_2540 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (p_3 x_4 y_5) (p_3 y_5 x_4)))) -> hol.proof (hol.imp (p_3 x_2 y_1) (p_3 y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (p_3 x_4 y_5) (p_3 y_5 x_4)))) => thm_2539 A x_2 p_3 hyp_1 y_1.

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_2541 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (p_3 x_2 y_1) -> hol.proof (p_3 x_2 y_1) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y_1) => hyp_1.

(; Theorem: |- ((p y) x) ;)

(; dict ;)

def thm_2542 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (p_3 x_4 y_5) (p_3 y_5 x_4)))) -> hyp_2 : hol.proof (p_3 x_1 y_2) -> hol.proof (p_3 y_2 x_1) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (p_3 x_4 y_5) (p_3 y_5 x_4)))) => hyp_2 : hol.proof (p_3 x_1 y_2) => thm_2540 A y_2 x_1 p_3 hyp_1 (thm_2541 A y_2 x_1 p_3 hyp_2).

(; Theorem: |- ((= ((p y) x)) Data.Bool.T) ;)

(; dict ;)

def thm_2543 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (p_3 x_4 y_5) (p_3 y_5 x_4)))) -> hyp_2 : hol.proof (p_3 x_1 y_2) -> hol.proof (hol.eq hol.bool (p_3 y_2 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (p_3 x_4 y_5) (p_3 y_5 x_4)))) => hyp_2 : hol.proof (p_3 x_1 y_2) => hol.EQ_MP (p_3 y_2 x_1) (hol.eq hol.bool (p_3 y_2 x_1) hol.true) (thm_2538 A x_1 y_2 p_3) (thm_2542 A x_1 y_2 p_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((p x) y)) ((= ((p y) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_2544 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (p_3 x_4 y_5) (p_3 y_5 x_4)))) -> hol.proof (hol.imp (p_3 x_2 y_1) (hol.eq hol.bool (p_3 y_1 x_2) hol.true)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (p_3 x_4 y_5) (p_3 y_5 x_4)))) => hyp_2 : hol.proof (p_3 x_2 y_1) => thm_2543 A x_2 y_1 p_3 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((p y) x)) ((= ((p x) y)) Data.Bool.T)) ;)

(; dict ;)

def thm_2545 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall A (y__1_5 : hol.term A => hol.imp (p_3 x__1_4 y__1_5) (p_3 y__1_5 x__1_4)))) -> hol.proof (hol.imp (p_3 y_2 x_1) (hol.eq hol.bool (p_3 x_1 y_2) hol.true)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall A (y__1_5 : hol.term A => hol.imp (p_3 x__1_4 y__1_5) (p_3 y__1_5 x__1_4)))) => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (p_3 x_4 y_5) (p_3 y_5 x_4)))) => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (p_3 x_4 y_5) (p_3 y_5 x_4)))) => hol.EQ_MP (hol.imp (p_3 x_2 y_1) (hol.eq hol.bool (p_3 y_1 x_2) hol.true)) (hol.imp (p_3 x_2 y_1) (hol.eq hol.bool (p_3 y_1 x_2) hol.true)) (thm_2537 A y_1 x_2 p_3) (hol.EQ_MP (hol.imp (p_3 x_2 y_1) (hol.eq hol.bool (p_3 y_1 x_2) hol.true)) (hol.imp (p_3 x_2 y_1) (hol.eq hol.bool (p_3 y_1 x_2) hol.true)) (thm_2536 A y_1 x_2 p_3) (thm_2544 A y_1 x_2 p_3 hyp_1))) A y_1 x_2 p_3 hyp_1) A x_1 y_2 p_3 hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> ((r x) y)) ((= ((p x) y)) Data.Bool.T))) ((Data.Bool.==> ((r x) y)) ((= ((p x) y)) Data.Bool.T))) ;)

(; dict ;)

def thm_2546 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (r_4 x_3 y_2) (hol.eq hol.bool (p_1 x_3 y_2) hol.true)) (hol.imp (r_4 x_3 y_2) (hol.eq hol.bool (p_1 x_3 y_2) hol.true))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.imp (r_4 x_3 y_2) (hol.eq hol.bool (p_1 x_3 y_2) hol.true)).

(; Theorem: |- ((= ((Data.Bool.==> ((r x) y)) ((= ((p x) y)) Data.Bool.T))) ((Data.Bool.==> ((r x) y)) ((= ((p x) y)) Data.Bool.T))) ;)

(; dict ;)

def thm_2547 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (r_4 x_3 y_2) (hol.eq hol.bool (p_1 x_3 y_2) hol.true)) (hol.imp (r_4 x_3 y_2) (hol.eq hol.bool (p_1 x_3 y_2) hol.true))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.imp (r_4 x_3 y_2) (hol.eq hol.bool (p_1 x_3 y_2) hol.true)) (hol.imp (r_4 x_3 y_2) (hol.eq hol.bool (p_1 x_3 y_2) hol.true)) (hol.imp (r_4 x_3 y_2) (hol.eq hol.bool (p_1 x_3 y_2) hol.true)) (thm_2546 A p_1 y_2 x_3 r_4) (thm_2546 A p_1 y_2 x_3 r_4).

(; Theorem: |- ((= ((p x) y)) ((= ((p x) y)) Data.Bool.T)) ;)

(; dict ;)

def thm_2548 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 x_2 y_1) (hol.eq hol.bool (p_3 x_2 y_1) hol.true)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => (t_1 : hol.term hol.bool => thm_140 t_1) (p_3 x_2 y_1).

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))) ;)

(; dict ;)

def thm_2549 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 x_4 y_5) (p_1 x_4 y_5)))) -> hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 x_2 y_4) (p_1 x_2 y_4))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 x_4 y_5) (p_1 x_4 y_5)))) => thm_2492 A p_1 r_3 hyp_1 x_2.

(; Theorem: |- ((Data.Bool.==> ((r x) y)) ((p x) y)) ;)

(; dict ;)

def thm_2550 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_4 x_5 y_6) (p_1 x_5 y_6)))) -> hol.proof (hol.imp (r_4 x_3 y_2) (p_1 x_3 y_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_4 x_5 y_6) (p_1 x_5 y_6)))) => thm_2549 A p_1 x_3 r_4 hyp_1 y_2.

(; Theorem: |- ((r x) y) ;)

(; dict ;)

def thm_2551 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (r_3 x_2 y_1) -> hol.proof (r_3 x_2 y_1) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (r_3 x_2 y_1) => hyp_1.

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_2552 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) -> hyp_2 : hol.proof (r_1 x_3 y_2) -> hol.proof (p_4 x_3 y_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) => hyp_2 : hol.proof (r_1 x_3 y_2) => thm_2550 A p_4 y_2 x_3 r_1 hyp_1 (thm_2551 A y_2 x_3 r_1 hyp_2).

(; Theorem: |- ((= ((p x) y)) Data.Bool.T) ;)

(; dict ;)

def thm_2553 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) -> hyp_2 : hol.proof (r_1 x_3 y_2) -> hol.proof (hol.eq hol.bool (p_4 x_3 y_2) hol.true) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) => hyp_2 : hol.proof (r_1 x_3 y_2) => hol.EQ_MP (p_4 x_3 y_2) (hol.eq hol.bool (p_4 x_3 y_2) hol.true) (thm_2548 A y_2 x_3 p_4) (thm_2552 A r_1 y_2 x_3 p_4 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((r x) y)) ((= ((p x) y)) Data.Bool.T)) ;)

(; dict ;)

def thm_2554 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_4 x_5 y_6) (p_1 x_5 y_6)))) -> hol.proof (hol.imp (r_4 x_3 y_2) (hol.eq hol.bool (p_1 x_3 y_2) hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_4 x_5 y_6) (p_1 x_5 y_6)))) => hyp_2 : hol.proof (r_4 x_3 y_2) => thm_2553 A r_4 y_2 x_3 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((r y) x)) ((= ((p y) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_2555 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> y_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_4 x__1_5 y__1_6) (p_1 x__1_5 y__1_6)))) -> hol.proof (hol.imp (r_4 y_3 x_2) (hol.eq hol.bool (p_1 y_3 x_2) hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => y_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_4 x__1_5 y__1_6) (p_1 x__1_5 y__1_6)))) => (A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_4 x_5 y_6) (p_1 x_5 y_6)))) => (A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_4 x_5 y_6) (p_1 x_5 y_6)))) => hol.EQ_MP (hol.imp (r_4 x_3 y_2) (hol.eq hol.bool (p_1 x_3 y_2) hol.true)) (hol.imp (r_4 x_3 y_2) (hol.eq hol.bool (p_1 x_3 y_2) hol.true)) (thm_2547 A p_1 y_2 x_3 r_4) (hol.EQ_MP (hol.imp (r_4 x_3 y_2) (hol.eq hol.bool (p_1 x_3 y_2) hol.true)) (hol.imp (r_4 x_3 y_2) (hol.eq hol.bool (p_1 x_3 y_2) hol.true)) (thm_2546 A p_1 y_2 x_3 r_4) (thm_2554 A p_1 y_2 x_3 r_4 hyp_1))) A p_1 y_2 x_3 r_4 hyp_1) A p_1 x_2 y_3 r_4 hyp_1.

(; Theorem: |- ((= ((p y) x)) Data.Bool.T) ;)

(; dict ;)

def thm_2556 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) -> hyp_2 : hol.proof (r_1 y_3 x_2) -> hol.proof (hol.eq hol.bool (p_4 y_3 x_2) hol.true) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => y_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) => hyp_2 : hol.proof (r_1 y_3 x_2) => thm_2555 A p_4 x_2 y_3 r_1 hyp_1 (thm_2535 A x_2 y_3 r_1 hyp_2).

(; Theorem: |- ((= Data.Bool.T) ((p y) x)) ;)

(; dict ;)

def thm_2557 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) -> hyp_2 : hol.proof (r_1 y_3 x_2) -> hol.proof (hol.eq hol.bool hol.true (p_4 y_3 x_2)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => y_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) => hyp_2 : hol.proof (r_1 y_3 x_2) => hol.SYM hol.bool (p_4 y_3 x_2) hol.true (thm_2556 A r_1 x_2 y_3 p_4 hyp_1 hyp_2).

(; Theorem: |- ((p y) x) ;)

(; dict ;)

def thm_2558 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) -> hyp_2 : hol.proof (r_1 y_3 x_2) -> hol.proof (p_4 y_3 x_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => y_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) => hyp_2 : hol.proof (r_1 y_3 x_2) => hol.EQ_MP hol.true (p_4 y_3 x_2) (thm_2557 A r_1 x_2 y_3 p_4 hyp_1 hyp_2) thm_1.

(; Theorem: |- ((= ((p x) y)) Data.Bool.T) ;)

(; dict ;)

def thm_2559 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_4 x__1_5 y__1_6) (p_4 y__1_6 x__1_5)))) -> hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) -> hyp_3 : hol.proof (r_1 y_2 x_3) -> hol.proof (hol.eq hol.bool (p_4 x_3 y_2) hol.true) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_4 x__1_5 y__1_6) (p_4 y__1_6 x__1_5)))) => hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) => hyp_3 : hol.proof (r_1 y_2 x_3) => thm_2545 A x_3 y_2 p_4 hyp_1 (thm_2558 A r_1 x_3 y_2 p_4 hyp_2 hyp_3).

(; Theorem: |- ((= Data.Bool.T) ((p x) y)) ;)

(; dict ;)

def thm_2560 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_4 x__1_5 y__1_6) (p_4 y__1_6 x__1_5)))) -> hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) -> hyp_3 : hol.proof (r_1 y_2 x_3) -> hol.proof (hol.eq hol.bool hol.true (p_4 x_3 y_2)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_4 x__1_5 y__1_6) (p_4 y__1_6 x__1_5)))) => hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) => hyp_3 : hol.proof (r_1 y_2 x_3) => hol.SYM hol.bool (p_4 x_3 y_2) hol.true (thm_2559 A r_1 y_2 x_3 p_4 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_2561 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_4 x__1_5 y__1_6) (p_4 y__1_6 x__1_5)))) -> hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) -> hyp_3 : hol.proof (r_1 y_2 x_3) -> hol.proof (p_4 x_3 y_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_4 x__1_5 y__1_6) (p_4 y__1_6 x__1_5)))) => hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) => hyp_3 : hol.proof (r_1 y_2 x_3) => hol.EQ_MP hol.true (p_4 x_3 y_2) (thm_2560 A r_1 y_2 x_3 p_4 hyp_1 hyp_2 hyp_3) thm_1.

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_2562 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_4 x__1_5 y__1_6) (p_4 y__1_6 x__1_5)))) -> hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) -> hyp_3 : hol.proof (r_1 y_2 x_3) -> hol.proof (p_4 x_3 y_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_4 x__1_5 y__1_6) (p_4 y__1_6 x__1_5)))) => hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) => hyp_3 : hol.proof (r_1 y_2 x_3) => hol.PROVE_HYP (r_1 y_2 x_3) (p_4 x_3 y_2) (thm_2535 A x_3 y_2 r_1 hyp_3) (hyp_4 : hol.proof (r_1 y_2 x_3) => thm_2561 A r_1 y_2 x_3 p_4 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.==> ((r y) x)) ((p x) y)) ;)

(; dict ;)

def thm_2563 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> y_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_1 x__1_5 y__1_6) (p_1 y__1_6 x__1_5)))) -> hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_4 x__1_5 y__1_6) (p_1 x__1_5 y__1_6)))) -> hol.proof (hol.imp (r_4 y_3 x_2) (p_1 x_2 y_3)) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => y_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_1 x__1_5 y__1_6) (p_1 y__1_6 x__1_5)))) => hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_4 x__1_5 y__1_6) (p_1 x__1_5 y__1_6)))) => hyp_3 : hol.proof (r_4 y_3 x_2) => thm_2562 A r_4 y_3 x_2 p_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((= ((p y) x)) Data.Bool.T) ;)

(; dict ;)

def thm_2564 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) -> hyp_3 : hol.proof (r_1 x_2 y_3) -> hol.proof (hol.eq hol.bool (p_4 y_3 x_2) hol.true) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => y_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) => hyp_3 : hol.proof (r_1 x_2 y_3) => thm_2544 A y_3 x_2 p_4 hyp_1 (thm_2552 A r_1 y_3 x_2 p_4 hyp_2 hyp_3).

(; Theorem: |- ((= Data.Bool.T) ((p y) x)) ;)

(; dict ;)

def thm_2565 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) -> hyp_3 : hol.proof (r_1 x_2 y_3) -> hol.proof (hol.eq hol.bool hol.true (p_4 y_3 x_2)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => y_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) => hyp_3 : hol.proof (r_1 x_2 y_3) => hol.SYM hol.bool (p_4 y_3 x_2) hol.true (thm_2564 A r_1 x_2 y_3 p_4 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((p y) x) ;)

(; dict ;)

def thm_2566 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) -> hyp_3 : hol.proof (r_1 x_2 y_3) -> hol.proof (p_4 y_3 x_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => y_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) => hyp_3 : hol.proof (r_1 x_2 y_3) => hol.EQ_MP hol.true (p_4 y_3 x_2) (thm_2565 A r_1 x_2 y_3 p_4 hyp_1 hyp_2 hyp_3) thm_1.

(; Theorem: |- ((= ((p x) y)) Data.Bool.T) ;)

(; dict ;)

def thm_2567 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) -> hyp_3 : hol.proof (r_1 x_3 y_2) -> hol.proof (hol.eq hol.bool (p_4 x_3 y_2) hol.true) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) => hyp_3 : hol.proof (r_1 x_3 y_2) => thm_2545 A x_3 y_2 p_4 hyp_1 (thm_2566 A r_1 x_3 y_2 p_4 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= Data.Bool.T) ((p x) y)) ;)

(; dict ;)

def thm_2568 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) -> hyp_3 : hol.proof (r_1 x_3 y_2) -> hol.proof (hol.eq hol.bool hol.true (p_4 x_3 y_2)) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) => hyp_3 : hol.proof (r_1 x_3 y_2) => hol.SYM hol.bool (p_4 x_3 y_2) hol.true (thm_2567 A r_1 y_2 x_3 p_4 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_2569 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) -> hyp_3 : hol.proof (r_1 x_3 y_2) -> hol.proof (p_4 x_3 y_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) => hyp_3 : hol.proof (r_1 x_3 y_2) => hol.EQ_MP hol.true (p_4 x_3 y_2) (thm_2568 A r_1 y_2 x_3 p_4 hyp_1 hyp_2 hyp_3) thm_1.

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_2570 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) -> hyp_3 : hol.proof (r_1 x_3 y_2) -> hol.proof (p_4 x_3 y_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) => hyp_3 : hol.proof (r_1 x_3 y_2) => hol.PROVE_HYP (r_1 x_3 y_2) (p_4 x_3 y_2) (thm_2551 A y_2 x_3 r_1 hyp_3) (hyp_4 : hol.proof (r_1 x_3 y_2) => thm_2569 A r_1 y_2 x_3 p_4 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((Data.Bool.==> ((r x) y)) ((p x) y)) ;)

(; dict ;)

def thm_2571 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_1 x_5 y_6) (p_1 y_6 x_5)))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_4 x_5 y_6) (p_1 x_5 y_6)))) -> hol.proof (hol.imp (r_4 x_3 y_2) (p_1 x_3 y_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_1 x_5 y_6) (p_1 y_6 x_5)))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_4 x_5 y_6) (p_1 x_5 y_6)))) => hyp_3 : hol.proof (r_4 x_3 y_2) => thm_2570 A r_4 y_2 x_3 p_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ ((r x) y)) ((r y) x)) ;)

(; dict ;)

def thm_2572 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.or (r_3 x_2 y_1) (r_3 y_1 x_2)) -> hol.proof (hol.or (r_3 x_2 y_1) (r_3 y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.or (r_3 x_2 y_1) (r_3 y_1 x_2)) => hyp_1.

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_2573 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.imp (r_1 x_3 y_2) (p_4 x_3 y_2)) -> hyp_2 : hol.proof (hol.imp (r_1 y_2 x_3) (p_4 x_3 y_2)) -> hyp_3 : hol.proof (hol.or (r_1 x_3 y_2) (r_1 y_2 x_3)) -> hol.proof (p_4 x_3 y_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.imp (r_1 x_3 y_2) (p_4 x_3 y_2)) => hyp_2 : hol.proof (hol.imp (r_1 y_2 x_3) (p_4 x_3 y_2)) => hyp_3 : hol.proof (hol.or (r_1 x_3 y_2) (r_1 y_2 x_3)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_295 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (r_1 y_2 x_3) (r_1 x_3 y_2) (p_4 x_3 y_2) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_2574 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.imp (r_1 x_3 y_2) (p_4 x_3 y_2)) -> hyp_2 : hol.proof (hol.imp (r_1 y_2 x_3) (p_4 x_3 y_2)) -> hyp_3 : hol.proof (hol.or (r_1 x_3 y_2) (r_1 y_2 x_3)) -> hol.proof (p_4 x_3 y_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.imp (r_1 x_3 y_2) (p_4 x_3 y_2)) => hyp_2 : hol.proof (hol.imp (r_1 y_2 x_3) (p_4 x_3 y_2)) => hyp_3 : hol.proof (hol.or (r_1 x_3 y_2) (r_1 y_2 x_3)) => hol.PROVE_HYP (hol.or (r_1 x_3 y_2) (r_1 y_2 x_3)) (p_4 x_3 y_2) (thm_2572 A y_2 x_3 r_1 hyp_3) (hyp_4 : hol.proof (hol.or (r_1 x_3 y_2) (r_1 y_2 x_3)) => thm_2573 A r_1 y_2 x_3 p_4 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_2575 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) -> hyp_3 : hol.proof (hol.imp (r_1 y_2 x_3) (p_4 x_3 y_2)) -> hyp_4 : hol.proof (hol.or (r_1 x_3 y_2) (r_1 y_2 x_3)) -> hol.proof (p_4 x_3 y_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (p_4 x_5 y_6) (p_4 y_6 x_5)))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (r_1 x_5 y_6) (p_4 x_5 y_6)))) => hyp_3 : hol.proof (hol.imp (r_1 y_2 x_3) (p_4 x_3 y_2)) => hyp_4 : hol.proof (hol.or (r_1 x_3 y_2) (r_1 y_2 x_3)) => hol.PROVE_HYP (hol.imp (r_1 x_3 y_2) (p_4 x_3 y_2)) (p_4 x_3 y_2) (thm_2571 A p_4 y_2 x_3 r_1 hyp_1 hyp_2) (hyp_5 : hol.proof (hol.imp (r_1 x_3 y_2) (p_4 x_3 y_2)) => thm_2574 A r_1 y_2 x_3 p_4 hyp_5 hyp_3 hyp_4).

(; Theorem: |- ((p x) y) ;)

(; dict ;)

def thm_2576 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_4 x__1_5 y__1_6) (p_4 y__1_6 x__1_5)))) -> hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) -> hyp_3 : hol.proof (hol.or (r_1 x_3 y_2) (r_1 y_2 x_3)) -> hol.proof (p_4 x_3 y_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_4 x__1_5 y__1_6) (p_4 y__1_6 x__1_5)))) => hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_1 x__1_5 y__1_6) (p_4 x__1_5 y__1_6)))) => hyp_3 : hol.proof (hol.or (r_1 x_3 y_2) (r_1 y_2 x_3)) => hol.PROVE_HYP (hol.imp (r_1 y_2 x_3) (p_4 x_3 y_2)) (p_4 x_3 y_2) (thm_2563 A p_4 x_3 y_2 r_1 hyp_1 hyp_2) (hyp_4 : hol.proof (hol.imp (r_1 y_2 x_3) (p_4 x_3 y_2)) => thm_2575 A r_1 y_2 x_3 p_4 hyp_1 hyp_2 hyp_4 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y)) ;)

(; dict ;)

def thm_2577 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> y_2 : hol.term A -> x_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_1 x__1_5 y__1_6) (p_1 y__1_6 x__1_5)))) -> hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_4 x__1_5 y__1_6) (p_1 x__1_5 y__1_6)))) -> hol.proof (hol.imp (hol.or (r_4 x_3 y_2) (r_4 y_2 x_3)) (p_1 x_3 y_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => y_2 : hol.term A => x_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (p_1 x__1_5 y__1_6) (p_1 y__1_6 x__1_5)))) => hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y__1_6 : hol.term A => hol.imp (r_4 x__1_5 y__1_6) (p_1 x__1_5 y__1_6)))) => hyp_3 : hol.proof (hol.or (r_4 x_3 y_2) (r_4 y_2 x_3)) => thm_2576 A r_4 y_2 x_3 p_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool.\/ ((r x) y)) ((r y) x))) ((p x) y))) ;)

(; dict ;)

def thm_2578 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall A (y__1_5 : hol.term A => hol.imp (p_1 x__1_4 y__1_5) (p_1 y__1_5 x__1_4)))) -> hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall A (y__1_5 : hol.term A => hol.imp (r_3 x__1_4 y__1_5) (p_1 x__1_4 y__1_5)))) -> hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall A (y__1_5 : hol.term A => hol.imp (p_1 x__1_4 y__1_5) (p_1 y__1_5 x__1_4)))) => hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall A (y__1_5 : hol.term A => hol.imp (r_3 x__1_4 y__1_5) (p_1 x__1_4 y__1_5)))) => y_4 : hol.term A => thm_2577 A p_1 y_4 x_2 r_3 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_2579 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall A (y__1_5 : hol.term A => hol.imp (p_1 x__1_4 y__1_5) (p_1 y__1_5 x__1_4)))) -> hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall A (y__1_5 : hol.term A => hol.imp (r_3 x__1_4 y__1_5) (p_1 x__1_4 y__1_5)))) -> hol.proof (hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_3 x_2 y_4) (r_3 y_4 x_2))) (hol.forall A (y_4 : hol.term A => p_1 x_2 y_4))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall A (y__1_5 : hol.term A => hol.imp (p_1 x__1_4 y__1_5) (p_1 y__1_5 x__1_4)))) => hyp_2 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall A (y__1_5 : hol.term A => hol.imp (r_3 x__1_4 y__1_5) (p_1 x__1_4 y__1_5)))) => thm_2531 A p_1 x_2 r_3 (hol.EQ_MP (hol.forall A (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4))) (hol.forall A (y_4 : hol.term A => hol.imp (hol.or (r_3 x_2 y_4) (r_3 y_4 x_2)) (p_1 x_2 y_4))) (thm_2534 A p_1 x_2 r_3) (thm_2578 A p_1 x_2 r_3 hyp_1 hyp_2)).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) (Data.Bool.! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_2580 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (p_1 x__1_3 y__1_4) (p_1 y__1_4 x__1_3)))) -> hyp_2 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (r_2 x__1_3 y__1_4) (p_1 x__1_3 y__1_4)))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (p_1 x__1_3 y__1_4) (p_1 y__1_4 x__1_3)))) => hyp_2 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (r_2 x__1_3 y__1_4) (p_1 x__1_3 y__1_4)))) => x_3 : hol.term A => thm_2579 A p_1 x_3 r_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_2581 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (p_1 x__1_3 y__1_4) (p_1 y__1_4 x__1_3)))) -> hyp_2 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (r_2 x__1_3 y__1_4) (p_1 x__1_3 y__1_4)))) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (p_1 x__1_3 y__1_4) (p_1 y__1_4 x__1_3)))) => hyp_2 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (r_2 x__1_3 y__1_4) (p_1 x__1_3 y__1_4)))) => thm_2508 A p_1 r_2 (hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3))) (hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) (thm_2511 A p_1 r_2) (thm_2580 A p_1 r_2 hyp_1 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_2582 : A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (p_1 x__1_3 y__1_4) (p_1 y__1_4 x__1_3)))) -> hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (p_1 x__1_3 y__1_4) (p_1 y__1_4 x__1_3)))) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))) (hol.imp (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_2 x_3 y_4) (r_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_1 x_3 y_4)))) (thm_2492 A p_1 r_2 hyp_2) (hyp_3 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 x_3 y_4) (p_1 x_3 y_4)))) => thm_2581 A p_1 r_2 hyp_1 hyp_3).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x)))) ;)

(; dict ;)

def thm_2583 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.or (r_1 x_2 y_3) (r_1 y_3 x_2)))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.or (r_1 x_2 y_3) (r_1 y_3 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.or (r_1 x_2 y_3) (r_1 y_3 x_2)))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_2584 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (p_2 x__1_3 y__1_4) (p_2 y__1_4 x__1_3)))) -> hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))) -> hyp_3 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (p_2 x__1_3 y__1_4) (p_2 y__1_4 x__1_3)))) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))) => hyp_3 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) => thm_2582 A p_2 r_1 hyp_1 hyp_2 (thm_2583 A r_1 hyp_3).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_2585 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (p_2 x__1_3 y__1_4) (p_2 y__1_4 x__1_3)))) -> hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) -> hyp_3 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4))))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (p_2 x__1_3 y__1_4) (p_2 y__1_4 x__1_3)))) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) => hyp_3 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4))))) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))) (thm_2491 A p_2 r_1 hyp_3) (hyp_4 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))) => thm_2584 A r_1 p_2 hyp_1 hyp_4 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_2586 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (p_2 x__1_3 y__1_4) (p_2 y__1_4 x__1_3)))) -> hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4))))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall A (y__1_4 : hol.term A => hol.imp (p_2 x__1_3 y__1_4) (p_2 y__1_4 x__1_3)))) => hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4))))) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))) (thm_2489 A p_2 r_1 hyp_2) (hyp_3 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) => thm_2585 A r_1 p_2 hyp_1 hyp_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_2587 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) -> hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4))))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) => hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4))))) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))) (thm_2486 A p_2 hyp_1) (hyp_3 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) => thm_2586 A r_1 p_2 hyp_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_2588 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) -> hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) => hyp_2 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) => hol.PROVE_HYP (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))) (thm_2485 A p_2 r_1 hyp_2) (hyp_3 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4))))) => thm_2587 A r_1 p_2 hyp_1 hyp_3).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_2589 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))) (thm_2483 A r_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) => thm_2588 A r_1 p_2 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_2590 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) => thm_2589 A r_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y))))) ;)

(; dict ;)

def thm_2591 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => thm_2590 A r_1 p_2.

(; Theorem: |- (Data.Bool.! \lambda r. (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))))) ;)

(; dict ;)

def thm_2592 : A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4))))) (thm_2480 A r_1) (thm_2591 A r_1).

(; Theorem: |- (Data.Bool.! \lambda r. (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((p x) y)) ((p y) x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.\/ ((r x) y)) ((r y) x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r x) y)) ((p x) y))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((p x) y)))))) ;)

(; thm ;)

def thm_2593 : A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall (hol.arr A (hol.arr A hol.bool)) (p_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (p_2 x_3 y_4) (p_2 y_4 x_3)))) (hol.and (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.or (r_1 x_3 y_4) (r_1 y_4 x_3)))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_1 x_3 y_4) (p_2 x_3 y_4)))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => p_2 x_3 y_4)))))) (thm_2477 A) (thm_2592 A).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ;)

(; dict ;)

def thm_2594 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ;)

(; dict ;)

def thm_2595 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (thm_2594 A) (thm_2594 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))))) (Data.Bool.! \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))))) ;)

(; dict ;)

def thm_2596 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (thm_1102 A) (thm_2595 A).

(; Theorem: |- ((= (= (Data.Bool.?! \lambda x. (p x)))) (= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ;)

(; dict ;)

def thm_2597 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) thm_1106 (thm_1157 A p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) ;)

(; dict ;)

def thm_2598 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ;)

(; dict ;)

def thm_2599 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (thm_2597 A p_1) (thm_2598 A p_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ;)

(; dict ;)

def thm_2600 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (thm_2599 A p_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))) x)) ((Data.Bool./\ (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x'')))))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) ((Data.Bool./\ (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x''))))))) ;)

(; dict ;)

def thm_2601 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 y_4) (hol.eq A x_3 y_4))) x_2) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_1 x_27_3)) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_1 x_27_3) (p_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2)) (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (p_1 x_27_2) (p_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2)) (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (p_1 x_27_2) (p_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))))) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))).

(; Theorem: |- ((= ((= \lambda _377. (p _377)) \lambda _377. ((= x) _377))) ((= \lambda _377. (p _377)) \lambda _377. ((= x) _377))) ;)

(; dict ;)

def thm_2602 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (__377_3 : hol.term A => p_2 __377_3) (__377_3 : hol.term A => hol.eq A x_1 __377_3)) (hol.eq (hol.arr A hol.bool) (__377_3 : hol.term A => p_2 __377_3) (__377_3 : hol.term A => hol.eq A x_1 __377_3))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq (hol.arr A hol.bool) (__377_3 : hol.term A => p_2 __377_3) (__377_3 : hol.term A => hol.eq A x_1 __377_3)).

(; Theorem: |- ((= ((= \lambda x'. (p x')) \lambda x'. ((= x) x'))) ((= \lambda x'. (p x')) \lambda x'. ((= x) x'))) ;)

(; dict ;)

def thm_2603 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_1 x_27_3)) (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_1 x_27_3))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_1 x_27_3)).

(; Theorem: |- ((= ((= \lambda _377. (p _377)) \lambda _377. ((= x) _377))) ((= \lambda x'. (p x')) \lambda x'. ((= x) x'))) ;)

(; dict ;)

def thm_2604 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (__377_3 : hol.term A => p_2 __377_3) (__377_3 : hol.term A => hol.eq A x_1 __377_3)) (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_1 x_27_3))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq (hol.arr A hol.bool) (__377_3 : hol.term A => p_2 __377_3) (__377_3 : hol.term A => hol.eq A x_1 __377_3)) (hol.eq (hol.arr A hol.bool) (__377_3 : hol.term A => p_2 __377_3) (__377_3 : hol.term A => hol.eq A x_1 __377_3)) (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_1 x_27_3)) (thm_2602 A x_1 p_2) (thm_2603 A x_1 p_2).

(; Theorem: |- ((= ((= (p y)) ((= x) y))) ((= (p y)) ((= x) y))) ;)

(; dict ;)

def thm_2605 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 y_2) (hol.eq A x_1 y_2)) (hol.eq hol.bool (p_3 y_2) (hol.eq A x_1 y_2))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_3 y_2) (hol.eq A x_1 y_2)).

(; Theorem: |- ((= ((= (p y)) ((= x) y))) ((= (p y)) ((= x) y))) ;)

(; dict ;)

def thm_2606 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 y_2) (hol.eq A x_1 y_2)) (hol.eq hol.bool (p_3 y_2) (hol.eq A x_1 y_2))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_3 y_2) (hol.eq A x_1 y_2)) (hol.eq hol.bool (p_3 y_2) (hol.eq A x_1 y_2)) (hol.eq hol.bool (p_3 y_2) (hol.eq A x_1 y_2)) (thm_2605 A x_1 y_2 p_3) (thm_2605 A x_1 y_2 p_3).

(; Theorem: |- (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))) ;)

(; dict ;)

def thm_2607 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) -> hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) => hyp_1.

(; Theorem: |- ((= (p y)) ((= x) y)) ;)

(; dict ;)

def thm_2608 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) -> hol.proof (hol.eq hol.bool (p_3 y_2) (hol.eq A x_1 y_2)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) => thm_2607 A x_1 p_3 hyp_1 y_2.

(; Theorem: |- ((= (p _377)) ((= x) _377)) ;)

(; dict ;)

def thm_2609 : A : hol.type -> x_1 : hol.term A -> __377_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) -> hol.proof (hol.eq hol.bool (p_3 __377_2) (hol.eq A x_1 __377_2)) :=
  A : hol.type => x_1 : hol.term A => __377_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) => (A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) => (A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) => hol.EQ_MP (hol.eq hol.bool (p_3 y_2) (hol.eq A x_1 y_2)) (hol.eq hol.bool (p_3 y_2) (hol.eq A x_1 y_2)) (thm_2606 A x_1 y_2 p_3) (thm_2608 A x_1 y_2 p_3 hyp_1)) A x_1 y_2 p_3 hyp_1) A x_1 __377_2 p_3 hyp_1.

(; Theorem: |- ((= \lambda _377. (p _377)) \lambda _377. ((= x) _377)) ;)

(; dict ;)

def thm_2610 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) -> hol.proof (hol.eq (hol.arr A hol.bool) (__377_3 : hol.term A => p_2 __377_3) (__377_3 : hol.term A => hol.eq A x_1 __377_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) => hol.ABS_THM A hol.bool (__377_3 : hol.term A => p_2 __377_3) (__377_3 : hol.term A => hol.eq A x_1 __377_3) (__377_3 : hol.term A => thm_2609 A x_1 __377_3 p_2 hyp_1).

(; Theorem: |- ((= \lambda x'. (p x')) \lambda x'. ((= x) x')) ;)

(; dict ;)

def thm_2611 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_1 x_27_3)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) => hol.EQ_MP (hol.eq (hol.arr A hol.bool) (__377_3 : hol.term A => p_2 __377_3) (__377_3 : hol.term A => hol.eq A x_1 __377_3)) (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_1 x_27_3)) (thm_2604 A x_1 p_2) (thm_2610 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.? \lambda x'. ((= x) x'))) ;)

(; dict ;)

def thm_2612 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_1 x_27_3))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_1 x_27_3) (thm_1179 A) (thm_2611 A x_1 p_2 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((= a) x))) Data.Bool.T)) ((= (Data.Bool.? \lambda x. ((= a) x))) Data.Bool.T)) ;)

(; dict ;)

def thm_2613 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) hol.true)) :=
  A : hol.type => a_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x'. ((= a) x'))) Data.Bool.T)) ((= (Data.Bool.? \lambda x'. ((= a) x'))) Data.Bool.T)) ;)

(; dict ;)

def thm_2614 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A a_1 x_27_2)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A a_1 x_27_2)) hol.true)) :=
  A : hol.type => a_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A a_1 x_27_2)) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((= a) x))) Data.Bool.T)) ((= (Data.Bool.? \lambda x'. ((= a) x'))) Data.Bool.T)) ;)

(; dict ;)

def thm_2615 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A a_1 x_27_2)) hol.true)) :=
  A : hol.type => a_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A a_1 x_27_2)) hol.true) (thm_2613 A a_1) (thm_2614 A a_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((= a) x))) ((= (Data.Bool.? \lambda x. ((= a) x))) Data.Bool.T)) ;)

(; dict ;)

def thm_2616 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) hol.true)) :=
  A : hol.type => a_1 : hol.term A => (t_1 : hol.term hol.bool => thm_140 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)).

(; Theorem: |- ((= \lambda x. ((= x) a)) \lambda x. ((= a) x)) ;)

(; dict ;)

def thm_2617 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1) (x_2 : hol.term A => hol.eq A a_1 x_2)) :=
  A : hol.type => a_1 : hol.term A => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.eq A x_2 a_1) (x_2 : hol.term A => hol.eq A a_1 x_2) (x_2 : hol.term A => thm_1292 A a_1 x_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((= x) a))) (Data.Bool.? \lambda x. ((= a) x))) ;)

(; dict ;)

def thm_2618 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2))) :=
  A : hol.type => a_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => hol.eq A x_2 a_1) (x_2 : hol.term A => hol.eq A a_1 x_2) (thm_1179 A) (thm_2617 A a_1).

(; Theorem: |- ((= \lambda a. (Data.Bool.? \lambda x. ((= x) a))) \lambda a. (Data.Bool.? \lambda x. ((= a) x))) ;)

(; dict ;)

def thm_2619 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2))) :=
  A : hol.type => hol.ABS_THM A hol.bool (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) (a_1 : hol.term A => thm_2618 A a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.? \lambda x. ((= x) a)))) (Data.Bool.! \lambda a. (Data.Bool.? \lambda x. ((= a) x)))) ;)

(; dict ;)

def thm_2620 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) (thm_7 A) (thm_2619 A).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.? \lambda x. ((= a) x))) ;)

(; dict ;)

def thm_2621 : A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2))) :=
  A : hol.type => hol.EQ_MP (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1))) (hol.forall A (a_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2))) (thm_2620 A) (thm_1169 A).

(; Theorem: |- (Data.Bool.? \lambda x. ((= a) x)) ;)

(; dict ;)

def thm_2622 : A : hol.type -> a_1 : hol.term A -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) :=
  A : hol.type => a_1 : hol.term A => thm_2621 A a_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((= a) x))) Data.Bool.T) ;)

(; dict ;)

def thm_2623 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) hol.true) :=
  A : hol.type => a_1 : hol.term A => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) hol.true) (thm_2616 A a_1) (thm_2622 A a_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x'. ((= a) x'))) Data.Bool.T) ;)

(; dict ;)

def thm_2624 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A a_1 x_27_2)) hol.true) :=
  A : hol.type => a_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A a_1 x_2)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A a_1 x_27_2)) hol.true) (thm_2615 A a_1) (thm_2623 A a_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x'. ((= x) x'))) Data.Bool.T) ;)

(; dict ;)

def thm_2625 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A x_1 x_27_2)) hol.true) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => a_1 : hol.term A => (A : hol.type => a_1 : hol.term A => thm_2624 A a_1) A a_1) A x_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x'. (p x'))) Data.Bool.T) ;)

(; dict ;)

def thm_2626 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3)) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_1 x_27_3)) hol.true (thm_2612 A x_1 p_2 hyp_1) (thm_2625 A x_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.? \lambda x'. (p x')))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_2627 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3))) (hol.and hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3)) hol.true thm_1119 (thm_2626 A x_1 p_2 hyp_1).

(; Theorem: |- ((= ((= \lambda _378. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p _378)) (p x'))) ((= _378) x')))) \lambda _378. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) _378)) ((= x) x'))) ((= _378) x'))))) ((= \lambda _378. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p _378)) (p x'))) ((= _378) x')))) \lambda _378. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) _378)) ((= x) x'))) ((= _378) x'))))) ;)

(; dict ;)

def thm_2628 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 __378_3) (p_2 x_27_4)) (hol.eq A __378_3 x_27_4))) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_4)) (hol.eq A __378_3 x_27_4)))) (hol.eq (hol.arr A hol.bool) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 __378_3) (p_2 x_27_4)) (hol.eq A __378_3 x_27_4))) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_4)) (hol.eq A __378_3 x_27_4))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq (hol.arr A hol.bool) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 __378_3) (p_2 x_27_4)) (hol.eq A __378_3 x_27_4))) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_4)) (hol.eq A __378_3 x_27_4)))).

(; Theorem: |- ((= ((= \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x'')))) \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))))) ((= \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x'')))) \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))))) ;)

(; dict ;)

def thm_2629 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))) (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))).

(; Theorem: |- ((= ((= \lambda _378. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p _378)) (p x'))) ((= _378) x')))) \lambda _378. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) _378)) ((= x) x'))) ((= _378) x'))))) ((= \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x'')))) \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))))) ;)

(; dict ;)

def thm_2630 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 __378_3) (p_2 x_27_4)) (hol.eq A __378_3 x_27_4))) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_4)) (hol.eq A __378_3 x_27_4)))) (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq (hol.arr A hol.bool) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 __378_3) (p_2 x_27_4)) (hol.eq A __378_3 x_27_4))) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_4)) (hol.eq A __378_3 x_27_4)))) (hol.eq (hol.arr A hol.bool) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 __378_3) (p_2 x_27_4)) (hol.eq A __378_3 x_27_4))) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_4)) (hol.eq A __378_3 x_27_4)))) (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))) (thm_2628 A x_1 p_2) (thm_2629 A x_1 p_2).

(; Theorem: |- ((= (p _378)) ((= x) _378)) ;)

(; dict ;)

def thm_2631 : A : hol.type -> x_1 : hol.term A -> __378_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) -> hol.proof (hol.eq hol.bool (p_3 __378_2) (hol.eq A x_1 __378_2)) :=
  A : hol.type => x_1 : hol.term A => __378_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) => (A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) => thm_2608 A x_1 y_2 p_3 hyp_1) A x_1 __378_2 p_3 hyp_1.

(; Theorem: |- ((= (Data.Bool./\ (p _378))) (Data.Bool./\ ((= x) _378))) ;)

(; dict ;)

def thm_2632 : A : hol.type -> x_1 : hol.term A -> __378_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (p_3 __378_2)) (hol.and (hol.eq A x_1 __378_2))) :=
  A : hol.type => x_1 : hol.term A => __378_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (p_3 __378_2) (hol.eq A x_1 __378_2) thm_1119 (thm_2631 A x_1 __378_2 p_3 hyp_1).

(; Theorem: |- ((= (p x')) ((= x) x')) ;)

(; dict ;)

def thm_2633 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) -> hol.proof (hol.eq hol.bool (p_3 x_27_2) (hol.eq A x_1 x_27_2)) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) => (A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) => thm_2608 A x_1 y_2 p_3 hyp_1) A x_1 x_27_2 p_3 hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ (p _378)) (p x'))) ((Data.Bool./\ ((= x) _378)) ((= x) x'))) ;)

(; dict ;)

def thm_2634 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> __378_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_5 : hol.term A => hol.eq hol.bool (p_4 y_5) (hol.eq A x_1 y_5))) -> hol.proof (hol.eq hol.bool (hol.and (p_4 __378_3) (p_4 x_27_2)) (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_2))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => __378_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_5 : hol.term A => hol.eq hol.bool (p_4 y_5) (hol.eq A x_1 y_5))) => hol.APP_THM hol.bool hol.bool (hol.and (p_4 __378_3)) (hol.and (hol.eq A x_1 __378_3)) (p_4 x_27_2) (hol.eq A x_1 x_27_2) (thm_2632 A x_1 __378_3 p_4 hyp_1) (thm_2633 A x_1 x_27_2 p_4 hyp_1).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool./\ (p _378)) (p x')))) (Data.Bool.==> ((Data.Bool./\ ((= x) _378)) ((= x) x')))) ;)

(; dict ;)

def thm_2635 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> __378_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_5 : hol.term A => hol.eq hol.bool (p_4 y_5) (hol.eq A x_1 y_5))) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.and (p_4 __378_3) (p_4 x_27_2))) (hol.imp (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_2)))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => __378_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_5 : hol.term A => hol.eq hol.bool (p_4 y_5) (hol.eq A x_1 y_5))) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.and (p_4 __378_3) (p_4 x_27_2)) (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_2)) thm_1118 (thm_2634 A x_1 x_27_2 __378_3 p_4 hyp_1).

(; Theorem: |- ((= ((= _378) x')) ((= _378) x')) ;)

(; dict ;)

def thm_2636 : A : hol.type -> x_27_1 : hol.term A -> __378_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A __378_2 x_27_1) (hol.eq A __378_2 x_27_1)) :=
  A : hol.type => x_27_1 : hol.term A => __378_2 : hol.term A => hol.REFL hol.bool (hol.eq A __378_2 x_27_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (p _378)) (p x'))) ((= _378) x'))) ((Data.Bool.==> ((Data.Bool./\ ((= x) _378)) ((= x) x'))) ((= _378) x'))) ;)

(; dict ;)

def thm_2637 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> __378_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_5 : hol.term A => hol.eq hol.bool (p_4 y_5) (hol.eq A x_1 y_5))) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (p_4 __378_3) (p_4 x_27_2)) (hol.eq A __378_3 x_27_2)) (hol.imp (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_2)) (hol.eq A __378_3 x_27_2))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => __378_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_5 : hol.term A => hol.eq hol.bool (p_4 y_5) (hol.eq A x_1 y_5))) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.and (p_4 __378_3) (p_4 x_27_2))) (hol.imp (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_2))) (hol.eq A __378_3 x_27_2) (hol.eq A __378_3 x_27_2) (thm_2635 A x_1 x_27_2 __378_3 p_4 hyp_1) (thm_2636 A x_27_2 __378_3).

(; Theorem: |- ((= \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p _378)) (p x'))) ((= _378) x'))) \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) _378)) ((= x) x'))) ((= _378) x'))) ;)

(; dict ;)

def thm_2638 : A : hol.type -> x_1 : hol.term A -> __378_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_4 : hol.term A => hol.imp (hol.and (p_3 __378_2) (p_3 x_27_4)) (hol.eq A __378_2 x_27_4)) (x_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 __378_2) (hol.eq A x_1 x_27_4)) (hol.eq A __378_2 x_27_4))) :=
  A : hol.type => x_1 : hol.term A => __378_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) => hol.ABS_THM A hol.bool (x_27_4 : hol.term A => hol.imp (hol.and (p_3 __378_2) (p_3 x_27_4)) (hol.eq A __378_2 x_27_4)) (x_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 __378_2) (hol.eq A x_1 x_27_4)) (hol.eq A __378_2 x_27_4)) (x_27_4 : hol.term A => thm_2637 A x_1 x_27_4 __378_2 p_3 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p _378)) (p x'))) ((= _378) x')))) (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) _378)) ((= x) x'))) ((= _378) x')))) ;)

(; dict ;)

def thm_2639 : A : hol.type -> x_1 : hol.term A -> __378_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_3 __378_2) (p_3 x_27_4)) (hol.eq A __378_2 x_27_4))) (hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 __378_2) (hol.eq A x_1 x_27_4)) (hol.eq A __378_2 x_27_4)))) :=
  A : hol.type => x_1 : hol.term A => __378_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A x_1 y_4))) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_27_4 : hol.term A => hol.imp (hol.and (p_3 __378_2) (p_3 x_27_4)) (hol.eq A __378_2 x_27_4)) (x_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 __378_2) (hol.eq A x_1 x_27_4)) (hol.eq A __378_2 x_27_4)) (thm_7 A) (thm_2638 A x_1 __378_2 p_3 hyp_1).

(; Theorem: |- ((= \lambda _378. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p _378)) (p x'))) ((= _378) x')))) \lambda _378. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((= x) _378)) ((= x) x'))) ((= _378) x')))) ;)

(; dict ;)

def thm_2640 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) -> hol.proof (hol.eq (hol.arr A hol.bool) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 __378_3) (p_2 x_27_4)) (hol.eq A __378_3 x_27_4))) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_4)) (hol.eq A __378_3 x_27_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) => hol.ABS_THM A hol.bool (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 __378_3) (p_2 x_27_4)) (hol.eq A __378_3 x_27_4))) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_4)) (hol.eq A __378_3 x_27_4))) (__378_3 : hol.term A => thm_2639 A x_1 __378_3 p_2 hyp_1).

(; Theorem: |- ((= \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x'')))) \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x'')))) ;)

(; dict ;)

def thm_2641 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) => hol.EQ_MP (hol.eq (hol.arr A hol.bool) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 __378_3) (p_2 x_27_4)) (hol.eq A __378_3 x_27_4))) (__378_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 __378_3) (hol.eq A x_1 x_27_4)) (hol.eq A __378_3 x_27_4)))) (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))) (thm_2630 A x_1 p_2) (thm_2640 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x''))))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))))) ;)

(; dict ;)

def thm_2642 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))) (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))) (thm_7 A) (thm_2641 A x_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x'')))))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x'')))))) ;)

(; dict ;)

def thm_2643 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3)) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))) (hol.and hol.true (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) => hol.APP_THM hol.bool hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3))) (hol.and hol.true) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))) (thm_2627 A x_1 p_2 hyp_1) (thm_2642 A x_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x'')))))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))))) ;)

(; dict ;)

def thm_2644 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and hol.true (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))))) (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))))) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_972 t_1) (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3)))).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x'')))))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))))) ;)

(; dict ;)

def thm_2645 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3)) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) => hol.TRANS hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3)) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))) (hol.and hol.true (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))) (thm_2643 A x_1 p_2 hyp_1) (thm_2644 A x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))))) ((Data.Bool./\ (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x'')))))) ;)

(; dict ;)

def thm_2646 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_3) (hol.eq A x_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_1 x_27_3)) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_1 x_27_3) (p_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) => hol.SYM hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_1 x_27_3)) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_1 x_27_3) (p_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_3) (hol.eq A x_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))) (thm_2645 A x_2 p_1 hyp_1).

(; Theorem: |- ((= \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x'')))) \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x'')))) ;)

(; dict ;)

def thm_2647 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))) (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3)))) :=
  A : hol.type => x_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))).

(; Theorem: |- ((= \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x'')))) \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x'')))) ;)

(; dict ;)

def thm_2648 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))) (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3)))) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS (hol.arr A hol.bool) (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))) (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))) (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))) (thm_2647 A x_1) (thm_2647 A x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))))) ;)

(; dict ;)

def thm_2649 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3)))) (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))) (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))) (thm_7 A) (thm_2648 A x_1).

(; Theorem: |- ((= \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))) \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))) ;)

(; dict ;)

def thm_2650 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_27_3)) (hol.eq A x_27_1 x_27_27_3)) (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_27_3)) (hol.eq A x_27_1 x_27_27_3))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => hol.REFL (hol.arr A hol.bool) (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_27_3)) (hol.eq A x_27_1 x_27_27_3)).

(; Theorem: |- ((= \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))) \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))) ;)

(; dict ;)

def thm_2651 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_27_3)) (hol.eq A x_27_1 x_27_27_3)) (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_27_3)) (hol.eq A x_27_1 x_27_27_3))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => hol.TRANS (hol.arr A hol.bool) (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_27_3)) (hol.eq A x_27_1 x_27_27_3)) (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_27_3)) (hol.eq A x_27_1 x_27_27_3)) (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_27_3)) (hol.eq A x_27_1 x_27_27_3)) (thm_2650 A x_27_1 x_2) (thm_2650 A x_27_1 x_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x'')))) (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x'')))) ;)

(; dict ;)

def thm_2652 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_27_3)) (hol.eq A x_27_1 x_27_27_3))) (hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_27_3)) (hol.eq A x_27_1 x_27_27_3)))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_27_3)) (hol.eq A x_27_1 x_27_27_3)) (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_27_3)) (hol.eq A x_27_1 x_27_27_3)) (thm_7 A) (thm_2651 A x_27_1 x_2).

(; Theorem: |- ((Data.Bool./\ ((= x) x')) ((= x) x'')) ;)

(; dict ;)

def thm_2653 : A : hol.type -> x_27_27_1 : hol.term A -> x_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_3 x_27_2) (hol.eq A x_3 x_27_27_1)) -> hol.proof (hol.and (hol.eq A x_3 x_27_2) (hol.eq A x_3 x_27_27_1)) :=
  A : hol.type => x_27_27_1 : hol.term A => x_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 x_27_2) (hol.eq A x_3 x_27_27_1)) => hyp_1.

(; Theorem: |- ((= x) x') ;)

(; dict ;)

def thm_2654 : A : hol.type -> x_27_27_1 : hol.term A -> x_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_3 x_27_2) (hol.eq A x_3 x_27_27_1)) -> hol.proof (hol.eq A x_3 x_27_2) :=
  A : hol.type => x_27_27_1 : hol.term A => x_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 x_27_2) (hol.eq A x_3 x_27_27_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.eq A x_3 x_27_27_1) (hol.eq A x_3 x_27_2) hyp_1.

(; Theorem: |- ((= x) x') ;)

(; dict ;)

def thm_2655 : A : hol.type -> x_27_27_1 : hol.term A -> x_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_3 x_27_2) (hol.eq A x_3 x_27_27_1)) -> hol.proof (hol.eq A x_3 x_27_2) :=
  A : hol.type => x_27_27_1 : hol.term A => x_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 x_27_2) (hol.eq A x_3 x_27_27_1)) => hol.PROVE_HYP (hol.and (hol.eq A x_3 x_27_2) (hol.eq A x_3 x_27_27_1)) (hol.eq A x_3 x_27_2) (thm_2653 A x_27_27_1 x_27_2 x_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A x_3 x_27_2) (hol.eq A x_3 x_27_27_1)) => thm_2654 A x_27_27_1 x_27_2 x_3 hyp_2).

(; Theorem: |- ((= x) x'') ;)

(; dict ;)

def thm_2656 : A : hol.type -> x_27_1 : hol.term A -> x_27_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_3 x_27_1) (hol.eq A x_3 x_27_27_2)) -> hol.proof (hol.eq A x_3 x_27_27_2) :=
  A : hol.type => x_27_1 : hol.term A => x_27_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 x_27_1) (hol.eq A x_3 x_27_27_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.eq A x_3 x_27_1) (hol.eq A x_3 x_27_27_2) hyp_1.

(; Theorem: |- ((= x) x'') ;)

(; dict ;)

def thm_2657 : A : hol.type -> x_27_1 : hol.term A -> x_27_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_3 x_27_1) (hol.eq A x_3 x_27_27_2)) -> hol.proof (hol.eq A x_3 x_27_27_2) :=
  A : hol.type => x_27_1 : hol.term A => x_27_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 x_27_1) (hol.eq A x_3 x_27_27_2)) => hol.PROVE_HYP (hol.and (hol.eq A x_3 x_27_1) (hol.eq A x_3 x_27_27_2)) (hol.eq A x_3 x_27_27_2) (thm_2653 A x_27_27_2 x_27_1 x_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A x_3 x_27_1) (hol.eq A x_3 x_27_27_2)) => thm_2656 A x_27_1 x_27_27_2 x_3 hyp_2).

(; Theorem: |- ((= (= (\lambda _379. ((= _379) x'') x'))) (= (\lambda _379. ((= _379) x'') x'))) ;)

(; dict ;)

def thm_2658 : A : hol.type -> x_27_1 : hol.term A -> x_27_27_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__379_3 : hol.term A => hol.eq A __379_3 x_27_27_2) x_27_1)) (hol.eq hol.bool ((__379_3 : hol.term A => hol.eq A __379_3 x_27_27_2) x_27_1))) :=
  A : hol.type => x_27_1 : hol.term A => x_27_27_2 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__379_3 : hol.term A => hol.eq A __379_3 x_27_27_2) x_27_1)).

(; Theorem: |- ((= (\lambda _379. ((= _379) x'') x)) ((= x) x'')) ;)

(; dict ;)

def thm_2659 : A : hol.type -> x_1 : hol.term A -> x_27_27_2 : hol.term A -> hol.proof (hol.eq hol.bool ((__379_3 : hol.term A => hol.eq A __379_3 x_27_27_2) x_1) (hol.eq A x_1 x_27_27_2)) :=
  A : hol.type => x_1 : hol.term A => x_27_27_2 : hol.term A => hol.BETA_CONV A hol.bool (__379_3 : hol.term A => hol.eq A __379_3 x_27_27_2) x_1.

(; Theorem: |- ((= ((= (\lambda _379. ((= _379) x'') x')) (\lambda _379. ((= _379) x'') x))) ((= (\lambda _379. ((= _379) x'') x')) ((= x) x''))) ;)

(; dict ;)

def thm_2660 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> x_27_27_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_27_2) ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_1)) (hol.eq hol.bool ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_27_2) (hol.eq A x_1 x_27_27_3))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => x_27_27_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_27_2)) (hol.eq hol.bool ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_27_2)) ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_1) (hol.eq A x_1 x_27_27_3) (thm_2658 A x_27_2 x_27_27_3) (thm_2659 A x_1 x_27_27_3).

(; Theorem: |- ((= (\lambda _379. ((= _379) x'') x')) ((= x') x'')) ;)

(; dict ;)

def thm_2661 : A : hol.type -> x_27_1 : hol.term A -> x_27_27_2 : hol.term A -> hol.proof (hol.eq hol.bool ((__379_3 : hol.term A => hol.eq A __379_3 x_27_27_2) x_27_1) (hol.eq A x_27_1 x_27_27_2)) :=
  A : hol.type => x_27_1 : hol.term A => x_27_27_2 : hol.term A => hol.BETA_CONV A hol.bool (__379_3 : hol.term A => hol.eq A __379_3 x_27_27_2) x_27_1.

(; Theorem: |- ((= (= (\lambda _379. ((= _379) x'') x'))) (= ((= x') x''))) ;)

(; dict ;)

def thm_2662 : A : hol.type -> x_27_1 : hol.term A -> x_27_27_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__379_3 : hol.term A => hol.eq A __379_3 x_27_27_2) x_27_1)) (hol.eq hol.bool (hol.eq A x_27_1 x_27_27_2))) :=
  A : hol.type => x_27_1 : hol.term A => x_27_27_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__379_3 : hol.term A => hol.eq A __379_3 x_27_27_2) x_27_1) (hol.eq A x_27_1 x_27_27_2) thm_1106 (thm_2661 A x_27_1 x_27_27_2).

(; Theorem: |- ((= ((= x) x'')) ((= x) x'')) ;)

(; dict ;)

def thm_2663 : A : hol.type -> x_27_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 x_27_27_1) (hol.eq A x_2 x_27_27_1)) :=
  A : hol.type => x_27_27_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq A x_2 x_27_27_1).

(; Theorem: |- ((= ((= (\lambda _379. ((= _379) x'') x')) ((= x) x''))) ((= ((= x') x'')) ((= x) x''))) ;)

(; dict ;)

def thm_2664 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> x_27_27_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq hol.bool (hol.eq A x_27_2 x_27_27_3) (hol.eq A x_1 x_27_27_3))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => x_27_27_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_27_2)) (hol.eq hol.bool (hol.eq A x_27_2 x_27_27_3)) (hol.eq A x_1 x_27_27_3) (hol.eq A x_1 x_27_27_3) (thm_2662 A x_27_2 x_27_27_3) (thm_2663 A x_27_27_3 x_1).

(; Theorem: |- ((= ((= (\lambda _379. ((= _379) x'') x')) (\lambda _379. ((= _379) x'') x))) ((= ((= x') x'')) ((= x) x''))) ;)

(; dict ;)

def thm_2665 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> x_27_27_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_27_2) ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_1)) (hol.eq hol.bool (hol.eq A x_27_2 x_27_27_3) (hol.eq A x_1 x_27_27_3))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => x_27_27_3 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_27_2) ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_1)) (hol.eq hol.bool ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq hol.bool (hol.eq A x_27_2 x_27_27_3) (hol.eq A x_1 x_27_27_3)) (thm_2660 A x_1 x_27_2 x_27_27_3) (thm_2664 A x_1 x_27_2 x_27_27_3).

(; Theorem: |- ((= \lambda _379. ((= _379) x'')) \lambda _379. ((= _379) x'')) ;)

(; dict ;)

def thm_2666 : A : hol.type -> x_27_27_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (__379_2 : hol.term A => hol.eq A __379_2 x_27_27_1) (__379_2 : hol.term A => hol.eq A __379_2 x_27_27_1)) :=
  A : hol.type => x_27_27_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (__379_2 : hol.term A => hol.eq A __379_2 x_27_27_1).

(; Theorem: |- ((= x) x') ;)

(; dict ;)

def thm_2667 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_2 x_27_1) -> hol.proof (hol.eq A x_2 x_27_1) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_2 x_27_1) => hyp_1.

(; Theorem: |- ((= x') x) ;)

(; dict ;)

def thm_2668 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_1 x_27_2) -> hol.proof (hol.eq A x_27_2 x_1) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_1 x_27_2) => hol.SYM A x_1 x_27_2 (thm_2667 A x_27_2 x_1 hyp_1).

(; Theorem: |- ((= (\lambda _379. ((= _379) x'') x')) (\lambda _379. ((= _379) x'') x)) ;)

(; dict ;)

def thm_2669 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> x_27_27_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_1 x_27_2) -> hol.proof (hol.eq hol.bool ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_27_2) ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_1)) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => x_27_27_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_1 x_27_2) => hol.APP_THM A hol.bool (__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) (__379_4 : hol.term A => hol.eq A __379_4 x_27_27_3) x_27_2 x_1 (thm_2666 A x_27_27_3) (thm_2668 A x_1 x_27_2 hyp_1).

(; Theorem: |- ((= ((= x') x'')) ((= x) x'')) ;)

(; dict ;)

def thm_2670 : A : hol.type -> x_1 : hol.term A -> x_27_27_2 : hol.term A -> x_27_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_1 x_27_3) -> hol.proof (hol.eq hol.bool (hol.eq A x_27_3 x_27_27_2) (hol.eq A x_1 x_27_27_2)) :=
  A : hol.type => x_1 : hol.term A => x_27_27_2 : hol.term A => x_27_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_1 x_27_3) => hol.EQ_MP (hol.eq hol.bool ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_2) x_27_3) ((__379_4 : hol.term A => hol.eq A __379_4 x_27_27_2) x_1)) (hol.eq hol.bool (hol.eq A x_27_3 x_27_27_2) (hol.eq A x_1 x_27_27_2)) (thm_2665 A x_1 x_27_3 x_27_27_2) (thm_2669 A x_1 x_27_3 x_27_27_2 hyp_1).

(; Theorem: |- ((= ((= x) x'')) ((= x') x'')) ;)

(; dict ;)

def thm_2671 : A : hol.type -> x_27_1 : hol.term A -> x_27_27_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_3 x_27_1) -> hol.proof (hol.eq hol.bool (hol.eq A x_3 x_27_27_2) (hol.eq A x_27_1 x_27_27_2)) :=
  A : hol.type => x_27_1 : hol.term A => x_27_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_3 x_27_1) => hol.SYM hol.bool (hol.eq A x_27_1 x_27_27_2) (hol.eq A x_3 x_27_27_2) (thm_2670 A x_3 x_27_27_2 x_27_1 hyp_1).

(; Theorem: |- ((= (= (\lambda _381. ((= x) _381) x''))) (= (\lambda _381. ((= x) _381) x''))) ;)

(; dict ;)

def thm_2672 : A : hol.type -> x_27_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1)) (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1))) :=
  A : hol.type => x_27_27_1 : hol.term A => x_2 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1)).

(; Theorem: |- ((= (\lambda _381. ((= x) _381) x)) ((= x) x)) ;)

(; dict ;)

def thm_2673 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool ((__381_2 : hol.term A => hol.eq A x_1 __381_2) x_1) (hol.eq A x_1 x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.BETA_CONV A hol.bool (__381_2 : hol.term A => hol.eq A x_1 __381_2) x_1.

(; Theorem: |- ((= ((= (\lambda _381. ((= x) _381) x'')) (\lambda _381. ((= x) _381) x))) ((= (\lambda _381. ((= x) _381) x'')) ((= x) x))) ;)

(; dict ;)

def thm_2674 : A : hol.type -> x_27_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1) ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_2)) (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1) (hol.eq A x_2 x_2))) :=
  A : hol.type => x_27_27_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1)) (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1)) ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_2) (hol.eq A x_2 x_2) (thm_2672 A x_27_27_1 x_2) (thm_2673 A x_2).

(; Theorem: |- ((= (\lambda _381. ((= x) _381) x'')) ((= x) x'')) ;)

(; dict ;)

def thm_2675 : A : hol.type -> x_27_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1) (hol.eq A x_2 x_27_27_1)) :=
  A : hol.type => x_27_27_1 : hol.term A => x_2 : hol.term A => hol.BETA_CONV A hol.bool (__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1.

(; Theorem: |- ((= (= (\lambda _381. ((= x) _381) x''))) (= ((= x) x''))) ;)

(; dict ;)

def thm_2676 : A : hol.type -> x_27_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1)) (hol.eq hol.bool (hol.eq A x_2 x_27_27_1))) :=
  A : hol.type => x_27_27_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1) (hol.eq A x_2 x_27_27_1) thm_1106 (thm_2675 A x_27_27_1 x_2).

(; Theorem: |- ((= ((= x) x)) ((= x) x)) ;)

(; dict ;)

def thm_2677 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq A x_1 x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq A x_1 x_1).

(; Theorem: |- ((= ((= (\lambda _381. ((= x) _381) x'')) ((= x) x))) ((= ((= x) x'')) ((= x) x))) ;)

(; dict ;)

def thm_2678 : A : hol.type -> x_27_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1) (hol.eq A x_2 x_2)) (hol.eq hol.bool (hol.eq A x_2 x_27_27_1) (hol.eq A x_2 x_2))) :=
  A : hol.type => x_27_27_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1)) (hol.eq hol.bool (hol.eq A x_2 x_27_27_1)) (hol.eq A x_2 x_2) (hol.eq A x_2 x_2) (thm_2676 A x_27_27_1 x_2) (thm_2677 A x_2).

(; Theorem: |- ((= ((= (\lambda _381. ((= x) _381) x'')) (\lambda _381. ((= x) _381) x))) ((= ((= x) x'')) ((= x) x))) ;)

(; dict ;)

def thm_2679 : A : hol.type -> x_27_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1) ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_2)) (hol.eq hol.bool (hol.eq A x_2 x_27_27_1) (hol.eq A x_2 x_2))) :=
  A : hol.type => x_27_27_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1) ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_2)) (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1) (hol.eq A x_2 x_2)) (hol.eq hol.bool (hol.eq A x_2 x_27_27_1) (hol.eq A x_2 x_2)) (thm_2674 A x_27_27_1 x_2) (thm_2678 A x_27_27_1 x_2).

(; Theorem: |- ((= \lambda _381. ((= x) _381)) \lambda _381. ((= x) _381)) ;)

(; dict ;)

def thm_2680 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (__381_2 : hol.term A => hol.eq A x_1 __381_2) (__381_2 : hol.term A => hol.eq A x_1 __381_2)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (__381_2 : hol.term A => hol.eq A x_1 __381_2).

(; Theorem: |- ((= x) x'') ;)

(; dict ;)

def thm_2681 : A : hol.type -> x_27_27_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_2 x_27_27_1) -> hol.proof (hol.eq A x_2 x_27_27_1) :=
  A : hol.type => x_27_27_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_2 x_27_27_1) => hyp_1.

(; Theorem: |- ((= x'') x) ;)

(; dict ;)

def thm_2682 : A : hol.type -> x_1 : hol.term A -> x_27_27_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_1 x_27_27_2) -> hol.proof (hol.eq A x_27_27_2 x_1) :=
  A : hol.type => x_1 : hol.term A => x_27_27_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_1 x_27_27_2) => hol.SYM A x_1 x_27_27_2 (thm_2681 A x_27_27_2 x_1 hyp_1).

(; Theorem: |- ((= (\lambda _381. ((= x) _381) x'')) (\lambda _381. ((= x) _381) x)) ;)

(; dict ;)

def thm_2683 : A : hol.type -> x_27_27_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_2 x_27_27_1) -> hol.proof (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1) ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_2)) :=
  A : hol.type => x_27_27_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_2 x_27_27_1) => hol.APP_THM A hol.bool (__381_3 : hol.term A => hol.eq A x_2 __381_3) (__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1 x_2 (thm_2680 A x_2) (thm_2682 A x_2 x_27_27_1 hyp_1).

(; Theorem: |- ((= ((= x) x'')) ((= x) x)) ;)

(; dict ;)

def thm_2684 : A : hol.type -> x_27_27_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_2 x_27_27_1) -> hol.proof (hol.eq hol.bool (hol.eq A x_2 x_27_27_1) (hol.eq A x_2 x_2)) :=
  A : hol.type => x_27_27_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_2 x_27_27_1) => hol.EQ_MP (hol.eq hol.bool ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_27_27_1) ((__381_3 : hol.term A => hol.eq A x_2 __381_3) x_2)) (hol.eq hol.bool (hol.eq A x_2 x_27_27_1) (hol.eq A x_2 x_2)) (thm_2679 A x_27_27_1 x_2) (thm_2683 A x_27_27_1 x_2 hyp_1).

(; Theorem: |- ((= ((= x) x)) ((= x) x'')) ;)

(; dict ;)

def thm_2685 : A : hol.type -> x_27_27_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_2 x_27_27_1) -> hol.proof (hol.eq hol.bool (hol.eq A x_2 x_2) (hol.eq A x_2 x_27_27_1)) :=
  A : hol.type => x_27_27_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_2 x_27_27_1) => hol.SYM hol.bool (hol.eq A x_2 x_27_27_1) (hol.eq A x_2 x_2) (thm_2684 A x_27_27_1 x_2 hyp_1).

(; Theorem: |- ((= x') x'') ;)

(; dict ;)

def thm_2686 : A : hol.type -> x_1 : hol.term A -> x_27_27_2 : hol.term A -> x_27_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_1 x_27_3) -> hyp_2 : hol.proof (hol.eq A x_1 x_27_27_2) -> hol.proof (hol.eq A x_27_3 x_27_27_2) :=
  A : hol.type => x_1 : hol.term A => x_27_27_2 : hol.term A => x_27_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_1 x_27_3) => hyp_2 : hol.proof (hol.eq A x_1 x_27_27_2) => hol.EQ_MP (hol.eq A x_1 x_27_27_2) (hol.eq A x_27_3 x_27_27_2) (thm_2671 A x_27_3 x_27_27_2 x_1 hyp_1) (hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq A x_1 x_27_27_2) (thm_2685 A x_27_27_2 x_1 hyp_2) (thm_11 A x_1)).

(; Theorem: |- ((= x') x'') ;)

(; dict ;)

def thm_2687 : A : hol.type -> x_1 : hol.term A -> x_27_27_2 : hol.term A -> x_27_3 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_1 x_27_3) -> hyp_2 : hol.proof (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_2)) -> hol.proof (hol.eq A x_27_3 x_27_27_2) :=
  A : hol.type => x_1 : hol.term A => x_27_27_2 : hol.term A => x_27_3 : hol.term A => hyp_1 : hol.proof (hol.eq A x_1 x_27_3) => hyp_2 : hol.proof (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_2)) => hol.PROVE_HYP (hol.eq A x_1 x_27_27_2) (hol.eq A x_27_3 x_27_27_2) (thm_2657 A x_27_3 x_27_27_2 x_1 hyp_2) (hyp_3 : hol.proof (hol.eq A x_1 x_27_27_2) => thm_2686 A x_1 x_27_27_2 x_27_3 hyp_1 hyp_3).

(; Theorem: |- ((= x') x'') ;)

(; dict ;)

def thm_2688 : A : hol.type -> x_1 : hol.term A -> x_27_27_2 : hol.term A -> x_27_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_2)) -> hol.proof (hol.eq A x_27_3 x_27_27_2) :=
  A : hol.type => x_1 : hol.term A => x_27_27_2 : hol.term A => x_27_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_2)) => hol.PROVE_HYP (hol.eq A x_1 x_27_3) (hol.eq A x_27_3 x_27_27_2) (thm_2655 A x_27_27_2 x_27_3 x_1 hyp_1) (hyp_2 : hol.proof (hol.eq A x_1 x_27_3) => thm_2687 A x_1 x_27_27_2 x_27_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x'')) ;)

(; dict ;)

def thm_2689 : A : hol.type -> x_27_27_1 : hol.term A -> x_27_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.imp (hol.and (hol.eq A x_3 x_27_2) (hol.eq A x_3 x_27_27_1)) (hol.eq A x_27_2 x_27_27_1)) :=
  A : hol.type => x_27_27_1 : hol.term A => x_27_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_3 x_27_2) (hol.eq A x_3 x_27_27_1)) => thm_2688 A x_3 x_27_27_1 x_27_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x''))) ;)

(; dict ;)

def thm_2690 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_2 x_27_1) (hol.eq A x_2 x_27_27_3)) (hol.eq A x_27_1 x_27_27_3))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => x_27_27_3 : hol.term A => thm_2689 A x_27_27_3 x_27_1 x_2.

(; Theorem: |- (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ ((= x) x')) ((= x) x''))) ((= x') x'')))) ;)

(; dict ;)

def thm_2691 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3)))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => hol.EQ_MP (hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))) (hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_2) (hol.eq A x_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))) (thm_2652 A x_27_2 x_1) (thm_2690 A x_27_2 x_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x''))))) ;)

(; dict ;)

def thm_2692 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3)) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) => hol.EQ_MP (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3)) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))) (thm_2646 A p_2 x_1 hyp_1) (hol.EQ_MP (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (hol.eq A x_1 x_27_3) (hol.eq A x_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))) (thm_2649 A x_1) (thm_2691 A x_1)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ((Data.Bool./\ (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x'')))))) ;)

(; dict ;)

def thm_2693 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3)) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) => thm_2692 A x_1 p_2 hyp_1.

(; Theorem: |- ((= (\lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))) x)) (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ;)

(; dict ;)

def thm_2694 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1.

(; Theorem: |- (\lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))) x) ;)

(; dict ;)

def thm_2695 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) -> hol.proof ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))) ;)

(; dict ;)

def thm_2696 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) -> hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) => hol.EQ_MP ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) (thm_2694 A x_1 p_2) (thm_2695 A x_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x''))))) ;)

(; dict ;)

def thm_2697 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3)) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) => thm_2693 A x_1 p_2 (thm_2696 A x_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))) x)) ((Data.Bool./\ (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x'')))))) ;)

(; dict ;)

def thm_2698 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_2 x_27_3)) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_2 x_27_3) (p_2 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) => thm_2697 A x_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))) x)) ((Data.Bool./\ (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x''))))))) ;)

(; dict ;)

def thm_2699 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 y_4) (hol.eq A x_3 y_4))) x_2) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => p_1 x_27_3)) (hol.forall A (x_27_3 : hol.term A => hol.forall A (x_27_27_4 : hol.term A => hol.imp (hol.and (p_1 x_27_3) (p_1 x_27_27_4)) (hol.eq A x_27_3 x_27_27_4))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => thm_2698 A x_2 p_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) ((Data.Bool./\ (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x'')))))) ;)

(; dict ;)

def thm_2700 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2)) (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (p_1 x_27_2) (p_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_2601 A p_1 (thm_2699 A p_1).

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ;)

(; dict ;)

def thm_2701 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) => hyp_1.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x''))))) ;)

(; dict ;)

def thm_2702 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2)) (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (p_1 x_27_2) (p_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) => thm_2700 A p_1 (thm_2701 A p_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))) ;)

(; dict ;)

def thm_2703 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_2704 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (p x)) ;)

(; dict ;)

def thm_2705 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) => hol.PROVE_HYP (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (thm_2703 A p_1 hyp_1) (hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) => thm_2704 A p_1 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))) ;)

(; dict ;)

def thm_2706 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))) ;)

(; dict ;)

def thm_2707 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) => hol.PROVE_HYP (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) (thm_2703 A p_1 hyp_1) (hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) => thm_2706 A p_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ;)

(; dict ;)

def thm_2708 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => p_1 x_3) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 y_4) (hol.eq A x_3 y_4)))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_782 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (x_2 : hol.term A => p_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))) ;)

(; dict ;)

def thm_2709 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) (\lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))) x)) ;)

(; dict ;)

def thm_2710 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) (thm_2694 A x_1 p_2).

(; Theorem: |- ((= \lambda y. ((= (p y)) ((= x) y))) \lambda y. ((= (p y)) ((= x) y))) ;)

(; dict ;)

def thm_2711 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)).

(; Theorem: |- ((= \lambda y. ((= (p y)) ((= x) y))) \lambda y. ((= (p y)) ((= x) y))) ;)

(; dict ;)

def thm_2712 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)) (thm_2711 A x_1 p_2) (thm_2711 A x_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ;)

(; dict ;)

def thm_2713 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)) (thm_7 A) (thm_2712 A x_1 p_2).

(; Theorem: |- ((= (= (\lambda _375. (p _375) y))) (= (\lambda _375. (p _375) y))) ;)

(; dict ;)

def thm_2714 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__375_3 : hol.term A => p_2 __375_3) y_1)) (hol.eq hol.bool ((__375_3 : hol.term A => p_2 __375_3) y_1))) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__375_3 : hol.term A => p_2 __375_3) y_1)).

(; Theorem: |- ((= (\lambda _375. (p _375) x)) (p x)) ;)

(; dict ;)

def thm_2715 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__375_3 : hol.term A => p_2 __375_3) x_1) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (__375_3 : hol.term A => p_2 __375_3) x_1.

(; Theorem: |- ((= ((= (\lambda _375. (p _375) y)) (\lambda _375. (p _375) x))) ((= (\lambda _375. (p _375) y)) (p x))) ;)

(; dict ;)

def thm_2716 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__375_4 : hol.term A => p_3 __375_4) y_2) ((__375_4 : hol.term A => p_3 __375_4) x_1)) (hol.eq hol.bool ((__375_4 : hol.term A => p_3 __375_4) y_2) (p_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__375_4 : hol.term A => p_3 __375_4) y_2)) (hol.eq hol.bool ((__375_4 : hol.term A => p_3 __375_4) y_2)) ((__375_4 : hol.term A => p_3 __375_4) x_1) (p_3 x_1) (thm_2714 A y_2 p_3) (thm_2715 A x_1 p_3).

(; Theorem: |- ((= (\lambda _375. (p _375) y)) (p y)) ;)

(; dict ;)

def thm_2717 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__375_3 : hol.term A => p_2 __375_3) y_1) (p_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (__375_3 : hol.term A => p_2 __375_3) y_1.

(; Theorem: |- ((= (= (\lambda _375. (p _375) y))) (= (p y))) ;)

(; dict ;)

def thm_2718 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__375_3 : hol.term A => p_2 __375_3) y_1)) (hol.eq hol.bool (p_2 y_1))) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__375_3 : hol.term A => p_2 __375_3) y_1) (p_2 y_1) thm_1106 (thm_2717 A y_1 p_2).

(; Theorem: |- ((= ((= (\lambda _375. (p _375) y)) (p x))) ((= (p y)) (p x))) ;)

(; dict ;)

def thm_2719 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__375_4 : hol.term A => p_3 __375_4) y_2) (p_3 x_1)) (hol.eq hol.bool (p_3 y_2) (p_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__375_4 : hol.term A => p_3 __375_4) y_2)) (hol.eq hol.bool (p_3 y_2)) (p_3 x_1) (p_3 x_1) (thm_2718 A y_2 p_3) (thm_1258 A x_1 p_3).

(; Theorem: |- ((= ((= (\lambda _375. (p _375) y)) (\lambda _375. (p _375) x))) ((= (p y)) (p x))) ;)

(; dict ;)

def thm_2720 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__375_4 : hol.term A => p_3 __375_4) y_2) ((__375_4 : hol.term A => p_3 __375_4) x_1)) (hol.eq hol.bool (p_3 y_2) (p_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool ((__375_4 : hol.term A => p_3 __375_4) y_2) ((__375_4 : hol.term A => p_3 __375_4) x_1)) (hol.eq hol.bool ((__375_4 : hol.term A => p_3 __375_4) y_2) (p_3 x_1)) (hol.eq hol.bool (p_3 y_2) (p_3 x_1)) (thm_2716 A x_1 y_2 p_3) (thm_2719 A x_1 y_2 p_3).

(; Theorem: |- ((= \lambda _375. (p _375)) \lambda _375. (p _375)) ;)

(; dict ;)

def thm_2721 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (__375_2 : hol.term A => p_1 __375_2) (__375_2 : hol.term A => p_1 __375_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (__375_2 : hol.term A => p_1 __375_2).

(; Theorem: |- ((= (\lambda _375. (p _375) y)) (\lambda _375. (p _375) x)) ;)

(; dict ;)

def thm_2722 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq A x_1 y_2) -> hol.proof (hol.eq hol.bool ((__375_4 : hol.term A => p_3 __375_4) y_2) ((__375_4 : hol.term A => p_3 __375_4) x_1)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq A x_1 y_2) => hol.APP_THM A hol.bool (__375_4 : hol.term A => p_3 __375_4) (__375_4 : hol.term A => p_3 __375_4) y_2 x_1 (thm_2721 A p_3) (thm_21 A x_1 y_2 hyp_1).

(; Theorem: |- ((= (p y)) (p x)) ;)

(; dict ;)

def thm_2723 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq A x_1 y_2) -> hol.proof (hol.eq hol.bool (p_3 y_2) (p_3 x_1)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq A x_1 y_2) => hol.EQ_MP (hol.eq hol.bool ((__375_4 : hol.term A => p_3 __375_4) y_2) ((__375_4 : hol.term A => p_3 __375_4) x_1)) (hol.eq hol.bool (p_3 y_2) (p_3 x_1)) (thm_2720 A x_1 y_2 p_3) (thm_2722 A x_1 y_2 p_3 hyp_1).

(; Theorem: |- ((= (p x)) (p y)) ;)

(; dict ;)

def thm_2724 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq A x_2 y_1) -> hol.proof (hol.eq hol.bool (p_3 x_2) (p_3 y_1)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq A x_2 y_1) => hol.SYM hol.bool (p_3 y_1) (p_3 x_2) (thm_2723 A x_2 y_1 p_3 hyp_1).

(; Theorem: |- (p y) ;)

(; dict ;)

def thm_2725 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hyp_2 : hol.proof (hol.eq A x_1 y_2) -> hol.proof (p_3 y_2) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hyp_2 : hol.proof (hol.eq A x_1 y_2) => hol.EQ_MP (p_3 x_1) (p_3 y_2) (thm_2724 A y_2 x_1 p_3 hyp_2) (thm_1266 A x_1 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= x) y)) (p y)) ;)

(; dict ;)

def thm_2726 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> y_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (p_1 x_3) -> hol.proof (hol.imp (hol.eq A x_3 y_2) (p_1 y_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => y_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (p_1 x_3) => hyp_2 : hol.proof (hol.eq A x_3 y_2) => thm_2725 A x_3 y_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))) ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))) ;)

(; dict ;)

def thm_2727 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (p_3 x_2) (p_3 x_27_1)) (hol.eq A x_2 x_27_1)) (hol.imp (hol.and (p_3 x_2) (p_3 x_27_1)) (hol.eq A x_2 x_27_1))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.imp (hol.and (p_3 x_2) (p_3 x_27_1)) (hol.eq A x_2 x_27_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))) ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))) ;)

(; dict ;)

def thm_2728 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (p_3 x_2) (p_3 x_27_1)) (hol.eq A x_2 x_27_1)) (hol.imp (hol.and (p_3 x_2) (p_3 x_27_1)) (hol.eq A x_2 x_27_1))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.imp (hol.and (p_3 x_2) (p_3 x_27_1)) (hol.eq A x_2 x_27_1)) (hol.imp (hol.and (p_3 x_2) (p_3 x_27_1)) (hol.eq A x_2 x_27_1)) (hol.imp (hol.and (p_3 x_2) (p_3 x_27_1)) (hol.eq A x_2 x_27_1)) (thm_2727 A x_27_1 x_2 p_3) (thm_2727 A x_27_1 x_2 p_3).

(; Theorem: |- (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))) ;)

(; dict ;)

def thm_2729 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) -> hol.proof (hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_2 x_1) (p_2 x_27_3)) (hol.eq A x_1 x_27_3))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) => thm_2709 A p_2 hyp_1 x_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')) ;)

(; dict ;)

def thm_2730 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (x_27_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 x_27_5)) (hol.eq A x_4 x_27_5)))) -> hol.proof (hol.imp (hol.and (p_3 x_2) (p_3 x_27_1)) (hol.eq A x_2 x_27_1)) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (x_27_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 x_27_5)) (hol.eq A x_4 x_27_5)))) => thm_2729 A x_2 p_3 hyp_1 x_27_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)) ;)

(; dict ;)

def thm_2731 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (x_27_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 x_27_5)) (hol.eq A x_4 x_27_5)))) -> hol.proof (hol.imp (hol.and (p_3 x_2) (p_3 y_1)) (hol.eq A x_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (x_27_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 x_27_5)) (hol.eq A x_4 x_27_5)))) => (A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (x_27_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 x_27_5)) (hol.eq A x_4 x_27_5)))) => (A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (x_27_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 x_27_5)) (hol.eq A x_4 x_27_5)))) => hol.EQ_MP (hol.imp (hol.and (p_3 x_2) (p_3 x_27_1)) (hol.eq A x_2 x_27_1)) (hol.imp (hol.and (p_3 x_2) (p_3 x_27_1)) (hol.eq A x_2 x_27_1)) (thm_2728 A x_27_1 x_2 p_3) (thm_2730 A x_27_1 x_2 p_3 hyp_1)) A x_27_1 x_2 p_3 hyp_1) A y_1 x_2 p_3 hyp_1.

(; Theorem: |- ((= (p x)) Data.Bool.T) ;)

(; dict ;)

def thm_2732 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq hol.bool (p_2 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.EQ_MP (p_2 x_1) (hol.eq hol.bool (p_2 x_1) hol.true) (thm_2441 A x_1 p_2) (thm_1266 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool./\ (p x))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_2733 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (p_2 x_1)) (hol.and hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (p_2 x_1) hol.true thm_1119 (hol.EQ_MP (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true) (thm_2439 A x_1 p_2) (thm_2732 A x_1 p_2 hyp_1)).

(; Theorem: |- ((= ((= (p y)) Data.Bool.T)) ((= (p y)) Data.Bool.T)) ;)

(; dict ;)

def thm_2734 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 y_1) hol.true) (hol.eq hol.bool (p_2 y_1) hol.true)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_2 y_1) hol.true).

(; Theorem: |- ((= ((= (p y)) Data.Bool.T)) ((= (p y)) Data.Bool.T)) ;)

(; dict ;)

def thm_2735 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 y_1) hol.true) (hol.eq hol.bool (p_2 y_1) hol.true)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_2 y_1) hol.true) (hol.eq hol.bool (p_2 y_1) hol.true) (hol.eq hol.bool (p_2 y_1) hol.true) (thm_2734 A y_1 p_2) (thm_2734 A y_1 p_2).

(; Theorem: |- ((= (p y)) ((= (p y)) Data.Bool.T)) ;)

(; dict ;)

def thm_2736 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 y_1) (hol.eq hol.bool (p_2 y_1) hol.true)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_140 t_1) (p_2 y_1).

(; Theorem: |- (p y) ;)

(; dict ;)

def thm_2737 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 y_1) -> hol.proof (p_2 y_1) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 y_1) => hyp_1.

(; Theorem: |- ((= (p y)) Data.Bool.T) ;)

(; dict ;)

def thm_2738 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 y_1) -> hol.proof (hol.eq hol.bool (p_2 y_1) hol.true) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 y_1) => hol.EQ_MP (p_2 y_1) (hol.eq hol.bool (p_2 y_1) hol.true) (thm_2736 A y_1 p_2) (thm_2737 A y_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ (p x)) (p y))) ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_2739 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hyp_2 : hol.proof (p_3 y_1) -> hol.proof (hol.eq hol.bool (hol.and (p_3 x_2) (p_3 y_1)) (hol.and hol.true hol.true)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hyp_2 : hol.proof (p_3 y_1) => hol.APP_THM hol.bool hol.bool (hol.and (p_3 x_2)) (hol.and hol.true) (p_3 y_1) hol.true (thm_2733 A x_2 p_3 hyp_1) (hol.EQ_MP (hol.eq hol.bool (p_3 y_1) hol.true) (hol.eq hol.bool (p_3 y_1) hol.true) (thm_2735 A y_1 p_3) (thm_2738 A y_1 p_3 hyp_2)).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_2740 : hol.proof (hol.eq hol.bool (hol.and hol.true hol.true) hol.true) :=
  (t_1 : hol.term hol.bool => thm_972 t_1) hol.true.

(; Theorem: |- ((= ((Data.Bool./\ (p x)) (p y))) Data.Bool.T) ;)

(; dict ;)

def thm_2741 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hyp_2 : hol.proof (p_3 y_1) -> hol.proof (hol.eq hol.bool (hol.and (p_3 x_2) (p_3 y_1)) hol.true) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hyp_2 : hol.proof (p_3 y_1) => hol.TRANS hol.bool (hol.and (p_3 x_2) (p_3 y_1)) (hol.and hol.true hol.true) hol.true (thm_2739 A y_1 x_2 p_3 hyp_1 hyp_2) thm_2740.

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool./\ (p x)) (p y))) ;)

(; dict ;)

def thm_2742 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hyp_2 : hol.proof (p_3 y_1) -> hol.proof (hol.eq hol.bool hol.true (hol.and (p_3 x_2) (p_3 y_1))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hyp_2 : hol.proof (p_3 y_1) => hol.SYM hol.bool (hol.and (p_3 x_2) (p_3 y_1)) hol.true (thm_2741 A y_1 x_2 p_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool./\ (p x)) (p y)) ;)

(; dict ;)

def thm_2743 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hyp_2 : hol.proof (p_3 y_1) -> hol.proof (hol.and (p_3 x_2) (p_3 y_1)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hyp_2 : hol.proof (p_3 y_1) => hol.EQ_MP hol.true (hol.and (p_3 x_2) (p_3 y_1)) (thm_2742 A y_1 x_2 p_3 hyp_1 hyp_2) thm_1.

(; Theorem: |- ((= x) y) ;)

(; dict ;)

def thm_2744 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> y_2 : hol.term A -> x_3 : hol.term A -> hyp_1 : hol.proof (p_1 x_3) -> hyp_2 : hol.proof (p_1 y_2) -> hyp_3 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (x_27_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (p_1 x_27_5)) (hol.eq A x_4 x_27_5)))) -> hol.proof (hol.eq A x_3 y_2) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => y_2 : hol.term A => x_3 : hol.term A => hyp_1 : hol.proof (p_1 x_3) => hyp_2 : hol.proof (p_1 y_2) => hyp_3 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (x_27_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (p_1 x_27_5)) (hol.eq A x_4 x_27_5)))) => thm_2731 A y_2 x_3 p_1 hyp_3 (thm_2743 A y_2 x_3 p_1 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (p y)) ((= x) y)) ;)

(; dict ;)

def thm_2745 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (x_27_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 x_27_5)) (hol.eq A x_4 x_27_5)))) -> hol.proof (hol.imp (p_3 y_2) (hol.eq A x_1 y_2)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (x_27_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 x_27_5)) (hol.eq A x_4 x_27_5)))) => hyp_3 : hol.proof (p_3 y_2) => thm_2744 A p_3 y_2 x_1 hyp_1 hyp_3 hyp_2.

(; Theorem: |- ((= (p y)) ((= x) y)) ;)

(; dict ;)

def thm_2746 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (x_27_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 x_27_5)) (hol.eq A x_4 x_27_5)))) -> hol.proof (hol.eq hol.bool (p_3 y_2) (hol.eq A x_1 y_2)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (x_27_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (p_3 x_27_5)) (hol.eq A x_4 x_27_5)))) => hol.PROP_EXT (p_3 y_2) (hol.eq A x_1 y_2) (hyp_3 : hol.proof (hol.eq A x_1 y_2) => thm_2726 A p_3 y_2 x_1 hyp_1 (thm_20 A y_2 x_1 hyp_3)) (hyp_3 : hol.proof (p_3 y_2) => thm_2745 A x_1 y_2 p_3 hyp_1 hyp_2 (thm_2737 A y_2 p_3 hyp_3)).

(; Theorem: |- (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))) ;)

(; dict ;)

def thm_2747 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) -> hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) => y_3 : hol.term A => thm_2746 A x_1 y_3 p_2 hyp_1 hyp_2.

(; Theorem: |- (\lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))) x) ;)

(; dict ;)

def thm_2748 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) -> hol.proof ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) => hol.EQ_MP (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) (thm_2710 A x_1 p_2) (hol.EQ_MP (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) (thm_2713 A x_1 p_2) (thm_2747 A x_1 p_2 hyp_1 hyp_2)).

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ;)

(; dict ;)

def thm_2749 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_767 A x_1 P_2 hyp_1) A x_1 (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ;)

(; dict ;)

def thm_2750 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) => hol.PROVE_HYP ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4)))) (thm_2748 A x_1 p_2 hyp_1 hyp_2) (hyp_3 : hol.proof ((x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))) x_1) => thm_2749 A x_1 p_2 hyp_3).

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ;)

(; dict ;)

def thm_2751 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4)))) (thm_2709 A p_2 hyp_2) (hyp_3 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) => thm_2750 A x_1 p_2 hyp_1 hyp_3).

(; Theorem: |- ((Data.Bool.==> (p x)) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) ;)

(; dict ;)

def thm_2752 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) -> hol.proof (hol.imp (p_2 x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) => hyp_2 : hol.proof (p_2 x_1) => thm_2751 A x_1 p_2 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ;)

(; dict ;)

def thm_2753 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) -> hyp_2 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) => hyp_2 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => thm_2752 A x_1 p_2 hyp_1 (thm_1677 A x_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) ;)

(; dict ;)

def thm_2754 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) -> hol.proof (hol.imp ((x_3 : hol.term A => p_2 x_3) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 y_4) (hol.eq A x_3 y_4))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (x_27_4 : hol.term A => hol.imp (hol.and (p_2 x_3) (p_2 x_27_4)) (hol.eq A x_3 x_27_4)))) => hyp_2 : hol.proof ((x_3 : hol.term A => p_2 x_3) x_1) => thm_2753 A x_1 p_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p x) x)) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ;)

(; dict ;)

def thm_2755 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp ((x_3 : hol.term A => p_1 x_3) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 y_4) (hol.eq A x_3 y_4)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) => x_2 : hol.term A => thm_2754 A x_2 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) ;)

(; dict ;)

def thm_2756 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) => thm_2708 A p_1 (thm_2755 A p_1 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ;)

(; dict ;)

def thm_2757 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => thm_2756 A p_1 hyp_1 (thm_1682 A p_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ;)

(; dict ;)

def thm_2758 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) -> hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) => hol.PROVE_HYP (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (thm_2707 A p_1 hyp_2) (hyp_3 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))) => thm_2757 A p_1 hyp_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ;)

(; dict ;)

def thm_2759 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (thm_2705 A p_1 hyp_1) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) => thm_2758 A p_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) ;)

(; dict ;)

def thm_2760 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))) => thm_2759 A p_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda x'. (p x'))) (Data.Bool.! \lambda x'. (Data.Bool.! \lambda x''. ((Data.Bool.==> ((Data.Bool./\ (p x')) (p x''))) ((= x') x'')))))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) ;)

(; dict ;)

def thm_2761 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2)) (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (p_1 x_27_2) (p_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2)) (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (p_1 x_27_2) (p_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) => thm_2702 A p_1 hyp_2) (thm_2701 A p_1 hyp_1)) (hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2)) (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (p_1 x_27_2) (p_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))))) => thm_2760 A p_1 (thm_2703 A p_1 hyp_1)).

(; Theorem: |- ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) ;)

(; dict ;)

def thm_2762 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2)) (hol.forall A (x_27_2 : hol.term A => hol.forall A (x_27_27_3 : hol.term A => hol.imp (hol.and (p_1 x_27_2) (p_1 x_27_27_3)) (hol.eq A x_27_2 x_27_27_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (thm_2600 A p_1) (thm_2761 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ;)

(; dict ;)

def thm_2763 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_2762 A p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ;)

(; thm ;)

def thm_2764 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))))) (thm_2596 A) (thm_2763 A).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))))) \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))))) ;)

(; dict ;)

def thm_2765 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))))) \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))))) ;)

(; dict ;)

def thm_2766 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) (thm_2765 A) (thm_2765 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))))) (Data.Bool.! \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))))) ;)

(; dict ;)

def thm_2767 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) (thm_1102 A) (thm_2766 A).

(; Theorem: |- ((= (= (Data.Bool.?! \lambda x. (p x)))) (= (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ;)

(; dict ;)

def thm_2768 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) thm_1106 (thm_2762 A p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_2769 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))))) ((= (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))))) ;)

(; dict ;)

def thm_2770 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))) (thm_2768 A p_1) (thm_2769 A p_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))))) ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))))) ;)

(; dict ;)

def thm_2771 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) (thm_2770 A p_1).

(; Theorem: |- ((= ((= \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ((= \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_2772 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))) (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))).

(; Theorem: |- ((= ((= \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ((= \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_2773 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))) (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))) (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))) (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))) (thm_2772 A p_1) (thm_2772 A p_1).

(; Theorem: |- ((= ((= ((= a) b)) ((Data.Bool./\ ((Data.Bool.==> a) b)) ((Data.Bool.==> b) a)))) ((= ((= a) b)) ((Data.Bool./\ ((Data.Bool.==> a) b)) ((Data.Bool.==> b) a)))) ;)

(; dict ;)

def thm_2774 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2))).

(; Theorem: |- ((= ((= ((= a) b)) ((Data.Bool./\ ((Data.Bool.==> a) b)) ((Data.Bool.==> b) a)))) ((= ((= a) b)) ((Data.Bool./\ ((Data.Bool.==> a) b)) ((Data.Bool.==> b) a)))) ;)

(; dict ;)

def thm_2775 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2))) (thm_2774 b_1 a_2) (thm_2774 b_1 a_2).

(; Theorem: |- b ;)

(; dict ;)

def thm_2776 : b_1 : hol.term hol.bool -> hyp_1 : hol.proof b_1 -> hol.proof b_1 :=
  b_1 : hol.term hol.bool => hyp_1 : hol.proof b_1 => hyp_1.

(; Theorem: |- a ;)

(; dict ;)

def thm_2777 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof b_1 -> hyp_2 : hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) -> hol.proof a_2 :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof b_1 => hyp_2 : hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) => thm_819 a_2 b_1 hyp_2 (thm_2776 b_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> a) b)) ((Data.Bool.==> b) a)) ;)

(; dict ;)

def thm_2778 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) -> hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> a) b) ;)

(; dict ;)

def thm_2779 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) -> hol.proof (hol.imp a_2 b_1) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.imp b_1 a_2) (hol.imp a_2 b_1) hyp_1.

(; Theorem: |- ((Data.Bool.==> a) b) ;)

(; dict ;)

def thm_2780 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) -> hol.proof (hol.imp a_2 b_1) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) => hol.PROVE_HYP (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) (hol.imp a_2 b_1) (thm_2778 b_1 a_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) => thm_2779 b_1 a_2 hyp_2).

(; Theorem: |- b ;)

(; dict ;)

def thm_2781 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof a_1 -> hyp_2 : hol.proof (hol.and (hol.imp a_1 b_2) (hol.imp b_2 a_1)) -> hol.proof b_2 :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof a_1 => hyp_2 : hol.proof (hol.and (hol.imp a_1 b_2) (hol.imp b_2 a_1)) => thm_2780 b_2 a_1 hyp_2 (thm_801 a_1 hyp_1).

(; Theorem: |- b ;)

(; dict ;)

def thm_2782 : a_1 : hol.term hol.bool -> b_2 : hol.term hol.bool -> hyp_1 : hol.proof a_1 -> hyp_2 : hol.proof (hol.and (hol.imp a_1 b_2) (hol.imp b_2 a_1)) -> hol.proof b_2 :=
  a_1 : hol.term hol.bool => b_2 : hol.term hol.bool => hyp_1 : hol.proof a_1 => hyp_2 : hol.proof (hol.and (hol.imp a_1 b_2) (hol.imp b_2 a_1)) => hol.PROVE_HYP a_1 b_2 (thm_801 a_1 hyp_1) (hyp_3 : hol.proof a_1 => thm_2781 a_1 b_2 hyp_3 hyp_2).

(; Theorem: |- ((= a) b) ;)

(; dict ;)

def thm_2783 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) -> hol.proof (hol.eq hol.bool a_2 b_1) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) => hol.PROP_EXT a_2 b_1 (hyp_2 : hol.proof b_1 => thm_2777 b_1 a_2 hyp_2 hyp_1) (hyp_2 : hol.proof a_2 => (hyp_3 : hol.proof a_2 => thm_2782 a_2 b_1 hyp_3 hyp_1) (thm_801 a_2 hyp_2)).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> a) b)) ((Data.Bool.==> b) a))) ((= a) b)) ;)

(; dict ;)

def thm_2784 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) (hol.eq hol.bool a_2 b_1)) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) => thm_2783 b_1 a_2 hyp_1.

(; Theorem: |- ((= ((= a) b)) ((Data.Bool./\ ((Data.Bool.==> a) b)) ((Data.Bool.==> b) a))) ;)

(; dict ;)

def thm_2785 : b_1 : hol.term hol.bool -> a_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2))) :=
  b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.PROP_EXT (hol.eq hol.bool a_2 b_1) (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) (hyp_1 : hol.proof (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2)) => thm_2784 b_1 a_2 (thm_2778 b_1 a_2 hyp_1)) (hyp_1 : hol.proof (hol.eq hol.bool a_2 b_1) => thm_818 b_1 a_2 hyp_1).

(; Theorem: |- ((= ((= (p y)) ((= x) y))) ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> ((= x) y)) (p y)))) ;)

(; dict ;)

def thm_2786 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 y_2) (hol.eq A x_1 y_2)) (hol.and (hol.imp (p_3 y_2) (hol.eq A x_1 y_2)) (hol.imp (hol.eq A x_1 y_2) (p_3 y_2)))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => (b_1 : hol.term hol.bool => a_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2))) (hol.eq hol.bool (hol.eq hol.bool a_2 b_1) (hol.and (hol.imp a_2 b_1) (hol.imp b_1 a_2))) (thm_2775 b_1 a_2) (thm_2785 b_1 a_2)) (hol.eq A x_1 y_2) (p_3 y_2).

(; Theorem: |- ((= \lambda y. ((= (p y)) ((= x) y))) \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> ((= x) y)) (p y)))) ;)

(; dict ;)

def thm_2787 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3))) (y_3 : hol.term A => thm_2786 A x_1 y_3 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> ((= x) y)) (p y))))) ;)

(; dict ;)

def thm_2788 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)) (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3))) (thm_7 A) (thm_2787 A x_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) (= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> ((= x) y)) (p y)))))) ;)

(; dict ;)

def thm_2789 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))) thm_1106 (thm_2788 A x_1 p_2).

(; Theorem: |- ((= ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) ;)

(; dict ;)

def thm_2790 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ((= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> ((= x) y)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_2791 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3)))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3))))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (thm_2789 A x_1 p_2) (thm_2790 A x_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> ((= x) y)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ((= (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_2792 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (thm_2791 A x_1 p_2).

(; Theorem: |- ((= (Data.Bool.==> (p y))) (Data.Bool.==> (p y))) ;)

(; dict ;)

def thm_2793 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (p_2 y_1)) (hol.imp (p_2 y_1))) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.imp (p_2 y_1)).

(; Theorem: |- ((= ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> (p y)) ((= y) x))) ;)

(; dict ;)

def thm_2794 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_3 y_2) (hol.eq A x_1 y_2)) (hol.imp (p_3 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (p_3 y_2)) (hol.imp (p_3 y_2)) (hol.eq A x_1 y_2) (hol.eq A y_2 x_1) (thm_2793 A y_2 p_3) (thm_35 A y_2 x_1).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y)))) (Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x)))) ;)

(; dict ;)

def thm_2795 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.imp (p_3 y_2) (hol.eq A x_1 y_2))) (hol.and (hol.imp (p_3 y_2) (hol.eq A y_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.imp (p_3 y_2) (hol.eq A x_1 y_2)) (hol.imp (p_3 y_2) (hol.eq A y_2 x_1)) thm_1119 (thm_2794 A x_1 y_2 p_3).

(; Theorem: |- ((= (Data.Bool.==> ((= x) y))) (Data.Bool.==> ((= y) x))) ;)

(; dict ;)

def thm_2796 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq A x_2 y_1)) (hol.imp (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2) thm_1118 (thm_35 A y_1 x_2).

(; Theorem: |- ((= (p y)) (p y)) ;)

(; dict ;)

def thm_2797 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 y_1) (p_2 y_1)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (p_2 y_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= x) y)) (p y))) ((Data.Bool.==> ((= y) x)) (p y))) ;)

(; dict ;)

def thm_2798 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A x_3 y_2) (p_1 y_2)) (hol.imp (hol.eq A y_2 x_3) (p_1 y_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => y_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq A x_3 y_2)) (hol.imp (hol.eq A y_2 x_3)) (p_1 y_2) (p_1 y_2) (thm_2796 A y_2 x_3) (thm_2797 A y_2 p_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> ((= x) y)) (p y)))) ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y)))) ;)

(; dict ;)

def thm_2799 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.imp (p_3 y_2) (hol.eq A x_1 y_2)) (hol.imp (hol.eq A x_1 y_2) (p_3 y_2))) (hol.and (hol.imp (p_3 y_2) (hol.eq A y_2 x_1)) (hol.imp (hol.eq A y_2 x_1) (p_3 y_2)))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and (hol.imp (p_3 y_2) (hol.eq A x_1 y_2))) (hol.and (hol.imp (p_3 y_2) (hol.eq A y_2 x_1))) (hol.imp (hol.eq A x_1 y_2) (p_3 y_2)) (hol.imp (hol.eq A y_2 x_1) (p_3 y_2)) (thm_2795 A x_1 y_2 p_3) (thm_2798 A p_3 y_2 x_1).

(; Theorem: |- ((= \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> ((= x) y)) (p y)))) \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y)))) ;)

(; dict ;)

def thm_2800 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3))) (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3))) (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3))) (y_3 : hol.term A => thm_2799 A x_1 y_3 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> ((= x) y)) (p y))))) (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y))))) ;)

(; dict ;)

def thm_2801 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))) (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3))) (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3))) (thm_7 A) (thm_2800 A x_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> ((= x) y)) (p y)))))) (= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y)))))) ;)

(; dict ;)

def thm_2802 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3))))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))) (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) thm_1106 (thm_2801 A x_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> ((= x) y)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ((= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_2803 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3))))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3))))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (thm_2802 A x_1 p_2) (thm_2790 A x_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ((= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> ((= x) y)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_2804 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (thm_2803 A x_1 p_2).

(; Theorem: |- ((= (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y)) ((Data.Bool.==> (p y)) ((= y) x))) ;)

(; dict ;)

def thm_2805 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((y_4 : hol.term A => hol.imp (p_3 y_4) (hol.eq A y_4 x_2)) y_1) (hol.imp (p_3 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (y_4 : hol.term A => hol.imp (p_3 y_4) (hol.eq A y_4 x_2)) y_1.

(; Theorem: |- ((= (Data.Bool./\ (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y))) (Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x)))) ;)

(; dict ;)

def thm_2806 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((y_4 : hol.term A => hol.imp (p_3 y_4) (hol.eq A y_4 x_2)) y_1)) (hol.and (hol.imp (p_3 y_1) (hol.eq A y_1 x_2)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((y_4 : hol.term A => hol.imp (p_3 y_4) (hol.eq A y_4 x_2)) y_1) (hol.imp (p_3 y_1) (hol.eq A y_1 x_2)) thm_1119 (thm_2805 A y_1 x_2 p_3).

(; Theorem: |- ((= (\lambda y. ((Data.Bool.==> ((= y) x)) (p y)) y)) ((Data.Bool.==> ((= y) x)) (p y))) ;)

(; dict ;)

def thm_2807 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool ((y_4 : hol.term A => hol.imp (hol.eq A y_4 x_3) (p_2 y_4)) y_1) (hol.imp (hol.eq A y_1 x_3) (p_2 y_1))) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => hol.BETA_CONV A hol.bool (y_4 : hol.term A => hol.imp (hol.eq A y_4 x_3) (p_2 y_4)) y_1.

(; Theorem: |- ((= ((Data.Bool./\ (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y)) (\lambda y. ((Data.Bool.==> ((= y) x)) (p y)) y))) ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y)))) ;)

(; dict ;)

def thm_2808 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and ((y_4 : hol.term A => hol.imp (p_3 y_4) (hol.eq A y_4 x_2)) y_1) ((y_4 : hol.term A => hol.imp (hol.eq A y_4 x_2) (p_3 y_4)) y_1)) (hol.and (hol.imp (p_3 y_1) (hol.eq A y_1 x_2)) (hol.imp (hol.eq A y_1 x_2) (p_3 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and ((y_4 : hol.term A => hol.imp (p_3 y_4) (hol.eq A y_4 x_2)) y_1)) (hol.and (hol.imp (p_3 y_1) (hol.eq A y_1 x_2))) ((y_4 : hol.term A => hol.imp (hol.eq A y_4 x_2) (p_3 y_4)) y_1) (hol.imp (hol.eq A y_1 x_2) (p_3 y_1)) (thm_2806 A y_1 x_2 p_3) (thm_2807 A y_1 p_3 x_2).

(; Theorem: |- ((= \lambda y. ((Data.Bool./\ (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y)) (\lambda y. ((Data.Bool.==> ((= y) x)) (p y)) y))) \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y)))) ;)

(; dict ;)

def thm_2809 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3) ((y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3)) (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (y_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3) ((y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3)) (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3))) (y_3 : hol.term A => thm_2808 A y_3 x_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool./\ (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y)) (\lambda y. ((Data.Bool.==> ((= y) x)) (p y)) y)))) (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y))))) ;)

(; dict ;)

def thm_2810 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3) ((y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3))) (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3) ((y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3)) (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3))) (thm_7 A) (thm_2809 A x_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda y. ((Data.Bool./\ (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y)) (\lambda y. ((Data.Bool.==> ((= y) x)) (p y)) y))))) (= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y)))))) ;)

(; dict ;)

def thm_2811 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3) ((y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3)))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (y_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3) ((y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3))) (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) thm_1106 (thm_2810 A x_1 p_2).

(; Theorem: |- ((= \lambda y. (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y)) \lambda y. ((Data.Bool.==> (p y)) ((= y) x))) ;)

(; dict ;)

def thm_2812 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3) (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3) (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (y_3 : hol.term A => thm_2805 A y_3 x_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y))) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) ;)

(; dict ;)

def thm_2813 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3)) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3) (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (thm_7 A) (thm_2812 A x_1 p_2).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y)))) (Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) ;)

(; dict ;)

def thm_2814 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3)) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) thm_1119 (thm_2813 A x_1 p_2).

(; Theorem: |- ((= \lambda y. (\lambda y. ((Data.Bool.==> ((= y) x)) (p y)) y)) \lambda y. ((Data.Bool.==> ((= y) x)) (p y))) ;)

(; dict ;)

def thm_2815 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.eq A y_4 x_2) (p_1 y_4)) y_3) (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 y_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.ABS_THM A hol.bool (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.eq A y_4 x_2) (p_1 y_4)) y_3) (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 y_3)) (y_3 : hol.term A => thm_2807 A y_3 p_1 x_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> ((= y) x)) (p y)) y))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p y)))) ;)

(; dict ;)

def thm_2816 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.eq A y_4 x_2) (p_1 y_4)) y_3)) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 y_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.eq A y_4 x_2) (p_1 y_4)) y_3) (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 y_3)) (thm_7 A) (thm_2815 A p_1 x_2).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y))) (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> ((= y) x)) (p y)) y)))) ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p y))))) ;)

(; dict ;)

def thm_2817 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3)) (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3)) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3))) (thm_2814 A x_1 p_2) (thm_2816 A p_2 x_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. ((Data.Bool./\ (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y)) (\lambda y. ((Data.Bool.==> ((= y) x)) (p y)) y)))) ((Data.Bool./\ (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y))) (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> ((= y) x)) (p y)) y))))) ((= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y))))) ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p y)))))) ;)

(; dict ;)

def thm_2818 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3) ((y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3))) (hol.and (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3)) (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3)))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3) ((y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3)))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3))))) (hol.and (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3)) (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (thm_2811 A x_1 p_2) (thm_2817 A x_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_2819 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. ((Data.Bool./\ (p y)) (q y)))) ((Data.Bool./\ (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda y. (q y))))) ((= (Data.Bool.! \lambda y. ((Data.Bool./\ (p y)) (q y)))) ((Data.Bool./\ (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda y. (q y))))) ;)

(; dict ;)

def thm_2820 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (p_2 y_3) (q_1 y_3))) (hol.and (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3)))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (p_2 y_3) (q_1 y_3))) (hol.and (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (p_2 y_3) (q_1 y_3))) (hol.and (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ((= (Data.Bool.! \lambda y. ((Data.Bool./\ (p y)) (q y)))) ((Data.Bool./\ (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda y. (q y))))) ;)

(; dict ;)

def thm_2821 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (p_2 y_3) (q_1 y_3))) (hol.and (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (p_2 y_3) (q_1 y_3))) (hol.and (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3)))) (thm_2819 A q_1 p_2) (thm_2820 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool./\ (p y)) (q y)))) ((Data.Bool./\ (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda y. (q y)))) ;)

(; dict ;)

def thm_2822 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (p_2 y_3) (q_1 y_3))) (hol.and (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (p_2 y_3) (q_1 y_3))) (hol.and (hol.forall A (y_3 : hol.term A => p_2 y_3)) (hol.forall A (y_3 : hol.term A => q_1 y_3)))) (thm_2821 A q_1 p_2) (thm_1551 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool./\ (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y)) (\lambda y. ((Data.Bool.==> ((= y) x)) (p y)) y)))) ((Data.Bool./\ (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> (p y)) ((= y) x)) y))) (Data.Bool.! \lambda y. (\lambda y. ((Data.Bool.==> ((= y) x)) (p y)) y)))) ;)

(; dict ;)

def thm_2823 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3) ((y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3))) (hol.and (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3)) (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => thm_2822 A q_1 p_2) A q_1 p_2) A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)) (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y))))) ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p y))))) ;)

(; dict ;)

def thm_2824 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3) ((y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3))) (hol.and (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (p_2 y_4) (hol.eq A y_4 x_1)) y_3)) (hol.forall A (y_3 : hol.term A => (y_4 : hol.term A => hol.imp (hol.eq A y_4 x_1) (p_2 y_4)) y_3)))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3))))) (thm_2818 A x_1 p_2) (thm_2823 A x_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y)))))) (= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p y)))))) ;)

(; dict ;)

def thm_2825 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) thm_1106 (thm_2824 A x_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_2826 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3))))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (thm_2825 A x_1 p_2) (thm_2790 A x_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ((= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_2827 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (thm_2826 A x_1 p_2).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) (Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) ;)

(; dict ;)

def thm_2828 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))).

(; Theorem: |- ((= ((Data.Bool.==> ((= p) p')) ((Data.Bool.==> ((Data.Bool.==> p') ((= q) q'))) ((= ((Data.Bool.==> p) q)) ((Data.Bool.==> p') q'))))) ((Data.Bool.==> ((= p) p')) ((Data.Bool.==> ((Data.Bool.==> p') ((= q) q'))) ((= ((Data.Bool.==> p) q)) ((Data.Bool.==> p') q'))))) ;)

(; dict ;)

def thm_2829 : q_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_27_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool p_4 p_27_3) (hol.imp (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) (hol.eq hol.bool (hol.imp p_4 q_2) (hol.imp p_27_3 q_27_1)))) (hol.imp (hol.eq hol.bool p_4 p_27_3) (hol.imp (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) (hol.eq hol.bool (hol.imp p_4 q_2) (hol.imp p_27_3 q_27_1))))) :=
  q_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_27_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.eq hol.bool p_4 p_27_3) (hol.imp (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) (hol.eq hol.bool (hol.imp p_4 q_2) (hol.imp p_27_3 q_27_1)))).

(; Theorem: |- ((= ((Data.Bool.==> ((= p) p')) ((Data.Bool.==> ((Data.Bool.==> p') ((= q) q'))) ((= ((Data.Bool.==> p) q)) ((Data.Bool.==> p') q'))))) ((Data.Bool.==> ((= p) p')) ((Data.Bool.==> ((Data.Bool.==> p') ((= q) q'))) ((= ((Data.Bool.==> p) q)) ((Data.Bool.==> p') q'))))) ;)

(; dict ;)

def thm_2830 : q_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_27_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool p_4 p_27_3) (hol.imp (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) (hol.eq hol.bool (hol.imp p_4 q_2) (hol.imp p_27_3 q_27_1)))) (hol.imp (hol.eq hol.bool p_4 p_27_3) (hol.imp (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) (hol.eq hol.bool (hol.imp p_4 q_2) (hol.imp p_27_3 q_27_1))))) :=
  q_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_27_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.eq hol.bool p_4 p_27_3) (hol.imp (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) (hol.eq hol.bool (hol.imp p_4 q_2) (hol.imp p_27_3 q_27_1)))) (hol.imp (hol.eq hol.bool p_4 p_27_3) (hol.imp (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) (hol.eq hol.bool (hol.imp p_4 q_2) (hol.imp p_27_3 q_27_1)))) (hol.imp (hol.eq hol.bool p_4 p_27_3) (hol.imp (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) (hol.eq hol.bool (hol.imp p_4 q_2) (hol.imp p_27_3 q_27_1)))) (thm_2829 q_27_1 q_2 p_27_3 p_4) (thm_2829 q_27_1 q_2 p_27_3 p_4).

(; Theorem: |- ((Data.Bool.==> p) p') ;)

(; dict ;)

def thm_2831 : p_27_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_2 p_27_1) -> hol.proof (hol.imp p_2 p_27_1) :=
  p_27_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_2 p_27_1) => hyp_1.

(; Theorem: |- p' ;)

(; dict ;)

def thm_2832 : p_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 p_27_2) -> hol.proof p_27_2 :=
  p_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 p_27_2) => thm_2831 p_27_2 p_1 hyp_2 (thm_64 p_1 hyp_1).

(; Theorem: |- p' ;)

(; dict ;)

def thm_2833 : p_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 p_27_2) -> hol.proof p_27_2 :=
  p_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 p_27_2) => hol.PROVE_HYP p_1 p_27_2 (thm_64 p_1 hyp_1) (hyp_3 : hol.proof p_1 => thm_2832 p_1 p_27_2 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> p') q') ;)

(; dict ;)

def thm_2834 : q_27_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_27_2 q_27_1) -> hol.proof (hol.imp p_27_2 q_27_1) :=
  q_27_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_27_2 q_27_1) => hyp_1.

(; Theorem: |- p' ;)

(; dict ;)

def thm_2835 : p_27_1 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hol.proof p_27_1 :=
  p_27_1 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_1.

(; Theorem: |- q' ;)

(; dict ;)

def thm_2836 : p_27_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hyp_2 : hol.proof (hol.imp p_27_1 q_27_2) -> hol.proof q_27_2 :=
  p_27_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_2 : hol.proof (hol.imp p_27_1 q_27_2) => thm_2834 q_27_2 p_27_1 hyp_2 (thm_2835 p_27_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q') q) ;)

(; dict ;)

def thm_2837 : q_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp q_27_2 q_1) -> hol.proof (hol.imp q_27_2 q_1) :=
  q_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp q_27_2 q_1) => hyp_1.

(; Theorem: |- q' ;)

(; dict ;)

def thm_2838 : q_27_1 : hol.term hol.bool -> hyp_1 : hol.proof q_27_1 -> hol.proof q_27_1 :=
  q_27_1 : hol.term hol.bool => hyp_1 : hol.proof q_27_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_2839 : q_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof q_27_1 -> hyp_2 : hol.proof (hol.imp q_27_1 q_2) -> hol.proof q_2 :=
  q_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof q_27_1 => hyp_2 : hol.proof (hol.imp q_27_1 q_2) => thm_2837 q_2 q_27_1 hyp_2 (thm_2838 q_27_1 hyp_1).

(; Theorem: |- q ;)

(; dict ;)

def thm_2840 : q_27_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_27_2 -> hyp_2 : hol.proof (hol.imp p_27_2 q_27_1) -> hyp_3 : hol.proof (hol.imp q_27_1 q_3) -> hol.proof q_3 :=
  q_27_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_27_2 => hyp_2 : hol.proof (hol.imp p_27_2 q_27_1) => hyp_3 : hol.proof (hol.imp q_27_1 q_3) => hol.PROVE_HYP q_27_1 q_3 (thm_2836 p_27_2 q_27_1 hyp_1 hyp_2) (hyp_4 : hol.proof q_27_1 => thm_2839 q_27_1 q_3 hyp_4 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> q) q')) q) ;)

(; dict ;)

def thm_2841 : p_27_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hyp_2 : hol.proof (hol.imp p_27_1 q_27_2) -> hyp_3 : hol.proof (hol.imp q_27_2 q_3) -> hol.proof (hol.imp (hol.imp q_3 q_27_2) q_3) :=
  p_27_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_2 : hol.proof (hol.imp p_27_1 q_27_2) => hyp_3 : hol.proof (hol.imp q_27_2 q_3) => hyp_4 : hol.proof (hol.imp q_3 q_27_2) => thm_2840 q_27_2 p_27_1 q_3 hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> q') q)) ((Data.Bool.==> ((Data.Bool.==> q) q')) q)) ;)

(; dict ;)

def thm_2842 : p_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> q_27_3 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hyp_2 : hol.proof (hol.imp p_27_1 q_27_3) -> hol.proof (hol.imp (hol.imp q_27_3 q_2) (hol.imp (hol.imp q_2 q_27_3) q_2)) :=
  p_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => q_27_3 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_2 : hol.proof (hol.imp p_27_1 q_27_3) => hyp_3 : hol.proof (hol.imp q_27_3 q_2) => thm_2841 p_27_1 q_27_3 q_2 hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.==> ((= q) q')) ((Data.Bool.==> q) q')) ;)

(; dict ;)

def thm_2843 : q_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool q_2 q_27_1) (hol.imp q_2 q_27_1)) :=
  q_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_774 q_1 p_2) q_27_1 q_2.

(; Theorem: |- ((Data.Bool.==> p') ((= q) q')) ;)

(; dict ;)

def thm_2844 : q_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_27_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) -> hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) :=
  q_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_27_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) => hyp_1.

(; Theorem: |- ((= q) q') ;)

(; dict ;)

def thm_2845 : p_27_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hyp_2 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_3 q_27_2)) -> hol.proof (hol.eq hol.bool q_3 q_27_2) :=
  p_27_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_2 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_3 q_27_2)) => thm_2844 q_27_2 q_3 p_27_1 hyp_2 (thm_2835 p_27_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q') ;)

(; dict ;)

def thm_2846 : p_27_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hyp_2 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_3 q_27_2)) -> hol.proof (hol.imp q_3 q_27_2) :=
  p_27_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_2 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_3 q_27_2)) => thm_2843 q_27_2 q_3 (thm_2845 p_27_1 q_27_2 q_3 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool.==> q') q)) ((Data.Bool./\ ((Data.Bool.==> q) q')) ((Data.Bool.==> q') q))) ;)

(; dict ;)

def thm_2847 : q_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp q_1 q_27_2) -> hol.proof (hol.eq hol.bool (hol.imp q_27_2 q_1) (hol.and (hol.imp q_1 q_27_2) (hol.imp q_27_2 q_1))) :=
  q_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp q_1 q_27_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.imp q_1 q_27_2) (hol.imp q_27_2 q_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> q') q)) ((Data.Bool./\ ((Data.Bool.==> q) q')) ((Data.Bool.==> q') q))) ;)

(; dict ;)

def thm_2848 : p_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> q_27_3 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hyp_2 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_2 q_27_3)) -> hol.proof (hol.eq hol.bool (hol.imp q_27_3 q_2) (hol.and (hol.imp q_2 q_27_3) (hol.imp q_27_3 q_2))) :=
  p_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => q_27_3 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_2 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_2 q_27_3)) => hol.PROVE_HYP (hol.imp q_2 q_27_3) (hol.eq hol.bool (hol.imp q_27_3 q_2) (hol.and (hol.imp q_2 q_27_3) (hol.imp q_27_3 q_2))) (thm_2846 p_27_1 q_27_3 q_2 hyp_1 hyp_2) (hyp_3 : hol.proof (hol.imp q_2 q_27_3) => thm_2847 q_2 q_27_3 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((= q) q')) ((Data.Bool.==> q') q)) ;)

(; dict ;)

def thm_2849 : q_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool q_2 q_27_1) (hol.imp q_27_1 q_2)) :=
  q_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_815 q_1 p_2) q_27_1 q_2.

(; Theorem: |- ((Data.Bool.==> q') q) ;)

(; dict ;)

def thm_2850 : p_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> q_27_3 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hyp_2 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_2 q_27_3)) -> hol.proof (hol.imp q_27_3 q_2) :=
  p_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => q_27_3 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_2 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_2 q_27_3)) => thm_2849 q_27_3 q_2 (thm_2845 p_27_1 q_27_3 q_2 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> q) q')) ((Data.Bool.==> q') q)) ;)

(; dict ;)

def thm_2851 : p_27_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hyp_2 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_3 q_27_2)) -> hol.proof (hol.and (hol.imp q_3 q_27_2) (hol.imp q_27_2 q_3)) :=
  p_27_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_2 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_3 q_27_2)) => hol.EQ_MP (hol.imp q_27_2 q_3) (hol.and (hol.imp q_3 q_27_2) (hol.imp q_27_2 q_3)) (thm_2848 p_27_1 q_3 q_27_2 hyp_1 hyp_2) (thm_2850 p_27_1 q_3 q_27_2 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q') q) ;)

(; dict ;)

def thm_2852 : q_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp q_1 q_27_2) (hol.imp q_27_2 q_1)) -> hol.proof (hol.imp q_27_2 q_1) :=
  q_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp q_1 q_27_2) (hol.imp q_27_2 q_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.imp q_1 q_27_2) (hol.imp q_27_2 q_1) hyp_1.

(; Theorem: |- ((Data.Bool.==> q') q) ;)

(; dict ;)

def thm_2853 : p_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> q_27_3 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hyp_2 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_2 q_27_3)) -> hol.proof (hol.imp q_27_3 q_2) :=
  p_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => q_27_3 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_2 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_2 q_27_3)) => hol.PROVE_HYP (hol.and (hol.imp q_2 q_27_3) (hol.imp q_27_3 q_2)) (hol.imp q_27_3 q_2) (thm_2851 p_27_1 q_27_3 q_2 hyp_1 hyp_2) (hyp_3 : hol.proof (hol.and (hol.imp q_2 q_27_3) (hol.imp q_27_3 q_2)) => thm_2852 q_2 q_27_3 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> q) q')) q) ;)

(; dict ;)

def thm_2854 : p_27_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hyp_2 : hol.proof (hol.imp p_27_1 q_27_2) -> hyp_3 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_3 q_27_2)) -> hol.proof (hol.imp (hol.imp q_3 q_27_2) q_3) :=
  p_27_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_2 : hol.proof (hol.imp p_27_1 q_27_2) => hyp_3 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_3 q_27_2)) => thm_2842 p_27_1 q_3 q_27_2 hyp_1 hyp_2 (thm_2853 p_27_1 q_3 q_27_2 hyp_1 hyp_3).

(; Theorem: |- q ;)

(; dict ;)

def thm_2855 : q_27_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_27_2 -> hyp_2 : hol.proof (hol.imp p_27_2 q_27_1) -> hyp_3 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_3 q_27_1)) -> hol.proof q_3 :=
  q_27_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_27_2 => hyp_2 : hol.proof (hol.imp p_27_2 q_27_1) => hyp_3 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_3 q_27_1)) => thm_2854 p_27_2 q_27_1 q_3 hyp_1 hyp_2 hyp_3 (thm_2846 p_27_2 q_27_1 q_3 hyp_1 hyp_3).

(; Theorem: |- q ;)

(; dict ;)

def thm_2856 : q_27_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> q_4 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof (hol.imp p_3 p_27_2) -> hyp_3 : hol.proof (hol.imp p_27_2 q_27_1) -> hyp_4 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_4 q_27_1)) -> hol.proof q_4 :=
  q_27_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof (hol.imp p_3 p_27_2) => hyp_3 : hol.proof (hol.imp p_27_2 q_27_1) => hyp_4 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_4 q_27_1)) => hol.PROVE_HYP p_27_2 q_4 (thm_2833 p_3 p_27_2 hyp_1 hyp_2) (hyp_5 : hol.proof p_27_2 => thm_2855 q_27_1 p_27_2 q_4 hyp_5 hyp_3 hyp_4).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) p')) q) ;)

(; dict ;)

def thm_2857 : q_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_27_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof p_4 -> hyp_2 : hol.proof (hol.imp p_27_3 q_27_1) -> hyp_3 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) -> hol.proof (hol.imp (hol.imp p_4 p_27_3) q_2) :=
  q_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_27_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof p_4 => hyp_2 : hol.proof (hol.imp p_27_3 q_27_1) => hyp_3 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) => hyp_4 : hol.proof (hol.imp p_4 p_27_3) => thm_2856 q_27_1 p_27_3 p_4 q_2 hyp_1 hyp_4 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p') p)) ((Data.Bool.==> ((Data.Bool.==> p) p')) q)) ;)

(; dict ;)

def thm_2858 : q_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> p_27_4 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof (hol.imp p_27_4 q_27_1) -> hyp_3 : hol.proof (hol.imp p_27_4 (hol.eq hol.bool q_2 q_27_1)) -> hol.proof (hol.imp (hol.imp p_27_4 p_3) (hol.imp (hol.imp p_3 p_27_4) q_2)) :=
  q_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => p_27_4 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof (hol.imp p_27_4 q_27_1) => hyp_3 : hol.proof (hol.imp p_27_4 (hol.eq hol.bool q_2 q_27_1)) => hyp_4 : hol.proof (hol.imp p_27_4 p_3) => thm_2857 q_27_1 q_2 p_27_4 p_3 hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.==> ((= p) p')) ((Data.Bool.==> p) p')) ;)

(; dict ;)

def thm_2859 : p_27_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 p_27_1) (hol.imp p_2 p_27_1)) :=
  p_27_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_774 q_1 p_2) p_27_1 p_2.

(; Theorem: |- ((= p) p') ;)

(; dict ;)

def thm_2860 : p_27_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 p_27_1) -> hol.proof (hol.eq hol.bool p_2 p_27_1) :=
  p_27_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 p_27_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> p) p') ;)

(; dict ;)

def thm_2861 : p_27_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 p_27_1) -> hol.proof (hol.imp p_2 p_27_1) :=
  p_27_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 p_27_1) => thm_2859 p_27_1 p_2 (thm_2860 p_27_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> p') p)) ((Data.Bool./\ ((Data.Bool.==> p) p')) ((Data.Bool.==> p') p))) ;)

(; dict ;)

def thm_2862 : p_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_1 p_27_2) -> hol.proof (hol.eq hol.bool (hol.imp p_27_2 p_1) (hol.and (hol.imp p_1 p_27_2) (hol.imp p_27_2 p_1))) :=
  p_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_1 p_27_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.imp p_1 p_27_2) (hol.imp p_27_2 p_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> p') p)) ((Data.Bool./\ ((Data.Bool.==> p) p')) ((Data.Bool.==> p') p))) ;)

(; dict ;)

def thm_2863 : p_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 p_27_2) -> hol.proof (hol.eq hol.bool (hol.imp p_27_2 p_1) (hol.and (hol.imp p_1 p_27_2) (hol.imp p_27_2 p_1))) :=
  p_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 p_27_2) => hol.PROVE_HYP (hol.imp p_1 p_27_2) (hol.eq hol.bool (hol.imp p_27_2 p_1) (hol.and (hol.imp p_1 p_27_2) (hol.imp p_27_2 p_1))) (thm_2861 p_27_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.imp p_1 p_27_2) => thm_2862 p_1 p_27_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= p) p')) ((Data.Bool.==> p') p)) ;)

(; dict ;)

def thm_2864 : p_27_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 p_27_1) (hol.imp p_27_1 p_2)) :=
  p_27_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_815 q_1 p_2) p_27_1 p_2.

(; Theorem: |- ((Data.Bool.==> p') p) ;)

(; dict ;)

def thm_2865 : p_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 p_27_2) -> hol.proof (hol.imp p_27_2 p_1) :=
  p_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 p_27_2) => thm_2864 p_27_2 p_1 (thm_2860 p_27_2 p_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> p) p')) ((Data.Bool.==> p') p)) ;)

(; dict ;)

def thm_2866 : p_27_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 p_27_1) -> hol.proof (hol.and (hol.imp p_2 p_27_1) (hol.imp p_27_1 p_2)) :=
  p_27_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 p_27_1) => hol.EQ_MP (hol.imp p_27_1 p_2) (hol.and (hol.imp p_2 p_27_1) (hol.imp p_27_1 p_2)) (thm_2863 p_2 p_27_1 hyp_1) (thm_2865 p_2 p_27_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> p') p) ;)

(; dict ;)

def thm_2867 : p_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp p_1 p_27_2) (hol.imp p_27_2 p_1)) -> hol.proof (hol.imp p_27_2 p_1) :=
  p_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp p_1 p_27_2) (hol.imp p_27_2 p_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_78 p_1 q_2 hyp_1) (hol.imp p_1 p_27_2) (hol.imp p_27_2 p_1) hyp_1.

(; Theorem: |- ((Data.Bool.==> p') p) ;)

(; dict ;)

def thm_2868 : p_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 p_27_2) -> hol.proof (hol.imp p_27_2 p_1) :=
  p_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 p_27_2) => hol.PROVE_HYP (hol.and (hol.imp p_1 p_27_2) (hol.imp p_27_2 p_1)) (hol.imp p_27_2 p_1) (thm_2866 p_27_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (hol.imp p_1 p_27_2) (hol.imp p_27_2 p_1)) => thm_2867 p_1 p_27_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) p')) q) ;)

(; dict ;)

def thm_2869 : q_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_27_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof p_4 -> hyp_2 : hol.proof (hol.eq hol.bool p_4 p_27_3) -> hyp_3 : hol.proof (hol.imp p_27_3 q_27_1) -> hyp_4 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) -> hol.proof (hol.imp (hol.imp p_4 p_27_3) q_2) :=
  q_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_27_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof p_4 => hyp_2 : hol.proof (hol.eq hol.bool p_4 p_27_3) => hyp_3 : hol.proof (hol.imp p_27_3 q_27_1) => hyp_4 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) => thm_2858 q_27_1 q_2 p_4 p_27_3 hyp_1 hyp_3 hyp_4 (thm_2868 p_4 p_27_3 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_2870 : q_27_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> q_4 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof (hol.eq hol.bool p_3 p_27_2) -> hyp_3 : hol.proof (hol.imp p_27_2 q_27_1) -> hyp_4 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_4 q_27_1)) -> hol.proof q_4 :=
  q_27_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => p_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof (hol.eq hol.bool p_3 p_27_2) => hyp_3 : hol.proof (hol.imp p_27_2 q_27_1) => hyp_4 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_4 q_27_1)) => thm_2869 q_27_1 q_4 p_27_2 p_3 hyp_1 hyp_2 hyp_3 hyp_4 (thm_2861 p_27_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_2871 : q_27_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_4 p_27_2) -> hyp_2 : hol.proof (hol.imp p_27_2 q_27_1) -> hyp_3 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_3 q_27_1)) -> hol.proof (hol.imp p_4 q_3) :=
  q_27_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => q_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_4 p_27_2) => hyp_2 : hol.proof (hol.imp p_27_2 q_27_1) => hyp_3 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_3 q_27_1)) => hyp_4 : hol.proof p_4 => thm_2870 q_27_1 p_27_2 p_4 q_3 hyp_4 hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p') q')) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_2872 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_27_3 : hol.term hol.bool -> p_27_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 p_27_4) -> hyp_2 : hol.proof (hol.imp p_27_4 (hol.eq hol.bool q_1 q_27_3)) -> hol.proof (hol.imp (hol.imp p_27_4 q_27_3) (hol.imp p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_27_3 : hol.term hol.bool => p_27_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 p_27_4) => hyp_2 : hol.proof (hol.imp p_27_4 (hol.eq hol.bool q_1 q_27_3)) => hyp_3 : hol.proof (hol.imp p_27_4 q_27_3) => thm_2871 q_27_3 p_27_4 q_1 p_2 hyp_1 hyp_3 hyp_2.

(; Theorem: |- ((Data.Bool.==> p') p) ;)

(; dict ;)

def thm_2873 : p_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_27_2 p_1) -> hol.proof (hol.imp p_27_2 p_1) :=
  p_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_27_2 p_1) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_2874 : p_27_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hyp_2 : hol.proof (hol.imp p_27_1 p_2) -> hol.proof p_2 :=
  p_27_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_2 : hol.proof (hol.imp p_27_1 p_2) => thm_2873 p_2 p_27_1 hyp_2 (thm_2835 p_27_1 hyp_1).

(; Theorem: |- p ;)

(; dict ;)

def thm_2875 : p_27_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hyp_2 : hol.proof (hol.imp p_27_1 p_2) -> hol.proof p_2 :=
  p_27_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_2 : hol.proof (hol.imp p_27_1 p_2) => hol.PROVE_HYP p_27_1 p_2 (thm_2835 p_27_1 hyp_1) (hyp_3 : hol.proof p_27_1 => thm_2874 p_27_1 p_2 hyp_3 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_2876 : p_27_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.imp p_2 p_27_1) -> hyp_3 : hol.proof (hol.imp p_27_1 p_2) -> hol.proof p_2 :=
  p_27_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.imp p_2 p_27_1) => hyp_3 : hol.proof (hol.imp p_27_1 p_2) => hol.PROVE_HYP p_27_1 p_2 (thm_2832 p_2 p_27_1 hyp_1 hyp_2) (hyp_4 : hol.proof p_27_1 => thm_2874 p_27_1 p_2 hyp_4 hyp_3).

(; Theorem: |- p ;)

(; dict ;)

def thm_2877 : p_27_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_27_1 -> hyp_2 : hol.proof (hol.imp p_2 p_27_1) -> hyp_3 : hol.proof (hol.imp p_27_1 p_2) -> hol.proof p_2 :=
  p_27_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_27_1 => hyp_2 : hol.proof (hol.imp p_2 p_27_1) => hyp_3 : hol.proof (hol.imp p_27_1 p_2) => hol.PROVE_HYP p_2 p_2 (thm_2875 p_27_1 p_2 hyp_1 hyp_3) (hyp_4 : hol.proof p_2 => thm_2876 p_27_1 p_2 hyp_4 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> q) q') ;)

(; dict ;)

def thm_2878 : q_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp q_2 q_27_1) -> hol.proof (hol.imp q_2 q_27_1) :=
  q_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp q_2 q_27_1) => hyp_1.

(; Theorem: |- q' ;)

(; dict ;)

def thm_2879 : q_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hyp_2 : hol.proof (hol.imp q_1 q_27_2) -> hol.proof q_27_2 :=
  q_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_2 : hol.proof (hol.imp q_1 q_27_2) => thm_2878 q_27_2 q_1 hyp_2 (thm_65 q_1 hyp_1).

(; Theorem: |- q' ;)

(; dict ;)

def thm_2880 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_27_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof (hol.imp p_2 q_1) -> hyp_3 : hol.proof (hol.imp q_1 q_27_3) -> hol.proof q_27_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_27_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof (hol.imp p_2 q_1) => hyp_3 : hol.proof (hol.imp q_1 q_27_3) => hol.PROVE_HYP q_1 q_27_3 (thm_2280 p_2 q_1 hyp_1 hyp_2) (hyp_4 : hol.proof q_1 => thm_2879 q_1 q_27_3 hyp_4 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> q) q')) q') ;)

(; dict ;)

def thm_2881 : p_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 q_3) -> hol.proof (hol.imp (hol.imp q_3 q_27_2) q_27_2) :=
  p_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 q_3) => hyp_3 : hol.proof (hol.imp q_3 q_27_2) => thm_2880 q_3 p_1 q_27_2 hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> q') q)) ((Data.Bool.==> ((Data.Bool.==> q) q')) q')) ;)

(; dict ;)

def thm_2882 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> q_27_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 q_2) -> hol.proof (hol.imp (hol.imp q_27_3 q_2) (hol.imp (hol.imp q_2 q_27_3) q_27_3)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => q_27_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 q_2) => hyp_3 : hol.proof (hol.imp q_27_3 q_2) => thm_2881 p_1 q_27_3 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> q) q')) q') ;)

(; dict ;)

def thm_2883 : p_27_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_27_3 : hol.term hol.bool -> q_4 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof p_27_1 -> hyp_3 : hol.proof (hol.imp p_2 q_4) -> hyp_4 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_4 q_27_3)) -> hol.proof (hol.imp (hol.imp q_4 q_27_3) q_27_3) :=
  p_27_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_27_3 : hol.term hol.bool => q_4 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof p_27_1 => hyp_3 : hol.proof (hol.imp p_2 q_4) => hyp_4 : hol.proof (hol.imp p_27_1 (hol.eq hol.bool q_4 q_27_3)) => thm_2882 p_2 q_4 q_27_3 hyp_1 hyp_3 (thm_2850 p_27_1 q_4 q_27_3 hyp_2 hyp_4).

(; Theorem: |- q' ;)

(; dict ;)

def thm_2884 : q_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> q_27_4 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof p_27_2 -> hyp_3 : hol.proof (hol.imp p_3 q_1) -> hyp_4 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_1 q_27_4)) -> hol.proof q_27_4 :=
  q_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => p_3 : hol.term hol.bool => q_27_4 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof p_27_2 => hyp_3 : hol.proof (hol.imp p_3 q_1) => hyp_4 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_1 q_27_4)) => thm_2883 p_27_2 p_3 q_27_4 q_1 hyp_1 hyp_2 hyp_3 hyp_4 (thm_2846 p_27_2 q_27_4 q_1 hyp_2 hyp_4).

(; Theorem: |- q' ;)

(; dict ;)

def thm_2885 : q_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> q_27_4 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof p_27_2 -> hyp_3 : hol.proof (hol.imp p_3 q_1) -> hyp_4 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_1 q_27_4)) -> hol.proof q_27_4 :=
  q_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => p_3 : hol.term hol.bool => q_27_4 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof p_27_2 => hyp_3 : hol.proof (hol.imp p_3 q_1) => hyp_4 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_1 q_27_4)) => hol.PROVE_HYP p_27_2 q_27_4 (thm_2835 p_27_2 hyp_2) (hyp_5 : hol.proof p_27_2 => thm_2884 q_1 p_27_2 p_3 q_27_4 hyp_1 hyp_5 hyp_3 hyp_4).

(; Theorem: |- q' ;)

(; dict ;)

def thm_2886 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> p_27_3 : hol.term hol.bool -> q_27_4 : hol.term hol.bool -> hyp_1 : hol.proof p_27_3 -> hyp_2 : hol.proof (hol.imp p_2 p_27_3) -> hyp_3 : hol.proof (hol.imp p_2 q_1) -> hyp_4 : hol.proof (hol.imp p_27_3 p_2) -> hyp_5 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_1 q_27_4)) -> hol.proof q_27_4 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => p_27_3 : hol.term hol.bool => q_27_4 : hol.term hol.bool => hyp_1 : hol.proof p_27_3 => hyp_2 : hol.proof (hol.imp p_2 p_27_3) => hyp_3 : hol.proof (hol.imp p_2 q_1) => hyp_4 : hol.proof (hol.imp p_27_3 p_2) => hyp_5 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_1 q_27_4)) => hol.PROVE_HYP p_2 q_27_4 (thm_2877 p_27_3 p_2 hyp_1 hyp_2 hyp_4) (hyp_6 : hol.proof p_2 => thm_2885 q_1 p_27_3 p_2 q_27_4 hyp_6 hyp_1 hyp_3 hyp_5).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) p')) q') ;)

(; dict ;)

def thm_2887 : q_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> p_27_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof p_27_3 -> hyp_2 : hol.proof (hol.imp p_4 q_1) -> hyp_3 : hol.proof (hol.imp p_27_3 p_4) -> hyp_4 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_1 q_27_2)) -> hol.proof (hol.imp (hol.imp p_4 p_27_3) q_27_2) :=
  q_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => p_27_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof p_27_3 => hyp_2 : hol.proof (hol.imp p_4 q_1) => hyp_3 : hol.proof (hol.imp p_27_3 p_4) => hyp_4 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_1 q_27_2)) => hyp_5 : hol.proof (hol.imp p_4 p_27_3) => thm_2886 q_1 p_4 p_27_3 q_27_2 hyp_1 hyp_5 hyp_2 hyp_3 hyp_4.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p') p)) ((Data.Bool.==> ((Data.Bool.==> p) p')) q')) ;)

(; dict ;)

def thm_2888 : q_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> p_27_4 : hol.term hol.bool -> hyp_1 : hol.proof p_27_4 -> hyp_2 : hol.proof (hol.imp p_3 q_1) -> hyp_3 : hol.proof (hol.imp p_27_4 (hol.eq hol.bool q_1 q_27_2)) -> hol.proof (hol.imp (hol.imp p_27_4 p_3) (hol.imp (hol.imp p_3 p_27_4) q_27_2)) :=
  q_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => p_3 : hol.term hol.bool => p_27_4 : hol.term hol.bool => hyp_1 : hol.proof p_27_4 => hyp_2 : hol.proof (hol.imp p_3 q_1) => hyp_3 : hol.proof (hol.imp p_27_4 (hol.eq hol.bool q_1 q_27_2)) => hyp_4 : hol.proof (hol.imp p_27_4 p_3) => thm_2887 q_1 q_27_2 p_27_4 p_3 hyp_1 hyp_2 hyp_4 hyp_3.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) p')) q') ;)

(; dict ;)

def thm_2889 : q_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> p_27_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof p_27_3 -> hyp_2 : hol.proof (hol.eq hol.bool p_4 p_27_3) -> hyp_3 : hol.proof (hol.imp p_4 q_1) -> hyp_4 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_1 q_27_2)) -> hol.proof (hol.imp (hol.imp p_4 p_27_3) q_27_2) :=
  q_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => p_27_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof p_27_3 => hyp_2 : hol.proof (hol.eq hol.bool p_4 p_27_3) => hyp_3 : hol.proof (hol.imp p_4 q_1) => hyp_4 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_1 q_27_2)) => thm_2888 q_1 q_27_2 p_4 p_27_3 hyp_1 hyp_3 hyp_4 (thm_2865 p_4 p_27_3 hyp_2).

(; Theorem: |- q' ;)

(; dict ;)

def thm_2890 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> p_27_3 : hol.term hol.bool -> q_27_4 : hol.term hol.bool -> hyp_1 : hol.proof p_27_3 -> hyp_2 : hol.proof (hol.eq hol.bool p_2 p_27_3) -> hyp_3 : hol.proof (hol.imp p_2 q_1) -> hyp_4 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_1 q_27_4)) -> hol.proof q_27_4 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => p_27_3 : hol.term hol.bool => q_27_4 : hol.term hol.bool => hyp_1 : hol.proof p_27_3 => hyp_2 : hol.proof (hol.eq hol.bool p_2 p_27_3) => hyp_3 : hol.proof (hol.imp p_2 q_1) => hyp_4 : hol.proof (hol.imp p_27_3 (hol.eq hol.bool q_1 q_27_4)) => thm_2889 q_1 q_27_4 p_27_3 p_2 hyp_1 hyp_2 hyp_3 hyp_4 (thm_2861 p_27_3 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> p') q') ;)

(; dict ;)

def thm_2891 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_27_3 : hol.term hol.bool -> p_27_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 p_27_4) -> hyp_2 : hol.proof (hol.imp p_2 q_1) -> hyp_3 : hol.proof (hol.imp p_27_4 (hol.eq hol.bool q_1 q_27_3)) -> hol.proof (hol.imp p_27_4 q_27_3) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_27_3 : hol.term hol.bool => p_27_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 p_27_4) => hyp_2 : hol.proof (hol.imp p_2 q_1) => hyp_3 : hol.proof (hol.imp p_27_4 (hol.eq hol.bool q_1 q_27_3)) => hyp_4 : hol.proof p_27_4 => thm_2890 q_1 p_2 p_27_4 q_27_3 hyp_4 hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) q)) ((Data.Bool.==> p') q')) ;)

(; dict ;)

def thm_2892 : q_27_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_4 p_27_2) -> hyp_2 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_3 q_27_1)) -> hol.proof (hol.imp (hol.imp p_4 q_3) (hol.imp p_27_2 q_27_1)) :=
  q_27_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => q_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_4 p_27_2) => hyp_2 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_3 q_27_1)) => hyp_3 : hol.proof (hol.imp p_4 q_3) => thm_2891 q_3 p_4 q_27_1 p_27_2 hyp_1 hyp_3 hyp_2.

(; Theorem: |- ((= ((Data.Bool.==> p) q)) ((Data.Bool.==> p') q')) ;)

(; dict ;)

def thm_2893 : q_27_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_4 p_27_2) -> hyp_2 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_3 q_27_1)) -> hol.proof (hol.eq hol.bool (hol.imp p_4 q_3) (hol.imp p_27_2 q_27_1)) :=
  q_27_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => q_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_4 p_27_2) => hyp_2 : hol.proof (hol.imp p_27_2 (hol.eq hol.bool q_3 q_27_1)) => hol.PROP_EXT (hol.imp p_4 q_3) (hol.imp p_27_2 q_27_1) (hyp_3 : hol.proof (hol.imp p_27_2 q_27_1) => thm_2872 q_3 p_4 q_27_1 p_27_2 hyp_1 hyp_2 (thm_2834 q_27_1 p_27_2 hyp_3)) (hyp_3 : hol.proof (hol.imp p_4 q_3) => thm_2892 q_27_1 p_27_2 q_3 p_4 hyp_1 hyp_2 (thm_2279 q_3 p_4 hyp_3)).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p') ((= q) q'))) ((= ((Data.Bool.==> p) q)) ((Data.Bool.==> p') q'))) ;)

(; dict ;)

def thm_2894 : p_1 : hol.term hol.bool -> q_27_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> p_27_4 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_1 p_27_4) -> hol.proof (hol.imp (hol.imp p_27_4 (hol.eq hol.bool q_3 q_27_2)) (hol.eq hol.bool (hol.imp p_1 q_3) (hol.imp p_27_4 q_27_2))) :=
  p_1 : hol.term hol.bool => q_27_2 : hol.term hol.bool => q_3 : hol.term hol.bool => p_27_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_1 p_27_4) => hyp_2 : hol.proof (hol.imp p_27_4 (hol.eq hol.bool q_3 q_27_2)) => thm_2893 q_27_2 p_27_4 q_3 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((= p) p')) ((Data.Bool.==> ((Data.Bool.==> p') ((= q) q'))) ((= ((Data.Bool.==> p) q)) ((Data.Bool.==> p') q')))) ;)

(; dict ;)

def thm_2895 : q_27_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_27_3 : hol.term hol.bool -> p_4 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_4 p_27_3) (hol.imp (hol.imp p_27_3 (hol.eq hol.bool q_2 q_27_1)) (hol.eq hol.bool (hol.imp p_4 q_2) (hol.imp p_27_3 q_27_1)))) :=
  q_27_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_27_3 : hol.term hol.bool => p_4 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_4 p_27_3) => thm_2894 p_4 q_27_1 q_2 p_27_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q'. ((Data.Bool.==> ((= p) p')) ((Data.Bool.==> ((Data.Bool.==> p') ((= q) q'))) ((= ((Data.Bool.==> p) q)) ((Data.Bool.==> p') q'))))) ;)

(; dict ;)

def thm_2896 : q_1 : hol.term hol.bool -> p_27_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_27_4 : hol.term hol.bool => hol.imp (hol.eq hol.bool p_3 p_27_2) (hol.imp (hol.imp p_27_2 (hol.eq hol.bool q_1 q_27_4)) (hol.eq hol.bool (hol.imp p_3 q_1) (hol.imp p_27_2 q_27_4))))) :=
  q_1 : hol.term hol.bool => p_27_2 : hol.term hol.bool => p_3 : hol.term hol.bool => q_27_4 : hol.term hol.bool => hol.EQ_MP (hol.imp (hol.eq hol.bool p_3 p_27_2) (hol.imp (hol.imp p_27_2 (hol.eq hol.bool q_1 q_27_4)) (hol.eq hol.bool (hol.imp p_3 q_1) (hol.imp p_27_2 q_27_4)))) (hol.imp (hol.eq hol.bool p_3 p_27_2) (hol.imp (hol.imp p_27_2 (hol.eq hol.bool q_1 q_27_4)) (hol.eq hol.bool (hol.imp p_3 q_1) (hol.imp p_27_2 q_27_4)))) (thm_2830 q_27_4 q_1 p_27_2 p_3) (thm_2895 q_27_4 q_1 p_27_2 p_3).

(; Theorem: |- (Data.Bool.! \lambda p'. (Data.Bool.! \lambda q'. ((Data.Bool.==> ((= p) p')) ((Data.Bool.==> ((Data.Bool.==> p') ((= q) q'))) ((= ((Data.Bool.==> p) q)) ((Data.Bool.==> p') q')))))) ;)

(; dict ;)

def thm_2897 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (p_27_3 : hol.term hol.bool => hol.forall hol.bool (q_27_4 : hol.term hol.bool => hol.imp (hol.eq hol.bool p_2 p_27_3) (hol.imp (hol.imp p_27_3 (hol.eq hol.bool q_1 q_27_4)) (hol.eq hol.bool (hol.imp p_2 q_1) (hol.imp p_27_3 q_27_4)))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => p_27_3 : hol.term hol.bool => thm_2896 q_1 p_27_3 p_2.

(; Theorem: |- (Data.Bool.! \lambda p'. (Data.Bool.! \lambda q'. ((Data.Bool.==> ((= ((= y) x)) p')) ((Data.Bool.==> ((Data.Bool.==> p') ((= (p y)) q'))) ((= ((Data.Bool.==> ((= y) x)) (p y))) ((Data.Bool.==> p') q')))))) ;)

(; dict ;)

def thm_2898 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> y_3 : hol.term A -> hol.proof (hol.forall hol.bool (p_27_4 : hol.term hol.bool => hol.forall hol.bool (q_27_5 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.eq A y_3 x_2) p_27_4) (hol.imp (hol.imp p_27_4 (hol.eq hol.bool (p_1 y_3) q_27_5)) (hol.eq hol.bool (hol.imp (hol.eq A y_3 x_2) (p_1 y_3)) (hol.imp p_27_4 q_27_5)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => y_3 : hol.term A => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_2897 q_1 p_2) (p_1 y_3) (hol.eq A y_3 x_2).

(; Theorem: |- (Data.Bool.! \lambda q'. ((Data.Bool.==> ((= ((= y) x)) p')) ((Data.Bool.==> ((Data.Bool.==> p') ((= (p y)) q'))) ((= ((Data.Bool.==> ((= y) x)) (p y))) ((Data.Bool.==> p') q'))))) ;)

(; dict ;)

def thm_2899 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> p_27_2 : hol.term hol.bool -> x_3 : hol.term A -> y_4 : hol.term A -> hol.proof (hol.forall hol.bool (q_27_5 : hol.term hol.bool => hol.imp (hol.eq hol.bool (hol.eq A y_4 x_3) p_27_2) (hol.imp (hol.imp p_27_2 (hol.eq hol.bool (p_1 y_4) q_27_5)) (hol.eq hol.bool (hol.imp (hol.eq A y_4 x_3) (p_1 y_4)) (hol.imp p_27_2 q_27_5))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => p_27_2 : hol.term hol.bool => x_3 : hol.term A => y_4 : hol.term A => thm_2898 A p_1 x_3 y_4 p_27_2.

(; Theorem: |- ((Data.Bool.==> ((= ((= y) x)) p')) ((Data.Bool.==> ((Data.Bool.==> p') ((= (p y)) q'))) ((= ((Data.Bool.==> ((= y) x)) (p y))) ((Data.Bool.==> p') q')))) ;)

(; dict ;)

def thm_2900 : A : hol.type -> q_27_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> p_27_3 : hol.term hol.bool -> x_4 : hol.term A -> y_5 : hol.term A -> hol.proof (hol.imp (hol.eq hol.bool (hol.eq A y_5 x_4) p_27_3) (hol.imp (hol.imp p_27_3 (hol.eq hol.bool (p_2 y_5) q_27_1)) (hol.eq hol.bool (hol.imp (hol.eq A y_5 x_4) (p_2 y_5)) (hol.imp p_27_3 q_27_1)))) :=
  A : hol.type => q_27_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => p_27_3 : hol.term hol.bool => x_4 : hol.term A => y_5 : hol.term A => thm_2899 A p_2 p_27_3 x_4 y_5 q_27_1.

(; Theorem: |- ((Data.Bool.==> ((= ((= y) x)) ((= y) x))) ((Data.Bool.==> ((Data.Bool.==> ((= y) x)) ((= (p y)) q'))) ((= ((Data.Bool.==> ((= y) x)) (p y))) ((Data.Bool.==> ((= y) x)) q')))) ;)

(; dict ;)

def thm_2901 : A : hol.type -> q_27_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> x_3 : hol.term A -> y_4 : hol.term A -> hol.proof (hol.imp (hol.eq hol.bool (hol.eq A y_4 x_3) (hol.eq A y_4 x_3)) (hol.imp (hol.imp (hol.eq A y_4 x_3) (hol.eq hol.bool (p_2 y_4) q_27_1)) (hol.eq hol.bool (hol.imp (hol.eq A y_4 x_3) (p_2 y_4)) (hol.imp (hol.eq A y_4 x_3) q_27_1)))) :=
  A : hol.type => q_27_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => y_4 : hol.term A => (A : hol.type => q_27_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => p_27_3 : hol.term hol.bool => x_4 : hol.term A => y_5 : hol.term A => thm_2900 A q_27_1 p_2 p_27_3 x_4 y_5) A q_27_1 p_2 (hol.eq A y_4 x_3) x_3 y_4.

(; Theorem: |- ((= ((= y) x)) ((= y) x)) ;)

(; dict ;)

def thm_2902 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A y_2 x_1) (hol.eq A y_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => hol.REFL hol.bool (hol.eq A y_2 x_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= y) x)) ((= (p y)) q'))) ((= ((Data.Bool.==> ((= y) x)) (p y))) ((Data.Bool.==> ((= y) x)) q'))) ;)

(; dict ;)

def thm_2903 : A : hol.type -> q_27_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> x_3 : hol.term A -> y_4 : hol.term A -> hol.proof (hol.imp (hol.imp (hol.eq A y_4 x_3) (hol.eq hol.bool (p_2 y_4) q_27_1)) (hol.eq hol.bool (hol.imp (hol.eq A y_4 x_3) (p_2 y_4)) (hol.imp (hol.eq A y_4 x_3) q_27_1))) :=
  A : hol.type => q_27_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => y_4 : hol.term A => thm_2901 A q_27_1 p_2 x_3 y_4 (thm_2902 A x_3 y_4).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= y) x)) ((= (p y)) (p x)))) ((= ((Data.Bool.==> ((= y) x)) (p y))) ((Data.Bool.==> ((= y) x)) (p x)))) ;)

(; dict ;)

def thm_2904 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> y_3 : hol.term A -> hol.proof (hol.imp (hol.imp (hol.eq A y_3 x_2) (hol.eq hol.bool (p_1 y_3) (p_1 x_2))) (hol.eq hol.bool (hol.imp (hol.eq A y_3 x_2) (p_1 y_3)) (hol.imp (hol.eq A y_3 x_2) (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => y_3 : hol.term A => (A : hol.type => q_27_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => y_4 : hol.term A => thm_2903 A q_27_1 p_2 x_3 y_4) A (p_1 x_2) p_1 x_2 y_3.

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_2905 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) p_1 p_1) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) p_1.

(; Theorem: |- ((= (p y)) (p x)) ;)

(; dict ;)

def thm_2906 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq A y_2 x_1) -> hol.proof (hol.eq hol.bool (p_3 y_2) (p_3 x_1)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq A y_2 x_1) => hol.APP_THM A hol.bool p_3 p_3 y_2 x_1 (thm_2905 A p_3) (thm_33 A x_1 y_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= y) x)) ((= (p y)) (p x))) ;)

(; dict ;)

def thm_2907 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> y_3 : hol.term A -> hol.proof (hol.imp (hol.eq A y_3 x_2) (hol.eq hol.bool (p_1 y_3) (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => y_3 : hol.term A => hyp_1 : hol.proof (hol.eq A y_3 x_2) => thm_2906 A x_2 y_3 p_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> ((= y) x)) (p y))) ((Data.Bool.==> ((= y) x)) (p x))) ;)

(; dict ;)

def thm_2908 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> y_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A y_3 x_2) (p_1 y_3)) (hol.imp (hol.eq A y_3 x_2) (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => y_3 : hol.term A => thm_2904 A p_1 x_2 y_3 (thm_2907 A p_1 x_2 y_3).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((= y) x)) (p y))) \lambda y. ((Data.Bool.==> ((= y) x)) (p x))) ;)

(; dict ;)

def thm_2909 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 y_3)) (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.ABS_THM A hol.bool (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 y_3)) (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2)) (y_3 : hol.term A => thm_2908 A p_1 x_2 y_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p y)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x)))) ;)

(; dict ;)

def thm_2910 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 y_3))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 y_3)) (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2)) (thm_7 A) (thm_2909 A p_1 x_2).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p y))))) ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x))))) ;)

(; dict ;)

def thm_2911 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1))) (thm_2828 A x_1 p_2) (thm_2910 A p_2 x_1).

(; Theorem: |- ((= (= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p y)))))) (= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x)))))) ;)

(; dict ;)

def thm_2912 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1)))) thm_1106 (thm_2911 A x_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_2913 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1))))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (thm_2912 A x_1 p_2) (thm_2790 A x_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_2914 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (thm_2913 A x_1 p_2).

(; Theorem: |- ((= (\lambda y. ((= y) x) y)) ((= y) x)) ;)

(; dict ;)

def thm_2915 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool ((y_3 : hol.term A => hol.eq A y_3 x_2) y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.BETA_CONV A hol.bool (y_3 : hol.term A => hol.eq A y_3 x_2) y_1.

(; Theorem: |- ((= (Data.Bool.==> (\lambda y. ((= y) x) y))) (Data.Bool.==> ((= y) x))) ;)

(; dict ;)

def thm_2916 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp ((y_3 : hol.term A => hol.eq A y_3 x_2) y_1)) (hol.imp (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp ((y_3 : hol.term A => hol.eq A y_3 x_2) y_1) (hol.eq A y_1 x_2) thm_1118 (thm_2915 A y_1 x_2).

(; Theorem: |- ((= ((Data.Bool.==> (\lambda y. ((= y) x) y)) (p x))) ((Data.Bool.==> ((= y) x)) (p x))) ;)

(; dict ;)

def thm_2917 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp ((y_4 : hol.term A => hol.eq A y_4 x_3) y_2) (p_1 x_3)) (hol.imp (hol.eq A y_2 x_3) (p_1 x_3))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => y_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp ((y_4 : hol.term A => hol.eq A y_4 x_3) y_2)) (hol.imp (hol.eq A y_2 x_3)) (p_1 x_3) (p_1 x_3) (thm_2916 A y_2 x_3) (thm_1258 A x_3 p_1).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> (\lambda y. ((= y) x) y)) (p x))) \lambda y. ((Data.Bool.==> ((= y) x)) (p x))) ;)

(; dict ;)

def thm_2918 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.imp ((y_4 : hol.term A => hol.eq A y_4 x_2) y_3) (p_1 x_2)) (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.ABS_THM A hol.bool (y_3 : hol.term A => hol.imp ((y_4 : hol.term A => hol.eq A y_4 x_2) y_3) (p_1 x_2)) (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2)) (y_3 : hol.term A => thm_2917 A p_1 y_3 x_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> (\lambda y. ((= y) x) y)) (p x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x)))) ;)

(; dict ;)

def thm_2919 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp ((y_4 : hol.term A => hol.eq A y_4 x_2) y_3) (p_1 x_2))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => hol.imp ((y_4 : hol.term A => hol.eq A y_4 x_2) y_3) (p_1 x_2)) (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2)) (thm_7 A) (thm_2918 A p_1 x_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda y. ((Data.Bool.==> (\lambda y. ((= y) x) y)) (p x))))) (= (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x))))) ;)

(; dict ;)

def thm_2920 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp ((y_4 : hol.term A => hol.eq A y_4 x_2) y_3) (p_1 x_2)))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (y_3 : hol.term A => hol.imp ((y_4 : hol.term A => hol.eq A y_4 x_2) y_3) (p_1 x_2))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2))) thm_1106 (thm_2919 A p_1 x_2).

(; Theorem: |- ((= \lambda y. (\lambda y. ((= y) x) y)) \lambda y. ((= y) x)) ;)

(; dict ;)

def thm_2921 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) y_2) (y_2 : hol.term A => hol.eq A y_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.ABS_THM A hol.bool (y_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) y_2) (y_2 : hol.term A => hol.eq A y_2 x_1) (y_2 : hol.term A => thm_2915 A y_2 x_1).

(; Theorem: |- ((= (Data.Bool.? \lambda y. (\lambda y. ((= y) x) y))) (Data.Bool.? \lambda y. ((= y) x))) ;)

(; dict ;)

def thm_2922 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (y_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) y_2) (y_2 : hol.term A => hol.eq A y_2 x_1) (thm_1179 A) (thm_2921 A x_1).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.? \lambda y. (\lambda y. ((= y) x) y)))) (Data.Bool.==> (Data.Bool.? \lambda y. ((= y) x)))) ;)

(; dict ;)

def thm_2923 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) y_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)) thm_1118 (thm_2922 A x_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda y. (\lambda y. ((= y) x) y))) (p x))) ((Data.Bool.==> (Data.Bool.? \lambda y. ((= y) x))) (p x))) ;)

(; dict ;)

def thm_2924 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) y_3)) (p_1 x_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.eq A y_3 x_2)) (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) y_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.eq A y_3 x_2))) (p_1 x_2) (p_1 x_2) (thm_2923 A x_2) (thm_1258 A x_2 p_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. ((Data.Bool.==> (\lambda y. ((= y) x) y)) (p x)))) ((Data.Bool.==> (Data.Bool.? \lambda y. (\lambda y. ((= y) x) y))) (p x)))) ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x)))) ((Data.Bool.==> (Data.Bool.? \lambda y. ((= y) x))) (p x)))) ;)

(; dict ;)

def thm_2925 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp ((y_4 : hol.term A => hol.eq A y_4 x_2) y_3) (p_1 x_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) y_3)) (p_1 x_2))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.eq A y_3 x_2)) (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp ((y_4 : hol.term A => hol.eq A y_4 x_2) y_3) (p_1 x_2)))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) y_3)) (p_1 x_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.eq A y_3 x_2)) (p_1 x_2)) (thm_2920 A p_1 x_2) (thm_2924 A p_1 x_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q))) ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_2926 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) q))) ((Data.Bool.==> (Data.Bool.? \lambda y. (p y))) q))) ((= (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) q))) ((Data.Bool.==> (Data.Bool.? \lambda y. (p y))) q))) ;)

(; dict ;)

def thm_2927 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => p_2 y_3)) q_1)) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => p_2 y_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => p_2 y_3)) q_1)).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) q))) ((= (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) q))) ((Data.Bool.==> (Data.Bool.? \lambda y. (p y))) q))) ;)

(; dict ;)

def thm_2928 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => p_2 y_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => p_2 y_3)) q_1)) (thm_2926 A q_1 p_2) (thm_2927 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) q))) ((Data.Bool.==> (Data.Bool.? \lambda y. (p y))) q)) ;)

(; dict ;)

def thm_2929 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => p_2 y_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => p_2 y_3)) q_1)) (thm_2928 A q_1 p_2) (thm_2211 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> (\lambda y. ((= y) x) y)) (p x)))) ((Data.Bool.==> (Data.Bool.? \lambda y. (\lambda y. ((= y) x) y))) (p x))) ;)

(; dict ;)

def thm_2930 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp ((y_4 : hol.term A => hol.eq A y_4 x_2) y_3) (p_1 x_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) y_3)) (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_2929 A q_1 p_2) A q_1 p_2) A (p_1 x_2) (y_3 : hol.term A => hol.eq A y_3 x_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x)))) ((Data.Bool.==> (Data.Bool.? \lambda y. ((= y) x))) (p x))) ;)

(; dict ;)

def thm_2931 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.eq A y_3 x_2)) (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp ((y_4 : hol.term A => hol.eq A y_4 x_2) y_3) (p_1 x_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) y_3)) (p_1 x_2))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.eq A y_3 x_2)) (p_1 x_2))) (thm_2925 A p_1 x_2) (thm_2930 A p_1 x_2).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((= x) a))) Data.Bool.T)) ((= (Data.Bool.? \lambda x. ((= x) a))) Data.Bool.T)) ;)

(; dict ;)

def thm_2932 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) hol.true)) :=
  A : hol.type => a_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda y. ((= y) a))) Data.Bool.T)) ((= (Data.Bool.? \lambda y. ((= y) a))) Data.Bool.T)) ;)

(; dict ;)

def thm_2933 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 a_1)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 a_1)) hol.true)) :=
  A : hol.type => a_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 a_1)) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. ((= x) a))) Data.Bool.T)) ((= (Data.Bool.? \lambda y. ((= y) a))) Data.Bool.T)) ;)

(; dict ;)

def thm_2934 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 a_1)) hol.true)) :=
  A : hol.type => a_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 a_1)) hol.true) (thm_2932 A a_1) (thm_2933 A a_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((= x) a))) ((= (Data.Bool.? \lambda x. ((= x) a))) Data.Bool.T)) ;)

(; dict ;)

def thm_2935 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) hol.true)) :=
  A : hol.type => a_1 : hol.term A => (t_1 : hol.term hol.bool => thm_140 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((= x) a))) Data.Bool.T) ;)

(; dict ;)

def thm_2936 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) hol.true) :=
  A : hol.type => a_1 : hol.term A => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) hol.true) (thm_2935 A a_1) (thm_1168 A a_1).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((= y) a))) Data.Bool.T) ;)

(; dict ;)

def thm_2937 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 a_1)) hol.true) :=
  A : hol.type => a_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq A x_2 a_1)) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 a_1)) hol.true) (thm_2934 A a_1) (thm_2936 A a_1).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((= y) x))) Data.Bool.T) ;)

(; dict ;)

def thm_2938 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)) hol.true) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => a_1 : hol.term A => (A : hol.type => a_1 : hol.term A => thm_2937 A a_1) A a_1) A x_1.

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.? \lambda y. ((= y) x)))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_2939 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1))) (hol.imp hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)) hol.true thm_1118 (thm_2938 A x_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda y. ((= y) x))) (p x))) ((Data.Bool.==> Data.Bool.T) (p x))) ;)

(; dict ;)

def thm_2940 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.eq A y_3 x_2)) (p_1 x_2)) (hol.imp hol.true (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.eq A y_3 x_2))) (hol.imp hol.true) (p_1 x_2) (p_1 x_2) (thm_2939 A x_2) (thm_1258 A x_2 p_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) (p x))) (p x)) ;)

(; dict ;)

def thm_2941 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp hol.true (p_2 x_1)) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_1072 t_1) (p_2 x_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda y. ((= y) x))) (p x))) (p x)) ;)

(; dict ;)

def thm_2942 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.eq A y_3 x_2)) (p_1 x_2)) (p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.TRANS hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.eq A y_3 x_2)) (p_1 x_2)) (hol.imp hol.true (p_1 x_2)) (p_1 x_2) (thm_2940 A p_1 x_2) (thm_2941 A x_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x)))) (p x)) ;)

(; dict ;)

def thm_2943 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2))) (p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.TRANS hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_2) (p_1 x_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.eq A y_3 x_2)) (p_1 x_2)) (p_1 x_2) (thm_2931 A p_1 x_2) (thm_2942 A p_1 x_2).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x))))) ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (p x))) ;)

(; dict ;)

def thm_2944 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1)))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1))) (p_2 x_1) (thm_2828 A x_1 p_2) (thm_2943 A p_2 x_1).

(; Theorem: |- ((= (= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x)))))) (= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (p x)))) ;)

(; dict ;)

def thm_2945 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1)))) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)) thm_1106 (thm_2944 A x_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (p x))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_2946 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (thm_2945 A x_1 p_2) (thm_2790 A x_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (p x))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_2947 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (thm_2946 A x_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ;)

(; dict ;)

def thm_2948 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)).

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ;)

(; dict ;)

def thm_2949 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (thm_2948 q_1 p_2) (thm_2948 q_1 p_2).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))))) ;)

(; dict ;)

def thm_2950 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))))) ;)

(; dict ;)

def thm_2951 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))) thm_2950 thm_2950.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))))))) ;)

(; dict ;)

def thm_2952 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))) thm_150 thm_2951.

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))))) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))))) ;)

(; dict ;)

def thm_2953 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))).

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))))) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))))) ;)

(; dict ;)

def thm_2954 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))) (thm_2953 p_1) (thm_2953 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))))) (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))))) ;)

(; dict ;)

def thm_2955 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))) thm_150 (thm_2954 p_1).

(; Theorem: |- ((= \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))) \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))) ;)

(; dict ;)

def thm_2956 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) r_3) (hol.and p_2 (hol.and q_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))))) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) r_3) (hol.and p_2 (hol.and q_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1))))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) r_3) (hol.and p_2 (hol.and q_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))))).

(; Theorem: |- ((= \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))) \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))) ;)

(; dict ;)

def thm_2957 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) r_3) (hol.and p_2 (hol.and q_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))))) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) r_3) (hol.and p_2 (hol.and q_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1))))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) r_3) (hol.and p_2 (hol.and q_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))))) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) r_3) (hol.and p_2 (hol.and q_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))))) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) r_3) (hol.and p_2 (hol.and q_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))))) (thm_2956 q_1 p_2) (thm_2956 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))))) (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))))) ;)

(; dict ;)

def thm_2958 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) r_3) (hol.and p_2 (hol.and q_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1))))))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) r_3) (hol.and p_2 (hol.and q_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) r_3) (hol.and p_2 (hol.and q_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))))) (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) r_3) (hol.and p_2 (hol.and q_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))))) thm_150 (thm_2957 q_1 p_2).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p)) ;)

(; dict ;)

def thm_2959 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_224 t2_1 t1_2) q_1 p_2.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))) ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))) ;)

(; dict ;)

def thm_2960 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))) (hol.and (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))) ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))) ;)

(; dict ;)

def thm_2961 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))) (hol.and (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))) (hol.and (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))))) (thm_2959 q_2 p_3) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) => thm_2960 r_1 q_2 p_3 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ;)

(; dict ;)

def thm_2962 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => (t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => thm_200 t3_1 t2_2 t1_3) r_1 q_2 p_3.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))) ;)

(; dict ;)

def thm_2963 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))) ;)

(; dict ;)

def thm_2964 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))))) (thm_2962 r_1 q_2 p_3) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) => thm_2963 r_1 q_2 p_3 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ;)

(; dict ;)

def thm_2965 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1)))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))).

(; Theorem: |- ((= ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ;)

(; dict ;)

def thm_2966 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1)))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (thm_2965 r_1 q_2 p_3) (thm_2965 r_1 q_2 p_3).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))))) ;)

(; dict ;)

def thm_2967 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))))) \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))))) ;)

(; dict ;)

def thm_2968 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))) thm_2967 thm_2967.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r))))))) ;)

(; dict ;)

def thm_2969 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))) thm_150 thm_2968.

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r))))) ;)

(; dict ;)

def thm_2970 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))).

(; Theorem: |- ((= \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r))))) \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r))))) ;)

(; dict ;)

def thm_2971 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))) (thm_2970 p_1) (thm_2970 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))))) (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))))) ;)

(; dict ;)

def thm_2972 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))) thm_150 (thm_2971 p_1).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ;)

(; dict ;)

def thm_2973 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))).

(; Theorem: |- ((= \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ;)

(; dict ;)

def thm_2974 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (thm_2973 q_1 p_2) (thm_2973 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r))))) (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r))))) ;)

(; dict ;)

def thm_2975 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) thm_150 (thm_2974 q_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ;)

(; dict ;)

def thm_2976 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)).

(; Theorem: |- ((= ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ;)

(; dict ;)

def thm_2977 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (thm_2976 t3_1 t2_2 t1_3) (thm_2976 t3_1 t2_2 t1_3).

(; Theorem: |- ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ;)

(; dict ;)

def thm_2978 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) -> hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) => hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ;)

(; dict ;)

def thm_2979 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) -> hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) => hol.SYM hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1) (thm_2978 t3_1 t2_2 t1_3 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ;)

(; dict ;)

def thm_2980 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) -> hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) => hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ;)

(; dict ;)

def thm_2981 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) -> hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) => hol.SYM hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1)) (thm_2980 t3_1 t2_2 t1_3 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))) ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ;)

(; dict ;)

def thm_2982 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1))) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.PROP_EXT (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) => thm_2979 t3_1 t2_2 t1_3 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and (hol.and t1_3 t2_2) t3_1) (hol.and t1_3 (hol.and t2_2 t3_1))) => thm_2981 t3_1 t2_2 t1_3 hyp_1).

(; Theorem: |- ((= \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))) \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ;)

(; dict ;)

def thm_2983 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_2 (hol.and t2_1 t3_3)) (hol.and (hol.and t1_2 t2_1) t3_3))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.ABS_THM hol.bool hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_2 (hol.and t2_1 t3_3)) (hol.and (hol.and t1_2 t2_1) t3_3)) (t3_3 : hol.term hol.bool => thm_2982 t3_3 t2_1 t1_2).

(; Theorem: |- ((= (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))) (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)))) ;)

(; dict ;)

def thm_2984 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3)))) (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_2 (hol.and t2_1 t3_3)) (hol.and (hol.and t1_2 t2_1) t3_3)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_2 t2_1) t3_3) (hol.and t1_2 (hol.and t2_1 t3_3))) (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_2 (hol.and t2_1 t3_3)) (hol.and (hol.and t1_2 t2_1) t3_3)) thm_150 (thm_2983 t2_1 t1_2).

(; Theorem: |- ((= \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))) \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)))) ;)

(; dict ;)

def thm_2985 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3)))) :=
  t1_1 : hol.term hol.bool => hol.ABS_THM hol.bool hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3))) (t2_2 : hol.term hol.bool => thm_2984 t2_2 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))))) (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))))) ;)

(; dict ;)

def thm_2986 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3))))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))) (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3))) thm_150 (thm_2985 t1_1).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3)))))) \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))))) ;)

(; dict ;)

def thm_2987 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3))))) :=
  hol.ABS_THM hol.bool hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3)))) (t1_1 : hol.term hol.bool => thm_2986 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)))))) ;)

(; dict ;)

def thm_2988 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3)))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3)))) thm_150 thm_2987.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))))) ;)

(; dict ;)

def thm_2989 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3))))) :=
  hol.EQ_MP (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and (hol.and t1_1 t2_2) t3_3) (hol.and t1_1 (hol.and t2_2 t3_3)))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3))))) thm_2988 thm_203.

(; Theorem: |- (Data.Bool.! \lambda t2. (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)))) ;)

(; dict ;)

def thm_2990 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_1 (hol.and t2_2 t3_3)) (hol.and (hol.and t1_1 t2_2) t3_3)))) :=
  t1_1 : hol.term hol.bool => thm_2989 t1_1.

(; Theorem: |- (Data.Bool.! \lambda t3. ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3))) ;)

(; dict ;)

def thm_2991 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t3_3 : hol.term hol.bool => hol.eq hol.bool (hol.and t1_2 (hol.and t2_1 t3_3)) (hol.and (hol.and t1_2 t2_1) t3_3))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_2990 t1_2 t2_1.

(; Theorem: |- ((= ((Data.Bool./\ t1) ((Data.Bool./\ t2) t3))) ((Data.Bool./\ ((Data.Bool./\ t1) t2)) t3)) ;)

(; dict ;)

def thm_2992 : t3_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> t1_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) :=
  t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => thm_2991 t2_2 t1_3 t3_1.

(; Theorem: |- ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ;)

(; dict ;)

def thm_2993 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and (hol.and p_3 q_2) r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => (t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (hol.eq hol.bool (hol.and t1_3 (hol.and t2_2 t3_1)) (hol.and (hol.and t1_3 t2_2) t3_1)) (thm_2977 t3_1 t2_2 t1_3) (thm_2992 t3_1 t2_2 t1_3)) r_1 q_2 p_3.

(; Theorem: |- ((= (= ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) (= ((Data.Bool./\ ((Data.Bool./\ p) q)) r))) ;)

(; dict ;)

def thm_2994 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1))) (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.and p_3 (hol.and q_2 r_1)) (hol.and (hol.and p_3 q_2) r_1) thm_1106 (thm_2993 r_1 q_2 p_3).

(; Theorem: |- ((= ((Data.Bool./\ q) ((Data.Bool./\ p) r))) ((Data.Bool./\ ((Data.Bool./\ q) p)) r)) ;)

(; dict ;)

def thm_2995 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and q_3 (hol.and p_2 r_1)) (hol.and (hol.and q_3 p_2) r_1)) :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => (t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => thm_2992 t3_1 t2_2 t1_3) r_1 p_2 q_3.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool./\ q) p)) r))) ;)

(; dict ;)

def thm_2996 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and (hol.and q_2 p_3) r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1))) (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1)) (hol.and q_2 (hol.and p_3 r_1)) (hol.and (hol.and q_2 p_3) r_1) (thm_2994 r_1 q_2 p_3) (thm_2995 r_1 p_3 q_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool./\ q) p)) r))) ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ;)

(; dict ;)

def thm_2997 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and (hol.and q_2 p_3) r_1)) (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1)))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and (hol.and q_2 p_3) r_1)) (thm_2996 r_1 q_2 p_3).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool./\ p) q))) (Data.Bool./\ ((Data.Bool./\ q) p))) ;)

(; dict ;)

def thm_2998 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.and p_2 q_1)) (hol.and (hol.and q_1 p_2))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.and p_2 q_1) (hol.and q_1 p_2) thm_1119 (thm_2959 q_1 p_2).

(; Theorem: |- ((= r) r) ;)

(; dict ;)

def thm_2999 : r_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool r_1 r_1) :=
  r_1 : hol.term hol.bool => hol.REFL hol.bool r_1.

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ ((Data.Bool./\ q) p)) r)) ;)

(; dict ;)

def thm_3000 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and (hol.and q_2 p_3) r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.and p_3 q_2)) (hol.and (hol.and q_2 p_3)) r_1 r_1 (thm_2998 q_2 p_3) (thm_2999 r_1).

(; Theorem: |- ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r))) ;)

(; dict ;)

def thm_3001 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and (hol.and q_2 p_3) r_1)) (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (thm_2997 r_1 q_2 p_3) (thm_3000 r_1 q_2 p_3).

(; Theorem: |- (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ;)

(; dict ;)

def thm_3002 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => thm_3001 r_3 q_1 p_2.

(; Theorem: |- (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r))))) ;)

(; dict ;)

def thm_3003 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))) (thm_2975 q_2 p_1) (thm_3002 q_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))))) ;)

(; dict ;)

def thm_3004 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3)))))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))))) (thm_2972 p_1) (thm_3003 p_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))) ;)

(; dict ;)

def thm_3005 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))) ;)

(; dict ;)

def thm_3006 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))) (hol.EQ_MP (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (thm_2966 r_1 q_2 p_3) (hol.EQ_MP (hol.forall hol.bool (p_4 : hol.term hol.bool => hol.forall hol.bool (q_5 : hol.term hol.bool => hol.forall hol.bool (r_6 : hol.term hol.bool => hol.eq hol.bool (hol.and p_4 (hol.and q_5 r_6)) (hol.and q_5 (hol.and p_4 r_6)))))) (hol.forall hol.bool (p_4 : hol.term hol.bool => hol.forall hol.bool (q_5 : hol.term hol.bool => hol.forall hol.bool (r_6 : hol.term hol.bool => hol.eq hol.bool (hol.and p_4 (hol.and q_5 r_6)) (hol.and q_5 (hol.and p_4 r_6)))))) thm_2969 thm_3004 p_3 q_2 r_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) => thm_3005 r_1 q_2 p_3 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ p) p)) p) ;)

(; dict ;)

def thm_3007 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_1 p_1) p_1) :=
  p_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_239 t_1) p_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_3008 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and p_2 p_2) p_2) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and p_2 p_2) p_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_170 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_3009 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))) (thm_3007 p_2) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and p_2 p_2) p_2) => thm_3008 q_1 p_2 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_3010 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)).

(; Theorem: |- ((= ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_3011 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (thm_3010 q_1 p_2) (thm_3010 q_1 p_2).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_3012 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_3013 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))) thm_3012 thm_3012.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))) ;)

(; dict ;)

def thm_3014 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))) (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))) thm_150 thm_3013.

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_3015 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)).

(; Theorem: |- ((= \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_3016 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))) :=
  p_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)) (thm_3015 p_1) (thm_3015 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))) (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_3017 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)) (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)) thm_150 (thm_3016 p_1).

(; Theorem: |- ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ ((Data.Bool./\ p) p)) q)) ;)

(; dict ;)

def thm_3018 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and (hol.and p_2 p_2) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => (t3_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => t1_3 : hol.term hol.bool => thm_2992 t3_1 t2_2 t1_3) q_1 p_2 p_2.

(; Theorem: |- ((= (= ((Data.Bool./\ p) ((Data.Bool./\ p) q)))) (= ((Data.Bool./\ ((Data.Bool./\ p) p)) q))) ;)

(; dict ;)

def thm_3019 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1))) (hol.eq hol.bool (hol.and (hol.and p_2 p_2) q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.and p_2 (hol.and p_2 q_1)) (hol.and (hol.and p_2 p_2) q_1) thm_1106 (thm_3018 q_1 p_2).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_3020 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.and p_2 q_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) ((= ((Data.Bool./\ ((Data.Bool./\ p) p)) q)) ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_3021 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and (hol.and p_2 p_2) q_1) (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1))) (hol.eq hol.bool (hol.and (hol.and p_2 p_2) q_1)) (hol.and p_2 q_1) (hol.and p_2 q_1) (thm_3019 q_1 p_2) (thm_3020 q_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ ((Data.Bool./\ p) p)) q)) ((Data.Bool./\ p) q))) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_3022 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.and p_2 p_2) q_1) (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and (hol.and p_2 p_2) q_1) (hol.and p_2 q_1)) (thm_3021 q_1 p_2).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool./\ p) p))) (Data.Bool./\ p)) ;)

(; dict ;)

def thm_3023 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.and p_1 p_1)) (hol.and p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.and p_1 p_1) p_1 thm_1119 (thm_3007 p_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool./\ p) p)) q)) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_3024 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.and p_2 p_2) q_1) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.and p_2 p_2)) (hol.and p_2) q_1 q_1 (thm_3023 p_2) (thm_58 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_3025 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and (hol.and p_2 p_2) q_1) (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (thm_3022 q_1 p_2) (thm_3024 q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_3026 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => thm_3025 q_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_3027 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))) (thm_3017 p_1) (thm_3026 p_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_3028 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1))) (thm_3009 q_1 p_2) (hol.EQ_MP (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)) (thm_3011 q_1 p_2) (hol.EQ_MP (hol.forall hol.bool (p_3 : hol.term hol.bool => hol.forall hol.bool (q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_4)) (hol.and p_3 q_4)))) (hol.forall hol.bool (p_3 : hol.term hol.bool => hol.forall hol.bool (q_4 : hol.term hol.bool => hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_4)) (hol.and p_3 q_4)))) thm_3014 thm_3027 p_2 q_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))) ;)

(; dict ;)

def thm_3029 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))) (thm_3006 r_1 q_2 p_3) (thm_3028 q_2 p_3).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))) ;)

(; dict ;)

def thm_3030 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))) (thm_2964 r_1 q_2 p_3) (thm_3029 r_1 q_2 p_3).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))) ;)

(; dict ;)

def thm_3031 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))) (hol.and (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))))) (thm_2961 r_1 q_2 p_3) (thm_3030 r_1 q_2 p_3).

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))) ;)

(; dict ;)

def thm_3032 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) r_3) (hol.and p_2 (hol.and q_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 r_3)) (hol.and q_1 (hol.and p_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1))))))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => thm_3031 r_3 q_1 p_2.

(; Theorem: |- (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q)))))))) ;)

(; dict ;)

def thm_3033 : p_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))) (thm_2958 q_2 p_1) (thm_3032 q_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda r. ((Data.Bool./\ ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p))) ((Data.Bool./\ ((= ((Data.Bool./\ ((Data.Bool./\ p) q)) r)) ((Data.Bool./\ p) ((Data.Bool./\ q) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) ((Data.Bool./\ q) r))) ((Data.Bool./\ q) ((Data.Bool./\ p) r)))) ((Data.Bool./\ ((= ((Data.Bool./\ p) p)) p)) ((= ((Data.Bool./\ p) ((Data.Bool./\ p) q))) ((Data.Bool./\ p) q))))))))) ;)

(; dict ;)

def thm_3034 : hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2))))))))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_1 q_2) (hol.and q_2 p_1)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_1 q_2) r_3) (hol.and p_1 (hol.and q_2 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 (hol.and q_2 r_3)) (hol.and q_2 (hol.and p_1 r_3))) (hol.and (hol.eq hol.bool (hol.and p_1 p_1) p_1) (hol.eq hol.bool (hol.and p_1 (hol.and p_1 q_2)) (hol.and p_1 q_2)))))))) (thm_2955 p_1) (thm_3033 p_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p)) ;)

(; dict ;)

def thm_3035 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))))) -> hol.proof (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2)))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_71 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_2) r_1) (hol.and p_3 (hol.and q_2 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_2 r_1)) (hol.and q_2 (hol.and p_3 r_1))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_2)) (hol.and p_3 q_2))))) (hol.eq hol.bool (hol.and p_3 q_2) (hol.and q_2 p_3)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) ((Data.Bool./\ q) p)) ;)

(; dict ;)

def thm_3036 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) (hol.witness hol.bool)) (hol.and p_2 (hol.and q_1 (hol.witness hol.bool)))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 (hol.witness hol.bool))) (hol.and q_1 (hol.and p_2 (hol.witness hol.bool)))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))))) (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.EQ_MP (hol.forall hol.bool (p_3 : hol.term hol.bool => hol.forall hol.bool (q_4 : hol.term hol.bool => hol.forall hol.bool (r_5 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_3 q_4) (hol.and q_4 p_3)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_4) r_5) (hol.and p_3 (hol.and q_4 r_5))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_4 r_5)) (hol.and q_4 (hol.and p_3 r_5))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_4)) (hol.and p_3 q_4))))))))) (hol.forall hol.bool (p_3 : hol.term hol.bool => hol.forall hol.bool (q_4 : hol.term hol.bool => hol.forall hol.bool (r_5 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and p_3 q_4) (hol.and q_4 p_3)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_3 q_4) r_5) (hol.and p_3 (hol.and q_4 r_5))) (hol.and (hol.eq hol.bool (hol.and p_3 (hol.and q_4 r_5)) (hol.and q_4 (hol.and p_3 r_5))) (hol.and (hol.eq hol.bool (hol.and p_3 p_3) p_3) (hol.eq hol.bool (hol.and p_3 (hol.and p_3 q_4)) (hol.and p_3 q_4))))))))) thm_2952 thm_3034 p_2 q_1 (hol.witness hol.bool)) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.and (hol.eq hol.bool (hol.and (hol.and p_2 q_1) (hol.witness hol.bool)) (hol.and p_2 (hol.and q_1 (hol.witness hol.bool)))) (hol.and (hol.eq hol.bool (hol.and p_2 (hol.and q_1 (hol.witness hol.bool))) (hol.and q_1 (hol.and p_2 (hol.witness hol.bool)))) (hol.and (hol.eq hol.bool (hol.and p_2 p_2) p_2) (hol.eq hol.bool (hol.and p_2 (hol.and p_2 q_1)) (hol.and p_2 q_1)))))) => thm_3035 (hol.witness hol.bool) q_1 p_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (p x))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) ;)

(; dict ;)

def thm_3037 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.and q_1 p_2)) (thm_2949 q_1 p_2) (thm_3036 q_1 p_2)) (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))).

(; Theorem: |- ((= (= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (p x)))) (= ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_3038 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1))) (hol.eq hol.bool (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) thm_1106 (thm_3037 A x_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (p x))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ((= ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_3039 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1))) (hol.eq hol.bool (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (thm_3038 A x_1 p_2) (thm_2790 A x_1 p_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) Data.Bool.T) ;)

(; dict ;)

def thm_3040 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_1152 x_1) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (p x))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) Data.Bool.T) ;)

(; dict ;)

def thm_3041 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) hol.true (thm_3039 A x_1 p_2) (thm_3040 A x_1 p_2).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (p x))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_3042 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1)))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) hol.true (thm_3041 A x_1 p_2).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p x))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) ;)

(; dict ;)

def thm_3043 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (thm_2947 A x_1 p_2) (hol.EQ_MP hol.true (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (p_2 x_1)) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (thm_3042 A x_1 p_2) thm_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= y) x)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) ;)

(; dict ;)

def thm_3044 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 x_1)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (thm_2914 A x_1 p_2) (thm_3043 A x_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= y) x))) ((Data.Bool.==> ((= y) x)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) ;)

(; dict ;)

def thm_3045 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.and (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (thm_2827 A x_1 p_2) (thm_3044 A x_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool./\ ((Data.Bool.==> (p y)) ((= x) y))) ((Data.Bool.==> ((= x) y)) (p y))))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) ;)

(; dict ;)

def thm_3046 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A y_3 x_1)) (hol.imp (hol.eq A y_3 x_1) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (thm_2804 A x_1 p_2) (thm_3045 A x_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) ;)

(; dict ;)

def thm_3047 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.and (hol.imp (p_2 y_3) (hol.eq A x_1 y_3)) (hol.imp (hol.eq A x_1 y_3) (p_2 y_3)))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A x_1 y_3))) (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (p_2 y_3) (hol.eq A y_3 x_1))))) (thm_2792 A x_1 p_2) (thm_3046 A x_1 p_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))) \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))) ;)

(; dict ;)

def thm_3048 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))) (x_2 : hol.term A => thm_3047 A x_2 p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_3049 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))) (thm_1179 A) (hol.EQ_MP (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))) (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))) (thm_2773 A p_1) (thm_3048 A p_1)).

(; Theorem: |- ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x)))))) ;)

(; dict ;)

def thm_3050 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2)))))) (thm_2771 A p_1) (thm_3049 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))))) ;)

(; dict ;)

def thm_3051 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_3050 A p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> (p y)) ((= y) x))))))) ;)

(; thm ;)

def thm_3052 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (p_1 y_3) (hol.eq A y_3 x_2))))))) (thm_2767 A) (thm_3051 A).
