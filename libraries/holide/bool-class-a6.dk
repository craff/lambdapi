
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME bool_2Dclass_2Da6.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

Data_2EBool_2E_3F_21 : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))).

(; axiom ;)

thm_2 : hol.proof hol.true.

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))))).

(; axiom ;)

thm_7 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))).

(; axiom ;)

thm_8 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3)))))).

(; axiom ;)

thm_9 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_10 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_11 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_12 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_13 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_14 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; axiom ;)

thm_15 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4)))))))).

(; axiom ;)

thm_16 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1))).

(; axiom ;)

thm_17 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))).

(; axiom ;)

thm_18 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)).

(; axiom ;)

thm_19 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)).

(; axiom ;)

thm_20 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)).

(; axiom ;)

thm_21 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)).

(; axiom ;)

thm_22 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_23 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))).

(; axiom ;)

thm_24 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_25 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool)))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr B hol.bool))).

(; Theorem: |- ((= \lambda r. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))))) \lambda r. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))))) ;)

(; dict ;)

def thm_26 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))).

(; Theorem: |- ((= \lambda r. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))))) \lambda r. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))))) ;)

(; dict ;)

def thm_27 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (thm_26 B A) (thm_26 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))))) (Data.Bool.! \lambda r. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))))) ;)

(; dict ;)

def thm_28 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (thm_25 B A) (thm_27 B A).

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_29 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_30 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_31 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) => hol.EQ_MP p_1 q_2 (thm_29 q_2 p_1 hyp_2) (thm_30 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_32 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_2 : hol.proof p_2 => thm_31 p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= p) q)) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_33 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 q_1) (hol.imp p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => thm_32 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_34 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_33 q_1 p_2) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_35 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_36 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_37 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_35 A P_1) (thm_36 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_38 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_39 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_0 A) (thm_38 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_40 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_37 A P_1) (thm_39 A P_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_41 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_34 A P_1 (thm_40 A P_1).

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_42 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)) ;)

(; dict ;)

def thm_43 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_41 A P_1 (thm_42 A P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_44 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_43 A P_2 hyp_1 Q_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_45 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_46 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof Q_2 :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_44 A Q_2 P_1 hyp_2 (thm_45 A Q_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) Q) ;)

(; dict ;)

def thm_47 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_46 A P_2 Q_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) ((Data.Bool.==> (Data.Bool.? P)) Q)) ;)

(; dict ;)

def thm_48 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => thm_47 A Q_1 P_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda f. (Data.Bool.! \lambda x. ((r x) (f x))) x)) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))))) ((Data.Bool.==> (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))))) ;)

(; dict ;)

def thm_49 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.forall (hol.arr A B) (x_2 : hol.term (hol.arr A B) => hol.imp ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_1 x_4 (f_3 x_4))) x_2) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_48 A Q_1 P_2) (hol.arr A B) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))).

(; Theorem: |- (Data.Bool.! \lambda x. ((r x) (f x))) ;)

(; dict ;)

def thm_50 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3))) => hyp_1.

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_51 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda x. (Data.Bool.? \lambda y. ((r x) y))) \lambda x. (Data.Bool.? \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_52 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)).

(; Theorem: |- ((= \lambda x. (Data.Bool.? \lambda y. ((r x) y))) \lambda x. (Data.Bool.? \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_53 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)) (thm_52 B A r_1) (thm_52 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_54 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)) (thm_51 A) (thm_53 B A r_1).

(; Theorem: |- ((= (\lambda y. ((r x) y) (f x))) ((r x) (f x))) ;)

(; dict ;)

def thm_55 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((y_4 : hol.term B => r_3 x_2 y_4) (f_1 x_2)) (r_3 x_2 (f_1 x_2))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (y_4 : hol.term B => r_3 x_2 y_4) (f_1 x_2).

(; Theorem: |- ((= ((r x) (f x))) (\lambda y. ((r x) y) (f x))) ;)

(; dict ;)

def thm_56 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (r_3 x_2 (f_1 x_2)) ((y_4 : hol.term B => r_3 x_2 y_4) (f_1 x_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool ((y_4 : hol.term B => r_3 x_2 y_4) (f_1 x_2)) (r_3 x_2 (f_1 x_2)) (thm_55 A B f_1 x_2 r_3).

(; Theorem: |- ((= ((r x) (f x))) ((r x) (f x))) ;)

(; dict ;)

def thm_57 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (r_3 x_2 (f_1 x_2)) (r_3 x_2 (f_1 x_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (r_3 x_2 (f_1 x_2)).

(; Theorem: |- ((= ((r x) (f x))) ((r x) (f x))) ;)

(; dict ;)

def thm_58 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (r_3 x_2 (f_1 x_2)) (r_3 x_2 (f_1 x_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (r_3 x_2 (f_1 x_2)) (r_3 x_2 (f_1 x_2)) (r_3 x_2 (f_1 x_2)) (thm_57 B A f_1 x_2 r_3) (thm_57 B A f_1 x_2 r_3).

(; Theorem: |- ((r x) (f x)) ;)

(; dict ;)

def thm_59 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => r_3 x_4 (f_1 x_4))) -> hol.proof (r_3 x_2 (f_1 x_2)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => r_3 x_4 (f_1 x_4))) => thm_50 B A f_1 r_3 hyp_1 x_2.

(; Theorem: |- (\lambda y. ((r x) y) (f x)) ;)

(; dict ;)

def thm_60 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => r_3 x_4 (f_1 x_4))) -> hol.proof ((y_4 : hol.term B => r_3 x_2 y_4) (f_1 x_2)) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => r_3 x_4 (f_1 x_4))) => hol.EQ_MP (r_3 x_2 (f_1 x_2)) ((y_4 : hol.term B => r_3 x_2 y_4) (f_1 x_2)) (thm_56 B A f_1 x_2 r_3) ((B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => r_3 x_4 (f_1 x_4))) => hol.EQ_MP (r_3 x_2 (f_1 x_2)) (r_3 x_2 (f_1 x_2)) (thm_58 B A f_1 x_2 r_3) (thm_59 B A f_1 x_2 r_3 hyp_1)) B A f_1 x_2 r_3 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_61 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_40 A P_1).

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_62 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_45 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_63 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_64 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_62 A Q_3 x_1 P_2 hyp_2 (thm_63 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_65 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_64 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_66 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_65 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_67 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_61 A P_2) (thm_66 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda y. ((r x) y)) ;)

(; dict ;)

def thm_68 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((y_4 : hol.term B => r_3 x_2 y_4) (f_1 x_2)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_3 x_2 y_4)) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((y_4 : hol.term B => r_3 x_2 y_4) (f_1 x_2)) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_67 A x_1 P_2 hyp_1) B (f_1 x_2) (y_4 : hol.term B => r_3 x_2 y_4) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda y. ((r x) y)) ;)

(; dict ;)

def thm_69 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => r_3 x_4 (f_1 x_4))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_3 x_2 y_4)) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => r_3 x_4 (f_1 x_4))) => hol.PROVE_HYP ((y_4 : hol.term B => r_3 x_2 y_4) (f_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_3 x_2 y_4)) (thm_60 A B f_1 x_2 r_3 hyp_1) (hyp_2 : hol.proof ((y_4 : hol.term B => r_3 x_2 y_4) (f_1 x_2)) => thm_68 A B f_1 x_2 r_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_70 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3))) => x_3 : hol.term A => thm_69 A B f_1 x_3 r_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_71 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3))) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4))) (thm_50 B A f_1 r_2 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3))) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4))) (thm_54 B A r_2) (thm_70 B A f_1 r_2 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((r x) (f x)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_72 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3))) => thm_71 B A f_1 r_2 hyp_1.

(; Theorem: |- ((= (\lambda f. (Data.Bool.! \lambda x. ((r x) (f x))) f)) (Data.Bool.! \lambda x. ((r x) (f x)))) ;)

(; dict ;)

def thm_73 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_2 x_4 (f_3 x_4))) f_1) (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV (hol.arr A B) hol.bool (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_2 x_4 (f_3 x_4))) f_1.

(; Theorem: |- (\lambda f. (Data.Bool.! \lambda x. ((r x) (f x))) f) ;)

(; dict ;)

def thm_74 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_2 x_4 (f_3 x_4))) f_1) -> hol.proof ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_2 x_4 (f_3 x_4))) f_1) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_2 x_4 (f_3 x_4))) f_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((r x) (f x))) ;)

(; dict ;)

def thm_75 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_2 x_4 (f_3 x_4))) f_1) -> hol.proof (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_2 x_4 (f_3 x_4))) f_1) => hol.EQ_MP ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_2 x_4 (f_3 x_4))) f_1) (hol.forall A (x_3 : hol.term A => r_2 x_3 (f_1 x_3))) (thm_73 B A f_1 r_2) (thm_74 B A f_1 r_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_76 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_2 x_4 (f_3 x_4))) f_1) -> hol.proof (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_2 x_4 (f_3 x_4))) f_1) => thm_72 B A f_1 r_2 (thm_75 B A f_1 r_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda f. (Data.Bool.! \lambda x. ((r x) (f x))) f)) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_77 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_2 x_4 (f_3 x_4))) f_1) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_2 x_4 (f_3 x_4))) f_1) => thm_76 B A f_1 r_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda f. ((Data.Bool.==> (\lambda f. (Data.Bool.! \lambda x. ((r x) (f x))) f)) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))))) ;)

(; dict ;)

def thm_78 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.imp ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => r_1 x_4 (f_3 x_4))) f_2) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => f_2 : hol.term (hol.arr A B) => thm_77 B A f_2 r_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_79 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_49 B A r_1 (thm_78 B A r_1).

(; Theorem: |- (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))) ;)

(; dict ;)

def thm_80 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_81 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) -> hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) => thm_79 B A r_1 (thm_80 B A r_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_82 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) -> hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) => hyp_1.

(; Theorem: |- ((= (\lambda f. (Data.Bool.! \lambda x. ((r x) (f x))) \lambda x. (select \lambda y. ((r x) y)))) (Data.Bool.! \lambda x. ((r x) (\lambda x. (select \lambda y. ((r x) y)) x)))) ;)

(; dict ;)

def thm_83 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))) (x_2 : hol.term A => hol.select B (y_3 : hol.term B => r_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV (hol.arr A B) hol.bool (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))) (x_2 : hol.term A => hol.select B (y_3 : hol.term B => r_1 x_2 y_3)).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((r x) (\lambda x. (select \lambda y. ((r x) y)) x)))) (\lambda f. (Data.Bool.! \lambda x. ((r x) (f x))) \lambda x. (select \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_84 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2))) ((f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))) (x_2 : hol.term A => hol.select B (y_3 : hol.term B => r_1 x_2 y_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool ((f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))) (x_2 : hol.term A => hol.select B (y_3 : hol.term B => r_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2))) (thm_83 B A r_1).

(; Theorem: |- ((= \lambda x. ((r x) (\lambda x. (select \lambda y. ((r x) y)) x))) \lambda x. ((r x) (\lambda x. (select \lambda y. ((r x) y)) x))) ;)

(; dict ;)

def thm_85 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2)) (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2)).

(; Theorem: |- ((= \lambda x. ((r x) (\lambda x. (select \lambda y. ((r x) y)) x))) \lambda x. ((r x) (\lambda x. (select \lambda y. ((r x) y)) x))) ;)

(; dict ;)

def thm_86 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2)) (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2)) (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2)) (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2)) (thm_85 B A r_1) (thm_85 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((r x) (\lambda x. (select \lambda y. ((r x) y)) x)))) (Data.Bool.! \lambda x. ((r x) (\lambda x. (select \lambda y. ((r x) y)) x)))) ;)

(; dict ;)

def thm_87 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2))) (hol.forall A (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2)) (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2)) (thm_51 A) (thm_86 B A r_1).

(; Theorem: |- ((= (r x)) (r x)) ;)

(; dict ;)

def thm_88 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (r_2 x_1) (r_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr B hol.bool) (r_2 x_1).

(; Theorem: |- ((= (\lambda x. (select \lambda y. ((r x) y)) x)) (select \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_89 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq B ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_2 x_3 y_4)) x_1) (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV A B (x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_2 x_3 y_4)) x_1.

(; Theorem: |- ((= ((r x) (\lambda x. (select \lambda y. ((r x) y)) x))) ((r x) (select \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_90 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (r_2 x_1 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_2 x_3 y_4)) x_1)) (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM B hol.bool (r_2 x_1) (r_2 x_1) ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_2 x_3 y_4)) x_1) (hol.select B (y_3 : hol.term B => r_2 x_1 y_3)) (thm_88 A B x_1 r_2) (thm_89 A B x_1 r_2).

(; Theorem: |- ((= ((r x) (select \lambda y. ((r x) y)))) ((r x) (\lambda x. (select \lambda y. ((r x) y)) x))) ;)

(; dict ;)

def thm_91 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) (r_2 x_1 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_2 x_3 y_4)) x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool (r_2 x_1 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_2 x_3 y_4)) x_1)) (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) (thm_90 B A x_1 r_2).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_92 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= (\lambda y. ((r x) y) (select \lambda y. ((r x) y)))) ((r x) (select \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_93 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => r_2 x_1 y_3) (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (y_3 : hol.term B => r_2 x_1 y_3) (hol.select B (y_3 : hol.term B => r_2 x_1 y_3)).

(; Theorem: |- ((= (= (\lambda y. ((r x) y) (select \lambda y. ((r x) y))))) (= ((r x) (select \lambda y. ((r x) y))))) ;)

(; dict ;)

def thm_94 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((y_3 : hol.term B => r_2 x_1 y_3) (hol.select B (y_3 : hol.term B => r_2 x_1 y_3)))) (hol.eq hol.bool (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((y_3 : hol.term B => r_2 x_1 y_3) (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) thm_92 (thm_93 A B x_1 r_2).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((r x) y))) (Data.Bool.? \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_95 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3)).

(; Theorem: |- ((= ((= (\lambda y. ((r x) y) (select \lambda y. ((r x) y)))) (Data.Bool.? \lambda y. ((r x) y)))) ((= ((r x) (select \lambda y. ((r x) y)))) (Data.Bool.? \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_96 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((y_3 : hol.term B => r_2 x_1 y_3) (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3))) (hol.eq hol.bool (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((y_3 : hol.term B => r_2 x_1 y_3) (hol.select B (y_3 : hol.term B => r_2 x_1 y_3)))) (hol.eq hol.bool (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3)) (thm_94 A B x_1 r_2) (thm_95 A B x_1 r_2).

(; Theorem: |- ((= (= (p (select p)))) (= (p (select p)))) ;)

(; dict ;)

def thm_97 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (p_1 (hol.select A p_1))) (hol.eq hol.bool (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (p_1 (hol.select A p_1))).

(; Theorem: |- ((= ((= Data.Bool.?) \lambda p. (p (select p)))) ((= Data.Bool.?) \lambda p. (p (select p)))) ;)

(; dict ;)

def thm_98 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)))) :=
  A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))).

(; Theorem: |- ((= ((= Data.Bool.?) \lambda p. (p (select p)))) ((= Data.Bool.?) \lambda p. (p (select p)))) ;)

(; dict ;)

def thm_99 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)))) :=
  A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (thm_98 A) (thm_98 A).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_100 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) p_1 p_1) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) p_1.

(; Theorem: |- ((= (Data.Bool.? p)) (\lambda p. (p (select p)) p)) ;)

(; dict ;)

def thm_101 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1 p_1 (hol.EQ_MP (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2))) (thm_99 A) (thm_1 A)) (thm_100 A p_1).

(; Theorem: |- ((= (\lambda p. (p (select p)) p)) (p (select p))) ;)

(; dict ;)

def thm_102 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1.

(; Theorem: |- ((= \lambda p. (\lambda p. (p (select p)) p)) \lambda p. (p (select p))) ;)

(; dict ;)

def thm_103 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)) (p_1 : hol.term (hol.arr A hol.bool) => thm_102 A p_1).

(; Theorem: |- ((= (\lambda p. (\lambda p. (p (select p)) p) p)) (\lambda p. (p (select p)) p)) ;)

(; dict ;)

def thm_104 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1 p_1 (thm_103 A) (thm_100 A p_1).

(; Theorem: |- ((= (= (\lambda p. (\lambda p. (p (select p)) p) p))) (= (\lambda p. (p (select p)) p))) ;)

(; dict ;)

def thm_105 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1)) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) thm_92 (thm_104 A p_1).

(; Theorem: |- ((= ((= (\lambda p. (\lambda p. (p (select p)) p) p)) (\lambda p. (p (select p)) p))) ((= (\lambda p. (p (select p)) p)) (p (select p)))) ;)

(; dict ;)

def thm_106 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1)) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1)) (thm_105 A p_1) (thm_102 A p_1).

(; Theorem: |- ((= (Data.Bool.? p)) (p (select p))) ;)

(; dict ;)

def thm_107 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1)) (thm_101 A p_1) (hol.EQ_MP (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1))) (thm_106 A p_1) (thm_104 A p_1)).

(; Theorem: |- ((= ((= (p (select p))) (Data.Bool.? p))) ((= (p (select p))) (p (select p)))) ;)

(; dict ;)

def thm_108 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) (hol.eq hol.bool (p_1 (hol.select A p_1)) (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1))) (hol.eq hol.bool (p_1 (hol.select A p_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1)) (thm_97 A p_1) (thm_107 A p_1).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_109 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_110 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_109 A x_1) (thm_109 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_111 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_112 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_111 A) (thm_111 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_113 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_51 A) (thm_112 A).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_114 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_115 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_114 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_116 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_115 t_1 hyp_1) thm_2.

(; Theorem: |- t ;)

(; dict ;)

def thm_117 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_118 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_117 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_2).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_119 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_116 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_118 t_1 hyp_1).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_120 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_119 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_121 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_3 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_122 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_120 A x_1) (thm_121 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_123 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_109 A x_1) (thm_122 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_124 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 x_1) hol.true) :=
  x_1 : hol.term hol.bool => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_110 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_113 A) (thm_123 A) x_1)) hol.bool x_1.

(; Theorem: |- ((= ((= (p (select p))) (p (select p)))) Data.Bool.T) ;)

(; dict ;)

def thm_125 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (p_1 (hol.select A p_1))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_124 x_1) (p_1 (hol.select A p_1)).

(; Theorem: |- ((= ((= (p (select p))) (Data.Bool.? p))) Data.Bool.T) ;)

(; dict ;)

def thm_126 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) (hol.eq hol.bool (p_1 (hol.select A p_1)) (p_1 (hol.select A p_1))) hol.true (thm_108 A p_1) (thm_125 A p_1).

(; Theorem: |- ((= Data.Bool.T) ((= (p (select p))) (Data.Bool.? p))) ;)

(; dict ;)

def thm_127 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) hol.true (thm_126 A p_1).

(; Theorem: |- ((= (p (select p))) (Data.Bool.? p)) ;)

(; dict ;)

def thm_128 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP hol.true (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) (thm_127 A p_1) thm_2.

(; Theorem: |- ((= (\lambda y. ((r x) y) (select \lambda y. ((r x) y)))) (Data.Bool.? \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_129 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => r_2 x_1 y_3) (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_128 A p_1) B (y_3 : hol.term B => r_2 x_1 y_3).

(; Theorem: |- ((= ((r x) (select \lambda y. ((r x) y)))) (Data.Bool.? \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_130 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool ((y_3 : hol.term B => r_2 x_1 y_3) (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3))) (hol.eq hol.bool (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3))) (thm_96 A B x_1 r_2) (thm_129 A B x_1 r_2).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((r x) y))) ((r x) (select \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_131 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3)) (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3)) (thm_130 B A x_1 r_2).

(; Theorem: |- (Data.Bool.? \lambda y. ((r x) y)) ;)

(; dict ;)

def thm_132 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4))) => thm_82 B A r_2 hyp_1 x_1.

(; Theorem: |- ((r x) (select \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_133 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4))) -> hol.proof (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4))) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3)) (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) (thm_131 A B x_1 r_2) ((A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4))) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3)) (thm_95 A B x_1 r_2) (thm_132 A B x_1 r_2 hyp_1)) A B x_1 r_2 hyp_1).

(; Theorem: |- ((r x) (\lambda x. (select \lambda y. ((r x) y)) x)) ;)

(; dict ;)

def thm_134 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4))) -> hol.proof (r_2 x_1 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_2 x_3 y_4)) x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4))) => hol.EQ_MP (r_2 x_1 (hol.select B (y_3 : hol.term B => r_2 x_1 y_3))) (r_2 x_1 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_2 x_3 y_4)) x_1)) (thm_91 B A x_1 r_2) (thm_133 B A x_1 r_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((r x) (\lambda x. (select \lambda y. ((r x) y)) x))) ;)

(; dict ;)

def thm_135 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) -> hol.proof (hol.forall A (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) => x_2 : hol.term A => thm_134 B A x_2 r_1 hyp_1.

(; Theorem: |- (\lambda f. (Data.Bool.! \lambda x. ((r x) (f x))) \lambda x. (select \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_136 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) -> hol.proof ((f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))) (x_2 : hol.term A => hol.select B (y_3 : hol.term B => r_1 x_2 y_3))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) => hol.EQ_MP (hol.forall A (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2))) ((f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))) (x_2 : hol.term A => hol.select B (y_3 : hol.term B => r_1 x_2 y_3))) (thm_84 B A r_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2))) (hol.forall A (x_2 : hol.term A => r_1 x_2 ((x_3 : hol.term A => hol.select B (y_4 : hol.term B => r_1 x_3 y_4)) x_2))) (thm_87 B A r_1) (thm_135 B A r_1 hyp_1)).

(; Theorem: |- (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))) ;)

(; dict ;)

def thm_137 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))) (x_2 : hol.term A => hol.select B (y_3 : hol.term B => r_1 x_2 y_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))) (x_2 : hol.term A => hol.select B (y_3 : hol.term B => r_1 x_2 y_3))) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_67 A x_1 P_2 hyp_1) (hol.arr A B) (x_2 : hol.term A => hol.select B (y_3 : hol.term B => r_1 x_2 y_3)) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))) ;)

(; dict ;)

def thm_138 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) => hol.PROVE_HYP ((f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))) (x_2 : hol.term A => hol.select B (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (thm_136 B A r_1 hyp_1) (hyp_2 : hol.proof ((f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))) (x_2 : hol.term A => hol.select B (y_3 : hol.term B => r_1 x_2 y_3))) => thm_137 B A r_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))) ;)

(; dict ;)

def thm_139 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) => hol.PROVE_HYP (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (thm_82 B A r_1 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) => thm_138 B A r_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) ;)

(; dict ;)

def thm_140 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) => thm_139 B A r_1 hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) ;)

(; dict ;)

def thm_141 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.PROP_EXT (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) => thm_81 B A r_1 hyp_2) (thm_80 B A r_1 hyp_1)) (hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) => thm_140 B A r_1 (thm_82 B A r_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))))) ;)

(; dict ;)

def thm_142 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_141 B A r_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))))) ;)

(; thm ;)

def thm_143 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))))) (thm_28 B A) (thm_142 B A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_144 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)).

(; Theorem: |- ((= (Data.Bool.==> (p x))) (Data.Bool.==> (p x))) ;)

(; dict ;)

def thm_145 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (p_2 x_1)) (hol.imp (p_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.imp (p_2 x_1)).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_146 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool))) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)).

(; Theorem: |- ((= (\lambda y. ((r x) y) y)) ((r x) y)) ;)

(; dict ;)

def thm_147 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((y_4 : hol.term B => r_3 x_2 y_4) y_1) (r_3 x_2 y_1)) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (y_4 : hol.term B => r_3 x_2 y_4) y_1.

(; Theorem: |- ((= \lambda y. (\lambda y. ((r x) y) y)) \lambda y. ((r x) y)) ;)

(; dict ;)

def thm_148 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => r_2 x_1 y_4) y_3) (y_3 : hol.term B => r_2 x_1 y_3)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (y_3 : hol.term B => (y_4 : hol.term B => r_2 x_1 y_4) y_3) (y_3 : hol.term B => r_2 x_1 y_3) (y_3 : hol.term B => thm_147 A B y_3 x_1 r_2).

(; Theorem: |- ((= (Data.Bool.? \lambda y. (\lambda y. ((r x) y) y))) (Data.Bool.? \lambda y. ((r x) y))) ;)

(; dict ;)

def thm_149 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => r_2 x_1 y_4) y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_2 x_1 y_3))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_3 : hol.term B => (y_4 : hol.term B => r_2 x_1 y_4) y_3) (y_3 : hol.term B => r_2 x_1 y_3) (thm_146 B) (thm_148 A B x_1 r_2).

(; Theorem: |- ((= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. (\lambda y. ((r x) y) y)))) ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_150 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (y_5 : hol.term B => r_1 x_2 y_5) y_4))) (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_2 y_4)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (p_3 x_2)) (hol.imp (p_3 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (y_5 : hol.term B => r_1 x_2 y_5) y_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_2 y_4)) (thm_145 A x_2 p_3) (thm_149 A B x_2 r_1).

(; Theorem: |- ((= (= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. (\lambda y. ((r x) y) y))))) (= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y))))) ;)

(; dict ;)

def thm_151 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (y_5 : hol.term B => r_1 x_2 y_5) y_4)))) (hol.eq hol.bool (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_2 y_4))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (y_5 : hol.term B => r_1 x_2 y_5) y_4))) (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_2 y_4))) thm_92 (thm_150 B A r_1 x_2 p_3).

(; Theorem: |- ((= ((Data.Bool.==> (p x)) (\lambda y. ((r x) y) y))) ((Data.Bool.==> (p x)) ((r x) y))) ;)

(; dict ;)

def thm_152 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_4 x_3) ((y_5 : hol.term B => r_2 x_3 y_5) y_1)) (hol.imp (p_4 x_3) (r_2 x_3 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (p_4 x_3)) (hol.imp (p_4 x_3)) ((y_5 : hol.term B => r_2 x_3 y_5) y_1) (r_2 x_3 y_1) (thm_145 A x_3 p_4) (thm_147 A B y_1 x_3 r_2).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> (p x)) (\lambda y. ((r x) y) y))) \lambda y. ((Data.Bool.==> (p x)) ((r x) y))) ;)

(; dict ;)

def thm_153 : A : hol.type -> B : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_4 : hol.term B => hol.imp (p_3 x_2) ((y_5 : hol.term B => r_1 x_2 y_5) y_4)) (y_4 : hol.term B => hol.imp (p_3 x_2) (r_1 x_2 y_4))) :=
  A : hol.type => B : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.ABS_THM B hol.bool (y_4 : hol.term B => hol.imp (p_3 x_2) ((y_5 : hol.term B => r_1 x_2 y_5) y_4)) (y_4 : hol.term B => hol.imp (p_3 x_2) (r_1 x_2 y_4)) (y_4 : hol.term B => thm_152 B A y_4 r_1 x_2 p_3).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) (\lambda y. ((r x) y) y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((r x) y)))) ;)

(; dict ;)

def thm_154 : A : hol.type -> B : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_3 x_2) ((y_5 : hol.term B => r_1 x_2 y_5) y_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_3 x_2) (r_1 x_2 y_4)))) :=
  A : hol.type => B : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_4 : hol.term B => hol.imp (p_3 x_2) ((y_5 : hol.term B => r_1 x_2 y_5) y_4)) (y_4 : hol.term B => hol.imp (p_3 x_2) (r_1 x_2 y_4)) (thm_146 B) (thm_153 A B r_1 x_2 p_3).

(; Theorem: |- ((= ((= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. (\lambda y. ((r x) y) y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) (\lambda y. ((r x) y) y))))) ((= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((r x) y))))) ;)

(; dict ;)

def thm_155 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (y_5 : hol.term B => r_1 x_2 y_5) y_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_3 x_2) ((y_5 : hol.term B => r_1 x_2 y_5) y_4)))) (hol.eq hol.bool (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_2 y_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_3 x_2) (r_1 x_2 y_4))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (y_5 : hol.term B => r_1 x_2 y_5) y_4)))) (hol.eq hol.bool (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_2 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_3 x_2) ((y_5 : hol.term B => r_1 x_2 y_5) y_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_3 x_2) (r_1 x_2 y_4))) (thm_151 B A r_1 x_2 p_3) (thm_154 A B r_1 x_2 p_3).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_156 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) (Data.Bool.? \lambda y. (q y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> p) (q y))))) ((= ((Data.Bool.==> p) (Data.Bool.? \lambda y. (q y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> p) (q y))))) ;)

(; dict ;)

def thm_157 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3)))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3)))).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ((= ((Data.Bool.==> p) (Data.Bool.? \lambda y. (q y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> p) (q y))))) ;)

(; dict ;)

def thm_158 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3)))) (thm_156 A q_1 p_2) (thm_157 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_159 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => thm_4 A p_1.

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_160 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_159 A p_2 q_1.

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.? \lambda y. (q y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> p) (q y)))) ;)

(; dict ;)

def thm_161 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3)))) (thm_158 A q_1 p_2) (thm_160 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.? \lambda y. (q y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> p) (q y)))) ;)

(; dict ;)

def thm_162 : B : hol.type -> q_1 : hol.term (hol.arr B hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.imp p_2 (q_1 y_3)))) :=
  B : hol.type => q_1 : hol.term (hol.arr B hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_161 A q_1 p_2) B q_1 p_2.

(; Theorem: |- ((= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. (\lambda y. ((r x) y) y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) (\lambda y. ((r x) y) y)))) ;)

(; dict ;)

def thm_163 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (y_5 : hol.term B => r_1 x_2 y_5) y_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_3 x_2) ((y_5 : hol.term B => r_1 x_2 y_5) y_4)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => (B : hol.type => q_1 : hol.term (hol.arr B hol.bool) => p_2 : hol.term hol.bool => thm_162 B q_1 p_2) B (y_4 : hol.term B => r_1 x_2 y_4) (p_3 x_2).

(; Theorem: |- ((= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((r x) y)))) ;)

(; dict ;)

def thm_164 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_2 y_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_3 x_2) (r_1 x_2 y_4)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (y_5 : hol.term B => r_1 x_2 y_5) y_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_3 x_2) ((y_5 : hol.term B => r_1 x_2 y_5) y_4)))) (hol.eq hol.bool (hol.imp (p_3 x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_2 y_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_3 x_2) (r_1 x_2 y_4)))) (thm_155 B A r_1 x_2 p_3) (thm_163 B A r_1 x_2 p_3).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y)))) \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((r x) y)))) ;)

(; dict ;)

def thm_165 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp (p_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4))) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.imp (p_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4))) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4))) (x_3 : hol.term A => thm_164 B A r_1 x_3 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((r x) y))))) ;)

(; dict ;)

def thm_166 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4)))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.imp (p_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4))) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4))) (thm_51 A) (thm_165 B A r_1 p_2).

(; Theorem: |- ((= (\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x)) \lambda y. ((Data.Bool.==> (p x)) ((r x) y))) ;)

(; dict ;)

def thm_167 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) ((x_4 : hol.term A => y_5 : hol.term B => hol.imp (p_3 x_4) (r_2 x_4 y_5)) x_1) (y_4 : hol.term B => hol.imp (p_3 x_1) (r_2 x_1 y_4))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A (hol.arr B hol.bool) (x_4 : hol.term A => y_5 : hol.term B => hol.imp (p_3 x_4) (r_2 x_4 y_5)) x_1.

(; Theorem: |- ((= y) y) ;)

(; dict ;)

def thm_168 : B : hol.type -> y_1 : hol.term B -> hol.proof (hol.eq B y_1 y_1) :=
  B : hol.type => y_1 : hol.term B => hol.REFL B y_1.

(; Theorem: |- ((= ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) y)) (\lambda y. ((Data.Bool.==> (p x)) ((r x) y)) y)) ;)

(; dict ;)

def thm_169 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_4 x_5) (r_3 x_5 y_6)) x_2 y_1) ((y_5 : hol.term B => hol.imp (p_4 x_2) (r_3 x_2 y_5)) y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM B hol.bool ((x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_4 x_5) (r_3 x_5 y_6)) x_2) (y_5 : hol.term B => hol.imp (p_4 x_2) (r_3 x_2 y_5)) y_1 y_1 (thm_167 A B x_2 r_3 p_4) (thm_168 B y_1).

(; Theorem: |- ((= (\lambda y. ((Data.Bool.==> (p x)) ((r x) y)) y)) ((Data.Bool.==> (p x)) ((r x) y))) ;)

(; dict ;)

def thm_170 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((y_5 : hol.term B => hol.imp (p_4 x_3) (r_2 x_3 y_5)) y_1) (hol.imp (p_4 x_3) (r_2 x_3 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV B hol.bool (y_5 : hol.term B => hol.imp (p_4 x_3) (r_2 x_3 y_5)) y_1.

(; Theorem: |- ((= ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) y)) ((Data.Bool.==> (p x)) ((r x) y))) ;)

(; dict ;)

def thm_171 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_4 x_5) (r_3 x_5 y_6)) x_2 y_1) (hol.imp (p_4 x_2) (r_3 x_2 y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_4 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool ((x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_4 x_5) (r_3 x_5 y_6)) x_2 y_1) ((y_5 : hol.term B => hol.imp (p_4 x_2) (r_3 x_2 y_5)) y_1) (hol.imp (p_4 x_2) (r_3 x_2 y_1)) (thm_169 B A y_1 x_2 r_3 p_4) (thm_170 A B y_1 r_3 x_2 p_4).

(; Theorem: |- ((= \lambda y. ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) y)) \lambda y. ((Data.Bool.==> (p x)) ((r x) y))) ;)

(; dict ;)

def thm_172 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_3 x_5) (r_2 x_5 y_6)) x_1 y_4) (y_4 : hol.term B => hol.imp (p_3 x_1) (r_2 x_1 y_4))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hol.ABS_THM B hol.bool (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_3 x_5) (r_2 x_5 y_6)) x_1 y_4) (y_4 : hol.term B => hol.imp (p_3 x_1) (r_2 x_1 y_4)) (y_4 : hol.term B => thm_171 B A y_4 x_1 r_2 p_3).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) y))) (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((r x) y)))) ;)

(; dict ;)

def thm_173 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_3 x_5) (r_2 x_5 y_6)) x_1 y_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_3 x_1) (r_2 x_1 y_4)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_3 x_5) (r_2 x_5 y_6)) x_1 y_4) (y_4 : hol.term B => hol.imp (p_3 x_1) (r_2 x_1 y_4)) (thm_146 B) (thm_172 A B x_1 r_2 p_3).

(; Theorem: |- ((= \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) y))) \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((r x) y)))) ;)

(; dict ;)

def thm_174 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_3 y_4)) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_3 y_4)) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4))) (x_3 : hol.term A => thm_173 A B x_3 r_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((r x) y))))) ;)

(; dict ;)

def thm_175 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_3 y_4))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_3 y_4)) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4))) (thm_51 A) (thm_174 B A r_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) y))))) (= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((r x) y)))))) ;)

(; dict ;)

def thm_176 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_3 y_4)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_3 y_4))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4)))) thm_92 (thm_175 B A r_1 p_2).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_177 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)).

(; Theorem: |- ((= (f x)) (f x)) ;)

(; dict ;)

def thm_178 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (f_2 x_1) (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.REFL B (f_2 x_1).

(; Theorem: |- ((= ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) (f x))) (\lambda y. ((Data.Bool.==> (p x)) ((r x) y)) (f x))) ;)

(; dict ;)

def thm_179 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_4 x_5) (r_3 x_5 y_6)) x_2 (f_1 x_2)) ((y_5 : hol.term B => hol.imp (p_4 x_2) (r_3 x_2 y_5)) (f_1 x_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM B hol.bool ((x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_4 x_5) (r_3 x_5 y_6)) x_2) (y_5 : hol.term B => hol.imp (p_4 x_2) (r_3 x_2 y_5)) (f_1 x_2) (f_1 x_2) (thm_167 A B x_2 r_3 p_4) (thm_178 A B x_2 f_1).

(; Theorem: |- ((= (\lambda y. ((Data.Bool.==> (p x)) ((r x) y)) (f x))) ((Data.Bool.==> (p x)) ((r x) (f x)))) ;)

(; dict ;)

def thm_180 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((y_5 : hol.term B => hol.imp (p_4 x_3) (r_2 x_3 y_5)) (f_1 x_3)) (hol.imp (p_4 x_3) (r_2 x_3 (f_1 x_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV B hol.bool (y_5 : hol.term B => hol.imp (p_4 x_3) (r_2 x_3 y_5)) (f_1 x_3).

(; Theorem: |- ((= ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) (f x))) ((Data.Bool.==> (p x)) ((r x) (f x)))) ;)

(; dict ;)

def thm_181 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_4 x_5) (r_3 x_5 y_6)) x_2 (f_1 x_2)) (hol.imp (p_4 x_2) (r_3 x_2 (f_1 x_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_4 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool ((x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_4 x_5) (r_3 x_5 y_6)) x_2 (f_1 x_2)) ((y_5 : hol.term B => hol.imp (p_4 x_2) (r_3 x_2 y_5)) (f_1 x_2)) (hol.imp (p_4 x_2) (r_3 x_2 (f_1 x_2))) (thm_179 B A f_1 x_2 r_3 p_4) (thm_180 A B f_1 r_3 x_2 p_4).

(; Theorem: |- ((= \lambda x. ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) (f x))) \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x)))) ;)

(; dict ;)

def thm_182 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_4 : hol.term A => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_3 x_5) (r_2 x_5 y_6)) x_4 (f_1 x_4)) (x_4 : hol.term A => hol.imp (p_3 x_4) (r_2 x_4 (f_1 x_4)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_4 : hol.term A => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_3 x_5) (r_2 x_5 y_6)) x_4 (f_1 x_4)) (x_4 : hol.term A => hol.imp (p_3 x_4) (r_2 x_4 (f_1 x_4))) (x_4 : hol.term A => thm_181 B A f_1 x_4 r_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) (f x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x))))) ;)

(; dict ;)

def thm_183 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_3 x_5) (r_2 x_5 y_6)) x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (r_2 x_4 (f_1 x_4))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_4 : hol.term A => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_3 x_5) (r_2 x_5 y_6)) x_4 (f_1 x_4)) (x_4 : hol.term A => hol.imp (p_3 x_4) (r_2 x_4 (f_1 x_4))) (thm_51 A) (thm_182 B A f_1 r_2 p_3).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda x. ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) (f x)))) \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x))))) ;)

(; dict ;)

def thm_184 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_4 (f_3 x_4))) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.ABS_THM (hol.arr A B) hol.bool (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_4 (f_3 x_4))) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4)))) (f_3 : hol.term (hol.arr A B) => thm_183 B A f_3 r_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) (f x))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x)))))) ;)

(; dict ;)

def thm_185 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_4 (f_3 x_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_4 (f_3 x_4))) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4)))) (thm_177 B A) (thm_184 B A r_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) (f x)))))) ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((r x) y))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x))))))) ;)

(; dict ;)

def thm_186 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_3 y_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_4 (f_3 x_4))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_3 y_4)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_4 (f_3 x_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))) (thm_176 B A r_1 p_2) (thm_185 B A r_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((\lambda x. \lambda y. ((Data.Bool.==> (p x)) ((r x) y)) x) (f x))))) ;)

(; dict ;)

def thm_187 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_3 y_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_4 (f_3 x_4))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => (B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_141 B A r_1) B A (x_3 : hol.term A => y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4)).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((r x) y))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x)))))) ;)

(; dict ;)

def thm_188 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_3 y_4))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => (x_5 : hol.term A => y_6 : hol.term B => hol.imp (p_2 x_5) (r_1 x_5 y_6)) x_4 (f_3 x_4))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4)))))) (thm_186 B A r_1 p_2) (thm_187 B A r_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x)))))) ;)

(; dict ;)

def thm_189 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4)))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.imp (p_2 x_3) (r_1 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))) (thm_166 B A r_1 p_2) (thm_188 B A r_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y)))))) (= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x))))))) ;)

(; dict ;)

def thm_190 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))) thm_92 (thm_189 B A r_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x)))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x)))))) ;)

(; dict ;)

def thm_191 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4)))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x))))))) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x)))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x))))))) ;)

(; dict ;)

def thm_192 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))) (thm_190 B A r_1 p_2) (thm_191 B A r_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x)))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x))))))) Data.Bool.T) ;)

(; dict ;)

def thm_193 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4)))))) hol.true) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_124 x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x))))))) Data.Bool.T) ;)

(; dict ;)

def thm_194 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4)))))) hol.true) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_1 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (r_1 x_4 (f_3 x_4)))))) hol.true (thm_192 B A r_1 p_2) (thm_193 B A r_1 p_2).

(; Theorem: |- ((= \lambda r. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x))))))) \lambda r. Data.Bool.T) ;)

(; dict ;)

def thm_195 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4)))))) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.true)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4)))))) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.true) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_194 B A r_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x)))))))) (Data.Bool.! \lambda r. Data.Bool.T)) ;)

(; dict ;)

def thm_196 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4))))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.true))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4)))))) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.true) (thm_25 B A) (thm_195 B A p_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_197 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda r. t)) t)) ((= (Data.Bool.! \lambda r. t)) t)) ;)

(; dict ;)

def thm_198 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda r. t)) t)) ;)

(; dict ;)

def thm_199 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => t_1)) t_1) (thm_197 A t_1) (thm_198 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_200 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_5 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda r. t)) t) ;)

(; dict ;)

def thm_201 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (r_2 : hol.term A => t_1)) t_1) (thm_199 A t_1) (thm_200 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. t)) t) ;)

(; dict ;)

def thm_202 : B : hol.type -> A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => t_1)) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_201 A t_1) (hol.arr A (hol.arr B hol.bool)) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda r. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_203 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.true)) hol.true) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => t_1 : hol.term hol.bool => thm_202 B A t_1) B A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x)))))))) Data.Bool.T) ;)

(; dict ;)

def thm_204 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4))))))) hol.true) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4))))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.true)) hol.true (thm_196 B A p_1) (thm_203 B A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda r. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x)))))))) \lambda p. Data.Bool.T) ;)

(; dict ;)

def thm_205 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.true)) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.true) (p_1 : hol.term (hol.arr A hol.bool) => thm_204 B A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda r. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x))))))))) (Data.Bool.! \lambda p. Data.Bool.T)) ;)

(; dict ;)

def thm_206 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4)))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.true))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.true) (thm_144 A) (thm_205 B A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda p. t)) t)) ((= (Data.Bool.! \lambda p. t)) t)) ;)

(; dict ;)

def thm_207 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda p. t)) t)) ;)

(; dict ;)

def thm_208 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (thm_197 A t_1) (thm_207 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. t)) t) ;)

(; dict ;)

def thm_209 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (thm_208 A t_1) (thm_200 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. t)) t) ;)

(; dict ;)

def thm_210 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_209 A t_1) (hol.arr A hol.bool) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda p. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_211 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => thm_210 A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda r. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x))))))))) Data.Bool.T) ;)

(; dict ;)

def thm_212 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4)))))))) hol.true) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4)))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.true)) hol.true (thm_206 B A) (thm_211 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda p. (Data.Bool.! \lambda r. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x))))))))) ;)

(; dict ;)

def thm_213 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4))))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4)))))))) hol.true (thm_212 B A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda r. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((r x) y))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((r x) (f x)))))))) ;)

(; dict ;)

def thm_214 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4)))))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP hol.true (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A (hol.arr B hol.bool)) (r_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => r_2 x_3 y_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (r_2 x_4 (f_3 x_4)))))))) (thm_213 B A) thm_2.

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) ;)

(; dict ;)

def thm_215 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) ;)

(; dict ;)

def thm_216 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) (thm_215 B A) (thm_215 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y)))))))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y)))))))) ;)

(; dict ;)

def thm_217 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) (thm_25 B A) (thm_216 B A).

(; Theorem: |- ((= Data.Bool.?!) Data.Bool.?!) ;)

(; dict ;)

def thm_218 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool))) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool)).

(; Theorem: |- ((= (\lambda y. ((p x) y) y)) ((p x) y)) ;)

(; dict ;)

def thm_219 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((y_4 : hol.term B => p_3 x_2 y_4) y_1) (p_3 x_2 y_1)) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (y_4 : hol.term B => p_3 x_2 y_4) y_1.

(; Theorem: |- ((= \lambda y. (\lambda y. ((p x) y) y)) \lambda y. ((p x) y)) ;)

(; dict ;)

def thm_220 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3) (y_3 : hol.term B => p_2 x_1 y_3)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3) (y_3 : hol.term B => p_2 x_1 y_3) (y_3 : hol.term B => thm_219 A B y_3 x_1 p_2).

(; Theorem: |- ((= (Data.Bool.?! \lambda y. (\lambda y. ((p x) y) y))) (Data.Bool.?! \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_221 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool)) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3) (y_3 : hol.term B => p_2 x_1 y_3) (thm_218 B) (thm_220 A B x_1 p_2).

(; Theorem: |- ((= (= (Data.Bool.?! \lambda y. (\lambda y. ((p x) y) y)))) (= (Data.Bool.?! \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_222 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) thm_92 (thm_221 A B x_1 p_2).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_223 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B) (hol.forall B)) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B).

(; Theorem: |- ((= (\lambda y. ((p x) y) y')) ((p x) y')) ;)

(; dict ;)

def thm_224 : A : hol.type -> B : hol.type -> y_27_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((y_4 : hol.term B => p_3 x_2 y_4) y_27_1) (p_3 x_2 y_27_1)) :=
  A : hol.type => B : hol.type => y_27_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (y_4 : hol.term B => p_3 x_2 y_4) y_27_1.

(; Theorem: |- ((= (= (\lambda y. ((p x) y) y'))) (= ((p x) y'))) ;)

(; dict ;)

def thm_225 : A : hol.type -> B : hol.type -> y_27_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((y_4 : hol.term B => p_3 x_2 y_4) y_27_1)) (hol.eq hol.bool (p_3 x_2 y_27_1))) :=
  A : hol.type => B : hol.type => y_27_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((y_4 : hol.term B => p_3 x_2 y_4) y_27_1) (p_3 x_2 y_27_1) thm_92 (thm_224 A B y_27_1 x_2 p_3).

(; Theorem: |- ((= ((= y) y')) ((= y) y')) ;)

(; dict ;)

def thm_226 : B : hol.type -> y_27_1 : hol.term B -> y_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B y_2 y_27_1) (hol.eq B y_2 y_27_1)) :=
  B : hol.type => y_27_1 : hol.term B => y_2 : hol.term B => hol.REFL hol.bool (hol.eq B y_2 y_27_1).

(; Theorem: |- ((= ((= (\lambda y. ((p x) y) y')) ((= y) y'))) ((= ((p x) y')) ((= y) y'))) ;)

(; dict ;)

def thm_227 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> y_27_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((y_5 : hol.term B => p_4 x_3 y_5) y_27_2) (hol.eq B y_1 y_27_2)) (hol.eq hol.bool (p_4 x_3 y_27_2) (hol.eq B y_1 y_27_2))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => y_27_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((y_5 : hol.term B => p_4 x_3 y_5) y_27_2)) (hol.eq hol.bool (p_4 x_3 y_27_2)) (hol.eq B y_1 y_27_2) (hol.eq B y_1 y_27_2) (thm_225 A B y_27_2 x_3 p_4) (thm_226 B y_27_2 y_1).

(; Theorem: |- ((= \lambda y'. ((= (\lambda y. ((p x) y) y')) ((= y) y'))) \lambda y'. ((= ((p x) y')) ((= y) y'))) ;)

(; dict ;)

def thm_228 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_27_4 : hol.term B => hol.eq hol.bool ((y_5 : hol.term B => p_3 x_2 y_5) y_27_4) (hol.eq B y_1 y_27_4)) (y_27_4 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_4) (hol.eq B y_1 y_27_4))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (y_27_4 : hol.term B => hol.eq hol.bool ((y_5 : hol.term B => p_3 x_2 y_5) y_27_4) (hol.eq B y_1 y_27_4)) (y_27_4 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_4) (hol.eq B y_1 y_27_4)) (y_27_4 : hol.term B => thm_227 A B y_1 y_27_4 x_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y'. ((= (\lambda y. ((p x) y) y')) ((= y) y')))) (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y')))) ;)

(; dict ;)

def thm_229 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool ((y_5 : hol.term B => p_3 x_2 y_5) y_27_4) (hol.eq B y_1 y_27_4))) (hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_4) (hol.eq B y_1 y_27_4)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y_27_4 : hol.term B => hol.eq hol.bool ((y_5 : hol.term B => p_3 x_2 y_5) y_27_4) (hol.eq B y_1 y_27_4)) (y_27_4 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_4) (hol.eq B y_1 y_27_4)) (thm_223 B) (thm_228 A B y_1 x_2 p_3).

(; Theorem: |- ((= \lambda y. (Data.Bool.! \lambda y'. ((= (\lambda y. ((p x) y) y')) ((= y) y')))) \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y')))) ;)

(; dict ;)

def thm_230 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool ((y_5 : hol.term B => p_2 x_1 y_5) y_27_4) (hol.eq B y_3 y_27_4))) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_1 y_27_4) (hol.eq B y_3 y_27_4)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool ((y_5 : hol.term B => p_2 x_1 y_5) y_27_4) (hol.eq B y_3 y_27_4))) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_1 y_27_4) (hol.eq B y_3 y_27_4))) (y_3 : hol.term B => thm_229 A B y_3 x_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= (\lambda y. ((p x) y) y')) ((= y) y'))))) (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))))) ;)

(; dict ;)

def thm_231 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool ((y_5 : hol.term B => p_2 x_1 y_5) y_27_4) (hol.eq B y_3 y_27_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_1 y_27_4) (hol.eq B y_3 y_27_4))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool ((y_5 : hol.term B => p_2 x_1 y_5) y_27_4) (hol.eq B y_3 y_27_4))) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_1 y_27_4) (hol.eq B y_3 y_27_4))) (thm_146 B) (thm_230 A B x_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda y. (\lambda y. ((p x) y) y))) (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= (\lambda y. ((p x) y) y')) ((= y) y')))))) ((= (Data.Bool.?! \lambda y. ((p x) y))) (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y')))))) ;)

(; dict ;)

def thm_232 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool ((y_5 : hol.term B => p_2 x_1 y_5) y_27_4) (hol.eq B y_3 y_27_4))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_1 y_27_4) (hol.eq B y_3 y_27_4)))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool ((y_5 : hol.term B => p_2 x_1 y_5) y_27_4) (hol.eq B y_3 y_27_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_1 y_27_4) (hol.eq B y_3 y_27_4)))) (thm_222 A B x_1 p_2) (thm_231 A B x_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ;)

(; dict ;)

def thm_233 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda y. (p y))) (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= (p y')) ((= y) y')))))) ((= (Data.Bool.?! \lambda y. (p y))) (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= (p y')) ((= y) y')))))) ;)

(; dict ;)

def thm_234 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.forall A (y_27_3 : hol.term A => hol.eq hol.bool (p_1 y_27_3) (hol.eq A y_2 y_27_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.forall A (y_27_3 : hol.term A => hol.eq hol.bool (p_1 y_27_3) (hol.eq A y_2 y_27_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.forall A (y_27_3 : hol.term A => hol.eq hol.bool (p_1 y_27_3) (hol.eq A y_2 y_27_3))))).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y)))))) ((= (Data.Bool.?! \lambda y. (p y))) (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= (p y')) ((= y) y')))))) ;)

(; dict ;)

def thm_235 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.forall A (y_27_3 : hol.term A => hol.eq hol.bool (p_1 y_27_3) (hol.eq A y_2 y_27_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.forall A (y_27_3 : hol.term A => hol.eq hol.bool (p_1 y_27_3) (hol.eq A y_2 y_27_3))))) (thm_233 A p_1) (thm_234 A p_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda x. (p x))) (Data.Bool.? \lambda x. (Data.Bool.! \lambda y. ((= (p y)) ((= x) y))))) ;)

(; dict ;)

def thm_236 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_6 A p_1.

(; Theorem: |- ((= (Data.Bool.?! \lambda y. (p y))) (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= (p y')) ((= y) y'))))) ;)

(; dict ;)

def thm_237 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.forall A (y_27_3 : hol.term A => hol.eq hol.bool (p_1 y_27_3) (hol.eq A y_2 y_27_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A x_2 y_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.forall A (y_27_3 : hol.term A => hol.eq hol.bool (p_1 y_27_3) (hol.eq A y_2 y_27_3))))) (thm_235 A p_1) (thm_236 A p_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda y. (p y))) (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= (p y')) ((= y) y'))))) ;)

(; dict ;)

def thm_238 : B : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => p_1 y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.forall B (y_27_3 : hol.term B => hol.eq hol.bool (p_1 y_27_3) (hol.eq B y_2 y_27_3))))) :=
  B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_237 A p_1) B p_1.

(; Theorem: |- ((= (Data.Bool.?! \lambda y. (\lambda y. ((p x) y) y))) (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= (\lambda y. ((p x) y) y')) ((= y) y'))))) ;)

(; dict ;)

def thm_239 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool ((y_5 : hol.term B => p_2 x_1 y_5) y_27_4) (hol.eq B y_3 y_27_4))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => thm_238 B p_1) B (y_3 : hol.term B => p_2 x_1 y_3).

(; Theorem: |- ((= (Data.Bool.?! \lambda y. ((p x) y))) (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))))) ;)

(; dict ;)

def thm_240 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_1 y_27_4) (hol.eq B y_3 y_27_4))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool ((y_5 : hol.term B => p_2 x_1 y_5) y_27_4) (hol.eq B y_3 y_27_4))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_1 y_27_4) (hol.eq B y_3 y_27_4))))) (thm_232 A B x_1 p_2) (thm_239 A B x_1 p_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.?! \lambda y. ((p x) y))) \lambda x. (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))))) ;)

(; dict ;)

def thm_241 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4)))) (x_2 : hol.term A => thm_240 A B x_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y')))))) ;)

(; dict ;)

def thm_242 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4)))) (thm_51 A) (thm_241 B A p_1).

(; Theorem: |- ((= (\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x)) \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y')))) ;)

(; dict ;)

def thm_243 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) ((x_3 : hol.term A => y_4 : hol.term B => hol.forall B (y_27_5 : hol.term B => hol.eq hol.bool (p_2 x_3 y_27_5) (hol.eq B y_4 y_27_5))) x_1) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_1 y_27_4) (hol.eq B y_3 y_27_4)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV A (hol.arr B hol.bool) (x_3 : hol.term A => y_4 : hol.term B => hol.forall B (y_27_5 : hol.term B => hol.eq hol.bool (p_2 x_3 y_27_5) (hol.eq B y_4 y_27_5))) x_1.

(; Theorem: |- ((= ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) y)) (\lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) y)) ;)

(; dict ;)

def thm_244 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_3 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 y_1) ((y_4 : hol.term B => hol.forall B (y_27_5 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_5) (hol.eq B y_4 y_27_5))) y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM B hol.bool ((x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_3 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2) (y_4 : hol.term B => hol.forall B (y_27_5 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_5) (hol.eq B y_4 y_27_5))) y_1 y_1 (thm_243 A B x_2 p_3) (thm_168 B y_1).

(; Theorem: |- ((= (\lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) y)) (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y')))) ;)

(; dict ;)

def thm_245 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((y_4 : hol.term B => hol.forall B (y_27_5 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_5) (hol.eq B y_4 y_27_5))) y_1) (hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_4) (hol.eq B y_1 y_27_4)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (y_4 : hol.term B => hol.forall B (y_27_5 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_5) (hol.eq B y_4 y_27_5))) y_1.

(; Theorem: |- ((= ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) y)) (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y')))) ;)

(; dict ;)

def thm_246 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_3 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 y_1) (hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_4) (hol.eq B y_1 y_27_4)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool ((x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_3 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 y_1) ((y_4 : hol.term B => hol.forall B (y_27_5 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_5) (hol.eq B y_4 y_27_5))) y_1) (hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_4) (hol.eq B y_1 y_27_4))) (thm_244 B A y_1 x_2 p_3) (thm_245 A B y_1 x_2 p_3).

(; Theorem: |- ((= \lambda y. ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) y)) \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y')))) ;)

(; dict ;)

def thm_247 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_2 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_1 y_3) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_1 y_27_4) (hol.eq B y_3 y_27_4)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_2 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_1 y_3) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_1 y_27_4) (hol.eq B y_3 y_27_4))) (y_3 : hol.term B => thm_246 B A y_3 x_1 p_2).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) y))) (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))))) ;)

(; dict ;)

def thm_248 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_2 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_1 y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_1 y_27_4) (hol.eq B y_3 y_27_4))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_2 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_1 y_3) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_1 y_27_4) (hol.eq B y_3 y_27_4))) (thm_146 B) (thm_247 A B x_1 p_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) y))) \lambda x. (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))))) ;)

(; dict ;)

def thm_249 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 y_3)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 y_3)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4)))) (x_2 : hol.term A => thm_248 A B x_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y')))))) ;)

(; dict ;)

def thm_250 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 y_3))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 y_3)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4)))) (thm_51 A) (thm_249 B A p_1).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) y))))) (= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))))))) ;)

(; dict ;)

def thm_251 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 y_3)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 y_3))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4))))) thm_92 (thm_250 B A p_1).

(; Theorem: |- ((= ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) (f x))) (\lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) (f x))) ;)

(; dict ;)

def thm_252 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_3 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 (f_1 x_2)) ((y_4 : hol.term B => hol.forall B (y_27_5 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_5) (hol.eq B y_4 y_27_5))) (f_1 x_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM B hol.bool ((x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_3 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2) (y_4 : hol.term B => hol.forall B (y_27_5 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_5) (hol.eq B y_4 y_27_5))) (f_1 x_2) (f_1 x_2) (thm_243 A B x_2 p_3) (thm_178 A B x_2 f_1).

(; Theorem: |- ((= (\lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) (f x))) (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))) ;)

(; dict ;)

def thm_253 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((y_4 : hol.term B => hol.forall B (y_27_5 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_5) (hol.eq B y_4 y_27_5))) (f_1 x_2)) (hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_4) (hol.eq B (f_1 x_2) y_27_4)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (y_4 : hol.term B => hol.forall B (y_27_5 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_5) (hol.eq B y_4 y_27_5))) (f_1 x_2).

(; Theorem: |- ((= ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) (f x))) (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))) ;)

(; dict ;)

def thm_254 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_3 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 (f_1 x_2)) (hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_4) (hol.eq B (f_1 x_2) y_27_4)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool ((x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_3 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 (f_1 x_2)) ((y_4 : hol.term B => hol.forall B (y_27_5 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_5) (hol.eq B y_4 y_27_5))) (f_1 x_2)) (hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_3 x_2 y_27_4) (hol.eq B (f_1 x_2) y_27_4))) (thm_252 B A f_1 x_2 p_3) (thm_253 A B f_1 x_2 p_3).

(; Theorem: |- ((= \lambda x. ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) (f x))) \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))) ;)

(; dict ;)

def thm_255 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_2 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_3 (f_1 x_3)) (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_3 y_27_4) (hol.eq B (f_1 x_3) y_27_4)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (x_3 : hol.term A => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_2 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_3 (f_1 x_3)) (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_3 y_27_4) (hol.eq B (f_1 x_3) y_27_4))) (x_3 : hol.term A => thm_254 B A f_1 x_3 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) (f x)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))) ;)

(; dict ;)

def thm_256 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_2 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_3 (f_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_3 y_27_4) (hol.eq B (f_1 x_3) y_27_4))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_2 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_3 (f_1 x_3)) (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_2 x_3 y_27_4) (hol.eq B (f_1 x_3) y_27_4))) (thm_51 A) (thm_255 B A f_1 p_2).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda x. ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) (f x)))) \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))) ;)

(; dict ;)

def thm_257 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_3 (f_2 x_3))) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM (hol.arr A B) hol.bool (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_3 (f_2 x_3))) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))) (f_2 : hol.term (hol.arr A B) => thm_256 B A f_2 p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) (f x))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) ;)

(; dict ;)

def thm_258 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_3 (f_2 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_3 (f_2 x_3))) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))) (thm_177 B A) (thm_257 B A p_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) (f x)))))) ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))) ;)

(; dict ;)

def thm_259 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_3 (f_2 x_3))))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 y_3)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_3 (f_2 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (thm_251 B A p_1) (thm_258 B A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((\lambda x. \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y'))) x) (f x))))) ;)

(; dict ;)

def thm_260 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_3 (f_2 x_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_141 B A r_1) B A (x_2 : hol.term A => y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4))).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= y) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) ;)

(; dict ;)

def thm_261 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => (x_4 : hol.term A => y_5 : hol.term B => hol.forall B (y_27_6 : hol.term B => hol.eq hol.bool (p_1 x_4 y_27_6) (hol.eq B y_5 y_27_6))) x_3 (f_2 x_3))))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) (thm_259 B A p_1) (thm_260 B A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) ;)

(; dict ;)

def thm_262 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_2 y_27_4) (hol.eq B y_3 y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (thm_242 B A p_1) (thm_261 B A p_1).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y))))) (= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))) ;)

(; dict ;)

def thm_263 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) thm_92 (thm_262 B A p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y)))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y)))))) ;)

(; dict ;)

def thm_264 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) ;)

(; dict ;)

def thm_265 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))) (thm_263 B A p_1) (thm_264 B A p_1).

(; Theorem: |- ((= (= (\lambda _486. ((= _486) Data.Bool.T) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))))) (= (\lambda _486. ((= _486) Data.Bool.T) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))))) ;)

(; dict ;)

def thm_266 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))))) (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))))).

(; Theorem: |- ((= (\lambda _486. ((= _486) Data.Bool.T) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y)))))))) ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) Data.Bool.T)) ;)

(; dict ;)

def thm_267 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))))) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV hol.bool hol.bool (__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))).

(; Theorem: |- ((= ((= (\lambda _486. ((= _486) Data.Bool.T) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))))) (\lambda _486. ((= _486) Data.Bool.T) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))))) ((= (\lambda _486. ((= _486) Data.Bool.T) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))))) ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) Data.Bool.T))) ;)

(; dict ;)

def thm_268 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))) ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))))) (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))))) (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))))) ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))))) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true) (thm_266 B A p_1) (thm_267 B A p_1).

(; Theorem: |- ((= (\lambda _486. ((= _486) Data.Bool.T) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))))) ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))) Data.Bool.T)) ;)

(; dict ;)

def thm_269 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) hol.true)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV hol.bool hol.bool (__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))).

(; Theorem: |- ((= (= (\lambda _486. ((= _486) Data.Bool.T) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))))) (= ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))) Data.Bool.T))) ;)

(; dict ;)

def thm_270 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) hol.true))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) hol.true) thm_92 (thm_269 B A p_1).

(; Theorem: |- ((= ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) Data.Bool.T)) ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) Data.Bool.T)) ;)

(; dict ;)

def thm_271 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true).

(; Theorem: |- ((= ((= (\lambda _486. ((= _486) Data.Bool.T) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))))) ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) Data.Bool.T))) ((= ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))) Data.Bool.T)) ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) Data.Bool.T))) ;)

(; dict ;)

def thm_272 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true) (thm_270 B A p_1) (thm_271 B A p_1).

(; Theorem: |- ((= ((= (\lambda _486. ((= _486) Data.Bool.T) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))))) (\lambda _486. ((= _486) Data.Bool.T) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))))) ((= ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))) Data.Bool.T)) ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) Data.Bool.T))) ;)

(; dict ;)

def thm_273 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))) ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))) ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))))) (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true)) (thm_268 B A p_1) (thm_272 B A p_1).

(; Theorem: |- ((= \lambda _486. ((= _486) Data.Bool.T)) \lambda _486. ((= _486) Data.Bool.T)) ;)

(; dict ;)

def thm_274 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__486_1 : hol.term hol.bool => hol.eq hol.bool __486_1 hol.true) (__486_1 : hol.term hol.bool => hol.eq hol.bool __486_1 hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (__486_1 : hol.term hol.bool => hol.eq hol.bool __486_1 hol.true).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))) ;)

(; dict ;)

def thm_275 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) ;)

(; dict ;)

def thm_276 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) ;)

(; dict ;)

def thm_277 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) (thm_275 B A p_1) (thm_276 B A p_1).

(; Theorem: |- ((= (\lambda _486. ((= _486) Data.Bool.T) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))))) (\lambda _486. ((= _486) Data.Bool.T) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y)))))))) ;)

(; dict ;)

def thm_278 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))) ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) thm_274 (thm_277 B A p_1).

(; Theorem: |- ((= ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))) Data.Bool.T)) ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) Data.Bool.T)) ;)

(; dict ;)

def thm_279 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))))) ((__486_2 : hol.term hol.bool => hol.eq hol.bool __486_2 hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true)) (thm_273 B A p_1) (thm_278 B A p_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y'))))))) Data.Bool.T) ;)

(; dict ;)

def thm_280 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) hol.true) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (x_1 : hol.term hol.bool => thm_124 x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y'. ((= ((p x) y')) ((= (f x)) y')))))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) Data.Bool.T) ;)

(; dict ;)

def thm_281 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4)))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true) (thm_279 B A p_1) (thm_280 B A p_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) Data.Bool.T) ;)

(; dict ;)

def thm_282 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_27_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_27_4) (hol.eq B (f_2 x_3) y_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true (thm_265 B A p_1) (thm_281 B A p_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) ;)

(; dict ;)

def thm_283 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) hol.true (thm_282 B A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y)))))) ;)

(; dict ;)

def thm_284 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP hol.true (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4)))))) (thm_283 B A p_1) thm_2.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) ;)

(; dict ;)

def thm_285 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_284 B A p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((p x) y)) ((= (f x)) y))))))) ;)

(; thm ;)

def thm_286 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.eq hol.bool (p_1 x_3 y_4) (hol.eq B (f_2 x_3) y_4))))))) (thm_217 B A) (thm_285 B A).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))))) \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))))) ;)

(; dict ;)

def thm_287 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))))) \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))))) ;)

(; dict ;)

def thm_288 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (thm_287 B A) (thm_287 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))))) ;)

(; dict ;)

def thm_289 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (thm_25 B A) (thm_288 B A).

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_290 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= (Data.Bool.? \lambda y. (\lambda y. ((p x) y) y))) (Data.Bool.? \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_291 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3) (y_3 : hol.term B => p_2 x_1 y_3) (thm_146 B) (thm_220 A B x_1 p_2).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.? \lambda y. (\lambda y. ((p x) y) y)))) (Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_292 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) thm_290 (thm_291 A B x_1 p_2).

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_293 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= (Data.Bool./\ (\lambda y. ((p x) y) y))) (Data.Bool./\ ((p x) y))) ;)

(; dict ;)

def thm_294 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((y_4 : hol.term B => p_3 x_2 y_4) y_1)) (hol.and (p_3 x_2 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((y_4 : hol.term B => p_3 x_2 y_4) y_1) (p_3 x_2 y_1) thm_290 (thm_219 A B y_1 x_2 p_3).

(; Theorem: |- ((= (\lambda y. ((p x) y) x')) ((p x) x')) ;)

(; dict ;)

def thm_295 : A : hol.type -> B : hol.type -> x_27_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((y_4 : hol.term B => p_3 x_2 y_4) x_27_1) (p_3 x_2 x_27_1)) :=
  A : hol.type => B : hol.type => x_27_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (y_4 : hol.term B => p_3 x_2 y_4) x_27_1.

(; Theorem: |- ((= ((Data.Bool./\ (\lambda y. ((p x) y) y)) (\lambda y. ((p x) y) x'))) ((Data.Bool./\ ((p x) y)) ((p x) x'))) ;)

(; dict ;)

def thm_296 : A : hol.type -> B : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and ((y_5 : hol.term B => p_4 x_3 y_5) y_2) ((y_5 : hol.term B => p_4 x_3 y_5) x_27_1)) (hol.and (p_4 x_3 y_2) (p_4 x_3 x_27_1))) :=
  A : hol.type => B : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.and ((y_5 : hol.term B => p_4 x_3 y_5) y_2)) (hol.and (p_4 x_3 y_2)) ((y_5 : hol.term B => p_4 x_3 y_5) x_27_1) (p_4 x_3 x_27_1) (thm_294 A B y_2 x_3 p_4) (thm_295 A B x_27_1 x_3 p_4).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool./\ (\lambda y. ((p x) y) y)) (\lambda y. ((p x) y) x')))) (Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x')))) ;)

(; dict ;)

def thm_297 : A : hol.type -> B : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.and ((y_5 : hol.term B => p_4 x_3 y_5) y_2) ((y_5 : hol.term B => p_4 x_3 y_5) x_27_1))) (hol.imp (hol.and (p_4 x_3 y_2) (p_4 x_3 x_27_1)))) :=
  A : hol.type => B : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.and ((y_5 : hol.term B => p_4 x_3 y_5) y_2) ((y_5 : hol.term B => p_4 x_3 y_5) x_27_1)) (hol.and (p_4 x_3 y_2) (p_4 x_3 x_27_1)) thm_293 (thm_296 A B x_27_1 y_2 x_3 p_4).

(; Theorem: |- ((= ((= y) x')) ((= y) x')) ;)

(; dict ;)

def thm_298 : B : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B y_2 x_27_1) (hol.eq B y_2 x_27_1)) :=
  B : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => hol.REFL hol.bool (hol.eq B y_2 x_27_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (\lambda y. ((p x) y) y)) (\lambda y. ((p x) y) x'))) ((= y) x'))) ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))) ;)

(; dict ;)

def thm_299 : A : hol.type -> B : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and ((y_5 : hol.term B => p_4 x_3 y_5) y_2) ((y_5 : hol.term B => p_4 x_3 y_5) x_27_1)) (hol.eq B y_2 x_27_1)) (hol.imp (hol.and (p_4 x_3 y_2) (p_4 x_3 x_27_1)) (hol.eq B y_2 x_27_1))) :=
  A : hol.type => B : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.and ((y_5 : hol.term B => p_4 x_3 y_5) y_2) ((y_5 : hol.term B => p_4 x_3 y_5) x_27_1))) (hol.imp (hol.and (p_4 x_3 y_2) (p_4 x_3 x_27_1))) (hol.eq B y_2 x_27_1) (hol.eq B y_2 x_27_1) (thm_297 A B x_27_1 y_2 x_3 p_4) (thm_298 B x_27_1 y_2).

(; Theorem: |- ((= \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda y. ((p x) y) y)) (\lambda y. ((p x) y) x'))) ((= y) x'))) \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))) ;)

(; dict ;)

def thm_300 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_3 x_2 y_5) y_1) ((y_5 : hol.term B => p_3 x_2 y_5) x_27_4)) (hol.eq B y_1 x_27_4)) (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y_1) (p_3 x_2 x_27_4)) (hol.eq B y_1 x_27_4))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_3 x_2 y_5) y_1) ((y_5 : hol.term B => p_3 x_2 y_5) x_27_4)) (hol.eq B y_1 x_27_4)) (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y_1) (p_3 x_2 x_27_4)) (hol.eq B y_1 x_27_4)) (x_27_4 : hol.term B => thm_299 A B x_27_4 y_1 x_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda y. ((p x) y) y)) (\lambda y. ((p x) y) x'))) ((= y) x')))) (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) ;)

(; dict ;)

def thm_301 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_3 x_2 y_5) y_1) ((y_5 : hol.term B => p_3 x_2 y_5) x_27_4)) (hol.eq B y_1 x_27_4))) (hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y_1) (p_3 x_2 x_27_4)) (hol.eq B y_1 x_27_4)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_3 x_2 y_5) y_1) ((y_5 : hol.term B => p_3 x_2 y_5) x_27_4)) (hol.eq B y_1 x_27_4)) (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y_1) (p_3 x_2 x_27_4)) (hol.eq B y_1 x_27_4)) (thm_223 B) (thm_300 A B y_1 x_2 p_3).

(; Theorem: |- ((= \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda y. ((p x) y) y)) (\lambda y. ((p x) y) x'))) ((= y) x')))) \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) ;)

(; dict ;)

def thm_302 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_2 x_1 y_5) y_3) ((y_5 : hol.term B => p_2 x_1 y_5) x_27_4)) (hol.eq B y_3 x_27_4))) (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM B hol.bool (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_2 x_1 y_5) y_3) ((y_5 : hol.term B => p_2 x_1 y_5) x_27_4)) (hol.eq B y_3 x_27_4))) (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4))) (y_3 : hol.term B => thm_301 A B y_3 x_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda y. ((p x) y) y)) (\lambda y. ((p x) y) x'))) ((= y) x'))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))) ;)

(; dict ;)

def thm_303 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_2 x_1 y_5) y_3) ((y_5 : hol.term B => p_2 x_1 y_5) x_27_4)) (hol.eq B y_3 x_27_4)))) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_2 x_1 y_5) y_3) ((y_5 : hol.term B => p_2 x_1 y_5) x_27_4)) (hol.eq B y_3 x_27_4))) (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4))) (thm_223 B) (thm_302 A B x_1 p_2).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda y. (\lambda y. ((p x) y) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda y. ((p x) y) y)) (\lambda y. ((p x) y) x'))) ((= y) x')))))) ((Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_304 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_2 x_1 y_5) y_3) ((y_5 : hol.term B => p_2 x_1 y_5) x_27_4)) (hol.eq B y_3 x_27_4))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3))) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_2 x_1 y_5) y_3) ((y_5 : hol.term B => p_2 x_1 y_5) x_27_4)) (hol.eq B y_3 x_27_4)))) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4)))) (thm_292 A B x_1 p_2) (thm_303 A B x_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda y. (\lambda y. ((p x) y) y))) ((Data.Bool./\ (Data.Bool.? \lambda y. (\lambda y. ((p x) y) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda y. ((p x) y) y)) (\lambda y. ((p x) y) x'))) ((= y) x'))))))) ((= (Data.Bool.?! \lambda y. ((p x) y))) ((Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ;)

(; dict ;)

def thm_305 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_2 x_1 y_5) y_3) ((y_5 : hol.term B => p_2 x_1 y_5) x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4))))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_2 x_1 y_5) y_3) ((y_5 : hol.term B => p_2 x_1 y_5) x_27_4)) (hol.eq B y_3 x_27_4))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4))))) (thm_222 A B x_1 p_2) (thm_304 A B x_1 p_2).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ;)

(; dict ;)

def thm_306 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda y. (p y))) ((Data.Bool./\ (Data.Bool.? \lambda y. (p y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p y)) (p x'))) ((= y) x'))))))) ((= (Data.Bool.?! \lambda y. (p y))) ((Data.Bool./\ (Data.Bool.? \lambda y. (p y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p y)) (p x'))) ((= y) x'))))))) ;)

(; dict ;)

def thm_307 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.forall A (y_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 y_2) (p_1 x_27_3)) (hol.eq A y_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.forall A (y_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 y_2) (p_1 x_27_3)) (hol.eq A y_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.forall A (y_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 y_2) (p_1 x_27_3)) (hol.eq A y_2 x_27_3)))))).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ((= (Data.Bool.?! \lambda y. (p y))) ((Data.Bool./\ (Data.Bool.? \lambda y. (p y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p y)) (p x'))) ((= y) x'))))))) ;)

(; dict ;)

def thm_308 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.forall A (y_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 y_2) (p_1 x_27_3)) (hol.eq A y_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.forall A (y_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 y_2) (p_1 x_27_3)) (hol.eq A y_2 x_27_3)))))) (thm_306 A p_1) (thm_307 A p_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x')))))) ;)

(; dict ;)

def thm_309 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_7 A p_1.

(; Theorem: |- ((= (Data.Bool.?! \lambda y. (p y))) ((Data.Bool./\ (Data.Bool.? \lambda y. (p y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p y)) (p x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_310 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.forall A (y_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 y_2) (p_1 x_27_3)) (hol.eq A y_2 x_27_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => p_1 y_2)) (hol.forall A (y_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 y_2) (p_1 x_27_3)) (hol.eq A y_2 x_27_3)))))) (thm_308 A p_1) (thm_309 A p_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda y. (p y))) ((Data.Bool./\ (Data.Bool.? \lambda y. (p y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p y)) (p x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_311 : B : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => p_1 y_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => p_1 y_2)) (hol.forall B (y_2 : hol.term B => hol.forall B (x_27_3 : hol.term B => hol.imp (hol.and (p_1 y_2) (p_1 x_27_3)) (hol.eq B y_2 x_27_3)))))) :=
  B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_310 A p_1) B p_1.

(; Theorem: |- ((= (Data.Bool.?! \lambda y. (\lambda y. ((p x) y) y))) ((Data.Bool./\ (Data.Bool.? \lambda y. (\lambda y. ((p x) y) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda y. ((p x) y) y)) (\lambda y. ((p x) y) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_312 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_2 x_1 y_5) y_3) ((y_5 : hol.term B => p_2 x_1 y_5) x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => thm_311 B p_1) B (y_3 : hol.term B => p_2 x_1 y_3).

(; Theorem: |- ((= (Data.Bool.?! \lambda y. ((p x) y))) ((Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_313 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => (y_4 : hol.term B => p_2 x_1 y_4) y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and ((y_5 : hol.term B => p_2 x_1 y_5) y_3) ((y_5 : hol.term B => p_2 x_1 y_5) x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4)))))) (thm_305 A B x_1 p_2) (thm_312 A B x_1 p_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.?! \lambda y. ((p x) y))) \lambda x. ((Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_314 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (x_2 : hol.term A => thm_313 A B x_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ;)

(; dict ;)

def thm_315 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (thm_51 A) (thm_314 B A p_1).

(; Theorem: |- ((= (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)) (Data.Bool.? \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_316 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1.

(; Theorem: |- ((= (Data.Bool./\ (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x))) (Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_317 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) thm_290 (thm_316 B A x_1 p_2).

(; Theorem: |- ((= (\lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) x)) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))) ;)

(; dict ;)

def thm_318 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_2 x_3 y_4) (p_2 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_1) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_2 x_3 y_4) (p_2 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_1.

(; Theorem: |- ((= ((Data.Bool./\ (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)) (\lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) x))) ((Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_319 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1) ((x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_2 x_3 y_4) (p_2 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 x_3 y_4)) x_1)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 x_1 y_3))) ((x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_2 x_3 y_4) (p_2 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_1) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4)))) (thm_317 B A x_1 p_2) (thm_318 B A x_1 p_2).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)) (\lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) x))) \lambda x. ((Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_320 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) ((x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2)) (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) ((x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2)) (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (x_2 : hol.term A => thm_319 B A x_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)) (\lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) x)))) (Data.Bool.! \lambda x. ((Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ;)

(; dict ;)

def thm_321 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) ((x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2))) (hol.forall A (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) ((x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2)) (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (thm_51 A) (thm_320 B A p_1).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)) (\lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) x))))) (= (Data.Bool.! \lambda x. ((Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))))) ;)

(; dict ;)

def thm_322 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) ((x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_2 : hol.term A => hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) ((x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2))) (hol.forall A (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) thm_92 (thm_321 B A p_1).

(; Theorem: |- ((= \lambda x. (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)) \lambda x. (Data.Bool.? \lambda y. ((p x) y))) ;)

(; dict ;)

def thm_323 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (x_2 : hol.term A => thm_316 B A x_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) ;)

(; dict ;)

def thm_324 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2)) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (thm_51 A) (thm_323 B A p_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)))) (Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((p x) y))))) ;)

(; dict ;)

def thm_325 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2))) (hol.and (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2)) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) thm_290 (thm_324 B A p_1).

(; Theorem: |- ((= \lambda x. (\lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) x)) \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))) ;)

(; dict ;)

def thm_326 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2) (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2) (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))) (x_2 : hol.term A => thm_318 B A x_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_327 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2)) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2) (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))) (thm_51 A) (thm_326 B A p_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ;)

(; dict ;)

def thm_328 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2)) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2))) (hol.and (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2))) (hol.and (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)))) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2)) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (thm_325 B A p_1) (thm_327 B A p_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)) (\lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) x))))) ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))))) ;)

(; dict ;)

def thm_329 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) ((x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2))) (hol.and (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2)) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) ((x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))))) (hol.and (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2)) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2))) (hol.and (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (thm_322 B A p_1) (thm_328 B A p_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_330 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_331 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (thm_330 A q_1 p_2) (thm_330 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_332 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_1 x_3) (q_2 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_1 x_3)) (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_8 A p_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (p x)) (q x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_333 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => thm_332 A p_2 q_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x)) (\lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) x)))) ((Data.Bool./\ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.? \lambda y. ((p x) y)) x))) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) x)))) ;)

(; dict ;)

def thm_334 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) ((x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2))) (hol.and (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2)) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.and (p_2 x_3) (q_1 x_3))) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3)) (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (thm_331 A q_1 p_2) (thm_333 A q_1 p_2)) A q_1 p_2) A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ;)

(; dict ;)

def thm_335 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.and ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2) ((x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2))) (hol.and (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_1 x_3 y_4)) x_2)) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_1 x_3 y_4) (p_1 x_3 x_27_5)) (hol.eq B y_4 x_27_5)))) x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))))) (thm_329 B A p_1) (thm_334 B A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) ;)

(; dict ;)

def thm_336 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_141 B A r_1) B A p_1.

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((p x) y))))) (Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))))) ;)

(; dict ;)

def thm_337 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) thm_290 (thm_336 B A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_338 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((p x) y)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ;)

(; dict ;)

def thm_339 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (thm_337 B A p_1) (thm_338 B A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool./\ (Data.Bool.? \lambda y. ((p x) y))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ;)

(; dict ;)

def thm_340 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.forall A (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (thm_335 B A p_1) (thm_339 B A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ;)

(; dict ;)

def thm_341 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (hol.forall A (x_2 : hol.term A => hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (thm_315 B A p_1) (thm_340 B A p_1).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y))))) (= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))))) ;)

(; dict ;)

def thm_342 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) thm_92 (thm_341 B A p_1).

(; Theorem: |- ((= Data.Bool.?!) Data.Bool.?!) ;)

(; dict ;)

def thm_343 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)).

(; Theorem: |- ((= (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) (Data.Bool.! \lambda x. ((p x) (f x)))) ;)

(; dict ;)

def thm_344 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4))) f_1) (hol.forall A (x_3 : hol.term A => p_2 x_3 (f_1 x_3)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV (hol.arr A B) hol.bool (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4))) f_1.

(; Theorem: |- ((= \lambda f. (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))) ;)

(; dict ;)

def thm_345 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM (hol.arr A B) hol.bool (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))) (f_2 : hol.term (hol.arr A B) => thm_344 B A f_2 p_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda f. (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f))) (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) ;)

(; dict ;)

def thm_346 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))) (thm_343 B A) (thm_345 B A p_1).

(; Theorem: |- ((= (= (Data.Bool.?! \lambda f. (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)))) (= (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))))) ;)

(; dict ;)

def thm_347 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2)) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) thm_92 (thm_346 B A p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) ;)

(; dict ;)

def thm_348 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))) (thm_177 B A) (thm_345 B A p_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)))) (Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))))) ;)

(; dict ;)

def thm_349 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) thm_290 (thm_348 B A p_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_350 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)).

(; Theorem: |- ((= (Data.Bool./\ (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f))) (Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x))))) ;)

(; dict ;)

def thm_351 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4))) f_1)) (hol.and (hol.forall A (x_3 : hol.term A => p_2 x_3 (f_1 x_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4))) f_1) (hol.forall A (x_3 : hol.term A => p_2 x_3 (f_1 x_3))) thm_290 (thm_344 B A f_1 p_2).

(; Theorem: |- ((= (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) x')) (Data.Bool.! \lambda x. ((p x) (x' x)))) ;)

(; dict ;)

def thm_352 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4))) x_27_1) (hol.forall A (x_3 : hol.term A => p_2 x_3 (x_27_1 x_3)))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV (hol.arr A B) hol.bool (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4))) x_27_1.

(; Theorem: |- ((= ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) x'))) ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ;)

(; dict ;)

def thm_353 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5))) x_27_1)) (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4))))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5))) f_2)) (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4)))) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5))) x_27_1) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4))) (thm_351 B A f_2 p_3) (thm_352 B A x_27_1 p_3).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) x')))) (Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x)))))) ;)

(; dict ;)

def thm_354 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5))) x_27_1))) (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5))) x_27_1)) (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) thm_293 (thm_353 B A x_27_1 f_2 p_3).

(; Theorem: |- ((= ((= f) x')) ((= f) x')) ;)

(; dict ;)

def thm_355 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 x_27_1) (hol.eq (hol.arr A B) f_2 x_27_1)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq (hol.arr A B) f_2 x_27_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) x'))) ((= f) x'))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))) ;)

(; dict ;)

def thm_356 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5))) x_27_1)) (hol.eq (hol.arr A B) f_2 x_27_1)) (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_1))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5))) x_27_1))) (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4))))) (hol.eq (hol.arr A B) f_2 x_27_1) (hol.eq (hol.arr A B) f_2 x_27_1) (thm_354 B A x_27_1 f_2 p_3) (thm_355 B A x_27_1 f_2).

(; Theorem: |- ((= \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) x'))) ((= f) x'))) \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))) ;)

(; dict ;)

def thm_357 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_2 x_5 (f_4 x_5))) f_1) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_2 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_1 x_27_3)) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM (hol.arr A B) hol.bool (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_2 x_5 (f_4 x_5))) f_1) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_2 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_1 x_27_3)) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3)) (x_27_3 : hol.term (hol.arr A B) => thm_356 B A x_27_3 f_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) x'))) ((= f) x')))) (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))) ;)

(; dict ;)

def thm_358 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_2 x_5 (f_4 x_5))) f_1) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_2 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_1 x_27_3))) (hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_2 x_5 (f_4 x_5))) f_1) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_2 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_1 x_27_3)) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3)) (thm_350 B A) (thm_357 B A f_1 p_2).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) x'))) ((= f) x')))) \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))) ;)

(; dict ;)

def thm_359 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_2 x_27_3))) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.ABS_THM (hol.arr A B) hol.bool (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_2 x_27_3))) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))) (f_2 : hol.term (hol.arr A B) => thm_358 B A f_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) x'))) ((= f) x'))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))) ;)

(; dict ;)

def thm_360 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_2 x_27_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_2 x_27_3))) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))) (thm_350 B A) (thm_359 B A p_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) x'))) ((= f) x')))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))))) ;)

(; dict ;)

def thm_361 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2)) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_2 x_27_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_2 x_27_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (thm_349 B A p_1) (thm_360 B A p_1).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda f. (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f))) ((Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) x'))) ((= f) x'))))))) ((= (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))))) ;)

(; dict ;)

def thm_362 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2)) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2)) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_2 x_27_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (thm_347 B A p_1) (thm_361 B A p_1).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda f. (p f))) ((Data.Bool./\ (Data.Bool.? \lambda f. (p f))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p f)) (p x'))) ((= f) x'))))))) ((= (Data.Bool.?! \lambda f. (p f))) ((Data.Bool./\ (Data.Bool.? \lambda f. (p f))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p f)) (p x'))) ((= f) x'))))))) ;)

(; dict ;)

def thm_363 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.forall A (f_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 f_2) (p_1 x_27_3)) (hol.eq A f_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.forall A (f_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 f_2) (p_1 x_27_3)) (hol.eq A f_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.forall A (f_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 f_2) (p_1 x_27_3)) (hol.eq A f_2 x_27_3)))))).

(; Theorem: |- ((= ((= (Data.Bool.?! \lambda x. (p x))) ((Data.Bool./\ (Data.Bool.? \lambda x. (p x))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p x'))) ((= x) x'))))))) ((= (Data.Bool.?! \lambda f. (p f))) ((Data.Bool./\ (Data.Bool.? \lambda f. (p f))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p f)) (p x'))) ((= f) x'))))))) ;)

(; dict ;)

def thm_364 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.forall A (f_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 f_2) (p_1 x_27_3)) (hol.eq A f_2 x_27_3))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.forall A (f_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 f_2) (p_1 x_27_3)) (hol.eq A f_2 x_27_3)))))) (thm_306 A p_1) (thm_363 A p_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda f. (p f))) ((Data.Bool./\ (Data.Bool.? \lambda f. (p f))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p f)) (p x'))) ((= f) x')))))) ;)

(; dict ;)

def thm_365 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.forall A (f_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 f_2) (p_1 x_27_3)) (hol.eq A f_2 x_27_3)))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (hol.forall A (x_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 x_2) (p_1 x_27_3)) (hol.eq A x_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (f_2 : hol.term A => p_1 f_2)) (hol.forall A (f_2 : hol.term A => hol.forall A (x_27_3 : hol.term A => hol.imp (hol.and (p_1 f_2) (p_1 x_27_3)) (hol.eq A f_2 x_27_3)))))) (thm_364 A p_1) (thm_309 A p_1).

(; Theorem: |- ((= (Data.Bool.?! \lambda f. (p f))) ((Data.Bool./\ (Data.Bool.? \lambda f. (p f))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p f)) (p x'))) ((= f) x')))))) ;)

(; dict ;)

def thm_366 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr (hol.arr A B) hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => p_1 f_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => p_1 f_2)) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (p_1 f_2) (p_1 x_27_3)) (hol.eq (hol.arr A B) f_2 x_27_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (hol.arr A B) hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_365 A p_1) (hol.arr A B) p_1.

(; Theorem: |- ((= (Data.Bool.?! \lambda f. (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f))) ((Data.Bool./\ (Data.Bool.? \lambda f. (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) x'))) ((= f) x')))))) ;)

(; dict ;)

def thm_367 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2)) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_2 x_27_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (hol.arr A B) hol.bool) => thm_366 B A p_1) B A (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))).

(; Theorem: |- ((= (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))))) ;)

(; dict ;)

def thm_368 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2)) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) f_2)) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) f_2) ((f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) x_27_3)) (hol.eq (hol.arr A B) f_2 x_27_3)))))) (hol.eq hol.bool (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))))) (thm_362 B A p_1) (thm_367 B A p_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))))) ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))))) ;)

(; dict ;)

def thm_369 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3)))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (thm_342 B A p_1) (thm_368 B A p_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))))) ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))))) ;)

(; dict ;)

def thm_370 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))))) (thm_369 B A p_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))) ;)

(; dict ;)

def thm_371 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) => hyp_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_372 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_373 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_374 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_372 q_1 p_2) (thm_373 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_375 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_376 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_377 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_375 p_1) (thm_376 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_378 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_379 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_9 (thm_378 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_380 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_377 p_1) (thm_379 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_381 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_382 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_380 p_2) (thm_381 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_383 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_374 q_1 p_2) (thm_382 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_384 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_385 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_383 q_1 p_2) (thm_384 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_386 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_385 q_1 p_2 hyp_1 p_2.

(; Theorem: |- q ;)

(; dict ;)

def thm_387 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_388 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_30 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_387 q_1 hyp_2).

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_389 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_388 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_390 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_389 p_2 q_1 hyp_1 hyp_2) (thm_387 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_391 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_390 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_392 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_391 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_393 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_386 q_1 p_2 hyp_1 (thm_392 q_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))) ;)

(; dict ;)

def thm_394 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_393 q_1 p_2 hyp_1) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))) ;)

(; dict ;)

def thm_395 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) => hol.PROVE_HYP (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (thm_371 B A p_1 hyp_1) (hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) => thm_394 B A p_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_396 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_385 q_1 p_2 hyp_1 q_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_397 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_388 q_2 p_1 hyp_1 hyp_2) (thm_30 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_398 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_397 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_399 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_398 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_400 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_396 q_2 p_1 hyp_1 (thm_399 q_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))) ;)

(; dict ;)

def thm_401 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) -> hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_400 p_1 q_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))) ;)

(; dict ;)

def thm_402 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) -> hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) => hol.PROVE_HYP (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (thm_371 B A p_1 hyp_1) (hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) => thm_401 B A p_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))) ;)

(; dict ;)

def thm_403 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))) ;)

(; dict ;)

def thm_404 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) -> hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) => hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) Data.Bool.T)) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) Data.Bool.T)) ;)

(; dict ;)

def thm_405 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) Data.Bool.T)) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) Data.Bool.T)) ;)

(; dict ;)

def thm_406 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true) (thm_405 B A p_1) (thm_405 B A p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) Data.Bool.T)) ;)

(; dict ;)

def thm_407 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (t_1 : hol.term hol.bool => thm_119 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) Data.Bool.T) ;)

(; dict ;)

def thm_408 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true) (thm_407 B A p_1) (thm_403 B A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_409 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (hol.and hol.true)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true thm_290 ((B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hol.true) (thm_406 B A p_1) (thm_408 B A p_1 hyp_1)) B A p_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ;)

(; dict ;)

def thm_410 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and hol.true (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.APP_THM hol.bool hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (hol.and hol.true) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (thm_409 B A p_1 hyp_1) (thm_338 B A p_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_411 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_412 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_411 t_1) (thm_411 t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_413 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_414 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_415 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_414 thm_414.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_416 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_413 thm_415.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_417 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_10 t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_418 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_383 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_419 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_420 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_419 x_2 q_3 p_1 hyp_2 (thm_30 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_421 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_420 p_2 x_3 q_1 hyp_1 hyp_3 (thm_387 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_422 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_421 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_423 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_422 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_424 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_418 q_1 p_2) (thm_423 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_425 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_400 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_424 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_426 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_425 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_427 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_411 t_1) (thm_417 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_426 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_428 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_429 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_428 t_1) (thm_428 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_430 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_11 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_431 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_425 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_432 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_429 t_1) (thm_430 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_431 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_433 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_434 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_433 t_1) (thm_433 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_435 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_12 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_436 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_425 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_437 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_434 t_1) (thm_435 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_436 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_438 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_439 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_438 t_1) (thm_438 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_440 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_13 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_441 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_425 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_442 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_439 t_1) (thm_440 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_441 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_443 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_444 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_443 t_1) (thm_443 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_445 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_14 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_446 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_442 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_444 t_1) (thm_445 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_447 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_437 t_1) (thm_446 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_448 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_432 t_1) (thm_447 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_449 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_427 t_1) (thm_448 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_450 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_449 t_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_451 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_393 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_452 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_416 thm_450 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_451 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_453 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and hol.true (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_412 t_1) (thm_452 t_1)) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_454 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.TRANS hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and hol.true (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (thm_410 B A p_1 hyp_1) (thm_453 B A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ;)

(; dict ;)

def thm_455 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.SYM hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (thm_454 B A p_1 hyp_1).

(; Theorem: |- ((= \lambda y1. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) x'))) ((= y1) x')))) \lambda y1. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) x'))) ((= y1) x')))) ;)

(; dict ;)

def thm_456 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y1_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y1_3) (p_2 x_1 x_27_4)) (hol.eq B y1_3 x_27_4))) (y1_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y1_3) (p_2 x_1 x_27_4)) (hol.eq B y1_3 x_27_4)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr B hol.bool) (y1_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y1_3) (p_2 x_1 x_27_4)) (hol.eq B y1_3 x_27_4))).

(; Theorem: |- ((= \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) ;)

(; dict ;)

def thm_457 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4))) (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr B hol.bool) (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4))).

(; Theorem: |- ((= \lambda y1. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) x'))) ((= y1) x')))) \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) ;)

(; dict ;)

def thm_458 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y1_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y1_3) (p_2 x_1 x_27_4)) (hol.eq B y1_3 x_27_4))) (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS (hol.arr B hol.bool) (y1_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y1_3) (p_2 x_1 x_27_4)) (hol.eq B y1_3 x_27_4))) (y1_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y1_3) (p_2 x_1 x_27_4)) (hol.eq B y1_3 x_27_4))) (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4))) (thm_456 A B x_1 p_2) (thm_457 A B x_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y1. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) x'))) ((= y1) x'))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))) ;)

(; dict ;)

def thm_459 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall B (y1_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y1_3) (p_2 x_1 x_27_4)) (hol.eq B y1_3 x_27_4)))) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y1_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y1_3) (p_2 x_1 x_27_4)) (hol.eq B y1_3 x_27_4))) (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4))) (thm_223 B) (thm_458 A B x_1 p_2).

(; Theorem: |- ((= \lambda y2. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) y2))) ((= y1) y2))) \lambda y2. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) y2))) ((= y1) y2))) ;)

(; dict ;)

def thm_460 : A : hol.type -> B : hol.type -> y1_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y2_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 y2_4)) (hol.eq B y1_1 y2_4)) (y2_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 y2_4)) (hol.eq B y1_1 y2_4))) :=
  A : hol.type => B : hol.type => y1_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr B hol.bool) (y2_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 y2_4)) (hol.eq B y1_1 y2_4)).

(; Theorem: |- ((= \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) x'))) ((= y1) x'))) \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) x'))) ((= y1) x'))) ;)

(; dict ;)

def thm_461 : A : hol.type -> B : hol.type -> y1_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 x_27_4)) (hol.eq B y1_1 x_27_4)) (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 x_27_4)) (hol.eq B y1_1 x_27_4))) :=
  A : hol.type => B : hol.type => y1_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr B hol.bool) (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 x_27_4)) (hol.eq B y1_1 x_27_4)).

(; Theorem: |- ((= \lambda y2. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) y2))) ((= y1) y2))) \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) x'))) ((= y1) x'))) ;)

(; dict ;)

def thm_462 : A : hol.type -> B : hol.type -> y1_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (y2_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 y2_4)) (hol.eq B y1_1 y2_4)) (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 x_27_4)) (hol.eq B y1_1 x_27_4))) :=
  A : hol.type => B : hol.type => y1_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS (hol.arr B hol.bool) (y2_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 y2_4)) (hol.eq B y1_1 y2_4)) (y2_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 y2_4)) (hol.eq B y1_1 y2_4)) (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 x_27_4)) (hol.eq B y1_1 x_27_4)) (thm_460 A B y1_1 x_2 p_3) (thm_461 A B y1_1 x_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y2. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) y2))) ((= y1) y2)))) (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) x'))) ((= y1) x')))) ;)

(; dict ;)

def thm_463 : A : hol.type -> B : hol.type -> y1_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall B (y2_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 y2_4)) (hol.eq B y1_1 y2_4))) (hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 x_27_4)) (hol.eq B y1_1 x_27_4)))) :=
  A : hol.type => B : hol.type => y1_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y2_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 y2_4)) (hol.eq B y1_1 y2_4)) (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 x_27_4)) (hol.eq B y1_1 x_27_4)) (thm_223 B) (thm_462 A B y1_1 x_2 p_3).

(; Theorem: |- ((Data.Bool./\ ((p x) y1)) ((p x) y2)) ;)

(; dict ;)

def thm_464 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> y1_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (p_4 x_3 y1_2) (p_4 x_3 y2_1)) -> hol.proof (hol.and (p_4 x_3 y1_2) (p_4 x_3 y2_1)) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => y1_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (p_4 x_3 y1_2) (p_4 x_3 y2_1)) => hyp_1.

(; Theorem: |- ((p x) y1) ;)

(; dict ;)

def thm_465 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> y1_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (p_4 x_3 y1_2) (p_4 x_3 y2_1)) -> hol.proof (p_4 x_3 y1_2) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => y1_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (p_4 x_3 y1_2) (p_4 x_3 y2_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_393 q_1 p_2 hyp_1) (p_4 x_3 y2_1) (p_4 x_3 y1_2) hyp_1.

(; Theorem: |- ((p x) y1) ;)

(; dict ;)

def thm_466 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> y1_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (p_4 x_3 y1_2) (p_4 x_3 y2_1)) -> hol.proof (p_4 x_3 y1_2) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => y1_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (p_4 x_3 y1_2) (p_4 x_3 y2_1)) => hol.PROVE_HYP (hol.and (p_4 x_3 y1_2) (p_4 x_3 y2_1)) (p_4 x_3 y1_2) (thm_464 B A y2_1 y1_2 x_3 p_4 hyp_1) (hyp_2 : hol.proof (hol.and (p_4 x_3 y1_2) (p_4 x_3 y2_1)) => thm_465 B A y2_1 y1_2 x_3 p_4 hyp_2).

(; Theorem: |- ((p x) y2) ;)

(; dict ;)

def thm_467 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> y2_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (p_4 x_3 y1_1) (p_4 x_3 y2_2)) -> hol.proof (p_4 x_3 y2_2) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => y2_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (p_4 x_3 y1_1) (p_4 x_3 y2_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_400 p_1 q_2 hyp_1) (p_4 x_3 y1_1) (p_4 x_3 y2_2) hyp_1.

(; Theorem: |- ((p x) y2) ;)

(; dict ;)

def thm_468 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> y2_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (p_4 x_3 y1_1) (p_4 x_3 y2_2)) -> hol.proof (p_4 x_3 y2_2) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => y2_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (p_4 x_3 y1_1) (p_4 x_3 y2_2)) => hol.PROVE_HYP (hol.and (p_4 x_3 y1_1) (p_4 x_3 y2_2)) (p_4 x_3 y2_2) (thm_464 B A y2_2 y1_1 x_3 p_4 hyp_1) (hyp_2 : hol.proof (hol.and (p_4 x_3 y1_1) (p_4 x_3 y2_2)) => thm_467 B A y1_1 y2_2 x_3 p_4 hyp_2).

(; Theorem: |- ((p x) y1) ;)

(; dict ;)

def thm_469 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_3 x_2 y1_1) -> hol.proof (p_3 x_2 y1_1) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y1_1) => hyp_1.

(; Theorem: |- ((p x) y2) ;)

(; dict ;)

def thm_470 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_3 x_2 y2_1) -> hol.proof (p_3 x_2 y2_1) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y2_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) x)) ((= y1) y2)))) ((Data.Bool.==> (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) ((= y1) y2))) ;)

(; dict ;)

def thm_471 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> y1_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.forall (hol.arr A B) (x_4 : hol.term (hol.arr A B) => hol.imp ((f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_3 x_6 (f_5 x_6))) x_4) (hol.eq B y1_2 y2_1))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5)))) (hol.eq B y1_2 y2_1))) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => y1_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_48 A Q_1 P_2) (hol.arr A B) (hol.eq B y1_2 y2_1) (f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5))).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))) ;)

(; dict ;)

def thm_472 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_1)) (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_1))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))) ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))) ;)

(; dict ;)

def thm_473 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_1)) (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_1))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_1)) (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_1)) (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_1)) (thm_472 B A x_27_1 f_2 p_3) (thm_472 B A x_27_1 f_2 p_3).

(; Theorem: |- (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))) ;)

(; dict ;)

def thm_474 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_3 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_4 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_5 : hol.term A => p_2 x_5 (f_3 x_5))) (hol.forall A (x_5 : hol.term A => p_2 x_5 (x_27_4 x_5)))) (hol.eq (hol.arr A B) f_3 x_27_4)))) -> hol.proof (hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_3 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_4 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_5 : hol.term A => p_2 x_5 (f_3 x_5))) (hol.forall A (x_5 : hol.term A => p_2 x_5 (x_27_4 x_5)))) (hol.eq (hol.arr A B) f_3 x_27_4)))) => thm_404 B A p_2 hyp_1 f_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')) ;)

(; dict ;)

def thm_475 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_4 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_5 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_6 : hol.term A => p_3 x_6 (f_4 x_6))) (hol.forall A (x_6 : hol.term A => p_3 x_6 (x_27_5 x_6)))) (hol.eq (hol.arr A B) f_4 x_27_5)))) -> hol.proof (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_1)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_4 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_5 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_6 : hol.term A => p_3 x_6 (f_4 x_6))) (hol.forall A (x_6 : hol.term A => p_3 x_6 (x_27_5 x_6)))) (hol.eq (hol.arr A B) f_4 x_27_5)))) => thm_474 B A f_2 p_3 hyp_1 x_27_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x_1. ((p x_1) (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x_1)))) (Data.Bool.! \lambda x_1. ((p x_1) (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x_1))))) ((= \lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z))) \lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)))) ;)

(; dict ;)

def thm_476 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_6 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_7 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_8 : hol.term A => p_5 x__1_8 (f__1_6 x__1_8))) (hol.forall A (x__1_8 : hol.term A => p_5 x__1_8 (x_27_7 x__1_8)))) (hol.eq (hol.arr A B) f__1_6 x_27_7)))) -> hol.proof (hol.imp (hol.and (hol.forall A (x__1_6 : hol.term A => p_5 x__1_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y1_3 (f_2 z_7)) x__1_6))) (hol.forall A (x__1_6 : hol.term A => p_5 x__1_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y2_1 (f_2 z_7)) x__1_6)))) (hol.eq (hol.arr A B) (z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_4) y1_3 (f_2 z_6)) (z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_4) y2_1 (f_2 z_6)))) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => x_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_6 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_7 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_8 : hol.term A => p_5 x__1_8 (f__1_6 x__1_8))) (hol.forall A (x__1_8 : hol.term A => p_5 x__1_8 (x_27_7 x__1_8)))) (hol.eq (hol.arr A B) f__1_6 x_27_7)))) => (B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_4 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_5 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_6 : hol.term A => p_3 x_6 (f_4 x_6))) (hol.forall A (x_6 : hol.term A => p_3 x_6 (x_27_5 x_6)))) (hol.eq (hol.arr A B) f_4 x_27_5)))) => (B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_4 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_5 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_6 : hol.term A => p_3 x_6 (f_4 x_6))) (hol.forall A (x_6 : hol.term A => p_3 x_6 (x_27_5 x_6)))) (hol.eq (hol.arr A B) f_4 x_27_5)))) => hol.EQ_MP (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_1)) (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_1)) (thm_473 B A x_27_1 f_2 p_3) (thm_475 B A x_27_1 f_2 p_3 hyp_1)) B A x_27_1 f_2 p_3 hyp_1) B A (z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_4) y2_1 (f_2 z_6)) (z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_4) y1_3 (f_2 z_6)) p_5 hyp_1.

(; Theorem: |- ((= \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x'))) \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x'))) ;)

(; dict ;)

def thm_477 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_5)) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_5))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr A hol.bool) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_5)).

(; Theorem: |- ((= \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x'))) \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x'))) ;)

(; dict ;)

def thm_478 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_5)) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_5))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS (hol.arr A hol.bool) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_5)) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_5)) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_5)) (thm_477 B A f_1 y1_2 x_3 p_4) (thm_477 B A f_1 y1_2 x_3 p_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x')))) (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x')))) ;)

(; dict ;)

def thm_479 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_5))) (hol.forall A (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_5)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_5)) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_5)) (thm_51 A) (thm_478 B A f_1 y1_2 x_3 p_4).

(; Theorem: |- ((= (p x')) (p x')) ;)

(; dict ;)

def thm_480 : A : hol.type -> B : hol.type -> x_27_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr B hol.bool) (p_2 x_27_1) (p_2 x_27_1)) :=
  A : hol.type => B : hol.type => x_27_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr B hol.bool) (p_2 x_27_1).

(; Theorem: |- ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x')) (((Data.Bool.cond ((= x') x)) y1) (f x'))) ;)

(; dict ;)

def thm_481 : A : hol.type -> B : hol.type -> x_27_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_27_1) (hol.cond B (hol.eq A x_27_1 x_4) y1_3 (f_2 x_27_1))) :=
  A : hol.type => B : hol.type => x_27_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => x_4 : hol.term A => hol.BETA_CONV A B (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_27_1.

(; Theorem: |- ((= ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x'))) ((p x') (((Data.Bool.cond ((= x') x)) y1) (f x')))) ;)

(; dict ;)

def thm_482 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_5 x_27_4 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_4)) (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM B hol.bool (p_5 x_27_4) (p_5 x_27_4) ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_4) (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4)) (thm_480 A B x_27_4 p_5) (thm_481 A B x_27_4 f_1 y1_2 x_3).

(; Theorem: |- ((= ((p x') (((Data.Bool.cond ((= x') x)) y1) (f x')))) ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x'))) ;)

(; dict ;)

def thm_483 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) (p_5 x_27_4 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_4))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool (p_5 x_27_4 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_4)) (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) (thm_482 B A f_1 y1_2 x_3 x_27_4 p_5).

(; Theorem: |- ((= (\lambda _488. ((p x') _488) (((Data.Bool.cond ((= x') x)) y1) (f x')))) ((p x') (((Data.Bool.cond ((= x') x)) y1) (f x')))) ;)

(; dict ;)

def thm_484 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((__488_6 : hol.term B => p_5 x_27_4 __488_6) (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (__488_6 : hol.term B => p_5 x_27_4 __488_6) (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4)).

(; Theorem: |- ((= (= (\lambda _488. ((p x') _488) (((Data.Bool.cond ((= x') x)) y1) (f x'))))) (= ((p x') (((Data.Bool.cond ((= x') x)) y1) (f x'))))) ;)

(; dict ;)

def thm_485 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__488_6 : hol.term B => p_5 x_27_4 __488_6) (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4)))) (hol.eq hol.bool (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__488_6 : hol.term B => p_5 x_27_4 __488_6) (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) thm_92 (thm_484 A B f_1 y1_2 x_3 x_27_4 p_5).

(; Theorem: |- ((= (Data.Bool.==> ((= x') x))) (Data.Bool.==> ((= x') x))) ;)

(; dict ;)

def thm_486 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq A x_27_2 x_1)) (hol.imp (hol.eq A x_27_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.imp (hol.eq A x_27_2 x_1)).

(; Theorem: |- ((= (\lambda _488. ((p x') _488) y1)) ((p x') y1)) ;)

(; dict ;)

def thm_487 : A : hol.type -> B : hol.type -> y1_1 : hol.term B -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((__488_4 : hol.term B => p_3 x_27_2 __488_4) y1_1) (p_3 x_27_2 y1_1)) :=
  A : hol.type => B : hol.type => y1_1 : hol.term B => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (__488_4 : hol.term B => p_3 x_27_2 __488_4) y1_1.

(; Theorem: |- ((= ((Data.Bool.==> ((= x') x)) (\lambda _488. ((p x') _488) y1))) ((Data.Bool.==> ((= x') x)) ((p x') y1))) ;)

(; dict ;)

def thm_488 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_3 : hol.term A -> x_27_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A x_27_4 x_3) ((__488_5 : hol.term B => p_2 x_27_4 __488_5) y1_1)) (hol.imp (hol.eq A x_27_4 x_3) (p_2 x_27_4 y1_1))) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_3 : hol.term A => x_27_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq A x_27_4 x_3)) (hol.imp (hol.eq A x_27_4 x_3)) ((__488_5 : hol.term B => p_2 x_27_4 __488_5) y1_1) (p_2 x_27_4 y1_1) (thm_486 A x_3 x_27_4) (thm_487 A B y1_1 x_27_4 p_2).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.==> ((= x') x)) (\lambda _488. ((p x') _488) y1)))) (Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y1)))) ;)

(; dict ;)

def thm_489 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_3 : hol.term A -> x_27_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.imp (hol.eq A x_27_4 x_3) ((__488_5 : hol.term B => p_2 x_27_4 __488_5) y1_1))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) (p_2 x_27_4 y1_1)))) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_3 : hol.term A => x_27_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.imp (hol.eq A x_27_4 x_3) ((__488_5 : hol.term B => p_2 x_27_4 __488_5) y1_1)) (hol.imp (hol.eq A x_27_4 x_3) (p_2 x_27_4 y1_1)) thm_290 (thm_488 B A y1_1 p_2 x_3 x_27_4).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ ((= x') x)))) (Data.Bool.==> (Data.Bool.~ ((= x') x)))) ;)

(; dict ;)

def thm_490 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not (hol.eq A x_27_2 x_1))) (hol.imp (hol.not (hol.eq A x_27_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.imp (hol.not (hol.eq A x_27_2 x_1))).

(; Theorem: |- ((= (\lambda _488. ((p x') _488) (f x'))) ((p x') (f x'))) ;)

(; dict ;)

def thm_491 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((__488_4 : hol.term B => p_3 x_27_2 __488_4) (f_1 x_27_2)) (p_3 x_27_2 (f_1 x_27_2))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (__488_4 : hol.term B => p_3 x_27_2 __488_4) (f_1 x_27_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= x') x))) (\lambda _488. ((p x') _488) (f x')))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x')))) ;)

(; dict ;)

def thm_492 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_3 : hol.term A -> x_27_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq A x_27_4 x_3)) ((__488_5 : hol.term B => p_2 x_27_4 __488_5) (f_1 x_27_4))) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) (p_2 x_27_4 (f_1 x_27_4)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_3 : hol.term A => x_27_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not (hol.eq A x_27_4 x_3))) (hol.imp (hol.not (hol.eq A x_27_4 x_3))) ((__488_5 : hol.term B => p_2 x_27_4 __488_5) (f_1 x_27_4)) (p_2 x_27_4 (f_1 x_27_4)) (thm_490 A x_3 x_27_4) (thm_491 A B f_1 x_27_4 p_2).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) (\lambda _488. ((p x') _488) y1))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) (\lambda _488. ((p x') _488) (f x'))))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y1))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x'))))) ;)

(; dict ;)

def thm_493 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_4 : hol.term A -> x_27_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.imp (hol.eq A x_27_5 x_4) ((__488_6 : hol.term B => p_3 x_27_5 __488_6) y1_2)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) ((__488_6 : hol.term B => p_3 x_27_5 __488_6) (f_1 x_27_5)))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_2)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_4 : hol.term A => x_27_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.imp (hol.eq A x_27_5 x_4) ((__488_6 : hol.term B => p_3 x_27_5 __488_6) y1_2))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_2))) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) ((__488_6 : hol.term B => p_3 x_27_5 __488_6) (f_1 x_27_5))) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5))) (thm_489 B A y1_2 p_3 x_4 x_27_5) (thm_492 B A f_1 p_3 x_4 x_27_5).

(; Theorem: |- ((= ((= (\lambda _488. ((p x') _488) (((Data.Bool.cond ((= x') x)) y1) (f x')))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) (\lambda _488. ((p x') _488) y1))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) (\lambda _488. ((p x') _488) (f x')))))) ((= ((p x') (((Data.Bool.cond ((= x') x)) y1) (f x')))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y1))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x')))))) ;)

(; dict ;)

def thm_494 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__488_6 : hol.term B => p_5 x_27_4 __488_6) (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) ((__488_6 : hol.term B => p_5 x_27_4 __488_6) y1_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) ((__488_6 : hol.term B => p_5 x_27_4 __488_6) (f_1 x_27_4))))) (hol.eq hol.bool (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) (p_5 x_27_4 y1_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) (p_5 x_27_4 (f_1 x_27_4)))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__488_6 : hol.term B => p_5 x_27_4 __488_6) (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4)))) (hol.eq hol.bool (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4)))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) ((__488_6 : hol.term B => p_5 x_27_4 __488_6) y1_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) ((__488_6 : hol.term B => p_5 x_27_4 __488_6) (f_1 x_27_4)))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) (p_5 x_27_4 y1_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) (p_5 x_27_4 (f_1 x_27_4)))) (thm_485 A B f_1 y1_2 x_3 x_27_4 p_5) (thm_493 B A f_1 y1_2 p_5 x_3 x_27_4).

(; Theorem: |- (Data.Bool.! \lambda c. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))))) ;)

(; dict ;)

def thm_495 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (c_2 : hol.term hol.bool => hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_1 (hol.cond A c_2 x_3 y_4)) (hol.and (hol.imp c_2 (p_1 x_3)) (hol.imp (hol.not c_2) (p_1 y_4))))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_15 A p_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))))) ;)

(; dict ;)

def thm_496 : A : hol.type -> c_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_2 (hol.cond A c_1 x_3 y_4)) (hol.and (hol.imp c_1 (p_2 x_3)) (hol.imp (hol.not c_1) (p_2 y_4)))))) :=
  A : hol.type => c_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_495 A p_2 c_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y))))) ;)

(; dict ;)

def thm_497 : A : hol.type -> x_1 : hol.term A -> c_2 : hol.term hol.bool -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 (hol.cond A c_2 x_1 y_4)) (hol.and (hol.imp c_2 (p_3 x_1)) (hol.imp (hol.not c_2) (p_3 y_4))))) :=
  A : hol.type => x_1 : hol.term A => c_2 : hol.term hol.bool => p_3 : hol.term (hol.arr A hol.bool) => thm_496 A c_2 p_3 x_1.

(; Theorem: |- ((= (p (((Data.Bool.cond c) x) y))) ((Data.Bool./\ ((Data.Bool.==> c) (p x))) ((Data.Bool.==> (Data.Bool.~ c)) (p y)))) ;)

(; dict ;)

def thm_498 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> c_3 : hol.term hol.bool -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_4 (hol.cond A c_3 x_2 y_1)) (hol.and (hol.imp c_3 (p_4 x_2)) (hol.imp (hol.not c_3) (p_4 y_1)))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => p_4 : hol.term (hol.arr A hol.bool) => thm_497 A x_2 c_3 p_4 y_1.

(; Theorem: |- ((= (_484 (((Data.Bool.cond _483) _482) _485))) ((Data.Bool./\ ((Data.Bool.==> _483) (_484 _482))) ((Data.Bool.==> (Data.Bool.~ _483)) (_484 _485)))) ;)

(; dict ;)

def thm_499 : A : hol.type -> __485_1 : hol.term A -> __482_2 : hol.term A -> __483_3 : hol.term hol.bool -> __484_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (__484_4 (hol.cond A __483_3 __482_2 __485_1)) (hol.and (hol.imp __483_3 (__484_4 __482_2)) (hol.imp (hol.not __483_3) (__484_4 __485_1)))) :=
  A : hol.type => __485_1 : hol.term A => __482_2 : hol.term A => __483_3 : hol.term hol.bool => __484_4 : hol.term (hol.arr A hol.bool) => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => c_3 : hol.term hol.bool => p_4 : hol.term (hol.arr A hol.bool) => thm_498 A y_1 x_2 c_3 p_4) A __485_1 __482_2 __483_3 __484_4.

(; Theorem: |- ((= (_484 (((Data.Bool.cond _483) _482) _485))) ((Data.Bool./\ ((Data.Bool.==> _483) (_484 _482))) ((Data.Bool.==> (Data.Bool.~ _483)) (_484 _485)))) ;)

(; dict ;)

def thm_500 : B : hol.type -> __485_1 : hol.term B -> __482_2 : hol.term B -> __483_3 : hol.term hol.bool -> __484_4 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (__484_4 (hol.cond B __483_3 __482_2 __485_1)) (hol.and (hol.imp __483_3 (__484_4 __482_2)) (hol.imp (hol.not __483_3) (__484_4 __485_1)))) :=
  B : hol.type => __485_1 : hol.term B => __482_2 : hol.term B => __483_3 : hol.term hol.bool => __484_4 : hol.term (hol.arr B hol.bool) => (A : hol.type => __485_1 : hol.term A => __482_2 : hol.term A => __483_3 : hol.term hol.bool => __484_4 : hol.term (hol.arr A hol.bool) => thm_499 A __485_1 __482_2 __483_3 __484_4) B __485_1 __482_2 __483_3 __484_4.

(; Theorem: |- ((= (\lambda _488. ((p x') _488) (((Data.Bool.cond _483) _482) _485))) ((Data.Bool./\ ((Data.Bool.==> _483) (\lambda _488. ((p x') _488) _482))) ((Data.Bool.==> (Data.Bool.~ _483)) (\lambda _488. ((p x') _488) _485)))) ;)

(; dict ;)

def thm_501 : A : hol.type -> B : hol.type -> __485_1 : hol.term B -> __482_2 : hol.term B -> __483_3 : hol.term hol.bool -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((__488_6 : hol.term B => p_5 x_27_4 __488_6) (hol.cond B __483_3 __482_2 __485_1)) (hol.and (hol.imp __483_3 ((__488_6 : hol.term B => p_5 x_27_4 __488_6) __482_2)) (hol.imp (hol.not __483_3) ((__488_6 : hol.term B => p_5 x_27_4 __488_6) __485_1)))) :=
  A : hol.type => B : hol.type => __485_1 : hol.term B => __482_2 : hol.term B => __483_3 : hol.term hol.bool => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => __485_1 : hol.term B => __482_2 : hol.term B => __483_3 : hol.term hol.bool => __484_4 : hol.term (hol.arr B hol.bool) => thm_500 B __485_1 __482_2 __483_3 __484_4) B __485_1 __482_2 __483_3 (__488_6 : hol.term B => p_5 x_27_4 __488_6).

(; Theorem: |- ((= (\lambda _488. ((p x') _488) (((Data.Bool.cond ((= x') x)) y1) (f x')))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) (\lambda _488. ((p x') _488) y1))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) (\lambda _488. ((p x') _488) (f x'))))) ;)

(; dict ;)

def thm_502 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((__488_6 : hol.term B => p_5 x_27_4 __488_6) (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) ((__488_6 : hol.term B => p_5 x_27_4 __488_6) y1_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) ((__488_6 : hol.term B => p_5 x_27_4 __488_6) (f_1 x_27_4))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => B : hol.type => __485_1 : hol.term B => __482_2 : hol.term B => __483_3 : hol.term hol.bool => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_501 A B __485_1 __482_2 __483_3 x_27_4 p_5) A B (f_1 x_27_4) y1_2 (hol.eq A x_27_4 x_3) x_27_4 p_5.

(; Theorem: |- ((= ((p x') (((Data.Bool.cond ((= x') x)) y1) (f x')))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y1))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x'))))) ;)

(; dict ;)

def thm_503 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) (p_5 x_27_4 y1_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) (p_5 x_27_4 (f_1 x_27_4))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool ((__488_6 : hol.term B => p_5 x_27_4 __488_6) (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) ((__488_6 : hol.term B => p_5 x_27_4 __488_6) y1_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) ((__488_6 : hol.term B => p_5 x_27_4 __488_6) (f_1 x_27_4))))) (hol.eq hol.bool (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) (p_5 x_27_4 y1_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) (p_5 x_27_4 (f_1 x_27_4))))) (thm_494 A B f_1 y1_2 x_3 x_27_4 p_5) (thm_502 A B f_1 y1_2 x_3 x_27_4 p_5).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y1))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x'))))) ((p x') (((Data.Bool.cond ((= x') x)) y1) (f x')))) ;)

(; dict ;)

def thm_504 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_4 : hol.term A -> x_27_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_2)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5)))) (p_3 x_27_5 (hol.cond B (hol.eq A x_27_5 x_4) y1_2 (f_1 x_27_5)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_4 : hol.term A => x_27_5 : hol.term A => hol.SYM hol.bool (p_3 x_27_5 (hol.cond B (hol.eq A x_27_5 x_4) y1_2 (f_1 x_27_5))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_2)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5)))) (thm_503 B A f_1 y1_2 x_4 x_27_5 p_3).

(; Theorem: |- ((= x') x) ;)

(; dict ;)

def thm_505 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_27_2 x_1) -> hol.proof (hol.eq A x_27_2 x_1) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_27_2 x_1) => hyp_1.

(; Theorem: |- ((= ((p x') y1)) ((p x') y1)) ;)

(; dict ;)

def thm_506 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 x_27_2 y1_1) (p_3 x_27_2 y1_1)) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (p_3 x_27_2 y1_1).

(; Theorem: |- ((= ((p x') y1)) ((p x') y1)) ;)

(; dict ;)

def thm_507 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 x_27_2 y1_1) (p_3 x_27_2 y1_1)) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool (p_3 x_27_2 y1_1) (p_3 x_27_2 y1_1) (thm_506 B A y1_1 x_27_2 p_3).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_508 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A (hol.arr B hol.bool)) p_1 p_1) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr A (hol.arr B hol.bool)) p_1.

(; Theorem: |- ((= (p x')) (p x)) ;)

(; dict ;)

def thm_509 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.eq A x_27_2 x_1) -> hol.proof (hol.eq (hol.arr B hol.bool) (p_3 x_27_2) (p_3 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.eq A x_27_2 x_1) => hol.APP_THM A (hol.arr B hol.bool) p_3 p_3 x_27_2 x_1 (thm_508 B A p_3) (thm_505 A x_1 x_27_2 hyp_1).

(; Theorem: |- ((= y1) y1) ;)

(; dict ;)

def thm_510 : B : hol.type -> y1_1 : hol.term B -> hol.proof (hol.eq B y1_1 y1_1) :=
  B : hol.type => y1_1 : hol.term B => hol.REFL B y1_1.

(; Theorem: |- ((= ((p x') y1)) ((p x) y1)) ;)

(; dict ;)

def thm_511 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y1_2 : hol.term B -> x_27_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.eq A x_27_3 x_1) -> hol.proof (hol.eq hol.bool (p_4 x_27_3 y1_2) (p_4 x_1 y1_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y1_2 : hol.term B => x_27_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.eq A x_27_3 x_1) => hol.APP_THM B hol.bool (p_4 x_27_3) (p_4 x_1) y1_2 y1_2 (thm_509 A B x_1 x_27_3 p_4 hyp_1) (thm_510 B y1_2).

(; Theorem: |- ((= ((= ((p x) y1)) Data.Bool.T)) ((= ((p x) y1)) Data.Bool.T)) ;)

(; dict ;)

def thm_512 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 x_2 y1_1) hol.true) (hol.eq hol.bool (p_3 x_2 y1_1) hol.true)) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (p_3 x_2 y1_1) hol.true).

(; Theorem: |- ((= ((= ((p x) y1)) Data.Bool.T)) ((= ((p x) y1)) Data.Bool.T)) ;)

(; dict ;)

def thm_513 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 x_2 y1_1) hol.true) (hol.eq hol.bool (p_3 x_2 y1_1) hol.true)) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (p_3 x_2 y1_1) hol.true) (hol.eq hol.bool (p_3 x_2 y1_1) hol.true) (hol.eq hol.bool (p_3 x_2 y1_1) hol.true) (thm_512 B A y1_1 x_2 p_3) (thm_512 B A y1_1 x_2 p_3).

(; Theorem: |- ((= ((p x) y1)) ((= ((p x) y1)) Data.Bool.T)) ;)

(; dict ;)

def thm_514 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 x_2 y1_1) (hol.eq hol.bool (p_3 x_2 y1_1) hol.true)) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (t_1 : hol.term hol.bool => thm_119 t_1) (p_3 x_2 y1_1).

(; Theorem: |- ((= ((p x) y1)) Data.Bool.T) ;)

(; dict ;)

def thm_515 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_3 x_2 y1_1) -> hol.proof (hol.eq hol.bool (p_3 x_2 y1_1) hol.true) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y1_1) => hol.EQ_MP (p_3 x_2 y1_1) (hol.eq hol.bool (p_3 x_2 y1_1) hol.true) (thm_514 B A y1_1 x_2 p_3) (thm_469 B A y1_1 x_2 p_3 hyp_1).

(; Theorem: |- ((= ((p x') y1)) Data.Bool.T) ;)

(; dict ;)

def thm_516 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y1_2 : hol.term B -> x_27_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_4 x_1 y1_2) -> hyp_2 : hol.proof (hol.eq A x_27_3 x_1) -> hol.proof (hol.eq hol.bool (p_4 x_27_3 y1_2) hol.true) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y1_2 : hol.term B => x_27_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_4 x_1 y1_2) => hyp_2 : hol.proof (hol.eq A x_27_3 x_1) => hol.TRANS hol.bool (p_4 x_27_3 y1_2) (p_4 x_1 y1_2) hol.true (thm_511 B A x_1 y1_2 x_27_3 p_4 hyp_2) (hol.EQ_MP (hol.eq hol.bool (p_4 x_1 y1_2) hol.true) (hol.eq hol.bool (p_4 x_1 y1_2) hol.true) (thm_513 B A y1_2 x_1 p_4) (thm_515 B A y1_2 x_1 p_4 hyp_1)).

(; Theorem: |- ((= Data.Bool.T) ((p x') y1)) ;)

(; dict ;)

def thm_517 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y1_2 : hol.term B -> x_27_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_4 x_1 y1_2) -> hyp_2 : hol.proof (hol.eq A x_27_3 x_1) -> hol.proof (hol.eq hol.bool hol.true (p_4 x_27_3 y1_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y1_2 : hol.term B => x_27_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_4 x_1 y1_2) => hyp_2 : hol.proof (hol.eq A x_27_3 x_1) => hol.SYM hol.bool (p_4 x_27_3 y1_2) hol.true (thm_516 B A x_1 y1_2 x_27_3 p_4 hyp_1 hyp_2).

(; Theorem: |- ((p x') y1) ;)

(; dict ;)

def thm_518 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y1_2 : hol.term B -> x_27_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_4 x_1 y1_2) -> hyp_2 : hol.proof (hol.eq A x_27_3 x_1) -> hol.proof (p_4 x_27_3 y1_2) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y1_2 : hol.term B => x_27_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_4 x_1 y1_2) => hyp_2 : hol.proof (hol.eq A x_27_3 x_1) => hol.EQ_MP hol.true (p_4 x_27_3 y1_2) (thm_517 B A x_1 y1_2 x_27_3 p_4 hyp_1 hyp_2) thm_2.

(; Theorem: |- ((p x') y1) ;)

(; dict ;)

def thm_519 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y1_2 : hol.term B -> x_27_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_4 x_1 y1_2) -> hyp_2 : hol.proof (hol.eq A x_27_3 x_1) -> hol.proof (p_4 x_27_3 y1_2) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y1_2 : hol.term B => x_27_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_4 x_1 y1_2) => hyp_2 : hol.proof (hol.eq A x_27_3 x_1) => hol.PROVE_HYP (hol.eq A x_27_3 x_1) (p_4 x_27_3 y1_2) (thm_505 A x_1 x_27_3 hyp_2) (hyp_3 : hol.proof (hol.eq A x_27_3 x_1) => hol.EQ_MP (p_4 x_27_3 y1_2) (p_4 x_27_3 y1_2) (thm_507 B A y1_2 x_27_3 p_4) (thm_518 B A x_1 y1_2 x_27_3 p_4 hyp_1 hyp_3)).

(; Theorem: |- ((Data.Bool.==> ((= x') x)) ((p x') y1)) ;)

(; dict ;)

def thm_520 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_3 : hol.term A -> x_27_4 : hol.term A -> hyp_1 : hol.proof (p_2 x_3 y1_1) -> hol.proof (hol.imp (hol.eq A x_27_4 x_3) (p_2 x_27_4 y1_1)) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_3 : hol.term A => x_27_4 : hol.term A => hyp_1 : hol.proof (p_2 x_3 y1_1) => hyp_2 : hol.proof (hol.eq A x_27_4 x_3) => thm_519 B A x_3 y1_1 x_27_4 p_2 hyp_1 hyp_2.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x')))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y1))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x'))))) ;)

(; dict ;)

def thm_521 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_4 : hol.term A -> x_27_5 : hol.term A -> hyp_1 : hol.proof (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_1)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_1)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))))) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_4 : hol.term A => x_27_5 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_425 p_1 q_2 hyp_1) (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_1)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x')))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y1))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x'))))) ;)

(; dict ;)

def thm_522 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_4 : hol.term A -> x_27_5 : hol.term A -> hyp_1 : hol.proof (p_3 x_4 y1_1) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_1)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))))) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_4 : hol.term A => x_27_5 : hol.term A => hyp_1 : hol.proof (p_3 x_4 y1_1) => hol.PROVE_HYP (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_1)) (hol.eq hol.bool (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_1)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))))) (thm_520 B A y1_1 p_3 x_4 x_27_5 hyp_1) (hyp_2 : hol.proof (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_1)) => thm_521 B A y1_1 f_2 p_3 x_4 x_27_5 hyp_2).

(; Theorem: |- ((= ((p x') (f x'))) ((p x') (f x'))) ;)

(; dict ;)

def thm_523 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 x_27_2 (f_1 x_27_2)) (p_3 x_27_2 (f_1 x_27_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (p_3 x_27_2 (f_1 x_27_2)).

(; Theorem: |- ((= ((p x') (f x'))) ((p x') (f x'))) ;)

(; dict ;)

def thm_524 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 x_27_2 (f_1 x_27_2)) (p_3 x_27_2 (f_1 x_27_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool (p_3 x_27_2 (f_1 x_27_2)) (p_3 x_27_2 (f_1 x_27_2)) (thm_523 B A f_1 x_27_2 p_3).

(; Theorem: |- ((= ((= ((p x) (f x))) Data.Bool.T)) ((= ((p x) (f x))) Data.Bool.T)) ;)

(; dict ;)

def thm_525 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) hol.true) (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) hol.true)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) hol.true).

(; Theorem: |- ((= ((= ((p x) (f x))) Data.Bool.T)) ((= ((p x) (f x))) Data.Bool.T)) ;)

(; dict ;)

def thm_526 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) hol.true) (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) hol.true)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) hol.true) (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) hol.true) (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) hol.true) (thm_525 B A f_1 x_2 p_3) (thm_525 B A f_1 x_2 p_3).

(; Theorem: |- ((= ((p x) (f x))) ((= ((p x) (f x))) Data.Bool.T)) ;)

(; dict ;)

def thm_527 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) hol.true)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (t_1 : hol.term hol.bool => thm_119 t_1) (p_3 x_2 (f_1 x_2)).

(; Theorem: |- (Data.Bool.! \lambda x. ((p x) (f x))) ;)

(; dict ;)

def thm_528 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3 (f_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3 (f_1 x_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3 (f_1 x_3))) => hyp_1.

(; Theorem: |- ((p x) (f x)) ;)

(; dict ;)

def thm_529 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) -> hol.proof (p_3 x_2 (f_1 x_2)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) => thm_528 B A f_1 p_3 hyp_1 x_2.

(; Theorem: |- ((= ((p x) (f x))) Data.Bool.T) ;)

(; dict ;)

def thm_530 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) -> hol.proof (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) hol.true) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) => hol.EQ_MP (p_3 x_2 (f_1 x_2)) (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) hol.true) (thm_527 B A f_1 x_2 p_3) (thm_529 B A f_1 x_2 p_3 hyp_1).

(; Theorem: |- ((= ((p x') (f x'))) Data.Bool.T) ;)

(; dict ;)

def thm_531 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) -> hol.proof (hol.eq hol.bool (p_3 x_27_2 (f_1 x_27_2)) hol.true) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) => (B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) => (B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) => hol.EQ_MP (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) hol.true) (hol.eq hol.bool (p_3 x_2 (f_1 x_2)) hol.true) (thm_526 B A f_1 x_2 p_3) (thm_530 B A f_1 x_2 p_3 hyp_1)) B A f_1 x_2 p_3 hyp_1) B A f_1 x_27_2 p_3 hyp_1.

(; Theorem: |- ((= Data.Bool.T) ((p x') (f x'))) ;)

(; dict ;)

def thm_532 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) -> hol.proof (hol.eq hol.bool hol.true (p_3 x_27_2 (f_1 x_27_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) => hol.SYM hol.bool (p_3 x_27_2 (f_1 x_27_2)) hol.true (thm_531 B A f_1 x_27_2 p_3 hyp_1).

(; Theorem: |- ((p x') (f x')) ;)

(; dict ;)

def thm_533 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) -> hol.proof (p_3 x_27_2 (f_1 x_27_2)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) => hol.EQ_MP hol.true (p_3 x_27_2 (f_1 x_27_2)) (thm_532 B A f_1 x_27_2 p_3 hyp_1) thm_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x'))) ;)

(; dict ;)

def thm_534 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_3 : hol.term A -> x_27_4 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_2 x_5 (f_1 x_5))) -> hol.proof (hol.imp (hol.not (hol.eq A x_27_4 x_3)) (p_2 x_27_4 (f_1 x_27_4))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_3 : hol.term A => x_27_4 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_2 x_5 (f_1 x_5))) => hyp_2 : hol.proof (hol.not (hol.eq A x_27_4 x_3)) => hol.EQ_MP (p_2 x_27_4 (f_1 x_27_4)) (p_2 x_27_4 (f_1 x_27_4)) (thm_524 B A f_1 x_27_4 p_2) (thm_533 B A f_1 x_27_4 p_2 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y1))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x')))) ;)

(; dict ;)

def thm_535 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_4 : hol.term A -> x_27_5 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_3 x_6 (f_1 x_6))) -> hyp_2 : hol.proof (p_3 x_4 y1_2) -> hol.proof (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_2)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_4 : hol.term A => x_27_5 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_3 x_6 (f_1 x_6))) => hyp_2 : hol.proof (p_3 x_4 y1_2) => hol.EQ_MP (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y1_2)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5)))) (thm_522 B A y1_2 f_1 p_3 x_4 x_27_5 hyp_2) (thm_534 B A f_1 p_3 x_4 x_27_5 hyp_1).

(; Theorem: |- ((p x') (((Data.Bool.cond ((= x') x)) y1) (f x'))) ;)

(; dict ;)

def thm_536 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_1 x_6))) -> hyp_2 : hol.proof (p_5 x_3 y1_2) -> hol.proof (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_1 x_6))) => hyp_2 : hol.proof (p_5 x_3 y1_2) => hol.EQ_MP (hol.and (hol.imp (hol.eq A x_27_4 x_3) (p_5 x_27_4 y1_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) (p_5 x_27_4 (f_1 x_27_4)))) (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) (thm_504 B A f_1 y1_2 p_5 x_3 x_27_4) (thm_535 B A f_1 y1_2 p_5 x_3 x_27_4 hyp_1 hyp_2).

(; Theorem: |- ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x')) ;)

(; dict ;)

def thm_537 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_1 x_6))) -> hyp_2 : hol.proof (p_5 x_3 y1_2) -> hol.proof (p_5 x_27_4 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_4)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_1 x_6))) => hyp_2 : hol.proof (p_5 x_3 y1_2) => hol.EQ_MP (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y1_2 (f_1 x_27_4))) (p_5 x_27_4 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_4)) (thm_483 B A f_1 y1_2 x_3 x_27_4 p_5) (thm_536 B A f_1 y1_2 x_3 x_27_4 p_5 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x'))) ;)

(; dict ;)

def thm_538 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_1 x_5))) -> hyp_2 : hol.proof (p_4 x_3 y1_2) -> hol.proof (hol.forall A (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y1_2 (f_1 z_6)) x_27_5))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_1 x_5))) => hyp_2 : hol.proof (p_4 x_3 y1_2) => x_27_5 : hol.term A => thm_537 B A f_1 y1_2 x_3 x_27_5 p_4 hyp_1 hyp_2.

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x')))) ((Data.Bool./\ (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x')))) (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x'))))) ;)

(; dict ;)

def thm_539 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> y2_3 : hol.term B -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y1_1 (f_2 z_7)) x_27_6))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y2_3 (f_2 z_7)) x_27_6))) (hol.and (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y1_1 (f_2 z_7)) x_27_6))) (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y2_3 (f_2 z_7)) x_27_6))))) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => f_2 : hol.term (hol.arr A B) => y2_3 : hol.term B => x_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y1_1 (f_2 z_7)) x_27_6))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_425 p_1 q_2 hyp_1) (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y1_1 (f_2 z_7)) x_27_6))) (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y2_3 (f_2 z_7)) x_27_6))) hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x')))) ((Data.Bool./\ (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x')))) (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x'))))) ;)

(; dict ;)

def thm_540 : B : hol.type -> A : hol.type -> y1_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> y2_3 : hol.term B -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_2 x_6))) -> hyp_2 : hol.proof (p_5 x_4 y1_1) -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y2_3 (f_2 z_7)) x_27_6))) (hol.and (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y1_1 (f_2 z_7)) x_27_6))) (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y2_3 (f_2 z_7)) x_27_6))))) :=
  B : hol.type => A : hol.type => y1_1 : hol.term B => f_2 : hol.term (hol.arr A B) => y2_3 : hol.term B => x_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_2 x_6))) => hyp_2 : hol.proof (p_5 x_4 y1_1) => hol.PROVE_HYP (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y1_1 (f_2 z_7)) x_27_6))) (hol.eq hol.bool (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y2_3 (f_2 z_7)) x_27_6))) (hol.and (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y1_1 (f_2 z_7)) x_27_6))) (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y2_3 (f_2 z_7)) x_27_6))))) (hol.EQ_MP (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y1_1 (f_2 z_7)) x_27_6))) (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y1_1 (f_2 z_7)) x_27_6))) (thm_479 B A f_2 y1_1 x_4 p_5) (thm_538 B A f_2 y1_1 x_4 p_5 hyp_1 hyp_2)) (hyp_3 : hol.proof (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y1_1 (f_2 z_7)) x_27_6))) => thm_539 B A y1_1 f_2 y2_3 x_4 p_5 hyp_3).

(; Theorem: |- ((= \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x'))) \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x'))) ;)

(; dict ;)

def thm_541 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_5)) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_5))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr A hol.bool) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_5)).

(; Theorem: |- ((= \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x'))) \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x'))) ;)

(; dict ;)

def thm_542 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_5)) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_5))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS (hol.arr A hol.bool) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_5)) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_5)) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_5)) (thm_541 B A f_1 y2_2 x_3 p_4) (thm_541 B A f_1 y2_2 x_3 p_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x')))) (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x')))) ;)

(; dict ;)

def thm_543 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_5))) (hol.forall A (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_5)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_5)) (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_5)) (thm_51 A) (thm_542 B A f_1 y2_2 x_3 p_4).

(; Theorem: |- ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x')) (((Data.Bool.cond ((= x') x)) y2) (f x'))) ;)

(; dict ;)

def thm_544 : A : hol.type -> B : hol.type -> x_27_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y2_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_3 (f_2 z_5)) x_27_1) (hol.cond B (hol.eq A x_27_1 x_4) y2_3 (f_2 x_27_1))) :=
  A : hol.type => B : hol.type => x_27_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y2_3 : hol.term B => x_4 : hol.term A => hol.BETA_CONV A B (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_3 (f_2 z_5)) x_27_1.

(; Theorem: |- ((= ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x'))) ((p x') (((Data.Bool.cond ((= x') x)) y2) (f x')))) ;)

(; dict ;)

def thm_545 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_5 x_27_4 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_4)) (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM B hol.bool (p_5 x_27_4) (p_5 x_27_4) ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_4) (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4)) (thm_480 A B x_27_4 p_5) (thm_544 A B x_27_4 f_1 y2_2 x_3).

(; Theorem: |- ((= ((p x') (((Data.Bool.cond ((= x') x)) y2) (f x')))) ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x'))) ;)

(; dict ;)

def thm_546 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) (p_5 x_27_4 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_4))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool (p_5 x_27_4 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_4)) (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) (thm_545 B A f_1 y2_2 x_3 x_27_4 p_5).

(; Theorem: |- ((= (\lambda _494. ((p x') _494) (((Data.Bool.cond ((= x') x)) y2) (f x')))) ((p x') (((Data.Bool.cond ((= x') x)) y2) (f x')))) ;)

(; dict ;)

def thm_547 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((__494_6 : hol.term B => p_5 x_27_4 __494_6) (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (__494_6 : hol.term B => p_5 x_27_4 __494_6) (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4)).

(; Theorem: |- ((= (= (\lambda _494. ((p x') _494) (((Data.Bool.cond ((= x') x)) y2) (f x'))))) (= ((p x') (((Data.Bool.cond ((= x') x)) y2) (f x'))))) ;)

(; dict ;)

def thm_548 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__494_6 : hol.term B => p_5 x_27_4 __494_6) (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4)))) (hol.eq hol.bool (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__494_6 : hol.term B => p_5 x_27_4 __494_6) (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) thm_92 (thm_547 A B f_1 y2_2 x_3 x_27_4 p_5).

(; Theorem: |- ((= (\lambda _494. ((p x') _494) y2)) ((p x') y2)) ;)

(; dict ;)

def thm_549 : A : hol.type -> B : hol.type -> y2_1 : hol.term B -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((__494_4 : hol.term B => p_3 x_27_2 __494_4) y2_1) (p_3 x_27_2 y2_1)) :=
  A : hol.type => B : hol.type => y2_1 : hol.term B => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (__494_4 : hol.term B => p_3 x_27_2 __494_4) y2_1.

(; Theorem: |- ((= ((Data.Bool.==> ((= x') x)) (\lambda _494. ((p x') _494) y2))) ((Data.Bool.==> ((= x') x)) ((p x') y2))) ;)

(; dict ;)

def thm_550 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_3 : hol.term A -> x_27_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A x_27_4 x_3) ((__494_5 : hol.term B => p_2 x_27_4 __494_5) y2_1)) (hol.imp (hol.eq A x_27_4 x_3) (p_2 x_27_4 y2_1))) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_3 : hol.term A => x_27_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq A x_27_4 x_3)) (hol.imp (hol.eq A x_27_4 x_3)) ((__494_5 : hol.term B => p_2 x_27_4 __494_5) y2_1) (p_2 x_27_4 y2_1) (thm_486 A x_3 x_27_4) (thm_549 A B y2_1 x_27_4 p_2).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.==> ((= x') x)) (\lambda _494. ((p x') _494) y2)))) (Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y2)))) ;)

(; dict ;)

def thm_551 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_3 : hol.term A -> x_27_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.imp (hol.eq A x_27_4 x_3) ((__494_5 : hol.term B => p_2 x_27_4 __494_5) y2_1))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) (p_2 x_27_4 y2_1)))) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_3 : hol.term A => x_27_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.imp (hol.eq A x_27_4 x_3) ((__494_5 : hol.term B => p_2 x_27_4 __494_5) y2_1)) (hol.imp (hol.eq A x_27_4 x_3) (p_2 x_27_4 y2_1)) thm_290 (thm_550 B A y2_1 p_2 x_3 x_27_4).

(; Theorem: |- ((= (\lambda _494. ((p x') _494) (f x'))) ((p x') (f x'))) ;)

(; dict ;)

def thm_552 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((__494_4 : hol.term B => p_3 x_27_2 __494_4) (f_1 x_27_2)) (p_3 x_27_2 (f_1 x_27_2))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV B hol.bool (__494_4 : hol.term B => p_3 x_27_2 __494_4) (f_1 x_27_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= x') x))) (\lambda _494. ((p x') _494) (f x')))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x')))) ;)

(; dict ;)

def thm_553 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_3 : hol.term A -> x_27_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq A x_27_4 x_3)) ((__494_5 : hol.term B => p_2 x_27_4 __494_5) (f_1 x_27_4))) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) (p_2 x_27_4 (f_1 x_27_4)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_3 : hol.term A => x_27_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not (hol.eq A x_27_4 x_3))) (hol.imp (hol.not (hol.eq A x_27_4 x_3))) ((__494_5 : hol.term B => p_2 x_27_4 __494_5) (f_1 x_27_4)) (p_2 x_27_4 (f_1 x_27_4)) (thm_490 A x_3 x_27_4) (thm_552 A B f_1 x_27_4 p_2).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) (\lambda _494. ((p x') _494) y2))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) (\lambda _494. ((p x') _494) (f x'))))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y2))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x'))))) ;)

(; dict ;)

def thm_554 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_4 : hol.term A -> x_27_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.imp (hol.eq A x_27_5 x_4) ((__494_6 : hol.term B => p_3 x_27_5 __494_6) y2_2)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) ((__494_6 : hol.term B => p_3 x_27_5 __494_6) (f_1 x_27_5)))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_2)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_4 : hol.term A => x_27_5 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.imp (hol.eq A x_27_5 x_4) ((__494_6 : hol.term B => p_3 x_27_5 __494_6) y2_2))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_2))) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) ((__494_6 : hol.term B => p_3 x_27_5 __494_6) (f_1 x_27_5))) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5))) (thm_551 B A y2_2 p_3 x_4 x_27_5) (thm_553 B A f_1 p_3 x_4 x_27_5).

(; Theorem: |- ((= ((= (\lambda _494. ((p x') _494) (((Data.Bool.cond ((= x') x)) y2) (f x')))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) (\lambda _494. ((p x') _494) y2))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) (\lambda _494. ((p x') _494) (f x')))))) ((= ((p x') (((Data.Bool.cond ((= x') x)) y2) (f x')))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y2))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x')))))) ;)

(; dict ;)

def thm_555 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__494_6 : hol.term B => p_5 x_27_4 __494_6) (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) ((__494_6 : hol.term B => p_5 x_27_4 __494_6) y2_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) ((__494_6 : hol.term B => p_5 x_27_4 __494_6) (f_1 x_27_4))))) (hol.eq hol.bool (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) (p_5 x_27_4 y2_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) (p_5 x_27_4 (f_1 x_27_4)))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__494_6 : hol.term B => p_5 x_27_4 __494_6) (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4)))) (hol.eq hol.bool (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4)))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) ((__494_6 : hol.term B => p_5 x_27_4 __494_6) y2_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) ((__494_6 : hol.term B => p_5 x_27_4 __494_6) (f_1 x_27_4)))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) (p_5 x_27_4 y2_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) (p_5 x_27_4 (f_1 x_27_4)))) (thm_548 A B f_1 y2_2 x_3 x_27_4 p_5) (thm_554 B A f_1 y2_2 p_5 x_3 x_27_4).

(; Theorem: |- ((= (\lambda _494. ((p x') _494) (((Data.Bool.cond _483) _482) _485))) ((Data.Bool./\ ((Data.Bool.==> _483) (\lambda _494. ((p x') _494) _482))) ((Data.Bool.==> (Data.Bool.~ _483)) (\lambda _494. ((p x') _494) _485)))) ;)

(; dict ;)

def thm_556 : A : hol.type -> B : hol.type -> __485_1 : hol.term B -> __482_2 : hol.term B -> __483_3 : hol.term hol.bool -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((__494_6 : hol.term B => p_5 x_27_4 __494_6) (hol.cond B __483_3 __482_2 __485_1)) (hol.and (hol.imp __483_3 ((__494_6 : hol.term B => p_5 x_27_4 __494_6) __482_2)) (hol.imp (hol.not __483_3) ((__494_6 : hol.term B => p_5 x_27_4 __494_6) __485_1)))) :=
  A : hol.type => B : hol.type => __485_1 : hol.term B => __482_2 : hol.term B => __483_3 : hol.term hol.bool => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => __485_1 : hol.term B => __482_2 : hol.term B => __483_3 : hol.term hol.bool => __484_4 : hol.term (hol.arr B hol.bool) => thm_500 B __485_1 __482_2 __483_3 __484_4) B __485_1 __482_2 __483_3 (__494_6 : hol.term B => p_5 x_27_4 __494_6).

(; Theorem: |- ((= (\lambda _494. ((p x') _494) (((Data.Bool.cond ((= x') x)) y2) (f x')))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) (\lambda _494. ((p x') _494) y2))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) (\lambda _494. ((p x') _494) (f x'))))) ;)

(; dict ;)

def thm_557 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((__494_6 : hol.term B => p_5 x_27_4 __494_6) (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) ((__494_6 : hol.term B => p_5 x_27_4 __494_6) y2_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) ((__494_6 : hol.term B => p_5 x_27_4 __494_6) (f_1 x_27_4))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => B : hol.type => __485_1 : hol.term B => __482_2 : hol.term B => __483_3 : hol.term hol.bool => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_556 A B __485_1 __482_2 __483_3 x_27_4 p_5) A B (f_1 x_27_4) y2_2 (hol.eq A x_27_4 x_3) x_27_4 p_5.

(; Theorem: |- ((= ((p x') (((Data.Bool.cond ((= x') x)) y2) (f x')))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y2))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x'))))) ;)

(; dict ;)

def thm_558 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) (p_5 x_27_4 y2_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) (p_5 x_27_4 (f_1 x_27_4))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool ((__494_6 : hol.term B => p_5 x_27_4 __494_6) (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) ((__494_6 : hol.term B => p_5 x_27_4 __494_6) y2_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) ((__494_6 : hol.term B => p_5 x_27_4 __494_6) (f_1 x_27_4))))) (hol.eq hol.bool (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) (hol.and (hol.imp (hol.eq A x_27_4 x_3) (p_5 x_27_4 y2_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) (p_5 x_27_4 (f_1 x_27_4))))) (thm_555 A B f_1 y2_2 x_3 x_27_4 p_5) (thm_557 A B f_1 y2_2 x_3 x_27_4 p_5).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y2))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x'))))) ((p x') (((Data.Bool.cond ((= x') x)) y2) (f x')))) ;)

(; dict ;)

def thm_559 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_4 : hol.term A -> x_27_5 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_2)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5)))) (p_3 x_27_5 (hol.cond B (hol.eq A x_27_5 x_4) y2_2 (f_1 x_27_5)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_4 : hol.term A => x_27_5 : hol.term A => hol.SYM hol.bool (p_3 x_27_5 (hol.cond B (hol.eq A x_27_5 x_4) y2_2 (f_1 x_27_5))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_2)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5)))) (thm_558 B A f_1 y2_2 x_4 x_27_5 p_3).

(; Theorem: |- ((= ((p x') y2)) ((p x') y2)) ;)

(; dict ;)

def thm_560 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 x_27_2 y2_1) (p_3 x_27_2 y2_1)) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (p_3 x_27_2 y2_1).

(; Theorem: |- ((= ((p x') y2)) ((p x') y2)) ;)

(; dict ;)

def thm_561 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> x_27_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 x_27_2 y2_1) (p_3 x_27_2 y2_1)) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => x_27_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool (p_3 x_27_2 y2_1) (p_3 x_27_2 y2_1) (thm_560 B A y2_1 x_27_2 p_3).

(; Theorem: |- ((= y2) y2) ;)

(; dict ;)

def thm_562 : B : hol.type -> y2_1 : hol.term B -> hol.proof (hol.eq B y2_1 y2_1) :=
  B : hol.type => y2_1 : hol.term B => hol.REFL B y2_1.

(; Theorem: |- ((= ((p x') y2)) ((p x) y2)) ;)

(; dict ;)

def thm_563 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y2_2 : hol.term B -> x_27_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.eq A x_27_3 x_1) -> hol.proof (hol.eq hol.bool (p_4 x_27_3 y2_2) (p_4 x_1 y2_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y2_2 : hol.term B => x_27_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.eq A x_27_3 x_1) => hol.APP_THM B hol.bool (p_4 x_27_3) (p_4 x_1) y2_2 y2_2 (thm_509 A B x_1 x_27_3 p_4 hyp_1) (thm_562 B y2_2).

(; Theorem: |- ((= ((= ((p x) y2)) Data.Bool.T)) ((= ((p x) y2)) Data.Bool.T)) ;)

(; dict ;)

def thm_564 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 x_2 y2_1) hol.true) (hol.eq hol.bool (p_3 x_2 y2_1) hol.true)) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (p_3 x_2 y2_1) hol.true).

(; Theorem: |- ((= ((= ((p x) y2)) Data.Bool.T)) ((= ((p x) y2)) Data.Bool.T)) ;)

(; dict ;)

def thm_565 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 x_2 y2_1) hol.true) (hol.eq hol.bool (p_3 x_2 y2_1) hol.true)) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (p_3 x_2 y2_1) hol.true) (hol.eq hol.bool (p_3 x_2 y2_1) hol.true) (hol.eq hol.bool (p_3 x_2 y2_1) hol.true) (thm_564 B A y2_1 x_2 p_3) (thm_564 B A y2_1 x_2 p_3).

(; Theorem: |- ((= ((p x) y2)) ((= ((p x) y2)) Data.Bool.T)) ;)

(; dict ;)

def thm_566 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 x_2 y2_1) (hol.eq hol.bool (p_3 x_2 y2_1) hol.true)) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (t_1 : hol.term hol.bool => thm_119 t_1) (p_3 x_2 y2_1).

(; Theorem: |- ((= ((p x) y2)) Data.Bool.T) ;)

(; dict ;)

def thm_567 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_3 x_2 y2_1) -> hol.proof (hol.eq hol.bool (p_3 x_2 y2_1) hol.true) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_3 x_2 y2_1) => hol.EQ_MP (p_3 x_2 y2_1) (hol.eq hol.bool (p_3 x_2 y2_1) hol.true) (thm_566 B A y2_1 x_2 p_3) (thm_470 B A y2_1 x_2 p_3 hyp_1).

(; Theorem: |- ((= ((p x') y2)) Data.Bool.T) ;)

(; dict ;)

def thm_568 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y2_2 : hol.term B -> x_27_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_4 x_1 y2_2) -> hyp_2 : hol.proof (hol.eq A x_27_3 x_1) -> hol.proof (hol.eq hol.bool (p_4 x_27_3 y2_2) hol.true) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y2_2 : hol.term B => x_27_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_4 x_1 y2_2) => hyp_2 : hol.proof (hol.eq A x_27_3 x_1) => hol.TRANS hol.bool (p_4 x_27_3 y2_2) (p_4 x_1 y2_2) hol.true (thm_563 B A x_1 y2_2 x_27_3 p_4 hyp_2) (hol.EQ_MP (hol.eq hol.bool (p_4 x_1 y2_2) hol.true) (hol.eq hol.bool (p_4 x_1 y2_2) hol.true) (thm_565 B A y2_2 x_1 p_4) (thm_567 B A y2_2 x_1 p_4 hyp_1)).

(; Theorem: |- ((= Data.Bool.T) ((p x') y2)) ;)

(; dict ;)

def thm_569 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y2_2 : hol.term B -> x_27_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_4 x_1 y2_2) -> hyp_2 : hol.proof (hol.eq A x_27_3 x_1) -> hol.proof (hol.eq hol.bool hol.true (p_4 x_27_3 y2_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y2_2 : hol.term B => x_27_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_4 x_1 y2_2) => hyp_2 : hol.proof (hol.eq A x_27_3 x_1) => hol.SYM hol.bool (p_4 x_27_3 y2_2) hol.true (thm_568 B A x_1 y2_2 x_27_3 p_4 hyp_1 hyp_2).

(; Theorem: |- ((p x') y2) ;)

(; dict ;)

def thm_570 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y2_2 : hol.term B -> x_27_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_4 x_1 y2_2) -> hyp_2 : hol.proof (hol.eq A x_27_3 x_1) -> hol.proof (p_4 x_27_3 y2_2) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y2_2 : hol.term B => x_27_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_4 x_1 y2_2) => hyp_2 : hol.proof (hol.eq A x_27_3 x_1) => hol.EQ_MP hol.true (p_4 x_27_3 y2_2) (thm_569 B A x_1 y2_2 x_27_3 p_4 hyp_1 hyp_2) thm_2.

(; Theorem: |- ((p x') y2) ;)

(; dict ;)

def thm_571 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y2_2 : hol.term B -> x_27_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (p_4 x_1 y2_2) -> hyp_2 : hol.proof (hol.eq A x_27_3 x_1) -> hol.proof (p_4 x_27_3 y2_2) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y2_2 : hol.term B => x_27_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (p_4 x_1 y2_2) => hyp_2 : hol.proof (hol.eq A x_27_3 x_1) => hol.PROVE_HYP (hol.eq A x_27_3 x_1) (p_4 x_27_3 y2_2) (thm_505 A x_1 x_27_3 hyp_2) (hyp_3 : hol.proof (hol.eq A x_27_3 x_1) => hol.EQ_MP (p_4 x_27_3 y2_2) (p_4 x_27_3 y2_2) (thm_561 B A y2_2 x_27_3 p_4) (thm_570 B A x_1 y2_2 x_27_3 p_4 hyp_1 hyp_3)).

(; Theorem: |- ((Data.Bool.==> ((= x') x)) ((p x') y2)) ;)

(; dict ;)

def thm_572 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_3 : hol.term A -> x_27_4 : hol.term A -> hyp_1 : hol.proof (p_2 x_3 y2_1) -> hol.proof (hol.imp (hol.eq A x_27_4 x_3) (p_2 x_27_4 y2_1)) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_3 : hol.term A => x_27_4 : hol.term A => hyp_1 : hol.proof (p_2 x_3 y2_1) => hyp_2 : hol.proof (hol.eq A x_27_4 x_3) => thm_571 B A x_3 y2_1 x_27_4 p_2 hyp_1 hyp_2.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x')))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y2))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x'))))) ;)

(; dict ;)

def thm_573 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_4 : hol.term A -> x_27_5 : hol.term A -> hyp_1 : hol.proof (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_1)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_1)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))))) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_4 : hol.term A => x_27_5 : hol.term A => hyp_1 : hol.proof (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_425 p_1 q_2 hyp_1) (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_1)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x')))) ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y2))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x'))))) ;)

(; dict ;)

def thm_574 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_4 : hol.term A -> x_27_5 : hol.term A -> hyp_1 : hol.proof (p_3 x_4 y2_1) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_1)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))))) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_4 : hol.term A => x_27_5 : hol.term A => hyp_1 : hol.proof (p_3 x_4 y2_1) => hol.PROVE_HYP (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_1)) (hol.eq hol.bool (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_1)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_2 x_27_5))))) (thm_572 B A y2_1 p_3 x_4 x_27_5 hyp_1) (hyp_2 : hol.proof (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_1)) => thm_573 B A y2_1 f_2 p_3 x_4 x_27_5 hyp_2).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> ((= x') x)) ((p x') y2))) ((Data.Bool.==> (Data.Bool.~ ((= x') x))) ((p x') (f x')))) ;)

(; dict ;)

def thm_575 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_4 : hol.term A -> x_27_5 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_3 x_6 (f_1 x_6))) -> hyp_2 : hol.proof (p_3 x_4 y2_2) -> hol.proof (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_2)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_4 : hol.term A => x_27_5 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_3 x_6 (f_1 x_6))) => hyp_2 : hol.proof (p_3 x_4 y2_2) => hol.EQ_MP (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5))) (hol.and (hol.imp (hol.eq A x_27_5 x_4) (p_3 x_27_5 y2_2)) (hol.imp (hol.not (hol.eq A x_27_5 x_4)) (p_3 x_27_5 (f_1 x_27_5)))) (thm_574 B A y2_2 f_1 p_3 x_4 x_27_5 hyp_2) (thm_534 B A f_1 p_3 x_4 x_27_5 hyp_1).

(; Theorem: |- ((p x') (((Data.Bool.cond ((= x') x)) y2) (f x'))) ;)

(; dict ;)

def thm_576 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_1 x_6))) -> hyp_2 : hol.proof (p_5 x_3 y2_2) -> hol.proof (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_1 x_6))) => hyp_2 : hol.proof (p_5 x_3 y2_2) => hol.EQ_MP (hol.and (hol.imp (hol.eq A x_27_4 x_3) (p_5 x_27_4 y2_2)) (hol.imp (hol.not (hol.eq A x_27_4 x_3)) (p_5 x_27_4 (f_1 x_27_4)))) (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) (thm_559 B A f_1 y2_2 p_5 x_3 x_27_4) (thm_575 B A f_1 y2_2 p_5 x_3 x_27_4 hyp_1 hyp_2).

(; Theorem: |- ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x')) ;)

(; dict ;)

def thm_577 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> x_27_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_1 x_6))) -> hyp_2 : hol.proof (p_5 x_3 y2_2) -> hol.proof (p_5 x_27_4 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_4)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => x_27_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_1 x_6))) => hyp_2 : hol.proof (p_5 x_3 y2_2) => hol.EQ_MP (p_5 x_27_4 (hol.cond B (hol.eq A x_27_4 x_3) y2_2 (f_1 x_27_4))) (p_5 x_27_4 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_4)) (thm_546 B A f_1 y2_2 x_3 x_27_4 p_5) (thm_576 B A f_1 y2_2 x_3 x_27_4 p_5 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x'))) ;)

(; dict ;)

def thm_578 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_1 x_5))) -> hyp_2 : hol.proof (p_4 x_3 y2_2) -> hol.proof (hol.forall A (x_27_5 : hol.term A => p_4 x_27_5 ((z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_3) y2_2 (f_1 z_6)) x_27_5))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_1 x_5))) => hyp_2 : hol.proof (p_4 x_3 y2_2) => x_27_5 : hol.term A => thm_577 B A f_1 y2_2 x_3 x_27_5 p_4 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x')))) (Data.Bool.! \lambda x'. ((p x') (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x')))) ;)

(; dict ;)

def thm_579 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_2 x_6))) -> hyp_2 : hol.proof (p_5 x_4 y1_3) -> hyp_3 : hol.proof (p_5 x_4 y2_1) -> hol.proof (hol.and (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y1_3 (f_2 z_7)) x_27_6))) (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y2_1 (f_2 z_7)) x_27_6)))) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => x_4 : hol.term A => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_2 x_6))) => hyp_2 : hol.proof (p_5 x_4 y1_3) => hyp_3 : hol.proof (p_5 x_4 y2_1) => hol.EQ_MP (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y2_1 (f_2 z_7)) x_27_6))) (hol.and (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y1_3 (f_2 z_7)) x_27_6))) (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y2_1 (f_2 z_7)) x_27_6)))) (thm_540 B A y1_3 f_2 y2_1 x_4 p_5 hyp_1 hyp_2) (hol.EQ_MP (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y2_1 (f_2 z_7)) x_27_6))) (hol.forall A (x_27_6 : hol.term A => p_5 x_27_6 ((z_7 : hol.term A => hol.cond B (hol.eq A z_7 x_4) y2_1 (f_2 z_7)) x_27_6))) (thm_543 B A f_2 y2_1 x_4 p_5) (thm_578 B A f_2 y2_1 x_4 p_5 hyp_1 hyp_3)).

(; Theorem: |- ((= \lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z))) \lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z))) ;)

(; dict ;)

def thm_580 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> y2_2 : hol.term B -> f_3 : hol.term (hol.arr A B) -> y1_4 : hol.term B -> x_5 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_1 x_6 (f_3 x_6))) -> hyp_2 : hol.proof (hol.forall (hol.arr A B) (f__1_6 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_7 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_8 : hol.term A => p_1 x__1_8 (f__1_6 x__1_8))) (hol.forall A (x__1_8 : hol.term A => p_1 x__1_8 (x_27_7 x__1_8)))) (hol.eq (hol.arr A B) f__1_6 x_27_7)))) -> hyp_3 : hol.proof (p_1 x_5 y1_4) -> hyp_4 : hol.proof (p_1 x_5 y2_2) -> hol.proof (hol.eq (hol.arr A B) (z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_5) y1_4 (f_3 z_6)) (z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_5) y2_2 (f_3 z_6))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => y2_2 : hol.term B => f_3 : hol.term (hol.arr A B) => y1_4 : hol.term B => x_5 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_1 x_6 (f_3 x_6))) => hyp_2 : hol.proof (hol.forall (hol.arr A B) (f__1_6 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_7 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_8 : hol.term A => p_1 x__1_8 (f__1_6 x__1_8))) (hol.forall A (x__1_8 : hol.term A => p_1 x__1_8 (x_27_7 x__1_8)))) (hol.eq (hol.arr A B) f__1_6 x_27_7)))) => hyp_3 : hol.proof (p_1 x_5 y1_4) => hyp_4 : hol.proof (p_1 x_5 y2_2) => thm_476 B A y2_2 f_3 y1_4 x_5 p_1 hyp_2 (thm_579 B A y2_2 f_3 y1_4 x_5 p_1 hyp_1 hyp_3 hyp_4).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_581 : B : hol.type -> hol.proof (hol.eq (hol.arr B (hol.arr B hol.bool)) (hol.eq B) (hol.eq B)) :=
  B : hol.type => hol.REFL (hol.arr B (hol.arr B hol.bool)) (hol.eq B).

(; Theorem: |- ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) z)) (((Data.Bool.cond ((= z) x)) y1) (f z))) ;)

(; dict ;)

def thm_582 : A : hol.type -> B : hol.type -> z_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) z_1) (hol.cond B (hol.eq A z_1 x_4) y1_3 (f_2 z_1))) :=
  A : hol.type => B : hol.type => z_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => x_4 : hol.term A => hol.BETA_CONV A B (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) z_1.

(; Theorem: |- ((= \lambda z. (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) z)) \lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z))) ;)

(; dict ;)

def thm_583 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq (hol.arr A B) (z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y1_2 (f_1 z_5)) z_4) (z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => hol.ABS_THM A B (z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y1_2 (f_1 z_5)) z_4) (z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) (z_4 : hol.term A => thm_582 A B z_4 f_1 y1_2 x_3).

(; Theorem: |- ((= (\lambda z. (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) z) x)) (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x)) ;)

(; dict ;)

def thm_584 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq B ((z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y1_2 (f_1 z_5)) z_4) x_3) ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3)) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => hol.APP_THM A B (z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y1_2 (f_1 z_5)) z_4) (z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3 x_3 (thm_583 B A f_1 y1_2 x_3) (thm_121 A x_3).

(; Theorem: |- ((= (= (\lambda z. (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) z) x))) (= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x))) ;)

(; dict ;)

def thm_585 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B ((z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y1_2 (f_1 z_5)) z_4) x_3)) (hol.eq B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) ((z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y1_2 (f_1 z_5)) z_4) x_3) ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3) (thm_581 B) (thm_584 A B f_1 y1_2 x_3).

(; Theorem: |- ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x)) (((Data.Bool.cond ((= x) x)) y1) (f x))) ;)

(; dict ;)

def thm_586 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3) (hol.cond B (hol.eq A x_3 x_3) y1_2 (f_1 x_3))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => hol.BETA_CONV A B (z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3.

(; Theorem: |- ((= ((= (\lambda z. (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) z) x)) (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x))) ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x)) (((Data.Bool.cond ((= x) x)) y1) (f x)))) ;)

(; dict ;)

def thm_587 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq B ((z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y1_2 (f_1 z_5)) z_4) x_3) ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3)) (hol.eq B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3) (hol.cond B (hol.eq A x_3 x_3) y1_2 (f_1 x_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => hol.APP_THM B hol.bool (hol.eq B ((z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y1_2 (f_1 z_5)) z_4) x_3)) (hol.eq B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3)) ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3) (hol.cond B (hol.eq A x_3 x_3) y1_2 (f_1 x_3)) (thm_585 A B f_1 y1_2 x_3) (thm_586 A B f_1 y1_2 x_3).

(; Theorem: |- ((= Data.Bool.cond) Data.Bool.cond) ;)

(; dict ;)

def thm_588 : B : hol.type -> hol.proof (hol.eq (hol.arr hol.bool (hol.arr B (hol.arr B B))) (hol.cond B) (hol.cond B)) :=
  B : hol.type => hol.REFL (hol.arr hol.bool (hol.arr B (hol.arr B B))) (hol.cond B).

(; Theorem: |- ((= (Data.Bool.cond ((= x) x))) (Data.Bool.cond Data.Bool.T)) ;)

(; dict ;)

def thm_589 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B (hol.arr B B)) (hol.cond B (hol.eq A x_1 x_1)) (hol.cond B hol.true)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool (hol.arr B (hol.arr B B)) (hol.cond B) (hol.cond B) (hol.eq A x_1 x_1) hol.true (thm_588 B) (thm_122 A x_1).

(; Theorem: |- ((= ((Data.Bool.cond ((= x) x)) y1)) ((Data.Bool.cond Data.Bool.T) y1)) ;)

(; dict ;)

def thm_590 : A : hol.type -> B : hol.type -> y1_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr B B) (hol.cond B (hol.eq A x_2 x_2) y1_1) (hol.cond B hol.true y1_1)) :=
  A : hol.type => B : hol.type => y1_1 : hol.term B => x_2 : hol.term A => hol.APP_THM B (hol.arr B B) (hol.cond B (hol.eq A x_2 x_2)) (hol.cond B hol.true) y1_1 y1_1 (thm_589 A B x_2) (thm_510 B y1_1).

(; Theorem: |- ((= (((Data.Bool.cond ((= x) x)) y1) (f x))) (((Data.Bool.cond Data.Bool.T) y1) (f x))) ;)

(; dict ;)

def thm_591 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq B (hol.cond B (hol.eq A x_3 x_3) y1_2 (f_1 x_3)) (hol.cond B hol.true y1_2 (f_1 x_3))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => hol.APP_THM B B (hol.cond B (hol.eq A x_3 x_3) y1_2) (hol.cond B hol.true y1_2) (f_1 x_3) (f_1 x_3) (thm_590 A B y1_2 x_3) (thm_178 A B x_3 f_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ;)

(; dict ;)

def thm_592 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ;)

(; dict ;)

def thm_593 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (thm_592 A t2_1 t1_2) (thm_592 A t2_1 t1_2).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_594 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_595 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (thm_594 A) (thm_594 A).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))))) ;)

(; dict ;)

def thm_596 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (thm_51 A) (thm_595 A).

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_597 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) :=
  A : hol.type => t1_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)).

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_598 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) :=
  A : hol.type => t1_1 : hol.term A => hol.TRANS (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (thm_597 A t1_1) (thm_597 A t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_599 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (thm_51 A) (thm_598 A t1_1).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ;)

(; dict ;)

def thm_600 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1)) :=
  A : hol.type => t1_1 : hol.term A => thm_16 A t1_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1) ;)

(; dict ;)

def thm_601 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_600 A t1_2 t2_1.

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_602 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hyp_1 : hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_425 p_1 q_2 hyp_1) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) hyp_1.

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_603 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.PROVE_HYP (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1))) ((A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (thm_592 A t2_1 t1_2) (thm_601 A t2_1 t1_2)) A t2_1 t1_2) (hyp_1 : hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) => thm_602 A t2_1 t1_2 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_604 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_605 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (thm_604 A t2_1 t1_2) (thm_604 A t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_606 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) :=
  A : hol.type => t1_1 : hol.term A => thm_17 A t1_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2) ;)

(; dict ;)

def thm_607 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_606 A t1_2 t2_1.

(; Theorem: |- ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_608 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) (thm_603 A t2_1 t1_2) ((A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (thm_605 A t2_1 t1_2) (thm_607 A t2_1 t1_2)) A t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_609 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) :=
  A : hol.type => t1_1 : hol.term A => t2_2 : hol.term A => thm_608 A t2_2 t1_1.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_610 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => t1_1 : hol.term A => hol.EQ_MP (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (thm_599 A t1_1) (thm_609 A t1_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1) ;)

(; dict ;)

def thm_611 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) -> hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_393 q_1 p_2 hyp_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) hyp_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1) ;)

(; dict ;)

def thm_612 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.PROVE_HYP (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.EQ_MP (hol.forall A (t1_3 : hol.term A => hol.forall A (t2_4 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_3 t2_4) t1_3) (hol.eq A (hol.cond A hol.false t1_3 t2_4) t2_4)))) (hol.forall A (t1_3 : hol.term A => hol.forall A (t2_4 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_3 t2_4) t1_3) (hol.eq A (hol.cond A hol.false t1_3 t2_4) t2_4)))) (thm_596 A) (thm_610 A) t1_2 t2_1) (hyp_1 : hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) => thm_611 A t2_1 t1_2 hyp_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1) ;)

(; dict ;)

def thm_613 : B : hol.type -> t2_1 : hol.term B -> t1_2 : hol.term B -> hol.proof (hol.eq B (hol.cond B hol.true t1_2 t2_1) t1_2) :=
  B : hol.type => t2_1 : hol.term B => t1_2 : hol.term B => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (thm_593 A t2_1 t1_2) (thm_612 A t2_1 t1_2)) B t2_1 t1_2.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) y1) (f x))) y1) ;)

(; dict ;)

def thm_614 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> hol.proof (hol.eq B (hol.cond B hol.true y1_3 (f_2 x_1)) y1_3) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => (B : hol.type => t2_1 : hol.term B => t1_2 : hol.term B => thm_613 B t2_1 t1_2) B (f_2 x_1) y1_3.

(; Theorem: |- ((= (((Data.Bool.cond ((= x) x)) y1) (f x))) y1) ;)

(; dict ;)

def thm_615 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq B (hol.cond B (hol.eq A x_3 x_3) y1_2 (f_1 x_3)) y1_2) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => hol.TRANS B (hol.cond B (hol.eq A x_3 x_3) y1_2 (f_1 x_3)) (hol.cond B hol.true y1_2 (f_1 x_3)) y1_2 (thm_591 A B f_1 y1_2 x_3) (thm_614 A B x_3 f_1 y1_2).

(; Theorem: |- ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x)) y1) ;)

(; dict ;)

def thm_616 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3) y1_2) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => hol.TRANS B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3) (hol.cond B (hol.eq A x_3 x_3) y1_2 (f_1 x_3)) y1_2 (hol.EQ_MP (hol.eq B ((z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y1_2 (f_1 z_5)) z_4) x_3) ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3)) (hol.eq B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3) (hol.cond B (hol.eq A x_3 x_3) y1_2 (f_1 x_3))) (thm_587 A B f_1 y1_2 x_3) (thm_584 A B f_1 y1_2 x_3)) (thm_615 A B f_1 y1_2 x_3).

(; Theorem: |- ((= (= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x))) (= y1)) ;)

(; dict ;)

def thm_617 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y1_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3)) (hol.eq B y1_2)) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y1_2 : hol.term B => x_3 : hol.term A => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y1_2 (f_1 z_4)) x_3) y1_2 (thm_581 B) (thm_616 A B f_1 y1_2 x_3).

(; Theorem: |- ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) z)) (((Data.Bool.cond ((= z) x)) y2) (f z))) ;)

(; dict ;)

def thm_618 : A : hol.type -> B : hol.type -> z_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y2_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_3 (f_2 z_5)) z_1) (hol.cond B (hol.eq A z_1 x_4) y2_3 (f_2 z_1))) :=
  A : hol.type => B : hol.type => z_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y2_3 : hol.term B => x_4 : hol.term A => hol.BETA_CONV A B (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_3 (f_2 z_5)) z_1.

(; Theorem: |- ((= \lambda z. (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) z)) \lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z))) ;)

(; dict ;)

def thm_619 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq (hol.arr A B) (z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y2_2 (f_1 z_5)) z_4) (z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => hol.ABS_THM A B (z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y2_2 (f_1 z_5)) z_4) (z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) (z_4 : hol.term A => thm_618 A B z_4 f_1 y2_2 x_3).

(; Theorem: |- ((= (\lambda z. (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) z) x)) (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x)) ;)

(; dict ;)

def thm_620 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq B ((z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y2_2 (f_1 z_5)) z_4) x_3) ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3)) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => hol.APP_THM A B (z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y2_2 (f_1 z_5)) z_4) (z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3 x_3 (thm_619 B A f_1 y2_2 x_3) (thm_121 A x_3).

(; Theorem: |- ((= (= (\lambda z. (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) z) x))) (= (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x))) ;)

(; dict ;)

def thm_621 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B ((z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y2_2 (f_1 z_5)) z_4) x_3)) (hol.eq B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) ((z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y2_2 (f_1 z_5)) z_4) x_3) ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3) (thm_581 B) (thm_620 A B f_1 y2_2 x_3).

(; Theorem: |- ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x)) (((Data.Bool.cond ((= x) x)) y2) (f x))) ;)

(; dict ;)

def thm_622 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3) (hol.cond B (hol.eq A x_3 x_3) y2_2 (f_1 x_3))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => hol.BETA_CONV A B (z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3.

(; Theorem: |- ((= ((= (\lambda z. (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) z) x)) (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x))) ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x)) (((Data.Bool.cond ((= x) x)) y2) (f x)))) ;)

(; dict ;)

def thm_623 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq B ((z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y2_2 (f_1 z_5)) z_4) x_3) ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3)) (hol.eq B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3) (hol.cond B (hol.eq A x_3 x_3) y2_2 (f_1 x_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => hol.APP_THM B hol.bool (hol.eq B ((z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y2_2 (f_1 z_5)) z_4) x_3)) (hol.eq B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3)) ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3) (hol.cond B (hol.eq A x_3 x_3) y2_2 (f_1 x_3)) (thm_621 A B f_1 y2_2 x_3) (thm_622 A B f_1 y2_2 x_3).

(; Theorem: |- ((= ((Data.Bool.cond ((= x) x)) y2)) ((Data.Bool.cond Data.Bool.T) y2)) ;)

(; dict ;)

def thm_624 : A : hol.type -> B : hol.type -> y2_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr B B) (hol.cond B (hol.eq A x_2 x_2) y2_1) (hol.cond B hol.true y2_1)) :=
  A : hol.type => B : hol.type => y2_1 : hol.term B => x_2 : hol.term A => hol.APP_THM B (hol.arr B B) (hol.cond B (hol.eq A x_2 x_2)) (hol.cond B hol.true) y2_1 y2_1 (thm_589 A B x_2) (thm_562 B y2_1).

(; Theorem: |- ((= (((Data.Bool.cond ((= x) x)) y2) (f x))) (((Data.Bool.cond Data.Bool.T) y2) (f x))) ;)

(; dict ;)

def thm_625 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq B (hol.cond B (hol.eq A x_3 x_3) y2_2 (f_1 x_3)) (hol.cond B hol.true y2_2 (f_1 x_3))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => hol.APP_THM B B (hol.cond B (hol.eq A x_3 x_3) y2_2) (hol.cond B hol.true y2_2) (f_1 x_3) (f_1 x_3) (thm_624 A B y2_2 x_3) (thm_178 A B x_3 f_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) y2) (f x))) y2) ;)

(; dict ;)

def thm_626 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y2_3 : hol.term B -> hol.proof (hol.eq B (hol.cond B hol.true y2_3 (f_2 x_1)) y2_3) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y2_3 : hol.term B => (B : hol.type => t2_1 : hol.term B => t1_2 : hol.term B => thm_613 B t2_1 t1_2) B (f_2 x_1) y2_3.

(; Theorem: |- ((= (((Data.Bool.cond ((= x) x)) y2) (f x))) y2) ;)

(; dict ;)

def thm_627 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq B (hol.cond B (hol.eq A x_3 x_3) y2_2 (f_1 x_3)) y2_2) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => hol.TRANS B (hol.cond B (hol.eq A x_3 x_3) y2_2 (f_1 x_3)) (hol.cond B hol.true y2_2 (f_1 x_3)) y2_2 (thm_625 A B f_1 y2_2 x_3) (thm_626 A B x_3 f_1 y2_2).

(; Theorem: |- ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x)) y2) ;)

(; dict ;)

def thm_628 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y2_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.eq B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3) y2_2) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y2_2 : hol.term B => x_3 : hol.term A => hol.TRANS B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3) (hol.cond B (hol.eq A x_3 x_3) y2_2 (f_1 x_3)) y2_2 (hol.EQ_MP (hol.eq B ((z_4 : hol.term A => (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_3) y2_2 (f_1 z_5)) z_4) x_3) ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3)) (hol.eq B ((z_4 : hol.term A => hol.cond B (hol.eq A z_4 x_3) y2_2 (f_1 z_4)) x_3) (hol.cond B (hol.eq A x_3 x_3) y2_2 (f_1 x_3))) (thm_623 A B f_1 y2_2 x_3) (thm_620 A B f_1 y2_2 x_3)) (thm_627 A B f_1 y2_2 x_3).

(; Theorem: |- ((= ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x)) (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x))) ((= y1) y2)) ;)

(; dict ;)

def thm_629 : A : hol.type -> B : hol.type -> y2_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_4) ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4)) (hol.eq B y1_3 y2_1)) :=
  A : hol.type => B : hol.type => y2_1 : hol.term B => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => x_4 : hol.term A => hol.APP_THM B hol.bool (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_4)) (hol.eq B y1_3) ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4) y2_1 (thm_617 A B f_2 y1_3 x_4) (thm_628 A B f_2 y2_1 x_4).

(; Theorem: |- ((= (Data.Bool.==> ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x)) (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x)))) (Data.Bool.==> ((= y1) y2))) ;)

(; dict ;)

def thm_630 : A : hol.type -> B : hol.type -> y2_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_4) ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4))) (hol.imp (hol.eq B y1_3 y2_1))) :=
  A : hol.type => B : hol.type => y2_1 : hol.term B => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => x_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_4) ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4)) (hol.eq B y1_3 y2_1) thm_293 (thm_629 A B y2_1 f_2 y1_3 x_4).

(; Theorem: |- ((= ((= y1) y2)) ((= y1) y2)) ;)

(; dict ;)

def thm_631 : B : hol.type -> y2_1 : hol.term B -> y1_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B y1_2 y2_1) (hol.eq B y1_2 y2_1)) :=
  B : hol.type => y2_1 : hol.term B => y1_2 : hol.term B => hol.REFL hol.bool (hol.eq B y1_2 y2_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x)) (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x))) ((= y1) y2))) ((Data.Bool.==> ((= y1) y2)) ((= y1) y2))) ;)

(; dict ;)

def thm_632 : A : hol.type -> B : hol.type -> y2_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_4) ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4)) (hol.eq B y1_3 y2_1)) (hol.imp (hol.eq B y1_3 y2_1) (hol.eq B y1_3 y2_1))) :=
  A : hol.type => B : hol.type => y2_1 : hol.term B => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => x_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_4) ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4))) (hol.imp (hol.eq B y1_3 y2_1)) (hol.eq B y1_3 y2_1) (hol.eq B y1_3 y2_1) (thm_630 A B y2_1 f_2 y1_3 x_4) (thm_631 B y2_1 y1_3).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_633 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_634 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_633 t_1) (thm_633 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_635 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_636 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_635 thm_635.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) ;)

(; dict ;)

def thm_637 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_413 thm_636.

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_638 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_639 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_638 t_1) (thm_638 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_640 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_18 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_641 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_425 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_642 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_639 t_1) (thm_640 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => thm_641 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_643 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_644 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_643 t_1) (thm_643 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_645 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_19 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_646 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_425 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_647 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_644 t_1) (thm_645 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => thm_646 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_648 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_649 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_648 t_1) (thm_648 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_650 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_20 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_651 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_425 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_652 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_649 t_1) (thm_650 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => thm_651 t_1 hyp_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_653 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_654 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_653 thm_653.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_655 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_413 thm_654.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_656 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_119 t_1) (hol.imp t_1 t_1).

(; Theorem: |- ((Data.Bool.==> t) t) ;)

(; dict ;)

def thm_657 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 t_1) :=
  t_1 : hol.term hol.bool => thm_21 t_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_658 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_656 t_1) (thm_657 t_1).

(; Theorem: |- ((= (= ((Data.Bool.==> t) t))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_659 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp t_1 t_1) hol.true thm_92 (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_633 t_1) (thm_658 t_1)).

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_660 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_661 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true) hol.true hol.true (thm_659 t_1) thm_660.

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_662 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true) (thm_661 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_663 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_662 t_1) thm_660.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_664 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_425 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_665 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_633 t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) thm_655 thm_663 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => thm_664 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_666 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_667 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_666 t_1) (thm_666 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_668 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_22 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_669 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_665 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_667 t_1) (thm_668 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_670 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_652 t_1) (thm_669 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_671 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (thm_647 t_1) (thm_670 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_672 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (thm_642 t_1) (thm_671 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_673 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => thm_672 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_674 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_400 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_675 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) thm_637 thm_673 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => thm_674 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_676 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_400 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_677 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_675 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => thm_676 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_678 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_400 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_679 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_677 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => thm_678 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_680 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_393 q_1 p_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_681 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_679 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) => thm_680 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= y1) y2)) ((= y1) y2))) Data.Bool.T) ;)

(; dict ;)

def thm_682 : B : hol.type -> y2_1 : hol.term B -> y1_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq B y1_2 y2_1) (hol.eq B y1_2 y2_1)) hol.true) :=
  B : hol.type => y2_1 : hol.term B => y1_2 : hol.term B => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_634 t_1) (thm_681 t_1)) (hol.eq B y1_2 y2_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x)) (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x))) ((= y1) y2))) Data.Bool.T) ;)

(; dict ;)

def thm_683 : A : hol.type -> B : hol.type -> y2_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_4) ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4)) (hol.eq B y1_3 y2_1)) hol.true) :=
  A : hol.type => B : hol.type => y2_1 : hol.term B => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => x_4 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_4) ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4)) (hol.eq B y1_3 y2_1)) (hol.imp (hol.eq B y1_3 y2_1) (hol.eq B y1_3 y2_1)) hol.true (thm_632 A B y2_1 f_2 y1_3 x_4) (thm_682 B y2_1 y1_3).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x)) (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x))) ((= y1) y2))) ;)

(; dict ;)

def thm_684 : A : hol.type -> B : hol.type -> y2_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_4) ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4)) (hol.eq B y1_3 y2_1))) :=
  A : hol.type => B : hol.type => y2_1 : hol.term B => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => x_4 : hol.term A => hol.SYM hol.bool (hol.imp (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_4) ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4)) (hol.eq B y1_3 y2_1)) hol.true (thm_683 A B y2_1 f_2 y1_3 x_4).

(; Theorem: |- ((Data.Bool.==> ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x)) (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x))) ((= y1) y2)) ;)

(; dict ;)

def thm_685 : A : hol.type -> B : hol.type -> y2_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.imp (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_4) ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4)) (hol.eq B y1_3 y2_1)) :=
  A : hol.type => B : hol.type => y2_1 : hol.term B => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => x_4 : hol.term A => hol.EQ_MP hol.true (hol.imp (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_4) ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4)) (hol.eq B y1_3 y2_1)) (thm_684 A B y2_1 f_2 y1_3 x_4) thm_2.

(; Theorem: |- ((= \lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z))) \lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z))) ;)

(; dict ;)

def thm_686 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.eq (hol.arr A B) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5))) -> hol.proof (hol.eq (hol.arr A B) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5))) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.eq (hol.arr A B) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5))) => hyp_1.

(; Theorem: |- ((= (\lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z)) x)) (\lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)) x)) ;)

(; dict ;)

def thm_687 : A : hol.type -> B : hol.type -> y2_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> x_4 : hol.term A -> hyp_1 : hol.proof (hol.eq (hol.arr A B) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5))) -> hol.proof (hol.eq B ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) x_4) ((z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4)) :=
  A : hol.type => B : hol.type => y2_1 : hol.term B => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.eq (hol.arr A B) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5))) => hol.APP_THM A B (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5)) x_4 x_4 (thm_686 B A y2_1 f_2 y1_3 x_4 hyp_1) (thm_121 A x_4).

(; Theorem: |- ((= y1) y2) ;)

(; dict ;)

def thm_688 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> y2_3 : hol.term B -> y1_4 : hol.term B -> hyp_1 : hol.proof (hol.eq (hol.arr A B) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_2) y1_4 (f_1 z_5)) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_2) y2_3 (f_1 z_5))) -> hol.proof (hol.eq B y1_4 y2_3) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => y2_3 : hol.term B => y1_4 : hol.term B => hyp_1 : hol.proof (hol.eq (hol.arr A B) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_2) y1_4 (f_1 z_5)) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_2) y2_3 (f_1 z_5))) => thm_685 A B y2_3 f_1 y1_4 x_2 (thm_687 A B y2_3 f_1 y1_4 x_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= \lambda z. (((Data.Bool.cond ((= z) x)) y1) (f z))) \lambda z. (((Data.Bool.cond ((= z) x)) y2) (f z)))) ((= y1) y2)) ;)

(; dict ;)

def thm_689 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> y1_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.imp (hol.eq (hol.arr A B) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5))) (hol.eq B y1_3 y2_1)) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => f_2 : hol.term (hol.arr A B) => y1_3 : hol.term B => x_4 : hol.term A => hyp_1 : hol.proof (hol.eq (hol.arr A B) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y1_3 (f_2 z_5)) (z_5 : hol.term A => hol.cond B (hol.eq A z_5 x_4) y2_1 (f_2 z_5))) => thm_688 A B f_2 x_4 y2_1 y1_3 hyp_1.

(; Theorem: |- ((= y1) y2) ;)

(; dict ;)

def thm_690 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> y2_4 : hol.term B -> y1_5 : hol.term B -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_3 x_6 (f_2 x_6))) -> hyp_2 : hol.proof (hol.forall (hol.arr A B) (f__1_6 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_7 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_8 : hol.term A => p_3 x__1_8 (f__1_6 x__1_8))) (hol.forall A (x__1_8 : hol.term A => p_3 x__1_8 (x_27_7 x__1_8)))) (hol.eq (hol.arr A B) f__1_6 x_27_7)))) -> hyp_3 : hol.proof (p_3 x_1 y1_5) -> hyp_4 : hol.proof (p_3 x_1 y2_4) -> hol.proof (hol.eq B y1_5 y2_4) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => y2_4 : hol.term B => y1_5 : hol.term B => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => p_3 x_6 (f_2 x_6))) => hyp_2 : hol.proof (hol.forall (hol.arr A B) (f__1_6 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_7 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_8 : hol.term A => p_3 x__1_8 (f__1_6 x__1_8))) (hol.forall A (x__1_8 : hol.term A => p_3 x__1_8 (x_27_7 x__1_8)))) (hol.eq (hol.arr A B) f__1_6 x_27_7)))) => hyp_3 : hol.proof (p_3 x_1 y1_5) => hyp_4 : hol.proof (p_3 x_1 y2_4) => hol.PROVE_HYP (hol.eq (hol.arr A B) (z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_1) y1_5 (f_2 z_6)) (z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_1) y2_4 (f_2 z_6))) (hol.eq B y1_5 y2_4) (thm_580 B A p_3 y2_4 f_2 y1_5 x_1 hyp_1 hyp_2 hyp_3 hyp_4) (hyp_5 : hol.proof (hol.eq (hol.arr A B) (z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_1) y1_5 (f_2 z_6)) (z_6 : hol.term A => hol.cond B (hol.eq A z_6 x_1) y2_4 (f_2 z_6))) => thm_689 B A y2_4 f_2 y1_5 x_1 (thm_686 B A y2_4 f_2 y1_5 x_1 hyp_5)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((p x) (f x)))) ((= y1) y2)) ;)

(; dict ;)

def thm_691 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y2_2 : hol.term B -> y1_3 : hol.term B -> f_4 : hol.term (hol.arr A B) -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_6 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_7 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_8 : hol.term A => p_5 x__1_8 (f__1_6 x__1_8))) (hol.forall A (x__1_8 : hol.term A => p_5 x__1_8 (x_27_7 x__1_8)))) (hol.eq (hol.arr A B) f__1_6 x_27_7)))) -> hyp_2 : hol.proof (p_5 x_1 y1_3) -> hyp_3 : hol.proof (p_5 x_1 y2_2) -> hol.proof (hol.imp (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_4 x_6))) (hol.eq B y1_3 y2_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y2_2 : hol.term B => y1_3 : hol.term B => f_4 : hol.term (hol.arr A B) => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_6 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_7 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_8 : hol.term A => p_5 x__1_8 (f__1_6 x__1_8))) (hol.forall A (x__1_8 : hol.term A => p_5 x__1_8 (x_27_7 x__1_8)))) (hol.eq (hol.arr A B) f__1_6 x_27_7)))) => hyp_2 : hol.proof (p_5 x_1 y1_3) => hyp_3 : hol.proof (p_5 x_1 y2_2) => hyp_4 : hol.proof (hol.forall A (x_6 : hol.term A => p_5 x_6 (f_4 x_6))) => thm_690 A B x_1 f_4 p_5 y2_2 y1_3 hyp_4 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f) ;)

(; dict ;)

def thm_692 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4))) f_1) -> hol.proof ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4))) f_1) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4))) f_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((p x) (f x))) ;)

(; dict ;)

def thm_693 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4))) f_1) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3 (f_1 x_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4))) f_1) => hol.EQ_MP ((f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4))) f_1) (hol.forall A (x_3 : hol.term A => p_2 x_3 (f_1 x_3))) (thm_344 B A f_1 p_2) (thm_692 B A f_1 p_2 hyp_1).

(; Theorem: |- ((= y1) y2) ;)

(; dict ;)

def thm_694 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> y2_4 : hol.term B -> y1_5 : hol.term B -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_6 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_7 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_8 : hol.term A => p_3 x__1_8 (f__1_6 x__1_8))) (hol.forall A (x__1_8 : hol.term A => p_3 x__1_8 (x_27_7 x__1_8)))) (hol.eq (hol.arr A B) f__1_6 x_27_7)))) -> hyp_2 : hol.proof ((f_6 : hol.term (hol.arr A B) => hol.forall A (x_7 : hol.term A => p_3 x_7 (f_6 x_7))) f_2) -> hyp_3 : hol.proof (p_3 x_1 y1_5) -> hyp_4 : hol.proof (p_3 x_1 y2_4) -> hol.proof (hol.eq B y1_5 y2_4) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => y2_4 : hol.term B => y1_5 : hol.term B => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_6 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_7 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_8 : hol.term A => p_3 x__1_8 (f__1_6 x__1_8))) (hol.forall A (x__1_8 : hol.term A => p_3 x__1_8 (x_27_7 x__1_8)))) (hol.eq (hol.arr A B) f__1_6 x_27_7)))) => hyp_2 : hol.proof ((f_6 : hol.term (hol.arr A B) => hol.forall A (x_7 : hol.term A => p_3 x_7 (f_6 x_7))) f_2) => hyp_3 : hol.proof (p_3 x_1 y1_5) => hyp_4 : hol.proof (p_3 x_1 y2_4) => thm_691 B A x_1 y2_4 y1_5 f_2 p_3 hyp_1 hyp_3 hyp_4 (thm_693 B A f_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) ((= y1) y2)) ;)

(; dict ;)

def thm_695 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y2_2 : hol.term B -> y1_3 : hol.term B -> f_4 : hol.term (hol.arr A B) -> p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_6 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_7 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_8 : hol.term A => p_5 x__1_8 (f__1_6 x__1_8))) (hol.forall A (x__1_8 : hol.term A => p_5 x__1_8 (x_27_7 x__1_8)))) (hol.eq (hol.arr A B) f__1_6 x_27_7)))) -> hyp_2 : hol.proof (p_5 x_1 y1_3) -> hyp_3 : hol.proof (p_5 x_1 y2_2) -> hol.proof (hol.imp ((f_6 : hol.term (hol.arr A B) => hol.forall A (x_7 : hol.term A => p_5 x_7 (f_6 x_7))) f_4) (hol.eq B y1_3 y2_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y2_2 : hol.term B => y1_3 : hol.term B => f_4 : hol.term (hol.arr A B) => p_5 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_6 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_7 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_8 : hol.term A => p_5 x__1_8 (f__1_6 x__1_8))) (hol.forall A (x__1_8 : hol.term A => p_5 x__1_8 (x_27_7 x__1_8)))) (hol.eq (hol.arr A B) f__1_6 x_27_7)))) => hyp_2 : hol.proof (p_5 x_1 y1_3) => hyp_3 : hol.proof (p_5 x_1 y2_2) => hyp_4 : hol.proof ((f_6 : hol.term (hol.arr A B) => hol.forall A (x_7 : hol.term A => p_5 x_7 (f_6 x_7))) f_4) => thm_694 A B x_1 f_4 p_5 y2_2 y1_3 hyp_1 hyp_4 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda f. ((Data.Bool.==> (\lambda f. (Data.Bool.! \lambda x. ((p x) (f x))) f)) ((= y1) y2))) ;)

(; dict ;)

def thm_696 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y2_2 : hol.term B -> y1_3 : hol.term B -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_4 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_4 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) -> hyp_2 : hol.proof (p_4 x_1 y1_3) -> hyp_3 : hol.proof (p_4 x_1 y2_2) -> hol.proof (hol.forall (hol.arr A B) (f_5 : hol.term (hol.arr A B) => hol.imp ((f_6 : hol.term (hol.arr A B) => hol.forall A (x_7 : hol.term A => p_4 x_7 (f_6 x_7))) f_5) (hol.eq B y1_3 y2_2))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y2_2 : hol.term B => y1_3 : hol.term B => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_4 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_4 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) => hyp_2 : hol.proof (p_4 x_1 y1_3) => hyp_3 : hol.proof (p_4 x_1 y2_2) => f_5 : hol.term (hol.arr A B) => thm_695 B A x_1 y2_2 y1_3 f_5 p_4 hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) ((= y1) y2)) ;)

(; dict ;)

def thm_697 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y2_2 : hol.term B -> y1_3 : hol.term B -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_4 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_4 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) -> hyp_2 : hol.proof (p_4 x_1 y1_3) -> hyp_3 : hol.proof (p_4 x_1 y2_2) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_4 x_6 (f_5 x_6)))) (hol.eq B y1_3 y2_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y2_2 : hol.term B => y1_3 : hol.term B => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_4 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_4 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) => hyp_2 : hol.proof (p_4 x_1 y1_3) => hyp_3 : hol.proof (p_4 x_1 y2_2) => thm_471 B A y2_2 y1_3 p_4 (thm_696 B A x_1 y2_2 y1_3 p_4 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= y1) y2) ;)

(; dict ;)

def thm_698 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> y2_3 : hol.term B -> y1_4 : hol.term B -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_2 x_6 (f_5 x_6)))) -> hyp_3 : hol.proof (p_2 x_1 y1_4) -> hyp_4 : hol.proof (p_2 x_1 y2_3) -> hol.proof (hol.eq B y1_4 y2_3) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => y2_3 : hol.term B => y1_4 : hol.term B => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_2 x_6 (f_5 x_6)))) => hyp_3 : hol.proof (p_2 x_1 y1_4) => hyp_4 : hol.proof (p_2 x_1 y2_3) => thm_697 B A x_1 y2_3 y1_4 p_2 hyp_1 hyp_3 hyp_4 (thm_403 B A p_2 hyp_2).

(; Theorem: |- ((= y1) y2) ;)

(; dict ;)

def thm_699 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> y2_3 : hol.term B -> y1_4 : hol.term B -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_2 x_6 (f_5 x_6)))) -> hyp_3 : hol.proof (p_2 x_1 y1_4) -> hyp_4 : hol.proof (p_2 x_1 y2_3) -> hol.proof (hol.eq B y1_4 y2_3) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => y2_3 : hol.term B => y1_4 : hol.term B => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_2 x_6 (f_5 x_6)))) => hyp_3 : hol.proof (p_2 x_1 y1_4) => hyp_4 : hol.proof (p_2 x_1 y2_3) => hol.PROVE_HYP (p_2 x_1 y2_3) (hol.eq B y1_4 y2_3) (thm_470 B A y2_3 x_1 p_2 hyp_4) (hyp_5 : hol.proof (p_2 x_1 y2_3) => thm_698 A B x_1 p_2 y2_3 y1_4 hyp_1 hyp_2 hyp_3 hyp_5).

(; Theorem: |- ((= y1) y2) ;)

(; dict ;)

def thm_700 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> y2_3 : hol.term B -> y1_4 : hol.term B -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_2 x_6 (f_5 x_6)))) -> hyp_3 : hol.proof (p_2 x_1 y1_4) -> hyp_4 : hol.proof (p_2 x_1 y2_3) -> hol.proof (hol.eq B y1_4 y2_3) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => y2_3 : hol.term B => y1_4 : hol.term B => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_2 x_6 (f_5 x_6)))) => hyp_3 : hol.proof (p_2 x_1 y1_4) => hyp_4 : hol.proof (p_2 x_1 y2_3) => hol.PROVE_HYP (p_2 x_1 y1_4) (hol.eq B y1_4 y2_3) (thm_469 B A y1_4 x_1 p_2 hyp_3) (hyp_5 : hol.proof (p_2 x_1 y1_4) => thm_699 A B x_1 p_2 y2_3 y1_4 hyp_1 hyp_2 hyp_5 hyp_4).

(; Theorem: |- ((= y1) y2) ;)

(; dict ;)

def thm_701 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> y2_3 : hol.term B -> y1_4 : hol.term B -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_2 x_6 (f_5 x_6)))) -> hyp_3 : hol.proof (p_2 x_1 y1_4) -> hyp_4 : hol.proof (hol.and (p_2 x_1 y1_4) (p_2 x_1 y2_3)) -> hol.proof (hol.eq B y1_4 y2_3) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => y2_3 : hol.term B => y1_4 : hol.term B => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_2 x_6 (f_5 x_6)))) => hyp_3 : hol.proof (p_2 x_1 y1_4) => hyp_4 : hol.proof (hol.and (p_2 x_1 y1_4) (p_2 x_1 y2_3)) => hol.PROVE_HYP (p_2 x_1 y2_3) (hol.eq B y1_4 y2_3) (thm_468 B A y1_4 y2_3 x_1 p_2 hyp_4) (hyp_5 : hol.proof (p_2 x_1 y2_3) => thm_700 A B x_1 p_2 y2_3 y1_4 hyp_1 hyp_2 hyp_3 hyp_5).

(; Theorem: |- ((= y1) y2) ;)

(; dict ;)

def thm_702 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> y2_3 : hol.term B -> y1_4 : hol.term B -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_2 x_6 (f_5 x_6)))) -> hyp_3 : hol.proof (hol.and (p_2 x_1 y1_4) (p_2 x_1 y2_3)) -> hol.proof (hol.eq B y1_4 y2_3) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => y2_3 : hol.term B => y1_4 : hol.term B => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_2 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_2 x_6 (f_5 x_6)))) => hyp_3 : hol.proof (hol.and (p_2 x_1 y1_4) (p_2 x_1 y2_3)) => hol.PROVE_HYP (p_2 x_1 y1_4) (hol.eq B y1_4 y2_3) (thm_466 B A y2_3 y1_4 x_1 p_2 hyp_3) (hyp_4 : hol.proof (p_2 x_1 y1_4) => thm_701 A B x_1 p_2 y2_3 y1_4 hyp_1 hyp_2 hyp_4 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) y2))) ((= y1) y2)) ;)

(; dict ;)

def thm_703 : B : hol.type -> A : hol.type -> y2_1 : hol.term B -> y1_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_4 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_4 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_4 x_6 (f_5 x_6)))) -> hol.proof (hol.imp (hol.and (p_4 x_3 y1_2) (p_4 x_3 y2_1)) (hol.eq B y1_2 y2_1)) :=
  B : hol.type => A : hol.type => y2_1 : hol.term B => y1_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_5 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_6 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_7 : hol.term A => p_4 x__1_7 (f__1_5 x__1_7))) (hol.forall A (x__1_7 : hol.term A => p_4 x__1_7 (x_27_6 x__1_7)))) (hol.eq (hol.arr A B) f__1_5 x_27_6)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.forall A (x_6 : hol.term A => p_4 x_6 (f_5 x_6)))) => hyp_3 : hol.proof (hol.and (p_4 x_3 y1_2) (p_4 x_3 y2_1)) => thm_702 A B x_3 p_4 y2_1 y1_2 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda y2. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) y2))) ((= y1) y2))) ;)

(; dict ;)

def thm_704 : A : hol.type -> B : hol.type -> y1_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_4 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_5 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_6 : hol.term A => p_3 x__1_6 (f__1_4 x__1_6))) (hol.forall A (x__1_6 : hol.term A => p_3 x__1_6 (x_27_5 x__1_6)))) (hol.eq (hol.arr A B) f__1_4 x_27_5)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5)))) -> hol.proof (hol.forall B (y2_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 y2_4)) (hol.eq B y1_1 y2_4))) :=
  A : hol.type => B : hol.type => y1_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_4 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_5 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_6 : hol.term A => p_3 x__1_6 (f__1_4 x__1_6))) (hol.forall A (x__1_6 : hol.term A => p_3 x__1_6 (x_27_5 x__1_6)))) (hol.eq (hol.arr A B) f__1_4 x_27_5)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5)))) => y2_4 : hol.term B => thm_703 B A y2_4 y1_1 x_2 p_3 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) x'))) ((= y1) x'))) ;)

(; dict ;)

def thm_705 : A : hol.type -> B : hol.type -> y1_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_4 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_5 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_6 : hol.term A => p_3 x__1_6 (f__1_4 x__1_6))) (hol.forall A (x__1_6 : hol.term A => p_3 x__1_6 (x_27_5 x__1_6)))) (hol.eq (hol.arr A B) f__1_4 x_27_5)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5)))) -> hol.proof (hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 x_27_4)) (hol.eq B y1_1 x_27_4))) :=
  A : hol.type => B : hol.type => y1_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_4 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_5 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_6 : hol.term A => p_3 x__1_6 (f__1_4 x__1_6))) (hol.forall A (x__1_6 : hol.term A => p_3 x__1_6 (x_27_5 x__1_6)))) (hol.eq (hol.arr A B) f__1_4 x_27_5)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => p_3 x_5 (f_4 x_5)))) => hol.EQ_MP (hol.forall B (y2_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 y2_4)) (hol.eq B y1_1 y2_4))) (hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y1_1) (p_3 x_2 x_27_4)) (hol.eq B y1_1 x_27_4))) (thm_463 A B y1_1 x_2 p_3) (thm_704 A B y1_1 x_2 p_3 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda y1. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y1)) ((p x) x'))) ((= y1) x')))) ;)

(; dict ;)

def thm_706 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_3 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_4 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_5 : hol.term A => p_2 x__1_5 (f__1_3 x__1_5))) (hol.forall A (x__1_5 : hol.term A => p_2 x__1_5 (x_27_4 x__1_5)))) (hol.eq (hol.arr A B) f__1_3 x_27_4)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4)))) -> hol.proof (hol.forall B (y1_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y1_3) (p_2 x_1 x_27_4)) (hol.eq B y1_3 x_27_4)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_3 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_4 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_5 : hol.term A => p_2 x__1_5 (f__1_3 x__1_5))) (hol.forall A (x__1_5 : hol.term A => p_2 x__1_5 (x_27_4 x__1_5)))) (hol.eq (hol.arr A B) f__1_3 x_27_4)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4)))) => y1_3 : hol.term B => thm_705 A B y1_3 x_1 p_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) ;)

(; dict ;)

def thm_707 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_3 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_4 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_5 : hol.term A => p_2 x__1_5 (f__1_3 x__1_5))) (hol.forall A (x__1_5 : hol.term A => p_2 x__1_5 (x_27_4 x__1_5)))) (hol.eq (hol.arr A B) f__1_3 x_27_4)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4)))) -> hol.proof (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_3 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_4 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_5 : hol.term A => p_2 x__1_5 (f__1_3 x__1_5))) (hol.forall A (x__1_5 : hol.term A => p_2 x__1_5 (x_27_4 x__1_5)))) (hol.eq (hol.arr A B) f__1_3 x_27_4)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => p_2 x_4 (f_3 x_4)))) => hol.EQ_MP (hol.forall B (y1_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y1_3) (p_2 x_1 x_27_4)) (hol.eq B y1_3 x_27_4)))) (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4)))) (thm_459 A B x_1 p_2) (thm_706 A B x_1 p_2 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))) ;)

(; dict ;)

def thm_708 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_4 : hol.term A => p_1 x__1_4 (f__1_2 x__1_4))) (hol.forall A (x__1_4 : hol.term A => p_1 x__1_4 (x_27_3 x__1_4)))) (hol.eq (hol.arr A B) f__1_2 x_27_3)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_4 : hol.term A => p_1 x__1_4 (f__1_2 x__1_4))) (hol.forall A (x__1_4 : hol.term A => p_1 x__1_4 (x_27_3 x__1_4)))) (hol.eq (hol.arr A B) f__1_2 x_27_3)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => x_2 : hol.term A => thm_707 A B x_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_709 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_4 : hol.term A => p_1 x__1_4 (f__1_2 x__1_4))) (hol.forall A (x__1_4 : hol.term A => p_1 x__1_4 (x_27_3 x__1_4)))) (hol.eq (hol.arr A B) f__1_2 x_27_3)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f__1_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x__1_4 : hol.term A => p_1 x__1_4 (f__1_2 x__1_4))) (hol.forall A (x__1_4 : hol.term A => p_1 x__1_4 (x_27_3 x__1_4)))) (hol.eq (hol.arr A B) f__1_2 x_27_3)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (thm_455 B A p_1 hyp_2) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (thm_338 B A p_1) (thm_708 B A p_1 hyp_1 hyp_2)).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_710 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.PROVE_HYP (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (thm_404 B A p_1 hyp_1) (hyp_3 : hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) => thm_709 B A p_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_711 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (thm_403 B A p_1 hyp_2) (hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => thm_710 B A p_1 hyp_1 hyp_3).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_712 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) => hol.PROVE_HYP (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (thm_402 B A p_1 hyp_2) (hyp_3 : hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) => thm_711 B A p_1 hyp_3 hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_713 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (thm_395 B A p_1 hyp_1) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => thm_712 B A p_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ;)

(; dict ;)

def thm_714 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) => thm_713 B A p_1 hyp_1.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ;)

(; dict ;)

def thm_715 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))) ;)

(; dict ;)

def thm_716 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_393 q_1 p_2 hyp_1) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))) ;)

(; dict ;)

def thm_717 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) => hol.PROVE_HYP (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (thm_715 B A p_1 hyp_1) (hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) => thm_716 B A p_1 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))) ;)

(; dict ;)

def thm_718 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_400 p_1 q_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))) ;)

(; dict ;)

def thm_719 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) => hol.PROVE_HYP (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (thm_715 B A p_1 hyp_1) (hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) => thm_718 B A p_1 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))) ;)

(; dict ;)

def thm_720 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))) ;)

(; dict ;)

def thm_721 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))))) ;)

(; dict ;)

def thm_722 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (hol.and hol.true (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.APP_THM hol.bool hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (hol.and hol.true) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (thm_409 B A p_1 hyp_1) (thm_721 B A p_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))) ;)

(; dict ;)

def thm_723 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and hol.true (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (t_1 : hol.term hol.bool => thm_417 t_1) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))) ;)

(; dict ;)

def thm_724 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.TRANS hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (hol.and hol.true (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (thm_722 B A p_1 hyp_1) (thm_723 B A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))))) ;)

(; dict ;)

def thm_725 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.SYM hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (thm_724 B A p_1 hyp_1).

(; Theorem: |- ((= \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))) \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))) ;)

(; dict ;)

def thm_726 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3)) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL (hol.arr (hol.arr A B) hol.bool) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3)).

(; Theorem: |- ((= \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))) \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))) ;)

(; dict ;)

def thm_727 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3)) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3)) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3)) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3)) (thm_726 B A f_1 p_2) (thm_726 B A f_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))) (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))) ;)

(; dict ;)

def thm_728 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3))) (hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3)) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3)) (thm_350 B A) (thm_727 B A f_1 p_2).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x)))) ;)

(; dict ;)

def thm_729 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) -> hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((p x) (f x))) ;)

(; dict ;)

def thm_730 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) -> hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_393 q_1 p_2 hyp_1) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((p x) (f x))) ;)

(; dict ;)

def thm_731 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) -> hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) => hol.PROVE_HYP (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (thm_729 B A x_27_1 f_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) => thm_730 B A x_27_1 f_2 p_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. ((p x) (x' x))) ;)

(; dict ;)

def thm_732 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_27_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_2 x_4)))) -> hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_2 x_4))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_27_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_2 x_4)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_400 p_1 q_2 hyp_1) (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_2 x_4))) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((p x) (x' x))) ;)

(; dict ;)

def thm_733 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_27_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_2 x_4)))) -> hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_2 x_4))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_27_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_2 x_4)))) => hol.PROVE_HYP (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_2 x_4)))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_2 x_4))) (thm_729 B A x_27_2 f_1 p_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_2 x_4)))) => thm_732 B A f_1 x_27_2 p_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. ((p x) (x' x))) ;)

(; dict ;)

def thm_734 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3 (x_27_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3 (x_27_1 x_3))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 x_3 (x_27_1 x_3))) => hyp_1.

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_735 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_736 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_735 B A g_1 f_2) (thm_735 B A g_1 f_2).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_737 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_738 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_737 A y_1 x_2) (thm_737 A y_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_739 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => thm_23 A x_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_740 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_739 A x_2 y_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_741 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_2 y_1) (hol.eq hol.bool y_1 x_2)) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_738 A y_1 x_2) (thm_740 A y_1 x_2)) hol.bool y_1 x_2.

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_742 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => (y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => thm_741 y_1 x_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1).

(; Theorem: |- ((= \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_743 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (g_2 : hol.term (hol.arr A B) => thm_742 B A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_744 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (thm_350 B A) (thm_743 B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_745 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) hol.bool (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (f_1 : hol.term (hol.arr A B) => thm_744 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) ;)

(; dict ;)

def thm_746 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (thm_350 B A) (thm_745 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) ;)

(; dict ;)

def thm_747 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (thm_746 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) ;)

(; dict ;)

def thm_748 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (thm_747 B A) (thm_24 B A).

(; Theorem: |- (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_749 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_748 B A f_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_750 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_749 B A f_2 g_1.

(; Theorem: |- ((= ((= f) x')) (Data.Bool.! \lambda x. ((= (f x)) (x' x)))) ;)

(; dict ;)

def thm_751 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 x_27_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3)))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_736 B A g_1 f_2) (thm_750 B A g_1 f_2)) B A g_1 f_2) B A x_27_1 f_2.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (f x)) (x' x)))) ((= f) x')) ;)

(; dict ;)

def thm_752 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3))) (hol.eq (hol.arr A B) f_2 x_27_1)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.SYM hol.bool (hol.eq (hol.arr A B) f_2 x_27_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3))) (thm_751 B A x_27_1 f_2).

(; Theorem: |- ((= \lambda x. ((= (f x)) (x' x))) \lambda x. ((= (f x)) (x' x))) ;)

(; dict ;)

def thm_753 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3)) (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3)).

(; Theorem: |- ((= \lambda x. ((= (f x)) (x' x))) \lambda x. ((= (f x)) (x' x))) ;)

(; dict ;)

def thm_754 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3)) (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3)) (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3)) (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3)) (thm_753 B A x_27_1 f_2) (thm_753 B A x_27_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (f x)) (x' x)))) (Data.Bool.! \lambda x. ((= (f x)) (x' x)))) ;)

(; dict ;)

def thm_755 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3)))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3)) (x_3 : hol.term A => hol.eq B (f_2 x_3) (x_27_1 x_3)) (thm_51 A) (thm_754 B A x_27_1 f_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')))) ((= y) x'))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')))) ((= y) x'))) ;)

(; dict ;)

def thm_756 : B : hol.type -> A : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) (hol.eq B y_2 x_27_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) (hol.eq B y_2 x_27_1))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) (hol.eq B y_2 x_27_1)).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')))) ((= y) x'))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')))) ((= y) x'))) ;)

(; dict ;)

def thm_757 : B : hol.type -> A : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) (hol.eq B y_2 x_27_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) (hol.eq B y_2 x_27_1))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) (hol.eq B y_2 x_27_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) (hol.eq B y_2 x_27_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) (hol.eq B y_2 x_27_1)) (thm_756 B A x_27_1 y_2 p_3) (thm_756 B A x_27_1 y_2 p_3).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')) x)) ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ((= y) x'))))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')))) ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ((= y) x')))) ;)

(; dict ;)

def thm_758 : B : hol.type -> A : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.and (p_3 x_5 y_2) (p_3 x_5 x_27_1)) x_4) (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_3 x_5 y_6) (p_3 x_5 x_27_7)) (hol.eq B y_6 x_27_7))))) (hol.eq B y_2 x_27_1)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) (hol.imp (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_3 x_4 y_5) (p_3 x_4 x_27_6)) (hol.eq B y_5 x_27_6))))) (hol.eq B y_2 x_27_1)))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_48 A Q_1 P_2) A (hol.imp (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_3 x_4 y_5) (p_3 x_4 x_27_6)) (hol.eq B y_5 x_27_6))))) (hol.eq B y_2 x_27_1)) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1)).

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))) ;)

(; dict ;)

def thm_759 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_2 x_3 y_4) (p_2 x_3 x_27_5)) (hol.eq B y_4 x_27_5))))) -> hol.proof (hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_2 x_1 y_3) (p_2 x_1 x_27_4)) (hol.eq B y_3 x_27_4)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_2 x_3 y_4) (p_2 x_3 x_27_5)) (hol.eq B y_4 x_27_5))))) => thm_720 B A p_2 hyp_1 x_1.

(; Theorem: |- (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))) ;)

(; dict ;)

def thm_760 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_3 x_4 y_5) (p_3 x_4 x_27_6)) (hol.eq B y_5 x_27_6))))) -> hol.proof (hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_3 x_2 y_1) (p_3 x_2 x_27_4)) (hol.eq B y_1 x_27_4))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_3 x_4 y_5) (p_3 x_4 x_27_6)) (hol.eq B y_5 x_27_6))))) => thm_759 A B x_2 p_3 hyp_1 y_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')) ;)

(; dict ;)

def thm_761 : B : hol.type -> A : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_4 x_5 y_6) (p_4 x_5 x_27_7)) (hol.eq B y_6 x_27_7))))) -> hol.proof (hol.imp (hol.and (p_4 x_3 y_2) (p_4 x_3 x_27_1)) (hol.eq B y_2 x_27_1)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_4 x_5 y_6) (p_4 x_5 x_27_7)) (hol.eq B y_6 x_27_7))))) => thm_760 A B y_2 x_3 p_4 hyp_1 x_27_1.

(; Theorem: |- ((Data.Bool./\ ((p x) y)) ((p x) x')) ;)

(; dict ;)

def thm_762 : B : hol.type -> A : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (p_4 x_3 y_2) (p_4 x_3 x_27_1)) -> hol.proof (hol.and (p_4 x_3 y_2) (p_4 x_3 x_27_1)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (p_4 x_3 y_2) (p_4 x_3 x_27_1)) => hyp_1.

(; Theorem: |- ((= y) x') ;)

(; dict ;)

def thm_763 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_27_3 : hol.term B -> y_4 : hol.term B -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_2 x_5 y_6) (p_2 x_5 x_27_7)) (hol.eq B y_6 x_27_7))))) -> hyp_2 : hol.proof (hol.and (p_2 x_1 y_4) (p_2 x_1 x_27_3)) -> hol.proof (hol.eq B y_4 x_27_3) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_27_3 : hol.term B => y_4 : hol.term B => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_2 x_5 y_6) (p_2 x_5 x_27_7)) (hol.eq B y_6 x_27_7))))) => hyp_2 : hol.proof (hol.and (p_2 x_1 y_4) (p_2 x_1 x_27_3)) => thm_761 B A x_27_3 y_4 x_1 p_2 hyp_1 (thm_762 B A x_27_3 y_4 x_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ((= y) x')) ;)

(; dict ;)

def thm_764 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term B -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (p_4 x_1 y_3) (p_4 x_1 x_27_2)) -> hol.proof (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_4 x_5 y_6) (p_4 x_5 x_27_7)) (hol.eq B y_6 x_27_7))))) (hol.eq B y_3 x_27_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => x_27_2 : hol.term B => y_3 : hol.term B => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (p_4 x_1 y_3) (p_4 x_1 x_27_2)) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_4 x_5 y_6) (p_4 x_5 x_27_7)) (hol.eq B y_6 x_27_7))))) => thm_763 A B x_1 p_4 x_27_2 y_3 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ((= y) x'))) ;)

(; dict ;)

def thm_765 : B : hol.type -> A : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.and (p_4 x_3 y_2) (p_4 x_3 x_27_1)) (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_4 x_5 y_6) (p_4 x_5 x_27_7)) (hol.eq B y_6 x_27_7))))) (hol.eq B y_2 x_27_1))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (p_4 x_3 y_2) (p_4 x_3 x_27_1)) => thm_764 B A x_3 x_27_1 y_2 p_4 hyp_1.

(; Theorem: |- ((= (\lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')) x)) ((Data.Bool./\ ((p x) y)) ((p x) x'))) ;)

(; dict ;)

def thm_766 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term B -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((x_5 : hol.term A => hol.and (p_4 x_5 y_3) (p_4 x_5 x_27_2)) x_1) (hol.and (p_4 x_1 y_3) (p_4 x_1 x_27_2))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => x_27_2 : hol.term B => y_3 : hol.term B => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV A hol.bool (x_5 : hol.term A => hol.and (p_4 x_5 y_3) (p_4 x_5 x_27_2)) x_1.

(; Theorem: |- (\lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')) x) ;)

(; dict ;)

def thm_767 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term B -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((x_5 : hol.term A => hol.and (p_4 x_5 y_3) (p_4 x_5 x_27_2)) x_1) -> hol.proof ((x_5 : hol.term A => hol.and (p_4 x_5 y_3) (p_4 x_5 x_27_2)) x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => x_27_2 : hol.term B => y_3 : hol.term B => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_5 : hol.term A => hol.and (p_4 x_5 y_3) (p_4 x_5 x_27_2)) x_1) => hyp_1.

(; Theorem: |- ((Data.Bool./\ ((p x) y)) ((p x) x')) ;)

(; dict ;)

def thm_768 : B : hol.type -> A : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((x_5 : hol.term A => hol.and (p_4 x_5 y_2) (p_4 x_5 x_27_1)) x_3) -> hol.proof (hol.and (p_4 x_3 y_2) (p_4 x_3 x_27_1)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_5 : hol.term A => hol.and (p_4 x_5 y_2) (p_4 x_5 x_27_1)) x_3) => hol.EQ_MP ((x_5 : hol.term A => hol.and (p_4 x_5 y_2) (p_4 x_5 x_27_1)) x_3) (hol.and (p_4 x_3 y_2) (p_4 x_3 x_27_1)) (thm_766 B A x_3 x_27_1 y_2 p_4) (thm_767 B A x_3 x_27_1 y_2 p_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ((= y) x')) ;)

(; dict ;)

def thm_769 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term B -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((x_5 : hol.term A => hol.and (p_4 x_5 y_3) (p_4 x_5 x_27_2)) x_1) -> hol.proof (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_4 x_5 y_6) (p_4 x_5 x_27_7)) (hol.eq B y_6 x_27_7))))) (hol.eq B y_3 x_27_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => x_27_2 : hol.term B => y_3 : hol.term B => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_5 : hol.term A => hol.and (p_4 x_5 y_3) (p_4 x_5 x_27_2)) x_1) => thm_765 B A x_27_2 y_3 x_1 p_4 (thm_768 B A x_27_2 y_3 x_1 p_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')) x)) ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ((= y) x'))) ;)

(; dict ;)

def thm_770 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term B -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp ((x_5 : hol.term A => hol.and (p_4 x_5 y_3) (p_4 x_5 x_27_2)) x_1) (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_4 x_5 y_6) (p_4 x_5 x_27_7)) (hol.eq B y_6 x_27_7))))) (hol.eq B y_3 x_27_2))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => x_27_2 : hol.term B => y_3 : hol.term B => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_5 : hol.term A => hol.and (p_4 x_5 y_3) (p_4 x_5 x_27_2)) x_1) => thm_769 B A x_1 x_27_2 y_3 p_4 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')) x)) ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ((= y) x')))) ;)

(; dict ;)

def thm_771 : B : hol.type -> A : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.and (p_3 x_5 y_2) (p_3 x_5 x_27_1)) x_4) (hol.imp (hol.forall A (x_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_3 x_5 y_6) (p_3 x_5 x_27_7)) (hol.eq B y_6 x_27_7))))) (hol.eq B y_2 x_27_1)))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_4 : hol.term A => thm_770 B A x_4 x_27_1 y_2 p_3.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')))) ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ((= y) x'))) ;)

(; dict ;)

def thm_772 : B : hol.type -> A : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) (hol.imp (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_3 x_4 y_5) (p_3 x_4 x_27_6)) (hol.eq B y_5 x_27_6))))) (hol.eq B y_2 x_27_1))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_758 B A x_27_1 y_2 p_3 (thm_771 B A x_27_1 y_2 p_3).

(; Theorem: |- (Data.Bool.? \lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x'))) ;)

(; dict ;)

def thm_773 : B : hol.type -> A : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) ((= y) x')) ;)

(; dict ;)

def thm_774 : B : hol.type -> A : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_3 x_4 y_5) (p_3 x_4 x_27_6)) (hol.eq B y_5 x_27_6))))) (hol.eq B y_2 x_27_1)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) => thm_772 B A x_27_1 y_2 p_3 (thm_773 B A x_27_1 y_2 p_3 hyp_1).

(; Theorem: |- ((= y) x') ;)

(; dict ;)

def thm_775 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_27_2 : hol.term B -> y_3 : hol.term B -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x_4 y_5) (p_1 x_4 x_27_6)) (hol.eq B y_5 x_27_6))))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_1 x_4 y_3) (p_1 x_4 x_27_2))) -> hol.proof (hol.eq B y_3 x_27_2) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_27_2 : hol.term B => y_3 : hol.term B => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x_4 y_5) (p_1 x_4 x_27_6)) (hol.eq B y_5 x_27_6))))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_1 x_4 y_3) (p_1 x_4 x_27_2))) => thm_774 B A x_27_2 y_3 p_1 hyp_2 (thm_720 B A p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')))) ((= y) x')) ;)

(; dict ;)

def thm_776 : B : hol.type -> A : hol.type -> x_27_1 : hol.term B -> y_2 : hol.term B -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_3 x_4 y_5) (p_3 x_4 x_27_6)) (hol.eq B y_5 x_27_6))))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) (hol.eq B y_2 x_27_1)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_3 x_4 y_5) (p_3 x_4 x_27_6)) (hol.eq B y_5 x_27_6))))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) => thm_775 A B p_3 x_27_1 y_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x'. ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')))) ((= y) x'))) ;)

(; dict ;)

def thm_777 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_2 x_3 y_4) (p_2 x_3 x_27_5)) (hol.eq B y_4 x_27_5))))) -> hol.proof (hol.forall B (x_27_3 : hol.term B => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_2 x_4 y_1) (p_2 x_4 x_27_3))) (hol.eq B y_1 x_27_3))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_2 x_3 y_4) (p_2 x_3 x_27_5)) (hol.eq B y_4 x_27_5))))) => x_27_3 : hol.term B => thm_776 B A x_27_3 y_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')))) ((= y) x')))) ;)

(; dict ;)

def thm_778 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) -> hol.proof (hol.forall B (y_2 : hol.term B => hol.forall B (x_27_3 : hol.term B => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_1 x_4 y_2) (p_1 x_4 x_27_3))) (hol.eq B y_2 x_27_3)))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) => y_2 : hol.term B => thm_777 A B y_2 p_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x')))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> (Data.Bool.? \lambda x. ((Data.Bool./\ ((p x) y)) ((p x) x')))) ((= y) x'))))) ;)

(; dict ;)

def thm_779 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (hol.forall B (y_2 : hol.term B => hol.forall B (x_27_3 : hol.term B => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_1 x_4 y_2) (p_1 x_4 x_27_3))) (hol.eq B y_2 x_27_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) => thm_778 A B p_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x_1. ((Data.Bool./\ ((p x_1) (f x))) ((p x_1) (x' x))))) ((= (f x)) (x' x))) ;)

(; dict ;)

def thm_780 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_4 x__1_5 y_6) (p_4 x__1_5 x_27_7)) (hol.eq B y_6 x_27_7))))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_5 : hol.term A => hol.and (p_4 x__1_5 (f_3 x_2)) (p_4 x__1_5 (x_27_1 x_2)))) (hol.eq B (f_3 x_2) (x_27_1 x_2))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_4 x__1_5 y_6) (p_4 x__1_5 x_27_7)) (hol.eq B y_6 x_27_7))))) => (B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_3 x_4 y_5) (p_3 x_4 x_27_6)) (hol.eq B y_5 x_27_6))))) => (B : hol.type => A : hol.type => x_27_1 : hol.term B => y_2 : hol.term B => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_3 x_4 y_5) (p_3 x_4 x_27_6)) (hol.eq B y_5 x_27_6))))) => hol.EQ_MP (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) (hol.eq B y_2 x_27_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4 y_2) (p_3 x_4 x_27_1))) (hol.eq B y_2 x_27_1)) (thm_757 B A x_27_1 y_2 p_3) (thm_779 B A p_3 (thm_720 B A p_3 hyp_1) y_2 x_27_1)) B A x_27_1 y_2 p_3 hyp_1) B A (x_27_1 x_2) (f_3 x_2) p_4 hyp_1.

(; Theorem: |- ((= (\lambda x'. ((Data.Bool./\ ((p x') (f x))) ((p x') (x' x))) x)) ((Data.Bool./\ ((p x) (f x))) ((p x) (x' x)))) ;)

(; dict ;)

def thm_781 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool ((x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_3 x_2)) (p_4 x_27_5 (x_27_1 x_2))) x_2) (hol.and (p_4 x_2 (f_3 x_2)) (p_4 x_2 (x_27_1 x_2)))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.BETA_CONV A hol.bool (x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_3 x_2)) (p_4 x_27_5 (x_27_1 x_2))) x_2.

(; Theorem: |- ((= ((Data.Bool./\ ((p x) (f x))) ((p x) (x' x)))) (\lambda x'. ((Data.Bool./\ ((p x') (f x))) ((p x') (x' x))) x)) ;)

(; dict ;)

def thm_782 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and (p_4 x_3 (f_2 x_3)) (p_4 x_3 (x_27_1 x_3))) ((x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_2 x_3)) (p_4 x_27_5 (x_27_1 x_3))) x_3)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.SYM hol.bool ((x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_2 x_3)) (p_4 x_27_5 (x_27_1 x_3))) x_3) (hol.and (p_4 x_3 (f_2 x_3)) (p_4 x_3 (x_27_1 x_3))) (thm_781 B A x_27_1 x_3 f_2 p_4).

(; Theorem: |- ((= (Data.Bool./\ ((p x) (f x)))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_783 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (p_3 x_2 (f_1 x_2))) (hol.and hol.true)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_1 x_4))) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (p_3 x_2 (f_1 x_2)) hol.true thm_290 (thm_530 B A f_1 x_2 p_3 hyp_1).

(; Theorem: |- ((= ((= ((p x) (x' x))) Data.Bool.T)) ((= ((p x) (x' x))) Data.Bool.T)) ;)

(; dict ;)

def thm_784 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) hol.true) (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) hol.true)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) hol.true).

(; Theorem: |- ((= ((= ((p x) (x' x))) Data.Bool.T)) ((= ((p x) (x' x))) Data.Bool.T)) ;)

(; dict ;)

def thm_785 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) hol.true) (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) hol.true)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) hol.true) (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) hol.true) (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) hol.true) (thm_784 B A x_27_1 x_2 p_3) (thm_784 B A x_27_1 x_2 p_3).

(; Theorem: |- ((= ((p x) (x' x))) ((= ((p x) (x' x))) Data.Bool.T)) ;)

(; dict ;)

def thm_786 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) hol.true)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => (t_1 : hol.term hol.bool => thm_119 t_1) (p_3 x_2 (x_27_1 x_2)).

(; Theorem: |- ((p x) (x' x)) ;)

(; dict ;)

def thm_787 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4))) -> hol.proof (p_3 x_2 (x_27_1 x_2)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4))) => thm_734 B A x_27_1 p_3 hyp_1 x_2.

(; Theorem: |- ((= ((p x) (x' x))) Data.Bool.T) ;)

(; dict ;)

def thm_788 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4))) -> hol.proof (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) hol.true) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4))) => hol.EQ_MP (p_3 x_2 (x_27_1 x_2)) (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) hol.true) (thm_786 B A x_27_1 x_2 p_3) (thm_787 B A x_27_1 x_2 p_3 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ ((p x) (f x))) ((p x) (x' x)))) ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_789 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_2 x_5))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (x_27_1 x_5))) -> hol.proof (hol.eq hol.bool (hol.and (p_4 x_3 (f_2 x_3)) (p_4 x_3 (x_27_1 x_3))) (hol.and hol.true hol.true)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_2 x_5))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (x_27_1 x_5))) => hol.APP_THM hol.bool hol.bool (hol.and (p_4 x_3 (f_2 x_3))) (hol.and hol.true) (p_4 x_3 (x_27_1 x_3)) hol.true (thm_783 B A f_2 x_3 p_4 hyp_1) ((B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4))) => hol.EQ_MP (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) hol.true) (hol.eq hol.bool (p_3 x_2 (x_27_1 x_2)) hol.true) (thm_785 B A x_27_1 x_2 p_3) (thm_788 B A x_27_1 x_2 p_3 hyp_1)) B A x_27_1 x_3 p_4 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_790 : hol.proof (hol.eq hol.bool (hol.and hol.true hol.true) hol.true) :=
  (t_1 : hol.term hol.bool => thm_417 t_1) hol.true.

(; Theorem: |- ((= ((Data.Bool./\ ((p x) (f x))) ((p x) (x' x)))) Data.Bool.T) ;)

(; dict ;)

def thm_791 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_2 x_5))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (x_27_1 x_5))) -> hol.proof (hol.eq hol.bool (hol.and (p_4 x_3 (f_2 x_3)) (p_4 x_3 (x_27_1 x_3))) hol.true) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_2 x_5))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (x_27_1 x_5))) => hol.TRANS hol.bool (hol.and (p_4 x_3 (f_2 x_3)) (p_4 x_3 (x_27_1 x_3))) (hol.and hol.true hol.true) hol.true (thm_789 B A x_27_1 f_2 x_3 p_4 hyp_1 hyp_2) thm_790.

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool./\ ((p x) (f x))) ((p x) (x' x)))) ;)

(; dict ;)

def thm_792 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_2 x_5))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (x_27_1 x_5))) -> hol.proof (hol.eq hol.bool hol.true (hol.and (p_4 x_3 (f_2 x_3)) (p_4 x_3 (x_27_1 x_3)))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_2 x_5))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (x_27_1 x_5))) => hol.SYM hol.bool (hol.and (p_4 x_3 (f_2 x_3)) (p_4 x_3 (x_27_1 x_3))) hol.true (thm_791 B A x_27_1 f_2 x_3 p_4 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool./\ ((p x) (f x))) ((p x) (x' x))) ;)

(; dict ;)

def thm_793 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_2 x_5))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (x_27_1 x_5))) -> hol.proof (hol.and (p_4 x_3 (f_2 x_3)) (p_4 x_3 (x_27_1 x_3))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => x_3 : hol.term A => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_2 x_5))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (x_27_1 x_5))) => hol.EQ_MP hol.true (hol.and (p_4 x_3 (f_2 x_3)) (p_4 x_3 (x_27_1 x_3))) (thm_792 B A x_27_1 f_2 x_3 p_4 hyp_1 hyp_2) thm_2.

(; Theorem: |- (\lambda x'. ((Data.Bool./\ ((p x') (f x))) ((p x') (x' x))) x) ;)

(; dict ;)

def thm_794 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_3 x_5))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (x_27_1 x_5))) -> hol.proof ((x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_3 x_2)) (p_4 x_27_5 (x_27_1 x_2))) x_2) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_3 x_5))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (x_27_1 x_5))) => hol.EQ_MP (hol.and (p_4 x_2 (f_3 x_2)) (p_4 x_2 (x_27_1 x_2))) ((x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_3 x_2)) (p_4 x_27_5 (x_27_1 x_2))) x_2) (thm_782 B A x_27_1 f_3 x_2 p_4) (thm_793 B A x_27_1 f_3 x_2 p_4 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x'. ((Data.Bool./\ ((p x') (f x))) ((p x') (x' x)))) ;)

(; dict ;)

def thm_795 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof ((x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_3 x_2)) (p_4 x_27_5 (x_27_1 x_2))) x_2) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_3 x_2)) (p_4 x_27_5 (x_27_1 x_2)))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof ((x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_3 x_2)) (p_4 x_27_5 (x_27_1 x_2))) x_2) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_67 A x_1 P_2 hyp_1) A x_2 (x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_3 x_2)) (p_4 x_27_5 (x_27_1 x_2))) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x'. ((Data.Bool./\ ((p x') (f x))) ((p x') (x' x)))) ;)

(; dict ;)

def thm_796 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_3 x_5))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (x_27_1 x_5))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_3 x_2)) (p_4 x_27_5 (x_27_1 x_2)))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (f_3 x_5))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 x_5 (x_27_1 x_5))) => hol.PROVE_HYP ((x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_3 x_2)) (p_4 x_27_5 (x_27_1 x_2))) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_3 x_2)) (p_4 x_27_5 (x_27_1 x_2)))) (thm_794 B A x_27_1 x_2 f_3 p_4 hyp_1 hyp_2) (hyp_3 : hol.proof ((x_27_5 : hol.term A => hol.and (p_4 x_27_5 (f_3 x_2)) (p_4 x_27_5 (x_27_1 x_2))) x_2) => thm_795 B A x_27_1 x_2 f_3 p_4 hyp_3).

(; Theorem: |- ((= (f x)) (x' x)) ;)

(; dict ;)

def thm_797 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_27_2 : hol.term (hol.arr A B) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_1 x__1_5 y_6) (p_1 x__1_5 x_27_7)) (hol.eq B y_6 x_27_7))))) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) -> hyp_3 : hol.proof (hol.forall A (x_5 : hol.term A => p_1 x_5 (x_27_2 x_5))) -> hol.proof (hol.eq B (f_4 x_3) (x_27_2 x_3)) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_27_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall B (y_6 : hol.term B => hol.forall B (x_27_7 : hol.term B => hol.imp (hol.and (p_1 x__1_5 y_6) (p_1 x__1_5 x_27_7)) (hol.eq B y_6 x_27_7))))) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => p_1 x_5 (f_4 x_5))) => hyp_3 : hol.proof (hol.forall A (x_5 : hol.term A => p_1 x_5 (x_27_2 x_5))) => thm_780 B A x_27_2 x_3 f_4 p_1 hyp_1 (thm_796 B A x_27_2 x_3 f_4 p_1 hyp_2 hyp_3).

(; Theorem: |- (Data.Bool.! \lambda x. ((= (f x)) (x' x))) ;)

(; dict ;)

def thm_798 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_27_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x__1_4 y_5) (p_1 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) -> hyp_3 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4))) -> hol.proof (hol.forall A (x_4 : hol.term A => hol.eq B (f_3 x_4) (x_27_2 x_4))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_27_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x__1_4 y_5) (p_1 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) => hyp_3 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4))) => x_4 : hol.term A => thm_797 A B p_1 x_27_2 x_4 f_3 hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((= f) x') ;)

(; dict ;)

def thm_799 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_27_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x__1_4 y_5) (p_1 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) -> hyp_3 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4))) -> hol.proof (hol.eq (hol.arr A B) f_3 x_27_2) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_27_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x__1_4 y_5) (p_1 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) => hyp_3 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4))) => hol.EQ_MP (hol.forall A (x_4 : hol.term A => hol.eq B (f_3 x_4) (x_27_2 x_4))) (hol.eq (hol.arr A B) f_3 x_27_2) (thm_752 B A x_27_2 f_3) (hol.EQ_MP (hol.forall A (x_4 : hol.term A => hol.eq B (f_3 x_4) (x_27_2 x_4))) (hol.forall A (x_4 : hol.term A => hol.eq B (f_3 x_4) (x_27_2 x_4))) (thm_755 B A x_27_2 f_3) (thm_798 B A p_1 x_27_2 f_3 hyp_1 hyp_2 hyp_3)).

(; Theorem: |- ((= f) x') ;)

(; dict ;)

def thm_800 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_27_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x__1_4 y_5) (p_1 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) -> hyp_3 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4))) -> hol.proof (hol.eq (hol.arr A B) f_3 x_27_2) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_27_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x__1_4 y_5) (p_1 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) => hyp_3 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4))) => hol.PROVE_HYP (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4))) (hol.eq (hol.arr A B) f_3 x_27_2) (thm_734 B A x_27_2 p_1 hyp_3) (hyp_4 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4))) => thm_799 B A p_1 x_27_2 f_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((= f) x') ;)

(; dict ;)

def thm_801 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_27_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x__1_4 y_5) (p_1 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) -> hyp_3 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4))) -> hol.proof (hol.eq (hol.arr A B) f_3 x_27_2) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_27_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x__1_4 y_5) (p_1 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) => hyp_3 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4))) => hol.PROVE_HYP (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) (hol.eq (hol.arr A B) f_3 x_27_2) (thm_528 B A f_3 p_1 hyp_2) (hyp_4 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) => thm_800 B A p_1 x_27_2 f_3 hyp_1 hyp_4 hyp_3).

(; Theorem: |- ((= f) x') ;)

(; dict ;)

def thm_802 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_27_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x__1_4 y_5) (p_1 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) -> hyp_3 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4)))) -> hol.proof (hol.eq (hol.arr A B) f_3 x_27_2) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_27_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x__1_4 y_5) (p_1 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) => hyp_3 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4)))) => hol.PROVE_HYP (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4))) (hol.eq (hol.arr A B) f_3 x_27_2) (thm_733 B A f_3 x_27_2 p_1 hyp_3) (hyp_4 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4))) => thm_801 B A p_1 x_27_2 f_3 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((= f) x') ;)

(; dict ;)

def thm_803 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> x_27_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x__1_4 y_5) (p_1 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) -> hyp_2 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4)))) -> hol.proof (hol.eq (hol.arr A B) f_3 x_27_2) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => x_27_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_1 x__1_4 y_5) (p_1 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) => hyp_2 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_2 x_4)))) => hol.PROVE_HYP (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) (hol.eq (hol.arr A B) f_3 x_27_2) (thm_731 B A x_27_2 f_3 p_1 hyp_2) (hyp_3 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_3 x_4))) => thm_802 B A p_1 x_27_2 f_3 hyp_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')) ;)

(; dict ;)

def thm_804 : B : hol.type -> A : hol.type -> x_27_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_3 x__1_4 y_5) (p_3 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) -> hol.proof (hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_1)) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_4 : hol.term A => hol.forall B (y_5 : hol.term B => hol.forall B (x_27_6 : hol.term B => hol.imp (hol.and (p_3 x__1_4 y_5) (p_3 x__1_4 x_27_6)) (hol.eq B y_5 x_27_6))))) => hyp_2 : hol.proof (hol.and (hol.forall A (x_4 : hol.term A => p_3 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_3 x_4 (x_27_1 x_4)))) => thm_803 B A p_3 x_27_1 f_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))) ;)

(; dict ;)

def thm_805 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_2 x__1_3 y_4) (p_2 x__1_3 x_27_5)) (hol.eq B y_4 x_27_5))))) -> hol.proof (hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_2 x_4 (f_1 x_4))) (hol.forall A (x_4 : hol.term A => p_2 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_1 x_27_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_3 : hol.term A => hol.forall B (y_4 : hol.term B => hol.forall B (x_27_5 : hol.term B => hol.imp (hol.and (p_2 x__1_3 y_4) (p_2 x__1_3 x_27_5)) (hol.eq B y_4 x_27_5))))) => x_27_3 : hol.term (hol.arr A B) => thm_804 B A x_27_3 f_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))) ;)

(; dict ;)

def thm_806 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x__1_2 y_3) (p_1 x__1_2 x_27_4)) (hol.eq B y_3 x_27_4))))) -> hol.proof (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x__1_2 y_3) (p_1 x__1_2 x_27_4)) (hol.eq B y_3 x_27_4))))) => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))) (hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))) (thm_728 B A f_2 p_1) (thm_805 B A f_2 p_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))) ;)

(; dict ;)

def thm_807 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x__1_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x__1_2 y_3) (p_1 x__1_2 x_27_4)) (hol.eq B y_3 x_27_4))))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x__1_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x__1_2 y_3) (p_1 x__1_2 x_27_4)) (hol.eq B y_3 x_27_4))))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.EQ_MP (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (thm_725 B A p_1 hyp_2) (hol.EQ_MP (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))) (thm_721 B A p_1) (thm_806 B A p_1 hyp_1)).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))) ;)

(; dict ;)

def thm_808 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.PROVE_HYP (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (thm_720 B A p_1 hyp_1) (hyp_3 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) => thm_807 B A p_1 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))) ;)

(; dict ;)

def thm_809 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (thm_403 B A p_1 hyp_2) (hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => thm_808 B A p_1 hyp_1 hyp_3).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))) ;)

(; dict ;)

def thm_810 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) -> hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => hyp_2 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) => hol.PROVE_HYP (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (thm_719 B A p_1 hyp_2) (hyp_3 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4))))) => thm_809 B A p_1 hyp_3 hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x'))))) ;)

(; dict ;)

def thm_811 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (thm_717 B A p_1 hyp_1) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) => thm_810 B A p_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))))) ;)

(; dict ;)

def thm_812 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.imp (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) => thm_811 B A p_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ ((p x) y)) ((p x) x'))) ((= y) x'))))))) ((Data.Bool./\ (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.! \lambda x. ((p x) (f x)))) (Data.Bool.! \lambda x. ((p x) (x' x))))) ((= f) x')))))) ;)

(; dict ;)

def thm_813 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.PROP_EXT (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) (hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3))))) => thm_714 B A p_1 (thm_371 B A p_1 hyp_1)) (hyp_1 : hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) => thm_812 B A p_1 (thm_715 B A p_1 hyp_1)).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x))))) ;)

(; dict ;)

def thm_814 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => hol.forall B (y_3 : hol.term B => hol.forall B (x_27_4 : hol.term B => hol.imp (hol.and (p_1 x_2 y_3) (p_1 x_2 x_27_4)) (hol.eq B y_3 x_27_4)))))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (x_27_3 : hol.term (hol.arr A B) => hol.imp (hol.and (hol.forall A (x_4 : hol.term A => p_1 x_4 (f_2 x_4))) (hol.forall A (x_4 : hol.term A => p_1 x_4 (x_27_3 x_4)))) (hol.eq (hol.arr A B) f_2 x_27_3)))))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3))))) (thm_370 B A p_1) (thm_813 B A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))))) ;)

(; dict ;)

def thm_815 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_814 B A p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.?! \lambda y. ((p x) y)))) (Data.Bool.?! \lambda f. (Data.Bool.! \lambda x. ((p x) (f x)))))) ;)

(; thm ;)

def thm_816 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F_21 (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_1 x_2 y_3))) (Data_2EBool_2E_3F_21 (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => p_1 x_3 (f_2 x_3)))))) (thm_289 B A) (thm_815 B A).
