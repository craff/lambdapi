
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME bool_2Dint.

(; axiom ;)

thm_0 : hol.proof (hol.eq hol.bool hol.true (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.imp x_1 x_1))).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> x) x))) Data.Bool.T) ;)

(; dict ;)

def thm_1 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.imp x_1 x_1)) hol.true) :=
  hol.SYM hol.bool hol.true (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.imp x_1 x_1)) thm_0.

(; Theorem: |- x ;)

(; dict ;)

def thm_2 : x_1 : hol.term hol.bool -> hyp_1 : hol.proof x_1 -> hol.proof x_1 :=
  x_1 : hol.term hol.bool => hyp_1 : hol.proof x_1 => hyp_1.

(; Theorem: |- ((Data.Bool.==> x) x) ;)

(; dict ;)

def thm_3 : x_1 : hol.term hol.bool -> hol.proof (hol.imp x_1 x_1) :=
  x_1 : hol.term hol.bool => hyp_1 : hol.proof x_1 => thm_2 x_1 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> x) x)) ;)

(; dict ;)

def thm_4 : hol.proof (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.imp x_1 x_1)) :=
  x_1 : hol.term hol.bool => thm_3 x_1.

(; Theorem: |- Data.Bool.T ;)

(; dict ;)

def thm_5 : hol.proof hol.true :=
  hol.EQ_MP (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.imp x_1 x_1)) hol.true thm_1 thm_4.
