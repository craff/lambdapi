
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME list_2Dlast_2Dthm.

Data_2EList_2Elist : hol.type -> hol.type.

Data_2EList_2E_5B_5D : A : hol.type -> hol.term A.

Data_2EList_2Elast : A : hol.type -> hol.term A.

Data_2EList_2E_3A_3A : A : hol.type -> hol.term A.

Data_2EList_2Enull : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) t_2) h_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) t_2))))).

(; axiom ;)

thm_1 : hol.proof hol.true.

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))).

(; axiom ;)

thm_3 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2))))).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))).

(; axiom ;)

thm_7 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; axiom ;)

thm_8 : hol.proof (hol.eq hol.bool hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1))).

(; axiom ;)

thm_9 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not (p_1 : hol.term hol.bool => hol.imp p_1 hol.false)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_10 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_11 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A hol.bool)) (hol.eq A) (hol.eq A)) :=
  A : hol.type => hol.REFL (hol.arr A (hol.arr A hol.bool)) (hol.eq A).

(; Theorem: |- ((= ((= (Data.List.last ((Data.List.:: h) t))) (((Data.Bool.cond (Data.List.null t)) h) (Data.List.last t)))) ((= (Data.List.last ((Data.List.:: h) t))) (((Data.Bool.cond (Data.List.null t)) h) (Data.List.last t)))) ;)

(; dict ;)

def thm_12 : A : hol.type -> t_1 : hol.term (Data_2EList_2Elist A) -> h_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) t_1) h_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) t_1))) (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) t_1) h_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) t_1)))) :=
  A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => hol.REFL hol.bool (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) t_1) h_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) t_1))).

(; Theorem: |- ((= ((= (Data.List.last ((Data.List.:: h) t))) (((Data.Bool.cond (Data.List.null t)) h) (Data.List.last t)))) ((= (Data.List.last ((Data.List.:: h) t))) (((Data.Bool.cond (Data.List.null t)) h) (Data.List.last t)))) ;)

(; dict ;)

def thm_13 : A : hol.type -> t_1 : hol.term (Data_2EList_2Elist A) -> h_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) t_1) h_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) t_1))) (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) t_1) h_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) t_1)))) :=
  A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) t_1) h_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) t_1))) (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) t_1) h_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) t_1))) (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) t_1) h_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) t_1))) (thm_12 A t_1 h_2) (thm_12 A t_1 h_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.List.last ((Data.List.:: h) t))) (((Data.Bool.cond (Data.List.null t)) h) (Data.List.last t)))) ;)

(; dict ;)

def thm_14 : A : hol.type -> h_1 : hol.term A -> hol.proof (hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) t_2) h_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) t_2)))) :=
  A : hol.type => h_1 : hol.term A => thm_0 A h_1.

(; Theorem: |- ((= (Data.List.last ((Data.List.:: h) t))) (((Data.Bool.cond (Data.List.null t)) h) (Data.List.last t))) ;)

(; dict ;)

def thm_15 : A : hol.type -> t_1 : hol.term (Data_2EList_2Elist A) -> h_2 : hol.term A -> hol.proof (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) t_1) h_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) t_1))) :=
  A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => thm_14 A h_2 t_1.

(; Theorem: |- ((= (Data.List.last ((Data.List.:: x) Data.List.[]))) (((Data.Bool.cond (Data.List.null Data.List.[])) x) (Data.List.last Data.List.[]))) ;)

(; dict ;)

def thm_16 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) x_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))))) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => (A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => hol.EQ_MP (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) t_1) h_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) t_1))) (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) t_1) h_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) t_1))) (thm_13 A t_1 h_2) (thm_15 A t_1 h_2)) A t_1 h_2) A (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)) x_1.

(; Theorem: |- ((= Data.Bool.cond) Data.Bool.cond) ;)

(; dict ;)

def thm_17 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (hol.cond A)) :=
  A : hol.type => hol.REFL (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A).

(; Theorem: |- ((= ((= (Data.List.null Data.List.[])) Data.Bool.T)) ((= (Data.List.null Data.List.[])) Data.Bool.T)) ;)

(; dict ;)

def thm_18 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true) (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true)) :=
  A : hol.type => hol.REFL hol.bool (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true).

(; Theorem: |- ((= ((= (Data.List.null Data.List.[])) Data.Bool.T)) ((= (Data.List.null Data.List.[])) Data.Bool.T)) ;)

(; dict ;)

def thm_19 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true) (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true)) :=
  A : hol.type => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true) (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true) (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true) (thm_18 A) (thm_18 A).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_20 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_21 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_20 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_22 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_21 t_1 hyp_1) thm_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_23 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_24 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_23 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_1).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_25 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_22 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_24 t_1 hyp_1).

(; Theorem: |- ((= (Data.List.null Data.List.[])) ((= (Data.List.null Data.List.[])) Data.Bool.T)) ;)

(; dict ;)

def thm_26 : A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true)) :=
  A : hol.type => (t_1 : hol.term hol.bool => thm_25 t_1) (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))).

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_27 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_28 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_29 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_27 q_1 p_2) (thm_28 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_30 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_31 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_32 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_30 p_1) (thm_31 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_33 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_34 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_3 (thm_33 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_35 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_32 p_1) (thm_34 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_36 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_37 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_35 p_2) (thm_36 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_38 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_29 q_1 p_2) (thm_37 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_39 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_40 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_38 q_1 p_2) (thm_39 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_41 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_40 q_1 p_2 hyp_1 q_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_42 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_43 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_44 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_42 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_43 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_45 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_44 q_2 p_1 hyp_1 hyp_2) (thm_42 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_46 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_45 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_47 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_46 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_48 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_41 q_2 p_1 hyp_1 (thm_47 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_49 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_38 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_50 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_51 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_50 x_2 q_3 p_1 hyp_2 (thm_42 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_52 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_51 p_2 x_3 q_1 hyp_1 hyp_3 (thm_43 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_53 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_52 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_54 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_53 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_55 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_49 q_1 p_2) (thm_54 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_56 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_48 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_55 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. (Data.Bool.~ (Data.List.null ((Data.List.:: h) t)))))) ((Data.Bool./\ (Data.List.null Data.List.[])) (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. (Data.Bool.~ (Data.List.null ((Data.List.:: h) t))))))) ;)

(; dict ;)

def thm_57 : A : hol.type -> hyp_1 : hol.proof (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) -> hol.proof (hol.eq hol.bool (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2))))) (hol.and (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2))))))) :=
  A : hol.type => hyp_1 : hol.proof (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_56 p_1 q_2 hyp_1) (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2))))) hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. (Data.Bool.~ (Data.List.null ((Data.List.:: h) t)))))) ((Data.Bool./\ (Data.List.null Data.List.[])) (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. (Data.Bool.~ (Data.List.null ((Data.List.:: h) t))))))) ;)

(; dict ;)

def thm_58 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2))))) (hol.and (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2))))))) :=
  A : hol.type => hol.PROVE_HYP (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (hol.eq hol.bool (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2))))) (hol.and (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2))))))) (thm_2 A) (hyp_1 : hol.proof (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) => thm_57 A hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.List.null Data.List.[])) (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. (Data.Bool.~ (Data.List.null ((Data.List.:: h) t)))))) ;)

(; dict ;)

def thm_59 : A : hol.type -> hol.proof (hol.and (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2))))) (hol.and (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2)))))) (thm_58 A) (thm_4 A).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_60 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_40 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_61 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_44 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_62 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_61 p_2 q_1 hyp_1 hyp_2) (thm_43 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_63 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_62 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_64 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_63 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_65 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_60 q_1 p_2 hyp_1 (thm_64 q_1 p_2).

(; Theorem: |- (Data.List.null Data.List.[]) ;)

(; dict ;)

def thm_66 : A : hol.type -> hyp_1 : hol.proof (hol.and (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2)))))) -> hol.proof (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) :=
  A : hol.type => hyp_1 : hol.proof (hol.and (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2)))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_65 q_1 p_2 hyp_1) (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2))))) (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hyp_1.

(; Theorem: |- (Data.List.null Data.List.[]) ;)

(; dict ;)

def thm_67 : A : hol.type -> hol.proof (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) :=
  A : hol.type => hol.PROVE_HYP (hol.and (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2)))))) (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (thm_59 A) (hyp_1 : hol.proof (hol.and (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (hol.forall A (h_1 : hol.term A => hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2)))))) => thm_66 A hyp_1).

(; Theorem: |- ((= (Data.List.null Data.List.[])) Data.Bool.T) ;)

(; dict ;)

def thm_68 : A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true) :=
  A : hol.type => hol.EQ_MP (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true) (thm_26 A) (thm_67 A).

(; Theorem: |- ((= (Data.Bool.cond (Data.List.null Data.List.[]))) (Data.Bool.cond Data.Bool.T)) ;)

(; dict ;)

def thm_69 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) (hol.cond A hol.true)) :=
  A : hol.type => hol.APP_THM hol.bool (hol.arr A (hol.arr A A)) (hol.cond A) (hol.cond A) (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true (thm_17 A) (hol.EQ_MP (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true) (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) hol.true) (thm_19 A) (thm_68 A)).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_70 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => hol.REFL A x_1.

(; Theorem: |- ((= ((Data.Bool.cond (Data.List.null Data.List.[])) x)) ((Data.Bool.cond Data.Bool.T) x)) ;)

(; dict ;)

def thm_71 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) x_1) (hol.cond A hol.true x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A (hol.arr A A) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) (hol.cond A hol.true) x_1 x_1 (thm_69 A) (thm_70 A x_1).

(; Theorem: |- ((= (Data.List.last Data.List.[])) (Data.List.last Data.List.[])) ;)

(; dict ;)

def thm_72 : A : hol.type -> hol.proof (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) :=
  A : hol.type => hol.REFL A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))).

(; Theorem: |- ((= (((Data.Bool.cond (Data.List.null Data.List.[])) x) (Data.List.last Data.List.[]))) (((Data.Bool.cond Data.Bool.T) x) (Data.List.last Data.List.[]))) ;)

(; dict ;)

def thm_73 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) x_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) (hol.cond A hol.true x_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) x_1) (hol.cond A hol.true x_1) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) (thm_71 A x_1) (thm_72 A).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ;)

(; dict ;)

def thm_74 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ;)

(; dict ;)

def thm_75 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (thm_74 A t2_1 t1_2) (thm_74 A t2_1 t1_2).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_76 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_77 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (thm_76 A) (thm_76 A).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))))) ;)

(; dict ;)

def thm_78 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (thm_10 A) (thm_77 A).

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_79 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) :=
  A : hol.type => t1_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)).

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_80 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) :=
  A : hol.type => t1_1 : hol.term A => hol.TRANS (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (thm_79 A t1_1) (thm_79 A t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_81 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (thm_10 A) (thm_80 A t1_1).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ;)

(; dict ;)

def thm_82 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1)) :=
  A : hol.type => t1_1 : hol.term A => thm_5 A t1_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1) ;)

(; dict ;)

def thm_83 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_82 A t1_2 t2_1.

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_84 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hyp_1 : hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_56 p_1 q_2 hyp_1) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) hyp_1.

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_85 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.PROVE_HYP (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1))) ((A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (thm_74 A t2_1 t1_2) (thm_83 A t2_1 t1_2)) A t2_1 t1_2) (hyp_1 : hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) => thm_84 A t2_1 t1_2 hyp_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_86 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_87 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (thm_86 A t2_1 t1_2) (thm_86 A t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_88 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) :=
  A : hol.type => t1_1 : hol.term A => thm_6 A t1_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2) ;)

(; dict ;)

def thm_89 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_88 A t1_2 t2_1.

(; Theorem: |- ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_90 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) (thm_85 A t2_1 t1_2) ((A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (thm_87 A t2_1 t1_2) (thm_89 A t2_1 t1_2)) A t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_91 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) :=
  A : hol.type => t1_1 : hol.term A => t2_2 : hol.term A => thm_90 A t2_2 t1_1.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_92 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => t1_1 : hol.term A => hol.EQ_MP (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (thm_81 A t1_1) (thm_91 A t1_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1) ;)

(; dict ;)

def thm_93 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) -> hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_65 q_1 p_2 hyp_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) hyp_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1) ;)

(; dict ;)

def thm_94 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.PROVE_HYP (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.EQ_MP (hol.forall A (t1_3 : hol.term A => hol.forall A (t2_4 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_3 t2_4) t1_3) (hol.eq A (hol.cond A hol.false t1_3 t2_4) t2_4)))) (hol.forall A (t1_3 : hol.term A => hol.forall A (t2_4 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_3 t2_4) t1_3) (hol.eq A (hol.cond A hol.false t1_3 t2_4) t2_4)))) (thm_78 A) (thm_92 A) t1_2 t2_1) (hyp_1 : hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) => thm_93 A t2_1 t1_2 hyp_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) x) (Data.List.last Data.List.[]))) x) ;)

(; dict ;)

def thm_95 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.true x_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (thm_75 A t2_1 t1_2) (thm_94 A t2_1 t1_2)) A t2_1 t1_2) A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) x_1.

(; Theorem: |- ((= (((Data.Bool.cond (Data.List.null Data.List.[])) x) (Data.List.last Data.List.[]))) x) ;)

(; dict ;)

def thm_96 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) x_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) x_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) (hol.cond A hol.true x_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1 (thm_73 A x_1) (thm_95 A x_1).

(; Theorem: |- ((= (Data.List.last ((Data.List.:: x) Data.List.[]))) x) ;)

(; dict ;)

def thm_97 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))) x_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1 (thm_16 A x_1) (thm_96 A x_1).

(; Theorem: |- ((= (= (Data.List.last ((Data.List.:: x) Data.List.[])))) (= x)) ;)

(; dict ;)

def thm_98 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))))) (hol.eq A x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1 (thm_11 A) (thm_97 A x_1).

(; Theorem: |- ((= ((= (Data.List.last ((Data.List.:: x) Data.List.[]))) x)) ((= x) x)) ;)

(; dict ;)

def thm_99 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1) (hol.eq A x_1 x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A hol.bool (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A))))) (hol.eq A x_1) x_1 x_1 (thm_98 A x_1) (thm_70 A x_1).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_100 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_101 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_100 A x_1) (thm_100 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_102 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_103 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_102 A) (thm_102 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_104 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_10 A) (thm_103 A).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_105 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_25 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_106 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_105 A x_1) (thm_70 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_107 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_100 A x_1) (thm_106 A x_1)) A x_1.

(; Theorem: |- ((= ((= (Data.List.last ((Data.List.:: x) Data.List.[]))) x)) Data.Bool.T) ;)

(; dict ;)

def thm_108 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1) (hol.eq A x_1 x_1) hol.true (thm_99 A x_1) ((A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_101 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_104 A) (thm_107 A) x_1)) A x_1).

(; Theorem: |- ((= \lambda x. ((= (Data.List.last ((Data.List.:: x) Data.List.[]))) x)) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_109 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1) (x_1 : hol.term A => hol.true)) :=
  A : hol.type => hol.ABS_THM A hol.bool (x_1 : hol.term A => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1) (x_1 : hol.term A => hol.true) (x_1 : hol.term A => thm_108 A x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (Data.List.last ((Data.List.:: x) Data.List.[]))) x))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_110 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1)) (hol.forall A (x_1 : hol.term A => hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1) (x_1 : hol.term A => hol.true) (thm_10 A) (thm_109 A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_111 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_112 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (thm_111 A t_1) (thm_111 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_113 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_7 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_114 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (thm_112 A t_1) (thm_113 A t_1)) A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (Data.List.last ((Data.List.:: x) Data.List.[]))) x))) Data.Bool.T) ;)

(; dict ;)

def thm_115 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1)) hol.true) :=
  A : hol.type => hol.TRANS hol.bool (hol.forall A (x_1 : hol.term A => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1)) (hol.forall A (x_1 : hol.term A => hol.true)) hol.true (thm_110 A) (thm_114 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda x. ((= (Data.List.last ((Data.List.:: x) Data.List.[]))) x))) ;)

(; dict ;)

def thm_116 : A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall A (x_1 : hol.term A => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1))) :=
  A : hol.type => hol.SYM hol.bool (hol.forall A (x_1 : hol.term A => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1)) hol.true (thm_115 A).

(; Theorem: |- (Data.Bool.! \lambda x. ((= (Data.List.last ((Data.List.:: x) Data.List.[]))) x)) ;)

(; dict ;)

def thm_117 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1)) :=
  A : hol.type => hol.EQ_MP hol.true (hol.forall A (x_1 : hol.term A => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x_1 (Data_2EList_2E_5B_5D (Data_2EList_2Elist A)))) x_1)) (thm_116 A) thm_1.

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_118 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (Data_2EList_2Elist A) hol.bool) hol.bool) (hol.forall (Data_2EList_2Elist A)) (hol.forall (Data_2EList_2Elist A))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (Data_2EList_2Elist A) hol.bool) hol.bool) (hol.forall (Data_2EList_2Elist A)).

(; Theorem: |- ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (((Data.Bool.cond (Data.List.null ((Data.List.:: x2) l))) x1) (Data.List.last ((Data.List.:: x2) l)))) ;)

(; dict ;)

def thm_119 : A : hol.type -> l_1 : hol.term (Data_2EList_2Elist A) -> x2_2 : hol.term A -> x1_3 : hol.term A -> hol.proof (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_3 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1))) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1)) x1_3 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1)))) :=
  A : hol.type => l_1 : hol.term (Data_2EList_2Elist A) => x2_2 : hol.term A => x1_3 : hol.term A => (A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => thm_15 A t_1 h_2) A (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1) x1_3.

(; Theorem: |- ((= ((= (Data.List.null ((Data.List.:: h) t))) Data.Bool.F)) ((= (Data.List.null ((Data.List.:: h) t))) Data.Bool.F)) ;)

(; dict ;)

def thm_120 : A : hol.type -> t_1 : hol.term (Data_2EList_2Elist A) -> h_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) hol.false) (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) hol.false)) :=
  A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) hol.false).

(; Theorem: |- ((= ((= (Data.List.null ((Data.List.:: h) t))) Data.Bool.F)) ((= (Data.List.null ((Data.List.:: h) t))) Data.Bool.F)) ;)

(; dict ;)

def thm_121 : A : hol.type -> t_1 : hol.term (Data_2EList_2Elist A) -> h_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) hol.false) (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) hol.false)) :=
  A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) hol.false) (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) hol.false) (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) hol.false) (thm_120 A t_1 h_2) (thm_120 A t_1 h_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_122 : hyp_1 : hol.proof hol.false -> hol.proof hol.false :=
  hyp_1 : hol.proof hol.false => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda p. p) ;)

(; dict ;)

def thm_123 : hyp_1 : hol.proof hol.false -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) :=
  hyp_1 : hol.proof hol.false => hol.EQ_MP hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) thm_8 (thm_122 hyp_1).

(; Theorem: |- P ;)

(; dict ;)

def thm_124 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.false -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_123 hyp_1 P_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) P) ;)

(; dict ;)

def thm_125 : P_1 : hol.term hol.bool -> hol.proof (hol.imp hol.false P_1) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_124 P_1 hyp_1.

(; Theorem: |- ((= (= (Data.Bool.~ P))) (= (Data.Bool.~ P))) ;)

(; dict ;)

def thm_126 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)).

(; Theorem: |- ((= (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_127 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1.

(; Theorem: |- ((= ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P))) ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F))) ;)

(; dict ;)

def thm_128 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false))) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1)) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false) (thm_126 P_1) (thm_127 P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_129 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool P_1 P_1) :=
  P_1 : hol.term hol.bool => hol.REFL hol.bool P_1.

(; Theorem: |- ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ;)

(; dict ;)

def thm_130 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1 P_1 thm_9 (thm_129 P_1).

(; Theorem: |- ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_131 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) (thm_128 P_1) (thm_130 P_1).

(; Theorem: |- (Data.Bool.~ P) ;)

(; dict ;)

def thm_132 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.not P_1) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> P) Data.Bool.F) ;)

(; dict ;)

def thm_133 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.imp P_1 hol.false) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hol.EQ_MP (hol.not P_1) (hol.imp P_1 hol.false) ((P_1 : hol.term hol.bool => thm_131 P_1) P_1) (thm_132 P_1 hyp_1).

(; Theorem: |- P ;)

(; dict ;)

def thm_134 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_135 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hyp_2 : hol.proof (hol.not P_1) -> hol.proof hol.false :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_2 : hol.proof (hol.not P_1) => thm_133 P_1 hyp_2 (thm_134 P_1 hyp_1).

(; Theorem: |- ((= P) Data.Bool.F) ;)

(; dict ;)

def thm_136 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.eq hol.bool P_1 hol.false) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hol.PROP_EXT P_1 hol.false (hyp_2 : hol.proof hol.false => thm_125 P_1 (thm_122 hyp_2)) (hyp_2 : hol.proof P_1 => thm_135 P_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ P)) ((= P) Data.Bool.F)) ;)

(; dict ;)

def thm_137 : P_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.not P_1) (hol.eq hol.bool P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => thm_136 P_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ (Data.List.null ((Data.List.:: h) t)))) ((= (Data.List.null ((Data.List.:: h) t))) Data.Bool.F)) ;)

(; dict ;)

def thm_138 : A : hol.type -> t_1 : hol.term (Data_2EList_2Elist A) -> h_2 : hol.term A -> hol.proof (hol.imp (hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1))) (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) hol.false)) :=
  A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => (P_1 : hol.term hol.bool => thm_137 P_1) (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)).

(; Theorem: |- (Data.Bool.! \lambda t. (Data.Bool.~ (Data.List.null ((Data.List.:: h) t)))) ;)

(; dict ;)

def thm_139 : A : hol.type -> h_1 : hol.term A -> hol.proof (hol.forall (Data_2EList_2Elist A) (t_2 : hol.term (Data_2EList_2Elist A) => hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_1 t_2)))) :=
  A : hol.type => h_1 : hol.term A => thm_4 A h_1.

(; Theorem: |- (Data.Bool.~ (Data.List.null ((Data.List.:: h) t))) ;)

(; dict ;)

def thm_140 : A : hol.type -> t_1 : hol.term (Data_2EList_2Elist A) -> h_2 : hol.term A -> hol.proof (hol.not (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1))) :=
  A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => thm_139 A h_2 t_1.

(; Theorem: |- ((= (Data.List.null ((Data.List.:: h) t))) Data.Bool.F) ;)

(; dict ;)

def thm_141 : A : hol.type -> t_1 : hol.term (Data_2EList_2Elist A) -> h_2 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) hol.false) :=
  A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => thm_138 A t_1 h_2 (thm_140 A t_1 h_2).

(; Theorem: |- ((= (Data.List.null ((Data.List.:: x2) l))) Data.Bool.F) ;)

(; dict ;)

def thm_142 : A : hol.type -> l_1 : hol.term (Data_2EList_2Elist A) -> x2_2 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1)) hol.false) :=
  A : hol.type => l_1 : hol.term (Data_2EList_2Elist A) => x2_2 : hol.term A => (A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => (A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) hol.false) (hol.eq hol.bool (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) h_2 t_1)) hol.false) (thm_121 A t_1 h_2) (thm_141 A t_1 h_2)) A t_1 h_2) A l_1 x2_2.

(; Theorem: |- ((= (Data.Bool.cond (Data.List.null ((Data.List.:: x2) l)))) (Data.Bool.cond Data.Bool.F)) ;)

(; dict ;)

def thm_143 : A : hol.type -> l_1 : hol.term (Data_2EList_2Elist A) -> x2_2 : hol.term A -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1))) (hol.cond A hol.false)) :=
  A : hol.type => l_1 : hol.term (Data_2EList_2Elist A) => x2_2 : hol.term A => hol.APP_THM hol.bool (hol.arr A (hol.arr A A)) (hol.cond A) (hol.cond A) (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1)) hol.false (thm_17 A) (thm_142 A l_1 x2_2).

(; Theorem: |- ((= x1) x1) ;)

(; dict ;)

def thm_144 : A : hol.type -> x1_1 : hol.term A -> hol.proof (hol.eq A x1_1 x1_1) :=
  A : hol.type => x1_1 : hol.term A => hol.REFL A x1_1.

(; Theorem: |- ((= ((Data.Bool.cond (Data.List.null ((Data.List.:: x2) l))) x1)) ((Data.Bool.cond Data.Bool.F) x1)) ;)

(; dict ;)

def thm_145 : A : hol.type -> x1_1 : hol.term A -> l_2 : hol.term (Data_2EList_2Elist A) -> x2_3 : hol.term A -> hol.proof (hol.eq (hol.arr A A) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_3 l_2)) x1_1) (hol.cond A hol.false x1_1)) :=
  A : hol.type => x1_1 : hol.term A => l_2 : hol.term (Data_2EList_2Elist A) => x2_3 : hol.term A => hol.APP_THM A (hol.arr A A) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_3 l_2))) (hol.cond A hol.false) x1_1 x1_1 (thm_143 A l_2 x2_3) (thm_144 A x1_1).

(; Theorem: |- ((= (Data.List.last ((Data.List.:: x2) l))) (((Data.Bool.cond (Data.List.null l)) x2) (Data.List.last l))) ;)

(; dict ;)

def thm_146 : A : hol.type -> l_1 : hol.term (Data_2EList_2Elist A) -> x2_2 : hol.term A -> hol.proof (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_1) x2_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_1))) :=
  A : hol.type => l_1 : hol.term (Data_2EList_2Elist A) => x2_2 : hol.term A => (A : hol.type => t_1 : hol.term (Data_2EList_2Elist A) => h_2 : hol.term A => thm_15 A t_1 h_2) A l_1 x2_2.

(; Theorem: |- ((= (((Data.Bool.cond (Data.List.null ((Data.List.:: x2) l))) x1) (Data.List.last ((Data.List.:: x2) l)))) (((Data.Bool.cond Data.Bool.F) x1) (((Data.Bool.cond (Data.List.null l)) x2) (Data.List.last l)))) ;)

(; dict ;)

def thm_147 : A : hol.type -> x1_1 : hol.term A -> l_2 : hol.term (Data_2EList_2Elist A) -> x2_3 : hol.term A -> hol.proof (hol.eq A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_3 l_2)) x1_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_3 l_2))) (hol.cond A hol.false x1_1 (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_2) x2_3 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_2)))) :=
  A : hol.type => x1_1 : hol.term A => l_2 : hol.term (Data_2EList_2Elist A) => x2_3 : hol.term A => hol.APP_THM A A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_3 l_2)) x1_1) (hol.cond A hol.false x1_1) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_3 l_2)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_2) x2_3 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_2)) (thm_145 A x1_1 l_2 x2_3) (thm_146 A l_2 x2_3).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) x1) (((Data.Bool.cond (Data.List.null l)) x2) (Data.List.last l)))) (((Data.Bool.cond (Data.List.null l)) x2) (Data.List.last l))) ;)

(; dict ;)

def thm_148 : A : hol.type -> x2_1 : hol.term A -> l_2 : hol.term (Data_2EList_2Elist A) -> x1_3 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.false x1_3 (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_2) x2_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_2))) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_2) x2_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_2))) :=
  A : hol.type => x2_1 : hol.term A => l_2 : hol.term (Data_2EList_2Elist A) => x1_3 : hol.term A => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_89 A t2_1 t1_2) A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_2) x2_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_2)) x1_3.

(; Theorem: |- ((= (((Data.Bool.cond (Data.List.null ((Data.List.:: x2) l))) x1) (Data.List.last ((Data.List.:: x2) l)))) (((Data.Bool.cond (Data.List.null l)) x2) (Data.List.last l))) ;)

(; dict ;)

def thm_149 : A : hol.type -> x1_1 : hol.term A -> l_2 : hol.term (Data_2EList_2Elist A) -> x2_3 : hol.term A -> hol.proof (hol.eq A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_3 l_2)) x1_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_3 l_2))) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_2) x2_3 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_2))) :=
  A : hol.type => x1_1 : hol.term A => l_2 : hol.term (Data_2EList_2Elist A) => x2_3 : hol.term A => hol.TRANS A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_3 l_2)) x1_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_3 l_2))) (hol.cond A hol.false x1_1 (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_2) x2_3 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_2))) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_2) x2_3 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_2)) (thm_147 A x1_1 l_2 x2_3) (thm_148 A x2_3 l_2 x1_1).

(; Theorem: |- ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (((Data.Bool.cond (Data.List.null l)) x2) (Data.List.last l))) ;)

(; dict ;)

def thm_150 : A : hol.type -> l_1 : hol.term (Data_2EList_2Elist A) -> x2_2 : hol.term A -> x1_3 : hol.term A -> hol.proof (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_3 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1))) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_1) x2_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_1))) :=
  A : hol.type => l_1 : hol.term (Data_2EList_2Elist A) => x2_2 : hol.term A => x1_3 : hol.term A => hol.TRANS A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_3 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1))) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1)) x1_3 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1))) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_1) x2_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_1)) (thm_119 A l_1 x2_2 x1_3) (thm_149 A x1_3 l_1 x2_2).

(; Theorem: |- ((= (= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l))))) (= (((Data.Bool.cond (Data.List.null l)) x2) (Data.List.last l)))) ;)

(; dict ;)

def thm_151 : A : hol.type -> l_1 : hol.term (Data_2EList_2Elist A) -> x2_2 : hol.term A -> x1_3 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_3 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1)))) (hol.eq A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_1) x2_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_1)))) :=
  A : hol.type => l_1 : hol.term (Data_2EList_2Elist A) => x2_2 : hol.term A => x1_3 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_3 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1))) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_1) x2_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_1)) (thm_11 A) (thm_150 A l_1 x2_2 x1_3).

(; Theorem: |- ((= ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l)))) ((= (((Data.Bool.cond (Data.List.null l)) x2) (Data.List.last l))) (((Data.Bool.cond (Data.List.null l)) x2) (Data.List.last l)))) ;)

(; dict ;)

def thm_152 : A : hol.type -> l_1 : hol.term (Data_2EList_2Elist A) -> x2_2 : hol.term A -> x1_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_3 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1))) (hol.eq A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_1) x2_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_1) x2_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_1)))) :=
  A : hol.type => l_1 : hol.term (Data_2EList_2Elist A) => x2_2 : hol.term A => x1_3 : hol.term A => hol.APP_THM A hol.bool (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_3 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1)))) (hol.eq A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_1) x2_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_1))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_1) x2_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_1)) (thm_151 A l_1 x2_2 x1_3) (thm_146 A l_1 x2_2).

(; Theorem: |- ((= ((= (((Data.Bool.cond (Data.List.null l)) x2) (Data.List.last l))) (((Data.Bool.cond (Data.List.null l)) x2) (Data.List.last l)))) Data.Bool.T) ;)

(; dict ;)

def thm_153 : A : hol.type -> x2_1 : hol.term A -> l_2 : hol.term (Data_2EList_2Elist A) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_2) x2_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_2)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_2) x2_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_2))) hol.true) :=
  A : hol.type => x2_1 : hol.term A => l_2 : hol.term (Data_2EList_2Elist A) => (A : hol.type => x_1 : hol.term A => thm_106 A x_1) A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_2) x2_1 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_2)).

(; Theorem: |- ((= ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l)))) Data.Bool.T) ;)

(; dict ;)

def thm_154 : A : hol.type -> l_1 : hol.term (Data_2EList_2Elist A) -> x2_2 : hol.term A -> x1_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_3 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1))) hol.true) :=
  A : hol.type => l_1 : hol.term (Data_2EList_2Elist A) => x2_2 : hol.term A => x1_3 : hol.term A => hol.TRANS hol.bool (hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_3 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_1))) (hol.eq A (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_1) x2_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_1)) (hol.cond A (Data_2EList_2Enull (hol.arr (Data_2EList_2Elist A) hol.bool) l_1) x2_2 (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) l_1))) hol.true (thm_152 A l_1 x2_2 x1_3) (thm_153 A x2_2 l_1).

(; Theorem: |- ((= \lambda l. ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l)))) \lambda l. Data.Bool.T) ;)

(; dict ;)

def thm_155 : A : hol.type -> x2_1 : hol.term A -> x1_2 : hol.term A -> hol.proof (hol.eq (hol.arr (Data_2EList_2Elist A) hol.bool) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_2 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_1 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_1 l_3))) (l_3 : hol.term (Data_2EList_2Elist A) => hol.true)) :=
  A : hol.type => x2_1 : hol.term A => x1_2 : hol.term A => hol.ABS_THM (Data_2EList_2Elist A) hol.bool (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_2 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_1 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_1 l_3))) (l_3 : hol.term (Data_2EList_2Elist A) => hol.true) (l_3 : hol.term (Data_2EList_2Elist A) => thm_154 A l_3 x2_1 x1_2).

(; Theorem: |- ((= (Data.Bool.! \lambda l. ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l))))) (Data.Bool.! \lambda l. Data.Bool.T)) ;)

(; dict ;)

def thm_156 : A : hol.type -> x2_1 : hol.term A -> x1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_2 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_1 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_1 l_3)))) (hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.true))) :=
  A : hol.type => x2_1 : hol.term A => x1_2 : hol.term A => hol.APP_THM (hol.arr (Data_2EList_2Elist A) hol.bool) hol.bool (hol.forall (Data_2EList_2Elist A)) (hol.forall (Data_2EList_2Elist A)) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_2 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_1 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_1 l_3))) (l_3 : hol.term (Data_2EList_2Elist A) => hol.true) (thm_118 A) (thm_155 A x2_1 x1_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda l. t)) t)) ((= (Data.Bool.! \lambda l. t)) t)) ;)

(; dict ;)

def thm_157 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (l_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (l_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (l_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda l. t)) t)) ;)

(; dict ;)

def thm_158 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (l_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (l_2 : hol.term A => t_1)) t_1) (thm_111 A t_1) (thm_157 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda l. t)) t) ;)

(; dict ;)

def thm_159 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (l_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (l_2 : hol.term A => t_1)) t_1) (thm_158 A t_1) (thm_113 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda l. t)) t) ;)

(; dict ;)

def thm_160 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EList_2Elist A) (l_2 : hol.term (Data_2EList_2Elist A) => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_159 A t_1) (Data_2EList_2Elist A) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda l. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_161 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EList_2Elist A) (l_1 : hol.term (Data_2EList_2Elist A) => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => thm_160 A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda l. ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l))))) Data.Bool.T) ;)

(; dict ;)

def thm_162 : A : hol.type -> x2_1 : hol.term A -> x1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_2 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_1 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_1 l_3)))) hol.true) :=
  A : hol.type => x2_1 : hol.term A => x1_2 : hol.term A => hol.TRANS hol.bool (hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_2 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_1 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_1 l_3)))) (hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.true)) hol.true (thm_156 A x2_1 x1_2) (thm_161 A).

(; Theorem: |- ((= \lambda x2. (Data.Bool.! \lambda l. ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l))))) \lambda x2. Data.Bool.T) ;)

(; dict ;)

def thm_163 : A : hol.type -> x1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3)))) (x2_2 : hol.term A => hol.true)) :=
  A : hol.type => x1_1 : hol.term A => hol.ABS_THM A hol.bool (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3)))) (x2_2 : hol.term A => hol.true) (x2_2 : hol.term A => thm_162 A x2_2 x1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x2. (Data.Bool.! \lambda l. ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l)))))) (Data.Bool.! \lambda x2. Data.Bool.T)) ;)

(; dict ;)

def thm_164 : A : hol.type -> x1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))))) (hol.forall A (x2_2 : hol.term A => hol.true))) :=
  A : hol.type => x1_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3)))) (x2_2 : hol.term A => hol.true) (thm_10 A) (thm_163 A x1_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x2. t)) t)) ((= (Data.Bool.! \lambda x2. t)) t)) ;)

(; dict ;)

def thm_165 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x2_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x2_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x2_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x2. t)) t)) ;)

(; dict ;)

def thm_166 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x2_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x2_2 : hol.term A => t_1)) t_1) (thm_111 A t_1) (thm_165 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x2. t)) t) ;)

(; dict ;)

def thm_167 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x2_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x2_2 : hol.term A => t_1)) t_1) (thm_166 A t_1) (thm_113 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x2. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_168 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x2_1 : hol.term A => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_167 A t_1) A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda x2. (Data.Bool.! \lambda l. ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l)))))) Data.Bool.T) ;)

(; dict ;)

def thm_169 : A : hol.type -> x1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))))) hol.true) :=
  A : hol.type => x1_1 : hol.term A => hol.TRANS hol.bool (hol.forall A (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))))) (hol.forall A (x2_2 : hol.term A => hol.true)) hol.true (thm_164 A x1_1) (thm_168 A).

(; Theorem: |- ((= \lambda x1. (Data.Bool.! \lambda x2. (Data.Bool.! \lambda l. ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l)))))) \lambda x1. Data.Bool.T) ;)

(; dict ;)

def thm_170 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x1_1 : hol.term A => hol.forall A (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))))) (x1_1 : hol.term A => hol.true)) :=
  A : hol.type => hol.ABS_THM A hol.bool (x1_1 : hol.term A => hol.forall A (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))))) (x1_1 : hol.term A => hol.true) (x1_1 : hol.term A => thm_169 A x1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. (Data.Bool.! \lambda l. ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l))))))) (Data.Bool.! \lambda x1. Data.Bool.T)) ;)

(; dict ;)

def thm_171 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x1_1 : hol.term A => hol.forall A (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3)))))) (hol.forall A (x1_1 : hol.term A => hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x1_1 : hol.term A => hol.forall A (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))))) (x1_1 : hol.term A => hol.true) (thm_10 A) (thm_170 A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x1. t)) t)) ((= (Data.Bool.! \lambda x1. t)) t)) ;)

(; dict ;)

def thm_172 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x1_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x1_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x1_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x1. t)) t)) ;)

(; dict ;)

def thm_173 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x1_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x1_2 : hol.term A => t_1)) t_1) (thm_111 A t_1) (thm_172 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x1. t)) t) ;)

(; dict ;)

def thm_174 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x1_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x1_2 : hol.term A => t_1)) t_1) (thm_173 A t_1) (thm_113 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x1. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_175 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x1_1 : hol.term A => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_174 A t_1) A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. (Data.Bool.! \lambda l. ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l))))))) Data.Bool.T) ;)

(; dict ;)

def thm_176 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x1_1 : hol.term A => hol.forall A (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3)))))) hol.true) :=
  A : hol.type => hol.TRANS hol.bool (hol.forall A (x1_1 : hol.term A => hol.forall A (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3)))))) (hol.forall A (x1_1 : hol.term A => hol.true)) hol.true (thm_171 A) (thm_175 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. (Data.Bool.! \lambda l. ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l))))))) ;)

(; dict ;)

def thm_177 : A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall A (x1_1 : hol.term A => hol.forall A (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))))))) :=
  A : hol.type => hol.SYM hol.bool (hol.forall A (x1_1 : hol.term A => hol.forall A (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3)))))) hol.true (thm_176 A).

(; Theorem: |- (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. (Data.Bool.! \lambda l. ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l)))))) ;)

(; dict ;)

def thm_178 : A : hol.type -> hol.proof (hol.forall A (x1_1 : hol.term A => hol.forall A (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3)))))) :=
  A : hol.type => hol.EQ_MP hol.true (hol.forall A (x1_1 : hol.term A => hol.forall A (x2_2 : hol.term A => hol.forall (Data_2EList_2Elist A) (l_3 : hol.term (Data_2EList_2Elist A) => hol.eq A (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x1_1 (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3))) (Data_2EList_2Elast (hol.arr (Data_2EList_2Elist A) A) (Data_2EList_2E_3A_3A (hol.arr A (hol.arr (Data_2EList_2Elist A) (Data_2EList_2Elist A))) x2_2 l_3)))))) (thm_177 A) thm_1.
