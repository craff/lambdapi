
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME bool_2Dclass_2Da2.

(; axiom ;)

thm_0 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or t_1 (hol.not t_1))).

(; axiom ;)

thm_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)).

(; axiom ;)

thm_2 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_3 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)).

(; axiom ;)

thm_4 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))).

(; axiom ;)

thm_5 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_6 : hol.proof (hol.eq hol.bool hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1))).

(; axiom ;)

thm_7 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not (p_1 : hol.term hol.bool => hol.imp p_1 hol.false)).

(; axiom ;)

thm_8 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false).

(; axiom ;)

thm_9 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true).

(; axiom ;)

thm_10 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true)).

(; axiom ;)

thm_11 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true)).

(; axiom ;)

thm_12 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1)).

(; axiom ;)

thm_13 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1)).

(; axiom ;)

thm_14 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1)).

(; axiom ;)

thm_15 : hol.proof hol.true.

(; axiom ;)

thm_16 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp p_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))).

(; axiom ;)

thm_17 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_18 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_19 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_20 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_21 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; axiom ;)

thm_22 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_23 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)).

(; axiom ;)

thm_24 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)).

(; axiom ;)

thm_25 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)).

(; axiom ;)

thm_26 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)).

(; axiom ;)

thm_27 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_28 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda t. ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) \lambda t. ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) ;)

(; dict ;)

def thm_29 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)).

(; Theorem: |- ((= \lambda t. ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) \lambda t. ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) ;)

(; dict ;)

def thm_30 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) thm_29 thm_29.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F)))) (Data.Bool.! \lambda t. ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F)))) ;)

(; dict ;)

def thm_31 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) thm_28 thm_30.

(; Theorem: |- ((= Data.Bool.\/) Data.Bool.\/) ;)

(; dict ;)

def thm_32 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or hol.or) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or.

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_33 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_34 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_33 t_1) (thm_33 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_35 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_36 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_35 thm_35.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_37 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_28 thm_36.

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_38 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_39 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_38 t_1) (thm_38 t_1).

(; Theorem: |- ((= ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_40 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_1 t_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_41 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_42 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_43 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_41 q_1 p_2) (thm_42 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_44 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_45 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_46 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_44 p_1) (thm_45 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_47 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_48 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_2 (thm_47 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_49 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_46 p_1) (thm_48 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_50 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_51 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_49 p_2) (thm_50 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_52 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_43 q_1 p_2) (thm_51 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_53 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_54 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_52 q_1 p_2) (thm_53 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_55 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_54 q_1 p_2 hyp_1 q_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_56 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_57 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_58 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_56 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_57 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_59 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_58 q_2 p_1 hyp_1 hyp_2) (thm_56 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_60 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_59 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_61 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_60 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_62 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_55 q_2 p_1 hyp_1 (thm_61 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_63 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_52 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_64 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_65 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_64 x_2 q_3 p_1 hyp_2 (thm_56 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_66 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_65 p_2 x_3 q_1 hyp_1 hyp_3 (thm_57 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_67 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_66 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_68 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_67 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_69 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_63 q_1 p_2) (thm_68 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_70 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_62 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_69 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_71 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_72 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_39 t_1) (thm_40 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => thm_71 t_1 hyp_1).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_73 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_3 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_74 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_75 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_33 t_1) (thm_73 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => thm_74 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_76 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_77 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_76 t_1) (thm_76 t_1).

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_78 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_4 t_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_79 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_80 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_77 t_1) (thm_78 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => thm_79 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_81 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_82 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_81 t_1) (thm_81 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_83 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_5 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_84 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_80 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_82 t_1) (thm_83 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_85 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (thm_75 t_1) (thm_84 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_86 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (thm_72 t_1) (thm_85 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_87 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => thm_86 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_88 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_62 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_89 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) thm_37 thm_87 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => thm_88 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_90 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_54 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_91 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_58 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_92 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_91 p_2 q_1 hyp_1 hyp_2) (thm_57 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_93 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_92 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_94 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_93 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_95 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_90 q_1 p_2 hyp_1 (thm_94 q_1 p_2).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_96 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_95 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) hyp_1.

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_97 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_89 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => thm_96 t_1 hyp_1).

(; Theorem: |- ((= ((= t) Data.Bool.F)) ((= t) Data.Bool.F)) ;)

(; dict ;)

def thm_98 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool t_1 hol.false).

(; Theorem: |- ((= ((= t) Data.Bool.F)) ((= t) Data.Bool.F)) ;)

(; dict ;)

def thm_99 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool t_1 hol.false) (thm_98 t_1) (thm_98 t_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_100 : hyp_1 : hol.proof hol.false -> hol.proof hol.false :=
  hyp_1 : hol.proof hol.false => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda p. p) ;)

(; dict ;)

def thm_101 : hyp_1 : hol.proof hol.false -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) :=
  hyp_1 : hol.proof hol.false => hol.EQ_MP hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) thm_6 (thm_100 hyp_1).

(; Theorem: |- P ;)

(; dict ;)

def thm_102 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.false -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_101 hyp_1 P_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) P) ;)

(; dict ;)

def thm_103 : P_1 : hol.term hol.bool -> hol.proof (hol.imp hol.false P_1) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_102 P_1 hyp_1.

(; Theorem: |- ((= (= (Data.Bool.~ P))) (= (Data.Bool.~ P))) ;)

(; dict ;)

def thm_104 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)).

(; Theorem: |- ((= (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_105 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1.

(; Theorem: |- ((= ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P))) ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F))) ;)

(; dict ;)

def thm_106 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false))) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1)) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false) (thm_104 P_1) (thm_105 P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_107 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool P_1 P_1) :=
  P_1 : hol.term hol.bool => hol.REFL hol.bool P_1.

(; Theorem: |- ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ;)

(; dict ;)

def thm_108 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1 P_1 thm_7 (thm_107 P_1).

(; Theorem: |- ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_109 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) (thm_106 P_1) (thm_108 P_1).

(; Theorem: |- (Data.Bool.~ P) ;)

(; dict ;)

def thm_110 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.not P_1) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> P) Data.Bool.F) ;)

(; dict ;)

def thm_111 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.imp P_1 hol.false) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hol.EQ_MP (hol.not P_1) (hol.imp P_1 hol.false) ((P_1 : hol.term hol.bool => thm_109 P_1) P_1) (thm_110 P_1 hyp_1).

(; Theorem: |- P ;)

(; dict ;)

def thm_112 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_113 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hyp_2 : hol.proof (hol.not P_1) -> hol.proof hol.false :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_2 : hol.proof (hol.not P_1) => thm_111 P_1 hyp_2 (thm_112 P_1 hyp_1).

(; Theorem: |- ((= P) Data.Bool.F) ;)

(; dict ;)

def thm_114 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.eq hol.bool P_1 hol.false) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hol.PROP_EXT P_1 hol.false (hyp_2 : hol.proof hol.false => thm_103 P_1 (thm_100 hyp_2)) (hyp_2 : hol.proof P_1 => thm_113 P_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ P)) ((= P) Data.Bool.F)) ;)

(; dict ;)

def thm_115 : P_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.not P_1) (hol.eq hol.bool P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => thm_114 P_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ t)) ((= t) Data.Bool.F)) ;)

(; dict ;)

def thm_116 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.not t_1) (hol.eq hol.bool t_1 hol.false)) :=
  t_1 : hol.term hol.bool => (P_1 : hol.term hol.bool => thm_115 P_1) t_1.

(; Theorem: |- (Data.Bool.~ t) ;)

(; dict ;)

def thm_117 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.not t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hyp_1.

(; Theorem: |- ((= t) Data.Bool.F) ;)

(; dict ;)

def thm_118 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.eq hol.bool t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => thm_116 t_1 (thm_117 t_1 hyp_1).

(; Theorem: |- ((= ((= t) Data.Bool.T)) Data.Bool.F) ;)

(; dict ;)

def thm_119 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hol.TRANS hol.bool (hol.eq hol.bool t_1 hol.true) t_1 hol.false (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_34 t_1) (thm_97 t_1)) (hol.EQ_MP (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool t_1 hol.false) (thm_99 t_1) (thm_118 t_1 hyp_1)).

(; Theorem: |- ((= (Data.Bool.\/ ((= t) Data.Bool.T))) (Data.Bool.\/ Data.Bool.F)) ;)

(; dict ;)

def thm_120 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.eq hol.bool t_1 hol.true)) (hol.or hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.eq hol.bool t_1 hol.true) hol.false thm_32 (thm_119 t_1 hyp_1).

(; Theorem: |- ((= Data.Bool.~) Data.Bool.~) ;)

(; dict ;)

def thm_121 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not hol.not) :=
  hol.REFL (hol.arr hol.bool hol.bool) hol.not.

(; Theorem: |- ((= (Data.Bool.~ t)) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_122 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.eq hol.bool (hol.not t_1) (hol.not hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hol.APP_THM hol.bool hol.bool hol.not hol.not t_1 hol.false thm_121 (thm_118 t_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_123 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_124 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_123 thm_123.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_125 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_126 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_125 thm_125.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_127 : hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_128 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.PROVE_HYP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_126 thm_8) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => thm_127 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_129 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) thm_128 (hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_123 thm_9).

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_130 : hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) -> hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true) :=
  hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_62 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_131 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true) :=
  hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_129 (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => thm_130 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ t)) Data.Bool.T) ;)

(; dict ;)

def thm_132 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.eq hol.bool (hol.not t_1) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hol.TRANS hol.bool (hol.not t_1) (hol.not hol.false) hol.true (thm_122 t_1 hyp_1) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_124 thm_131).

(; Theorem: |- ((= ((= t) Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_133 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hol.TRANS hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1) hol.true (thm_83 t_1) (thm_132 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) ((Data.Bool.\/ Data.Bool.F) Data.Bool.T)) ;)

(; dict ;)

def thm_134 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.eq hol.bool (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (hol.or hol.false hol.true)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hol.APP_THM hol.bool hol.bool (hol.or (hol.eq hol.bool t_1 hol.true)) (hol.or hol.false) (hol.eq hol.bool t_1 hol.false) hol.true (thm_120 t_1 hyp_1) (thm_133 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; dict ;)

def thm_135 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; dict ;)

def thm_136 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_135 t_1) (thm_135 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_137 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_138 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) thm_137 thm_137.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))))) ;)

(; dict ;)

def thm_139 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) thm_28 thm_138.

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_140 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_141 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (thm_140 t_1) (thm_140 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T) ;)

(; dict ;)

def thm_142 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_10 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_143 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_144 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (thm_141 t_1) (thm_142 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) => thm_143 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_145 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_146 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (thm_145 t_1) (thm_145 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_147 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_11 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_148 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_149 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (thm_146 t_1) (thm_147 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) => thm_148 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t)) t) ;)

(; dict ;)

def thm_150 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_12 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_151 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_152 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_135 t_1) (thm_150 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) => thm_151 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; dict ;)

def thm_153 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; dict ;)

def thm_154 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (thm_153 t_1) (thm_153 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) Data.Bool.F)) t) ;)

(; dict ;)

def thm_155 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) :=
  t_1 : hol.term hol.bool => thm_13 t_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_156 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_157 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (thm_154 t_1) (thm_155 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) => thm_156 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_158 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_159 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (thm_158 t_1) (thm_158 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) t)) t) ;)

(; dict ;)

def thm_160 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_14 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_161 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (thm_157 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (thm_159 t_1) (thm_160 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_162 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (thm_152 t_1) (thm_161 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_163 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (thm_149 t_1) (thm_162 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_164 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (thm_144 t_1) (thm_163 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_165 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_164 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_166 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_62 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_167 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_2) hol.true) (hol.and (hol.eq hol.bool (hol.or t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_2) t_2) (hol.and (hol.eq hol.bool (hol.or t_2 hol.false) t_2) (hol.eq hol.bool (hol.or t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_2) hol.true) (hol.and (hol.eq hol.bool (hol.or t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_2) t_2) (hol.and (hol.eq hol.bool (hol.or t_2 hol.false) t_2) (hol.eq hol.bool (hol.or t_2 t_2) t_2)))))) thm_139 thm_165 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) => thm_166 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_168 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_62 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_169 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (thm_167 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) => thm_168 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t)) t) ;)

(; dict ;)

def thm_170 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) -> hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_95 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.eq hol.bool (hol.or hol.false t_1) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t)) t) ;)

(; dict ;)

def thm_171 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_169 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) => thm_170 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_172 : hol.proof (hol.eq hol.bool (hol.or hol.false hol.true) hol.true) :=
  (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_136 t_1) (thm_171 t_1)) hol.true.

(; Theorem: |- ((= ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) Data.Bool.T) ;)

(; dict ;)

def thm_173 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.eq hol.bool (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hol.TRANS hol.bool (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (hol.or hol.false hol.true) hol.true (thm_134 t_1 hyp_1) thm_172.

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) ;)

(; dict ;)

def thm_174 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.eq hol.bool hol.true (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hol.SYM hol.bool (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) hol.true (thm_173 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F)) ;)

(; dict ;)

def thm_175 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not t_1) -> hol.proof (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => hol.EQ_MP hol.true (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (thm_174 t_1 hyp_1) thm_15.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ t)) ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) ;)

(; dict ;)

def thm_176 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.not t_1) (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not t_1) => thm_175 t_1 hyp_1.

(; Theorem: |- ((= ((= t) Data.Bool.T)) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_177 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool t_1 hol.true).

(; Theorem: |- ((= ((= t) Data.Bool.T)) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_178 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.true) (thm_177 t_1) (thm_177 t_1).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_179 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_180 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_179 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_181 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_180 t_1 hyp_1) thm_15.

(; Theorem: |- t ;)

(; dict ;)

def thm_182 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_183 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_182 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_15).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_184 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_181 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_183 t_1 hyp_1).

(; Theorem: |- ((= ((= t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_185 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.TRANS hol.bool (hol.eq hol.bool t_1 hol.true) t_1 hol.true (thm_73 t_1) (hol.EQ_MP (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.true) (thm_178 t_1) (hol.EQ_MP t_1 (hol.eq hol.bool t_1 hol.true) ((t_1 : hol.term hol.bool => thm_184 t_1) t_1) (thm_182 t_1 hyp_1))).

(; Theorem: |- ((= (Data.Bool.\/ ((= t) Data.Bool.T))) (Data.Bool.\/ Data.Bool.T)) ;)

(; dict ;)

def thm_186 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.eq hol.bool t_1 hol.true)) (hol.or hol.true)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.eq hol.bool t_1 hol.true) hol.true thm_32 (thm_185 t_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ t)) (Data.Bool.~ Data.Bool.T)) ;)

(; dict ;)

def thm_187 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool (hol.not t_1) (hol.not hol.true)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.APP_THM hol.bool hol.bool hol.not hol.not t_1 hol.true thm_121 (thm_183 t_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ t)) Data.Bool.F) ;)

(; dict ;)

def thm_188 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool (hol.not t_1) hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.TRANS hol.bool (hol.not t_1) (hol.not hol.true) hol.false (thm_187 t_1 hyp_1) thm_8.

(; Theorem: |- ((= ((= t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_189 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.TRANS hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1) hol.false (thm_83 t_1) (thm_188 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) ((Data.Bool.\/ Data.Bool.T) Data.Bool.F)) ;)

(; dict ;)

def thm_190 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (hol.or hol.true hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.APP_THM hol.bool hol.bool (hol.or (hol.eq hol.bool t_1 hol.true)) (hol.or hol.true) (hol.eq hol.bool t_1 hol.false) hol.false (thm_186 t_1 hyp_1) (thm_189 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_191 : hol.proof (hol.eq hol.bool (hol.or hol.true hol.false) hol.true) :=
  (t_1 : hol.term hol.bool => thm_142 t_1) hol.false.

(; Theorem: |- ((= ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) Data.Bool.T) ;)

(; dict ;)

def thm_192 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.TRANS hol.bool (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (hol.or hol.true hol.false) hol.true (thm_190 t_1 hyp_1) thm_191.

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) ;)

(; dict ;)

def thm_193 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool hol.true (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.SYM hol.bool (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) hol.true (thm_192 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F)) ;)

(; dict ;)

def thm_194 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.EQ_MP hol.true (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (thm_193 t_1 hyp_1) thm_15.

(; Theorem: |- ((Data.Bool.==> t) ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) ;)

(; dict ;)

def thm_195 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => thm_194 t_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ t) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_196 : t_1 : hol.term hol.bool -> hol.proof (hol.or t_1 (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_0 t_1.

(; Theorem: |- ((= (= ((Data.Bool.\/ P) Q))) (= ((Data.Bool.\/ P) Q))) ;)

(; dict ;)

def thm_197 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_198 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q))) ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))))) ;)

(; dict ;)

def thm_199 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_197 Q_1 P_2) (thm_198 Q_1 P_2).

(; Theorem: |- ((= (= (Data.Bool.\/ P))) (= (Data.Bool.\/ P))) ;)

(; dict ;)

def thm_200 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_201 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1.

(; Theorem: |- ((= ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P))) ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))))) ;)

(; dict ;)

def thm_202 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))))) :=
  P_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))) (thm_200 P_1) (thm_201 P_1).

(; Theorem: |- ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) ;)

(; dict ;)

def thm_203 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1 P_1 thm_16 (thm_107 P_1).

(; Theorem: |- ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_204 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) (thm_202 P_1) (thm_203 P_1).

(; Theorem: |- ((= Q) Q) ;)

(; dict ;)

def thm_205 : Q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool Q_1 Q_1) :=
  Q_1 : hol.term hol.bool => hol.REFL hol.bool Q_1.

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) ;)

(; dict ;)

def thm_206 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or P_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1 Q_1 (thm_204 P_2) (thm_205 Q_1).

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_207 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) (thm_199 Q_1 P_2) (thm_206 Q_1 P_2).

(; Theorem: |- ((Data.Bool.\/ P) Q) ;)

(; dict ;)

def thm_208 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.or P_2 Q_1) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))) ;)

(; dict ;)

def thm_209 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hol.EQ_MP (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_207 Q_1 P_2) (thm_208 Q_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> P) R)) ((Data.Bool.==> ((Data.Bool.==> Q) R)) R)) ;)

(; dict ;)

def thm_210 : Q_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> P_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_3 Q_1) -> hol.proof (hol.imp (hol.imp P_3 R_2) (hol.imp (hol.imp Q_1 R_2) R_2)) :=
  Q_1 : hol.term hol.bool => R_2 : hol.term hol.bool => P_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_3 Q_1) => thm_209 Q_1 P_3 hyp_1 R_2.

(; Theorem: |- ((Data.Bool.==> P) R) ;)

(; dict ;)

def thm_211 : R_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_1) -> hol.proof (hol.imp P_2 R_1) :=
  R_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Q) R)) R) ;)

(; dict ;)

def thm_212 : P_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_1 R_2) -> hyp_2 : hol.proof (hol.or P_1 Q_3) -> hol.proof (hol.imp (hol.imp Q_3 R_2) R_2) :=
  P_1 : hol.term hol.bool => R_2 : hol.term hol.bool => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_1 R_2) => hyp_2 : hol.proof (hol.or P_1 Q_3) => thm_210 Q_3 R_2 P_1 hyp_2 (thm_211 R_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> Q) R) ;)

(; dict ;)

def thm_213 : R_1 : hol.term hol.bool -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp Q_2 R_1) -> hol.proof (hol.imp Q_2 R_1) :=
  R_1 : hol.term hol.bool => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp Q_2 R_1) => hyp_1.

(; Theorem: |- R ;)

(; dict ;)

def thm_214 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> R_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_3) -> hyp_2 : hol.proof (hol.imp Q_1 R_3) -> hyp_3 : hol.proof (hol.or P_2 Q_1) -> hol.proof R_3 :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_212 P_2 R_3 Q_1 hyp_1 hyp_3 (thm_213 R_3 Q_1 hyp_2).

(; Theorem: |- ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F)) ;)

(; dict ;)

def thm_215 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t_1 (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) -> hyp_2 : hol.proof (hol.imp (hol.not t_1) (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) -> hyp_3 : hol.proof (hol.or t_1 (hol.not t_1)) -> hol.proof (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) => hyp_2 : hol.proof (hol.imp (hol.not t_1) (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) => hyp_3 : hol.proof (hol.or t_1 (hol.not t_1)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_214 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.not t_1) t_1 (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F)) ;)

(; dict ;)

def thm_216 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp t_1 (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) -> hyp_2 : hol.proof (hol.imp (hol.not t_1) (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) -> hol.proof (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp t_1 (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) => hyp_2 : hol.proof (hol.imp (hol.not t_1) (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) => hol.PROVE_HYP (hol.or t_1 (hol.not t_1)) (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (thm_196 t_1) (hyp_3 : hol.proof (hol.or t_1 (hol.not t_1)) => thm_215 t_1 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F)) ;)

(; dict ;)

def thm_217 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.not t_1) (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) -> hol.proof (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.not t_1) (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) => hol.PROVE_HYP (hol.imp t_1 (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (thm_195 t_1) (hyp_2 : hol.proof (hol.imp t_1 (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) => thm_216 t_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F)) ;)

(; dict ;)

def thm_218 : t_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.not t_1) (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (thm_176 t_1) (hyp_1 : hol.proof (hol.imp (hol.not t_1) (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) => thm_217 t_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) ;)

(; dict ;)

def thm_219 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) :=
  t_1 : hol.term hol.bool => thm_218 t_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool.\/ ((= t) Data.Bool.T)) ((= t) Data.Bool.F))) ;)

(; thm ;)

def thm_220 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))) thm_31 thm_219.

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_221 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_222 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) thm_221 thm_221.

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_223 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) thm_28 thm_222.

(; Theorem: |- ((= \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_224 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))).

(; Theorem: |- ((= \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_225 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (thm_224 t1_1) (thm_224 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_226 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) thm_28 (thm_225 t1_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_227 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_228 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_227 t2_1 t1_2).

(; Theorem: |- ((= (= (\lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2))) t1))) (= (\lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2))) t1))) ;)

(; dict ;)

def thm_229 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1)).

(; Theorem: |- ((= (\lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2))) Data.Bool.F)) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_230 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__388_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_2 t2_1)) (hol.or (hol.not __388_2) (hol.not t2_1))) hol.false) (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__388_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_2 t2_1)) (hol.or (hol.not __388_2) (hol.not t2_1))) hol.false.

(; Theorem: |- ((= ((= (\lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2))) t1)) (\lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2))) Data.Bool.F))) ((= (\lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_231 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1) ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) hol.false)) (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.and hol.false t2_2)) (hol.or (hol.not hol.false) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1)) ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) hol.false) (hol.eq hol.bool (hol.not (hol.and hol.false t2_2)) (hol.or (hol.not hol.false) (hol.not t2_2))) (thm_229 t1_1 t2_2) (thm_230 t2_2).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_232 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= (\lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_233 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1.

(; Theorem: |- ((= (= (\lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2))) t1))) (= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_234 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) thm_232 (thm_233 t1_1 t2_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_235 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1))).

(; Theorem: |- ((= ((= (\lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))))) ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_236 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.and hol.false t2_2)) (hol.or (hol.not hol.false) (hol.not t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and hol.false t2_2)) (hol.or (hol.not hol.false) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) (hol.eq hol.bool (hol.not (hol.and hol.false t2_2)) (hol.or (hol.not hol.false) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and hol.false t2_2)) (hol.or (hol.not hol.false) (hol.not t2_2))) (thm_234 t1_1 t2_2) (thm_235 t2_2).

(; Theorem: |- ((= ((= (\lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2))) t1)) (\lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2))) Data.Bool.F))) ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_237 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1) ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and hol.false t2_2)) (hol.or (hol.not hol.false) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1) ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) hol.false)) (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.and hol.false t2_2)) (hol.or (hol.not hol.false) (hol.not t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and hol.false t2_2)) (hol.or (hol.not hol.false) (hol.not t2_2)))) (thm_231 t1_1 t2_2) (thm_236 t1_1 t2_2).

(; Theorem: |- ((= \lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2)))) \lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_238 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__388_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_2 t2_1)) (hol.or (hol.not __388_2) (hol.not t2_1))) (__388_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_2 t2_1)) (hol.or (hol.not __388_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__388_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_2 t2_1)) (hol.or (hol.not __388_2) (hol.not t2_1))).

(; Theorem: |- ((= t1) Data.Bool.F) ;)

(; dict ;)

def thm_239 : t1_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) -> hol.proof (hol.eq hol.bool t1_1 hol.false) :=
  t1_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) => hyp_1.

(; Theorem: |- ((= (\lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2))) t1)) (\lambda _388. ((= (Data.Bool.~ ((Data.Bool./\ _388) t2))) ((Data.Bool.\/ (Data.Bool.~ _388)) (Data.Bool.~ t2))) Data.Bool.F)) ;)

(; dict ;)

def thm_240 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) -> hol.proof (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1) ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) hol.false)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) => hol.APP_THM hol.bool hol.bool (__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) (__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_2)) (hol.or (hol.not __388_3) (hol.not t2_2))) t1_1 hol.false (thm_238 t2_2) (thm_239 t1_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_241 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_1)) (hol.or (hol.not __388_3) (hol.not t2_1))) t1_2) ((__388_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __388_3 t2_1)) (hol.or (hol.not __388_3) (hol.not t2_1))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1)))) (thm_237 t1_2 t2_1) (thm_240 t1_2 t2_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_242 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false t2_2)) (hol.or (hol.not hol.false) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and hol.false t2_2)) (hol.or (hol.not hol.false) (hol.not t2_2))) (thm_241 t2_2 t1_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_243 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_244 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_243 t_1) (thm_243 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_245 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_246 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_245 thm_245.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_247 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_28 thm_246.

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_248 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_249 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_248 t_1) (thm_248 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_250 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_17 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_251 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_252 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_249 t_1) (thm_250 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_251 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_253 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_254 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_253 t_1) (thm_253 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_255 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_18 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_256 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_257 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_254 t_1) (thm_255 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_256 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_258 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_19 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_259 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_260 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_243 t_1) (thm_258 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_259 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_261 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_262 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_261 t_1) (thm_261 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_263 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_20 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_264 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_265 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_262 t_1) (thm_263 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_264 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_266 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_267 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_266 t_1) (thm_266 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_268 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_21 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_269 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_265 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_267 t_1) (thm_268 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_270 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_260 t_1) (thm_269 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_271 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_257 t_1) (thm_270 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_272 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_252 t_1) (thm_271 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_273 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_272 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_274 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_62 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_275 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_247 thm_273 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_274 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_276 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_62 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_277 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_275 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) => thm_276 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_278 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_95 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_279 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_277 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) => thm_278 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t2)) Data.Bool.F) ;)

(; dict ;)

def thm_280 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t2_1) hol.false) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_244 t_1) (thm_279 t_1)) t2_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_281 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.not hol.false)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.and hol.false t2_1) hol.false thm_121 (thm_280 t2_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) Data.Bool.T) ;)

(; dict ;)

def thm_282 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) hol.true) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.not (hol.and hol.false t2_1)) (hol.not hol.false) hol.true (thm_281 t2_1) thm_9.

(; Theorem: |- ((= (= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2)))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_283 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.and hol.false t2_1))) (hol.eq hol.bool hol.true)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.and hol.false t2_1)) hol.true thm_232 (thm_282 t2_1).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ Data.Bool.F))) (Data.Bool.\/ Data.Bool.T)) ;)

(; dict ;)

def thm_284 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not hol.false)) (hol.or hol.true)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.not hol.false) hol.true thm_32 thm_9.

(; Theorem: |- ((= (Data.Bool.~ t2)) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_285 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not t2_1) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => hol.REFL hol.bool (hol.not t2_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_286 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.false) (hol.not t2_1)) (hol.or hol.true (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or (hol.not hol.false)) (hol.or hol.true) (hol.not t2_1) (hol.not t2_1) thm_284 (thm_285 t2_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) (Data.Bool.~ t2))) Data.Bool.T) ;)

(; dict ;)

def thm_287 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true (hol.not t2_1)) hol.true) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_142 t_1) (hol.not t2_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) Data.Bool.T) ;)

(; dict ;)

def thm_288 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.false) (hol.not t2_1)) hol.true) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.or (hol.not hol.false) (hol.not t2_1)) (hol.or hol.true (hol.not t2_1)) hol.true (thm_286 t2_1) (thm_287 t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_289 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1))) (hol.eq hol.bool hol.true hol.true)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false t2_1))) (hol.eq hol.bool hol.true) (hol.or (hol.not hol.false) (hol.not t2_1)) hol.true (thm_283 t2_1) (thm_288 t2_1).

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_290 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) hol.true) :=
  (t_1 : hol.term hol.bool => thm_40 t_1) hol.true.

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) Data.Bool.T) ;)

(; dict ;)

def thm_291 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1))) hol.true) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1))) (hol.eq hol.bool hol.true hol.true) hol.true (thm_289 t2_1) thm_290.

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_292 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1))) hol.true (thm_291 t2_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_293 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1))) (thm_292 t2_1) thm_15.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_294 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.and hol.false t2_1)) (hol.or (hol.not hol.false) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_242 t1_2 t2_1 hyp_1) (thm_293 t2_1).

(; Theorem: |- ((Data.Bool.==> ((= t1) Data.Bool.F)) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_295 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => thm_294 t2_1 t1_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2))) t1))) (= (\lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2))) t1))) ;)

(; dict ;)

def thm_296 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1)).

(; Theorem: |- ((= (\lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2))) Data.Bool.T)) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_297 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__386_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_2 t2_1)) (hol.or (hol.not __386_2) (hol.not t2_1))) hol.true) (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__386_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_2 t2_1)) (hol.or (hol.not __386_2) (hol.not t2_1))) hol.true.

(; Theorem: |- ((= ((= (\lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2))) t1)) (\lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2))) Data.Bool.T))) ((= (\lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_298 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1) ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) hol.true)) (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.and hol.true t2_2)) (hol.or (hol.not hol.true) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1)) ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) hol.true) (hol.eq hol.bool (hol.not (hol.and hol.true t2_2)) (hol.or (hol.not hol.true) (hol.not t2_2))) (thm_296 t1_1 t2_2) (thm_297 t2_2).

(; Theorem: |- ((= (\lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_299 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1.

(; Theorem: |- ((= (= (\lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2))) t1))) (= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_300 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) thm_232 (thm_299 t1_1 t2_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_301 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1))).

(; Theorem: |- ((= ((= (\lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))))) ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_302 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.and hol.true t2_2)) (hol.or (hol.not hol.true) (hol.not t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and hol.true t2_2)) (hol.or (hol.not hol.true) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) (hol.eq hol.bool (hol.not (hol.and hol.true t2_2)) (hol.or (hol.not hol.true) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and hol.true t2_2)) (hol.or (hol.not hol.true) (hol.not t2_2))) (thm_300 t1_1 t2_2) (thm_301 t2_2).

(; Theorem: |- ((= ((= (\lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2))) t1)) (\lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2))) Data.Bool.T))) ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_303 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1) ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and hol.true t2_2)) (hol.or (hol.not hol.true) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1) ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) hol.true)) (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.and hol.true t2_2)) (hol.or (hol.not hol.true) (hol.not t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and hol.true t2_2)) (hol.or (hol.not hol.true) (hol.not t2_2)))) (thm_298 t1_1 t2_2) (thm_302 t1_1 t2_2).

(; Theorem: |- ((= \lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2)))) \lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_304 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__386_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_2 t2_1)) (hol.or (hol.not __386_2) (hol.not t2_1))) (__386_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_2 t2_1)) (hol.or (hol.not __386_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__386_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_2 t2_1)) (hol.or (hol.not __386_2) (hol.not t2_1))).

(; Theorem: |- ((= t1) Data.Bool.T) ;)

(; dict ;)

def thm_305 : t1_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) -> hol.proof (hol.eq hol.bool t1_1 hol.true) :=
  t1_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) => hyp_1.

(; Theorem: |- ((= (\lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2))) t1)) (\lambda _386. ((= (Data.Bool.~ ((Data.Bool./\ _386) t2))) ((Data.Bool.\/ (Data.Bool.~ _386)) (Data.Bool.~ t2))) Data.Bool.T)) ;)

(; dict ;)

def thm_306 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) -> hol.proof (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1) ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) hol.true)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) => hol.APP_THM hol.bool hol.bool (__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) (__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_2)) (hol.or (hol.not __386_3) (hol.not t2_2))) t1_1 hol.true (thm_304 t2_2) (thm_305 t1_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_307 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_1)) (hol.or (hol.not __386_3) (hol.not t2_1))) t1_2) ((__386_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and __386_3 t2_1)) (hol.or (hol.not __386_3) (hol.not t2_1))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1)))) (thm_303 t1_2 t2_1) (thm_306 t1_2 t2_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_308 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true t2_2)) (hol.or (hol.not hol.true) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and hol.true t2_2)) (hol.or (hol.not hol.true) (hol.not t2_2))) (thm_307 t2_2 t1_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t2)) t2) ;)

(; dict ;)

def thm_309 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t2_1) t2_1) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_250 t_1) t2_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_310 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.and hol.true t2_1) t2_1 thm_121 (thm_309 t2_1).

(; Theorem: |- ((= (= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2)))) (= (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_311 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.and hol.true t2_1))) (hol.eq hol.bool (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.and hol.true t2_1)) (hol.not t2_1) thm_232 (thm_310 t2_1).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ Data.Bool.T))) (Data.Bool.\/ Data.Bool.F)) ;)

(; dict ;)

def thm_312 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not hol.true)) (hol.or hol.false)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.not hol.true) hol.false thm_32 thm_8.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_313 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.true) (hol.not t2_1)) (hol.or hol.false (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or (hol.not hol.true)) (hol.or hol.false) (hol.not t2_1) (hol.not t2_1) thm_312 (thm_285 t2_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) (Data.Bool.~ t2))) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_314 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false (hol.not t2_1)) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_150 t_1) (hol.not t2_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_315 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or (hol.not hol.true) (hol.not t2_1)) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.or (hol.not hol.true) (hol.not t2_1)) (hol.or hol.false (hol.not t2_1)) (hol.not t2_1) (thm_313 t2_1) (thm_314 t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ t2)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_316 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1))) (hol.eq hol.bool (hol.not t2_1) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true t2_1))) (hol.eq hol.bool (hol.not t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1)) (hol.not t2_1) (thm_311 t2_1) (thm_315 t2_1).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_317 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_318 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_317 A x_1) (thm_317 A x_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_319 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_320 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_321 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_320 A) (thm_320 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_322 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_319 A) (thm_321 A).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_323 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_184 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_324 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_22 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_325 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_323 A x_1) (thm_324 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_326 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_317 A x_1) (thm_325 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_327 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 x_1) hol.true) :=
  x_1 : hol.term hol.bool => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_318 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_322 A) (thm_326 A) x_1)) hol.bool x_1.

(; Theorem: |- ((= ((= (Data.Bool.~ t2)) (Data.Bool.~ t2))) Data.Bool.T) ;)

(; dict ;)

def thm_328 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not t2_1) (hol.not t2_1)) hol.true) :=
  t2_1 : hol.term hol.bool => (x_1 : hol.term hol.bool => thm_327 x_1) (hol.not t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) Data.Bool.T) ;)

(; dict ;)

def thm_329 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1))) hol.true) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1))) (hol.eq hol.bool (hol.not t2_1) (hol.not t2_1)) hol.true (thm_316 t2_1) (thm_328 t2_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_330 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1))) hol.true (thm_329 t2_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.T) t2))) ((Data.Bool.\/ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_331 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1))) (thm_330 t2_1) thm_15.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_332 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.and hol.true t2_1)) (hol.or (hol.not hol.true) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_308 t1_2 t2_1 hyp_1) (thm_331 t2_1).

(; Theorem: |- ((Data.Bool.==> ((= t1) Data.Bool.T)) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_333 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => thm_332 t2_1 t1_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((= t1) Data.Bool.T)) ((= t1) Data.Bool.F)) ;)

(; dict ;)

def thm_334 : t1_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool t1_1 hol.true) (hol.eq hol.bool t1_1 hol.false)) :=
  t1_1 : hol.term hol.bool => thm_219 t1_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_335 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) -> hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_214 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_336 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_334 t1_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) => thm_335 t2_1 t1_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_337 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_333 t2_1 t1_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) => thm_336 t2_1 t1_2 hyp_1 hyp_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_338 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_295 t2_1 t1_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) => thm_337 t2_1 t1_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_339 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (thm_228 t2_2 t1_1) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (thm_227 t2_2 t1_1) (thm_338 t2_2 t1_1)).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_340 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) (thm_226 t1_1) (thm_339 t1_1).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; thm ;)

def thm_341 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))))) :=
  hol.EQ_MP (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))))) thm_223 thm_340.

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_342 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_343 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) thm_342 thm_342.

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_344 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) thm_28 thm_343.

(; Theorem: |- ((= \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_345 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))).

(; Theorem: |- ((= \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_346 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (thm_345 t1_1) (thm_345 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_347 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) thm_28 (thm_346 t1_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_348 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_349 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (thm_348 t2_1 t1_2).

(; Theorem: |- ((= (= (\lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2))) t1))) (= (\lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2))) t1))) ;)

(; dict ;)

def thm_350 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1)).

(; Theorem: |- ((= (\lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2))) Data.Bool.F)) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_351 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__392_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_2 t2_1)) (hol.and (hol.not __392_2) (hol.not t2_1))) hol.false) (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__392_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_2 t2_1)) (hol.and (hol.not __392_2) (hol.not t2_1))) hol.false.

(; Theorem: |- ((= ((= (\lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2))) t1)) (\lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2))) Data.Bool.F))) ((= (\lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_352 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1) ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) hol.false)) (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.or hol.false t2_2)) (hol.and (hol.not hol.false) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1)) ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) hol.false) (hol.eq hol.bool (hol.not (hol.or hol.false t2_2)) (hol.and (hol.not hol.false) (hol.not t2_2))) (thm_350 t1_1 t2_2) (thm_351 t2_2).

(; Theorem: |- ((= (\lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_353 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1.

(; Theorem: |- ((= (= (\lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2))) t1))) (= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_354 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) thm_232 (thm_353 t1_1 t2_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_355 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1))).

(; Theorem: |- ((= ((= (\lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))))) ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_356 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.or hol.false t2_2)) (hol.and (hol.not hol.false) (hol.not t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or hol.false t2_2)) (hol.and (hol.not hol.false) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (hol.eq hol.bool (hol.not (hol.or hol.false t2_2)) (hol.and (hol.not hol.false) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or hol.false t2_2)) (hol.and (hol.not hol.false) (hol.not t2_2))) (thm_354 t1_1 t2_2) (thm_355 t2_2).

(; Theorem: |- ((= ((= (\lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2))) t1)) (\lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2))) Data.Bool.F))) ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_357 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1) ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or hol.false t2_2)) (hol.and (hol.not hol.false) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1) ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) hol.false)) (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.or hol.false t2_2)) (hol.and (hol.not hol.false) (hol.not t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or hol.false t2_2)) (hol.and (hol.not hol.false) (hol.not t2_2)))) (thm_352 t1_1 t2_2) (thm_356 t1_1 t2_2).

(; Theorem: |- ((= \lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2)))) \lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_358 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__392_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_2 t2_1)) (hol.and (hol.not __392_2) (hol.not t2_1))) (__392_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_2 t2_1)) (hol.and (hol.not __392_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__392_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_2 t2_1)) (hol.and (hol.not __392_2) (hol.not t2_1))).

(; Theorem: |- ((= (\lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2))) t1)) (\lambda _392. ((= (Data.Bool.~ ((Data.Bool.\/ _392) t2))) ((Data.Bool./\ (Data.Bool.~ _392)) (Data.Bool.~ t2))) Data.Bool.F)) ;)

(; dict ;)

def thm_359 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) -> hol.proof (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1) ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) hol.false)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) => hol.APP_THM hol.bool hol.bool (__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) (__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_2)) (hol.and (hol.not __392_3) (hol.not t2_2))) t1_1 hol.false (thm_358 t2_2) (thm_239 t1_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_360 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_1)) (hol.and (hol.not __392_3) (hol.not t2_1))) t1_2) ((__392_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __392_3 t2_1)) (hol.and (hol.not __392_3) (hol.not t2_1))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1)))) (thm_357 t1_2 t2_1) (thm_359 t1_2 t2_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_361 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false t2_2)) (hol.and (hol.not hol.false) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or hol.false t2_2)) (hol.and (hol.not hol.false) (hol.not t2_2))) (thm_360 t2_2 t1_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t2)) t2) ;)

(; dict ;)

def thm_362 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false t2_1) t2_1) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_150 t_1) t2_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_363 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.or hol.false t2_1) t2_1 thm_121 (thm_362 t2_1).

(; Theorem: |- ((= (= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2)))) (= (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_364 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.or hol.false t2_1))) (hol.eq hol.bool (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.or hol.false t2_1)) (hol.not t2_1) thm_232 (thm_363 t2_1).

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_365 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.~ Data.Bool.F))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_366 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.not hol.false)) (hol.and hol.true)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.not hol.false) hol.true thm_365 thm_9.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_367 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.not hol.false) (hol.not t2_1)) (hol.and hol.true (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.not hol.false)) (hol.and hol.true) (hol.not t2_1) (hol.not t2_1) thm_366 (thm_285 t2_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2))) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_368 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true (hol.not t2_1)) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_250 t_1) (hol.not t2_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_369 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.not hol.false) (hol.not t2_1)) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.and (hol.not hol.false) (hol.not t2_1)) (hol.and hol.true (hol.not t2_1)) (hol.not t2_1) (thm_367 t2_1) (thm_368 t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ t2)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_370 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1))) (hol.eq hol.bool (hol.not t2_1) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false t2_1))) (hol.eq hol.bool (hol.not t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1)) (hol.not t2_1) (thm_364 t2_1) (thm_369 t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) Data.Bool.T) ;)

(; dict ;)

def thm_371 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1))) hol.true) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1))) (hol.eq hol.bool (hol.not t2_1) (hol.not t2_1)) hol.true (thm_370 t2_1) (thm_328 t2_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_372 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1))) hol.true (thm_371 t2_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.F) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_373 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1))) (thm_372 t2_1) thm_15.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_374 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or hol.false t2_1)) (hol.and (hol.not hol.false) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (thm_361 t1_2 t2_1 hyp_1) (thm_373 t2_1).

(; Theorem: |- ((Data.Bool.==> ((= t1) Data.Bool.F)) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_375 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => thm_374 t2_1 t1_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2))) t1))) (= (\lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2))) t1))) ;)

(; dict ;)

def thm_376 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1)).

(; Theorem: |- ((= (\lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2))) Data.Bool.T)) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_377 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__390_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_2 t2_1)) (hol.and (hol.not __390_2) (hol.not t2_1))) hol.true) (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__390_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_2 t2_1)) (hol.and (hol.not __390_2) (hol.not t2_1))) hol.true.

(; Theorem: |- ((= ((= (\lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2))) t1)) (\lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2))) Data.Bool.T))) ((= (\lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_378 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1) ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) hol.true)) (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.or hol.true t2_2)) (hol.and (hol.not hol.true) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1)) ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) hol.true) (hol.eq hol.bool (hol.not (hol.or hol.true t2_2)) (hol.and (hol.not hol.true) (hol.not t2_2))) (thm_376 t1_1 t2_2) (thm_377 t2_2).

(; Theorem: |- ((= (\lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_379 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1.

(; Theorem: |- ((= (= (\lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2))) t1))) (= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_380 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) thm_232 (thm_379 t1_1 t2_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_381 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1))).

(; Theorem: |- ((= ((= (\lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))))) ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_382 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.or hol.true t2_2)) (hol.and (hol.not hol.true) (hol.not t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or hol.true t2_2)) (hol.and (hol.not hol.true) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (hol.eq hol.bool (hol.not (hol.or hol.true t2_2)) (hol.and (hol.not hol.true) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or hol.true t2_2)) (hol.and (hol.not hol.true) (hol.not t2_2))) (thm_380 t1_1 t2_2) (thm_381 t2_2).

(; Theorem: |- ((= ((= (\lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2))) t1)) (\lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2))) Data.Bool.T))) ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_383 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1) ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or hol.true t2_2)) (hol.and (hol.not hol.true) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1) ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) hol.true)) (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.or hol.true t2_2)) (hol.and (hol.not hol.true) (hol.not t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or hol.true t2_2)) (hol.and (hol.not hol.true) (hol.not t2_2)))) (thm_378 t1_1 t2_2) (thm_382 t1_1 t2_2).

(; Theorem: |- ((= \lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2)))) \lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_384 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__390_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_2 t2_1)) (hol.and (hol.not __390_2) (hol.not t2_1))) (__390_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_2 t2_1)) (hol.and (hol.not __390_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__390_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_2 t2_1)) (hol.and (hol.not __390_2) (hol.not t2_1))).

(; Theorem: |- ((= (\lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2))) t1)) (\lambda _390. ((= (Data.Bool.~ ((Data.Bool.\/ _390) t2))) ((Data.Bool./\ (Data.Bool.~ _390)) (Data.Bool.~ t2))) Data.Bool.T)) ;)

(; dict ;)

def thm_385 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) -> hol.proof (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1) ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) hol.true)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) => hol.APP_THM hol.bool hol.bool (__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) (__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_2)) (hol.and (hol.not __390_3) (hol.not t2_2))) t1_1 hol.true (thm_384 t2_2) (thm_305 t1_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_386 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_1)) (hol.and (hol.not __390_3) (hol.not t2_1))) t1_2) ((__390_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or __390_3 t2_1)) (hol.and (hol.not __390_3) (hol.not t2_1))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1)))) (thm_383 t1_2 t2_1) (thm_385 t1_2 t2_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_387 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true t2_2)) (hol.and (hol.not hol.true) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or hol.true t2_2)) (hol.and (hol.not hol.true) (hol.not t2_2))) (thm_386 t2_2 t1_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) t2)) Data.Bool.T) ;)

(; dict ;)

def thm_388 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true t2_1) hol.true) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_142 t_1) t2_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) (Data.Bool.~ Data.Bool.T)) ;)

(; dict ;)

def thm_389 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.not hol.true)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.or hol.true t2_1) hol.true thm_121 (thm_388 t2_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) Data.Bool.F) ;)

(; dict ;)

def thm_390 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) hol.false) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.not (hol.or hol.true t2_1)) (hol.not hol.true) hol.false (thm_389 t2_1) thm_8.

(; Theorem: |- ((= (= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2)))) (= Data.Bool.F)) ;)

(; dict ;)

def thm_391 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.or hol.true t2_1))) (hol.eq hol.bool hol.false)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.or hol.true t2_1)) hol.false thm_232 (thm_390 t2_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.~ Data.Bool.T))) (Data.Bool./\ Data.Bool.F)) ;)

(; dict ;)

def thm_392 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.not hol.true)) (hol.and hol.false)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.not hol.true) hol.false thm_365 thm_8.

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_393 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.not hol.true) (hol.not t2_1)) (hol.and hol.false (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.not hol.true)) (hol.and hol.false) (hol.not t2_1) (hol.not t2_1) thm_392 (thm_285 t2_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2))) Data.Bool.F) ;)

(; dict ;)

def thm_394 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false (hol.not t2_1)) hol.false) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_258 t_1) (hol.not t2_1).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) Data.Bool.F) ;)

(; dict ;)

def thm_395 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.not hol.true) (hol.not t2_1)) hol.false) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.and (hol.not hol.true) (hol.not t2_1)) (hol.and hol.false (hol.not t2_1)) hol.false (thm_393 t2_1) (thm_394 t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ((= Data.Bool.F) Data.Bool.F)) ;)

(; dict ;)

def thm_396 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1))) (hol.eq hol.bool hol.false hol.false)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true t2_1))) (hol.eq hol.bool hol.false) (hol.and (hol.not hol.true) (hol.not t2_1)) hol.false (thm_391 t2_1) (thm_395 t2_1).

(; Theorem: |- ((= ((= Data.Bool.F) Data.Bool.F)) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_397 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false hol.false) (hol.not hol.false)) :=
  (t_1 : hol.term hol.bool => thm_78 t_1) hol.false.

(; Theorem: |- ((= ((= Data.Bool.F) Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_398 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false hol.false) hol.true) :=
  hol.TRANS hol.bool (hol.eq hol.bool hol.false hol.false) (hol.not hol.false) hol.true thm_397 thm_9.

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) Data.Bool.T) ;)

(; dict ;)

def thm_399 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1))) hol.true) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1))) (hol.eq hol.bool hol.false hol.false) hol.true (thm_396 t2_1) thm_398.

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_400 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1))) hol.true (thm_399 t2_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ Data.Bool.T) t2))) ((Data.Bool./\ (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_401 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1))) (thm_400 t2_1) thm_15.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_402 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or hol.true t2_1)) (hol.and (hol.not hol.true) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (thm_387 t1_2 t2_1 hyp_1) (thm_401 t2_1).

(; Theorem: |- ((Data.Bool.==> ((= t1) Data.Bool.T)) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_403 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => thm_402 t2_1 t1_2 hyp_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_404 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) -> hol.proof (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_214 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_405 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (thm_334 t1_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) => thm_404 t2_1 t1_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_406 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (thm_403 t2_1 t1_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) => thm_405 t2_1 t1_2 hyp_1 hyp_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_407 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (thm_375 t2_1 t1_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) => thm_406 t2_1 t1_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_408 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (thm_349 t2_2 t1_1) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))) (thm_348 t2_2 t1_1) (thm_407 t2_2 t1_1)).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_409 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (thm_347 t1_1) (thm_408 t1_1).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; thm ;)

def thm_410 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  hol.EQ_MP (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) thm_344 thm_409.

(; Theorem: |- ((= \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_411 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1).

(; Theorem: |- ((= \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_412 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1) thm_411 thm_411.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ;)

(; dict ;)

def thm_413 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1) thm_28 thm_412.

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_414 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_415 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_414 t_1).

(; Theorem: |- ((= (= (\lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396) t))) (= (\lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396) t))) ;)

(; dict ;)

def thm_416 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1)) (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1)).

(; Theorem: |- ((= (\lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396) Data.Bool.F)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F)) ;)

(; dict ;)

def thm_417 : hol.proof (hol.eq hol.bool ((__396_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_1)) __396_1) hol.false) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) :=
  hol.BETA_CONV hol.bool hol.bool (__396_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_1)) __396_1) hol.false.

(; Theorem: |- ((= ((= (\lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396) t)) (\lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396) Data.Bool.F))) ((= (\lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396) t)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F))) ;)

(; dict ;)

def thm_418 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1) ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) hol.false)) (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false))) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1)) (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1)) ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) hol.false) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (thm_416 t_1) thm_417.

(; Theorem: |- ((= (\lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_419 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1.

(; Theorem: |- ((= (= (\lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396) t))) (= ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ;)

(; dict ;)

def thm_420 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1))) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) thm_232 (thm_419 t_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F)) ;)

(; dict ;)

def thm_421 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false).

(; Theorem: |- ((= ((= (\lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396) t)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F))) ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F))) ;)

(; dict ;)

def thm_422 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false))) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (thm_420 t_1) thm_421.

(; Theorem: |- ((= ((= (\lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396) t)) (\lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396) Data.Bool.F))) ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F))) ;)

(; dict ;)

def thm_423 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1) ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1) ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) hol.false)) (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) (thm_418 t_1) (thm_422 t_1).

(; Theorem: |- ((= \lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396)) \lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396)) ;)

(; dict ;)

def thm_424 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__396_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_1)) __396_1) (__396_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_1)) __396_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (__396_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_1)) __396_1).

(; Theorem: |- ((= t) Data.Bool.F) ;)

(; dict ;)

def thm_425 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof (hol.eq hol.bool t_1 hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => hyp_1.

(; Theorem: |- ((= (\lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396) t)) (\lambda _396. ((= (Data.Bool.~ (Data.Bool.~ _396))) _396) Data.Bool.F)) ;)

(; dict ;)

def thm_426 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1) ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => hol.APP_THM hol.bool hol.bool (__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) (__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1 hol.false thm_424 (thm_425 t_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F)) ;)

(; dict ;)

def thm_427 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) t_1) ((__396_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __396_2)) __396_2) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) (thm_423 t_1) (thm_426 t_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_428 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (thm_427 t_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F)) (Data.Bool.~ (Data.Bool.~ (Data.Bool.~ Data.Bool.F)))) ;)

(; dict ;)

def thm_429 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (hol.not (hol.not (hol.not hol.false)))) :=
  (t_1 : hol.term hol.bool => thm_83 t_1) (hol.not (hol.not hol.false)).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) (Data.Bool.~ Data.Bool.T)) ;)

(; dict ;)

def thm_430 : hol.proof (hol.eq hol.bool (hol.not (hol.not hol.false)) (hol.not hol.true)) :=
  hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.not hol.false) hol.true thm_121 thm_9.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F) ;)

(; dict ;)

def thm_431 : hol.proof (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) :=
  hol.TRANS hol.bool (hol.not (hol.not hol.false)) (hol.not hol.true) hol.false thm_430 thm_8.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ (Data.Bool.~ Data.Bool.F)))) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_432 : hol.proof (hol.eq hol.bool (hol.not (hol.not (hol.not hol.false))) (hol.not hol.false)) :=
  hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.not (hol.not hol.false)) hol.false thm_121 thm_431.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ (Data.Bool.~ Data.Bool.F)))) Data.Bool.T) ;)

(; dict ;)

def thm_433 : hol.proof (hol.eq hol.bool (hol.not (hol.not (hol.not hol.false))) hol.true) :=
  hol.TRANS hol.bool (hol.not (hol.not (hol.not hol.false))) (hol.not hol.false) hol.true thm_432 thm_9.

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_434 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) hol.true) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (hol.not (hol.not (hol.not hol.false))) hol.true thm_429 thm_433.

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F)) ;)

(; dict ;)

def thm_435 : hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) :=
  hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) hol.true thm_434.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t))) t) ;)

(; dict ;)

def thm_436 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_428 t_1 hyp_1) (hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) thm_435 thm_15).

(; Theorem: |- ((Data.Bool.==> ((= t) Data.Bool.F)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_437 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.false) => thm_436 t_1 hyp_1.

(; Theorem: |- ((= (= (\lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394) t))) (= (\lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394) t))) ;)

(; dict ;)

def thm_438 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1)) (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1)).

(; Theorem: |- ((= (\lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394) Data.Bool.T)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T)) ;)

(; dict ;)

def thm_439 : hol.proof (hol.eq hol.bool ((__394_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_1)) __394_1) hol.true) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) :=
  hol.BETA_CONV hol.bool hol.bool (__394_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_1)) __394_1) hol.true.

(; Theorem: |- ((= ((= (\lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394) t)) (\lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394) Data.Bool.T))) ((= (\lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394) t)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T))) ;)

(; dict ;)

def thm_440 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1) ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) hol.true)) (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true))) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1)) (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1)) ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) hol.true) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (thm_438 t_1) thm_439.

(; Theorem: |- ((= (\lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_441 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1.

(; Theorem: |- ((= (= (\lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394) t))) (= ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ;)

(; dict ;)

def thm_442 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1))) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) thm_232 (thm_441 t_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T)) ;)

(; dict ;)

def thm_443 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true).

(; Theorem: |- ((= ((= (\lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394) t)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T))) ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T))) ;)

(; dict ;)

def thm_444 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true))) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (thm_442 t_1) thm_443.

(; Theorem: |- ((= ((= (\lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394) t)) (\lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394) Data.Bool.T))) ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T))) ;)

(; dict ;)

def thm_445 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1) ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1) ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) hol.true)) (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) (thm_440 t_1) (thm_444 t_1).

(; Theorem: |- ((= \lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394)) \lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394)) ;)

(; dict ;)

def thm_446 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__394_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_1)) __394_1) (__394_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_1)) __394_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (__394_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_1)) __394_1).

(; Theorem: |- ((= (\lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394) t)) (\lambda _394. ((= (Data.Bool.~ (Data.Bool.~ _394))) _394) Data.Bool.T)) ;)

(; dict ;)

def thm_447 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1) ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) hol.true)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.APP_THM hol.bool hol.bool (__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) (__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1 hol.true thm_446 (thm_179 t_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T)) ;)

(; dict ;)

def thm_448 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) t_1) ((__394_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __394_2)) __394_2) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) (thm_445 t_1) (thm_447 t_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_449 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (thm_448 t_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T)) (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) ;)

(; dict ;)

def thm_450 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (hol.not (hol.not hol.true))) :=
  (t_1 : hol.term hol.bool => thm_73 t_1) (hol.not (hol.not hol.true)).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_451 : hol.proof (hol.eq hol.bool (hol.not (hol.not hol.true)) (hol.not hol.false)) :=
  hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.not hol.true) hol.false thm_121 thm_8.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T) ;)

(; dict ;)

def thm_452 : hol.proof (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) :=
  hol.TRANS hol.bool (hol.not (hol.not hol.true)) (hol.not hol.false) hol.true thm_451 thm_9.

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_453 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) hol.true) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (hol.not (hol.not hol.true)) hol.true thm_450 thm_452.

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T)) ;)

(; dict ;)

def thm_454 : hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) :=
  hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) hol.true thm_453.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t))) t) ;)

(; dict ;)

def thm_455 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_449 t_1 hyp_1) (hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) thm_454 thm_15).

(; Theorem: |- ((Data.Bool.==> ((= t) Data.Bool.T)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_456 : t_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_455 t_1 hyp_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t))) t) ;)

(; dict ;)

def thm_457 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) -> hol.proof (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_214 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t))) t) ;)

(; dict ;)

def thm_458 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) -> hol.proof (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => hol.PROVE_HYP (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_218 t_1) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false)) => thm_457 t_1 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t))) t) ;)

(; dict ;)

def thm_459 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) -> hol.proof (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_456 t_1) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => thm_458 t_1 hyp_1 hyp_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t))) t) ;)

(; dict ;)

def thm_460 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_437 t_1) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => thm_459 t_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_461 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_415 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_414 t_1) (thm_460 t_1)).

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; thm ;)

def thm_462 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  hol.EQ_MP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) thm_413 thm_461.

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)))) \lambda t1. (Data.Bool.! \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)))) ;)

(; dict ;)

def thm_463 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)))) \lambda t1. (Data.Bool.! \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)))) ;)

(; dict ;)

def thm_464 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) thm_463 thm_463.

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))))) ;)

(; dict ;)

def thm_465 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) thm_28 thm_464.

(; Theorem: |- ((= \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ;)

(; dict ;)

def thm_466 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) :=
  t1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)).

(; Theorem: |- ((= \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ;)

(; dict ;)

def thm_467 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) :=
  t1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (thm_466 t1_1) (thm_466 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)))) (Data.Bool.! \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)))) ;)

(; dict ;)

def thm_468 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) thm_28 (thm_467 t1_1).

(; Theorem: |- ((= ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ;)

(; dict ;)

def thm_469 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)).

(; Theorem: |- ((= ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ;)

(; dict ;)

def thm_470 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) (thm_469 t2_1 t1_2).

(; Theorem: |- ((= (= (\lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2)) t1))) (= (\lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2)) t1))) ;)

(; dict ;)

def thm_471 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1)) (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1)).

(; Theorem: |- ((= (\lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2)) Data.Bool.F)) ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.F) t2))) ;)

(; dict ;)

def thm_472 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__400_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_2) (hol.not t2_1)) (hol.eq hol.bool __400_2 t2_1)) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1))) :=
  t2_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__400_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_2) (hol.not t2_1)) (hol.eq hol.bool __400_2 t2_1)) hol.false.

(; Theorem: |- ((= ((= (\lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2)) t1)) (\lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2)) Data.Bool.F))) ((= (\lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2)) t1)) ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.F) t2)))) ;)

(; dict ;)

def thm_473 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1) ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) hol.false)) (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_2)) (hol.eq hol.bool hol.false t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1)) (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1)) ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_2)) (hol.eq hol.bool hol.false t2_2)) (thm_471 t1_1 t2_2) (thm_472 t2_2).

(; Theorem: |- ((= (\lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2)) t1)) ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ;)

(; dict ;)

def thm_474 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1.

(; Theorem: |- ((= (= (\lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2)) t1))) (= ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)))) ;)

(; dict ;)

def thm_475 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) thm_232 (thm_474 t1_1 t2_2).

(; Theorem: |- ((= ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.F) t2))) ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.F) t2))) ;)

(; dict ;)

def thm_476 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1))) :=
  t2_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1)).

(; Theorem: |- ((= ((= (\lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2)) t1)) ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.F) t2)))) ((= ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.F) t2)))) ;)

(; dict ;)

def thm_477 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_2)) (hol.eq hol.bool hol.false t2_2))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_2)) (hol.eq hol.bool hol.false t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_2)) (hol.eq hol.bool hol.false t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_2)) (hol.eq hol.bool hol.false t2_2)) (thm_475 t1_1 t2_2) (thm_476 t2_2).

(; Theorem: |- ((= ((= (\lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2)) t1)) (\lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2)) Data.Bool.F))) ((= ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.F) t2)))) ;)

(; dict ;)

def thm_478 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1) ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_2)) (hol.eq hol.bool hol.false t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1) ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) hol.false)) (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_2)) (hol.eq hol.bool hol.false t2_2))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_2)) (hol.eq hol.bool hol.false t2_2))) (thm_473 t1_1 t2_2) (thm_477 t1_1 t2_2).

(; Theorem: |- ((= \lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2))) \lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2))) ;)

(; dict ;)

def thm_479 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__400_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_2) (hol.not t2_1)) (hol.eq hol.bool __400_2 t2_1)) (__400_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_2) (hol.not t2_1)) (hol.eq hol.bool __400_2 t2_1))) :=
  t2_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__400_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_2) (hol.not t2_1)) (hol.eq hol.bool __400_2 t2_1)).

(; Theorem: |- ((= (\lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2)) t1)) (\lambda _400. ((= ((= (Data.Bool.~ _400)) (Data.Bool.~ t2))) ((= _400) t2)) Data.Bool.F)) ;)

(; dict ;)

def thm_480 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) -> hol.proof (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1) ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) hol.false)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) => hol.APP_THM hol.bool hol.bool (__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) (__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_2)) (hol.eq hol.bool __400_3 t2_2)) t1_1 hol.false (thm_479 t2_2) (thm_239 t1_1 hyp_1).

(; Theorem: |- ((= ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.F) t2))) ;)

(; dict ;)

def thm_481 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_1)) (hol.eq hol.bool __400_3 t2_1)) t1_2) ((__400_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __400_3) (hol.not t2_1)) (hol.eq hol.bool __400_3 t2_1)) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1))) (thm_478 t1_2 t2_1) (thm_480 t1_2 t2_1 hyp_1).

(; Theorem: |- ((= ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.F) t2))) ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ;)

(; dict ;)

def thm_482 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_2)) (hol.eq hol.bool hol.false t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_2)) (hol.eq hol.bool hol.false t2_2)) (thm_481 t2_2 t1_1 hyp_1).

(; Theorem: |- ((= (= (Data.Bool.~ Data.Bool.F))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_483 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not hol.false)) (hol.eq hol.bool hol.true)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not hol.false) hol.true thm_232 thm_9.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.T) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_484 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.true (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not hol.false)) (hol.eq hol.bool hol.true) (hol.not t2_1) (hol.not t2_1) thm_483 (thm_285 t2_1).

(; Theorem: |- ((= ((= Data.Bool.T) (Data.Bool.~ t2))) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_485 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.not t2_1)) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_40 t_1) (hol.not t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_486 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.true (hol.not t2_1)) (hol.not t2_1) (thm_484 t2_1) (thm_485 t2_1).

(; Theorem: |- ((= (= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) (= (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_487 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1))) (hol.eq hol.bool (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.not t2_1) thm_232 (thm_486 t2_1).

(; Theorem: |- ((= ((= Data.Bool.F) t2)) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_488 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t2_1) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_78 t_1) t2_1.

(; Theorem: |- ((= ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.F) t2))) ((= (Data.Bool.~ t2)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_489 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1)) (hol.eq hol.bool (hol.not t2_1) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1))) (hol.eq hol.bool (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1) (hol.not t2_1) (thm_487 t2_1) (thm_488 t2_1).

(; Theorem: |- ((= ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.F) t2))) Data.Bool.T) ;)

(; dict ;)

def thm_490 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1)) hol.true) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1)) (hol.eq hol.bool (hol.not t2_1) (hol.not t2_1)) hol.true (thm_489 t2_1) (thm_328 t2_1).

(; Theorem: |- ((= Data.Bool.T) ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.F) t2))) ;)

(; dict ;)

def thm_491 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1))) :=
  t2_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1)) hol.true (thm_490 t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((= Data.Bool.F) t2)) ;)

(; dict ;)

def thm_492 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1)) :=
  t2_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1)) (thm_491 t2_1) thm_15.

(; Theorem: |- ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)) ;)

(; dict ;)

def thm_493 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) (hol.not t2_1)) (hol.eq hol.bool hol.false t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) (thm_482 t1_2 t2_1 hyp_1) (thm_492 t2_1).

(; Theorem: |- ((Data.Bool.==> ((= t1) Data.Bool.F)) ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ;)

(; dict ;)

def thm_494 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => thm_493 t2_1 t1_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2)) t1))) (= (\lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2)) t1))) ;)

(; dict ;)

def thm_495 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1)) (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1)).

(; Theorem: |- ((= (\lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2)) Data.Bool.T)) ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((= Data.Bool.T) t2))) ;)

(; dict ;)

def thm_496 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__398_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_2) (hol.not t2_1)) (hol.eq hol.bool __398_2 t2_1)) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.true t2_1))) :=
  t2_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__398_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_2) (hol.not t2_1)) (hol.eq hol.bool __398_2 t2_1)) hol.true.

(; Theorem: |- ((= ((= (\lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2)) t1)) (\lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2)) Data.Bool.T))) ((= (\lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2)) t1)) ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((= Data.Bool.T) t2)))) ;)

(; dict ;)

def thm_497 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1) ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) hol.true)) (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_2)) (hol.eq hol.bool hol.true t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1)) (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1)) ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_2)) (hol.eq hol.bool hol.true t2_2)) (thm_495 t1_1 t2_2) (thm_496 t2_2).

(; Theorem: |- ((= (\lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2)) t1)) ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ;)

(; dict ;)

def thm_498 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1.

(; Theorem: |- ((= (= (\lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2)) t1))) (= ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)))) ;)

(; dict ;)

def thm_499 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) thm_232 (thm_498 t1_1 t2_2).

(; Theorem: |- ((= ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((= Data.Bool.T) t2))) ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((= Data.Bool.T) t2))) ;)

(; dict ;)

def thm_500 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.true t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.true t2_1))) :=
  t2_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.true t2_1)).

(; Theorem: |- ((= ((= (\lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2)) t1)) ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((= Data.Bool.T) t2)))) ((= ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((= Data.Bool.T) t2)))) ;)

(; dict ;)

def thm_501 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_2)) (hol.eq hol.bool hol.true t2_2))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_2)) (hol.eq hol.bool hol.true t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_2)) (hol.eq hol.bool hol.true t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_2)) (hol.eq hol.bool hol.true t2_2)) (thm_499 t1_1 t2_2) (thm_500 t2_2).

(; Theorem: |- ((= ((= (\lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2)) t1)) (\lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2)) Data.Bool.T))) ((= ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((= Data.Bool.T) t2)))) ;)

(; dict ;)

def thm_502 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1) ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_2)) (hol.eq hol.bool hol.true t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1) ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) hol.true)) (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_2)) (hol.eq hol.bool hol.true t2_2))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_2)) (hol.eq hol.bool hol.true t2_2))) (thm_497 t1_1 t2_2) (thm_501 t1_1 t2_2).

(; Theorem: |- ((= \lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2))) \lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2))) ;)

(; dict ;)

def thm_503 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__398_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_2) (hol.not t2_1)) (hol.eq hol.bool __398_2 t2_1)) (__398_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_2) (hol.not t2_1)) (hol.eq hol.bool __398_2 t2_1))) :=
  t2_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__398_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_2) (hol.not t2_1)) (hol.eq hol.bool __398_2 t2_1)).

(; Theorem: |- ((= (\lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2)) t1)) (\lambda _398. ((= ((= (Data.Bool.~ _398)) (Data.Bool.~ t2))) ((= _398) t2)) Data.Bool.T)) ;)

(; dict ;)

def thm_504 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) -> hol.proof (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1) ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) hol.true)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) => hol.APP_THM hol.bool hol.bool (__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) (__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_2)) (hol.eq hol.bool __398_3 t2_2)) t1_1 hol.true (thm_503 t2_2) (thm_305 t1_1 hyp_1).

(; Theorem: |- ((= ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((= Data.Bool.T) t2))) ;)

(; dict ;)

def thm_505 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.true t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_1)) (hol.eq hol.bool __398_3 t2_1)) t1_2) ((__398_3 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not __398_3) (hol.not t2_1)) (hol.eq hol.bool __398_3 t2_1)) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.true t2_1))) (thm_502 t1_2 t2_1) (thm_504 t1_2 t2_1 hyp_1).

(; Theorem: |- ((= ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((= Data.Bool.T) t2))) ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ;)

(; dict ;)

def thm_506 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_2)) (hol.eq hol.bool hol.true t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_2)) (hol.eq hol.bool hol.true t2_2)) (thm_505 t2_2 t1_1 hyp_1).

(; Theorem: |- ((= (= (Data.Bool.~ Data.Bool.T))) (= Data.Bool.F)) ;)

(; dict ;)

def thm_507 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not hol.true)) (hol.eq hol.bool hol.false)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not hol.true) hol.false thm_232 thm_8.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((= Data.Bool.F) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_508 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.false (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not hol.true)) (hol.eq hol.bool hol.false) (hol.not t2_1) (hol.not t2_1) thm_507 (thm_285 t2_1).

(; Theorem: |- ((= ((= Data.Bool.F) (Data.Bool.~ t2))) (Data.Bool.~ (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_509 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false (hol.not t2_1)) (hol.not (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_78 t_1) (hol.not t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) (Data.Bool.~ (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_510 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.not (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.false (hol.not t2_1)) (hol.not (hol.not t2_1)) (thm_508 t2_1) (thm_509 t2_1).

(; Theorem: |- ((= (= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) (= (Data.Bool.~ (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_511 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.not (hol.not t2_1)) thm_232 (thm_510 t2_1).

(; Theorem: |- ((= ((= Data.Bool.T) t2)) t2) ;)

(; dict ;)

def thm_512 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t2_1) t2_1) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_40 t_1) t2_1.

(; Theorem: |- ((= ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((= Data.Bool.T) t2))) ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ;)

(; dict ;)

def thm_513 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.true t2_1)) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.not t2_1))) (hol.eq hol.bool hol.true t2_1) t2_1 (thm_511 t2_1) (thm_512 t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((= Data.Bool.T) t2))) ;)

(; dict ;)

def thm_514 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.true t2_1))) :=
  t2_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.true t2_1)) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (thm_513 t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ;)

(; dict ;)

def thm_515 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) :=
  t2_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ;)

(; dict ;)

def thm_516 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) :=
  t2_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (thm_515 t2_1).

(; Theorem: |- ((= (= (\lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404) t2))) (= (\lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404) t2))) ;)

(; dict ;)

def thm_517 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1)) (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1))) :=
  t2_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1)).

(; Theorem: |- ((= (\lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404) Data.Bool.F)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F)) ;)

(; dict ;)

def thm_518 : hol.proof (hol.eq hol.bool ((__404_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_1)) __404_1) hol.false) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) :=
  hol.BETA_CONV hol.bool hol.bool (__404_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_1)) __404_1) hol.false.

(; Theorem: |- ((= ((= (\lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404) t2)) (\lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404) Data.Bool.F))) ((= (\lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404) t2)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F))) ;)

(; dict ;)

def thm_519 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1) ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) hol.false)) (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1)) (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1)) ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) hol.false) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (thm_517 t2_1) thm_518.

(; Theorem: |- ((= (\lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404) t2)) ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ;)

(; dict ;)

def thm_520 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) :=
  t2_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1.

(; Theorem: |- ((= (= (\lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404) t2))) (= ((= (Data.Bool.~ (Data.Bool.~ t2))) t2))) ;)

(; dict ;)

def thm_521 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) thm_232 (thm_520 t2_1).

(; Theorem: |- ((= ((= (\lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404) t2)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F))) ((= ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F))) ;)

(; dict ;)

def thm_522 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (thm_521 t2_1) thm_421.

(; Theorem: |- ((= ((= (\lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404) t2)) (\lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404) Data.Bool.F))) ((= ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F))) ;)

(; dict ;)

def thm_523 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1) ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false))) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1) ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) hol.false)) (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) (thm_519 t2_1) (thm_522 t2_1).

(; Theorem: |- ((= \lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404)) \lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404)) ;)

(; dict ;)

def thm_524 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__404_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_1)) __404_1) (__404_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_1)) __404_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (__404_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_1)) __404_1).

(; Theorem: |- ((= t2) Data.Bool.F) ;)

(; dict ;)

def thm_525 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.false) -> hol.proof (hol.eq hol.bool t2_1 hol.false) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.false) => hyp_1.

(; Theorem: |- ((= (\lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404) t2)) (\lambda _404. ((= (Data.Bool.~ (Data.Bool.~ _404))) _404) Data.Bool.F)) ;)

(; dict ;)

def thm_526 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.false) -> hol.proof (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1) ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) hol.false)) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.false) => hol.APP_THM hol.bool hol.bool (__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) (__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1 hol.false thm_524 (thm_525 t2_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F)) ;)

(; dict ;)

def thm_527 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) t2_1) ((__404_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __404_2)) __404_2) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false)) (thm_523 t2_1) (thm_526 t2_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.F))) Data.Bool.F)) ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ;)

(; dict ;)

def thm_528 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (thm_527 t2_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t2))) t2) ;)

(; dict ;)

def thm_529 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not hol.false)) hol.false) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (thm_528 t2_1 hyp_1) thm_431.

(; Theorem: |- ((Data.Bool.==> ((= t2) Data.Bool.F)) ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ;)

(; dict ;)

def thm_530 : t2_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.false) => thm_529 t2_1 hyp_1.

(; Theorem: |- ((= (= (\lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402) t2))) (= (\lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402) t2))) ;)

(; dict ;)

def thm_531 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1)) (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1))) :=
  t2_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1)).

(; Theorem: |- ((= (\lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402) Data.Bool.T)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T)) ;)

(; dict ;)

def thm_532 : hol.proof (hol.eq hol.bool ((__402_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_1)) __402_1) hol.true) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) :=
  hol.BETA_CONV hol.bool hol.bool (__402_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_1)) __402_1) hol.true.

(; Theorem: |- ((= ((= (\lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402) t2)) (\lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402) Data.Bool.T))) ((= (\lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402) t2)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T))) ;)

(; dict ;)

def thm_533 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1) ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) hol.true)) (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1)) (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1)) ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) hol.true) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (thm_531 t2_1) thm_532.

(; Theorem: |- ((= (\lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402) t2)) ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ;)

(; dict ;)

def thm_534 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) :=
  t2_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1.

(; Theorem: |- ((= (= (\lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402) t2))) (= ((= (Data.Bool.~ (Data.Bool.~ t2))) t2))) ;)

(; dict ;)

def thm_535 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) thm_232 (thm_534 t2_1).

(; Theorem: |- ((= ((= (\lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402) t2)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T))) ((= ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T))) ;)

(; dict ;)

def thm_536 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (thm_535 t2_1) thm_443.

(; Theorem: |- ((= ((= (\lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402) t2)) (\lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402) Data.Bool.T))) ((= ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T))) ;)

(; dict ;)

def thm_537 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1) ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true))) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1) ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) hol.true)) (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) (thm_533 t2_1) (thm_536 t2_1).

(; Theorem: |- ((= \lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402)) \lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402)) ;)

(; dict ;)

def thm_538 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__402_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_1)) __402_1) (__402_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_1)) __402_1)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (__402_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_1)) __402_1).

(; Theorem: |- ((= t2) Data.Bool.T) ;)

(; dict ;)

def thm_539 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.true) -> hol.proof (hol.eq hol.bool t2_1 hol.true) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.true) => hyp_1.

(; Theorem: |- ((= (\lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402) t2)) (\lambda _402. ((= (Data.Bool.~ (Data.Bool.~ _402))) _402) Data.Bool.T)) ;)

(; dict ;)

def thm_540 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.true) -> hol.proof (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1) ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) hol.true)) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.true) => hol.APP_THM hol.bool hol.bool (__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) (__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1 hol.true thm_538 (thm_539 t2_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T)) ;)

(; dict ;)

def thm_541 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) t2_1) ((__402_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not __402_2)) __402_2) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true)) (thm_537 t2_1) (thm_540 t2_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ Data.Bool.T))) Data.Bool.T)) ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ;)

(; dict ;)

def thm_542 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (thm_541 t2_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t2))) t2) ;)

(; dict ;)

def thm_543 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not hol.true)) hol.true) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (thm_542 t2_1 hyp_1) thm_452.

(; Theorem: |- ((Data.Bool.==> ((= t2) Data.Bool.T)) ((= (Data.Bool.~ (Data.Bool.~ t2))) t2)) ;)

(; dict ;)

def thm_544 : t2_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t2_1 hol.true) => thm_543 t2_1 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((= t2) Data.Bool.T)) ((= t2) Data.Bool.F)) ;)

(; dict ;)

def thm_545 : t2_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool t2_1 hol.true) (hol.eq hol.bool t2_1 hol.false)) :=
  t2_1 : hol.term hol.bool => thm_219 t2_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t2))) t2) ;)

(; dict ;)

def thm_546 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool t2_1 hol.true) (hol.eq hol.bool t2_1 hol.false)) -> hol.proof (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool t2_1 hol.true) (hol.eq hol.bool t2_1 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_214 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool t2_1 hol.false) (hol.eq hol.bool t2_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t2))) t2) ;)

(; dict ;)

def thm_547 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) -> hol.proof (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) => hol.PROVE_HYP (hol.or (hol.eq hol.bool t2_1 hol.true) (hol.eq hol.bool t2_1 hol.false)) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (thm_545 t2_1) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool t2_1 hol.true) (hol.eq hol.bool t2_1 hol.false)) => thm_546 t2_1 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t2))) t2) ;)

(; dict ;)

def thm_548 : t2_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) -> hol.proof (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) :=
  t2_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t2_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (thm_544 t2_1) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.true) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) => thm_547 t2_1 hyp_1 hyp_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t2))) t2) ;)

(; dict ;)

def thm_549 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) :=
  t2_1 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t2_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (thm_530 t2_1) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t2_1 hol.false) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1)) => thm_548 t2_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((= Data.Bool.T) t2)) ;)

(; dict ;)

def thm_550 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.true t2_1)) :=
  t2_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.true t2_1)) (thm_514 t2_1) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (hol.eq hol.bool (hol.not (hol.not t2_1)) t2_1) (thm_516 t2_1) (thm_549 t2_1)).

(; Theorem: |- ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)) ;)

(; dict ;)

def thm_551 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) (hol.not t2_1)) (hol.eq hol.bool hol.true t2_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) (thm_506 t1_2 t2_1 hyp_1) (thm_550 t2_1).

(; Theorem: |- ((Data.Bool.==> ((= t1) Data.Bool.T)) ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ;)

(; dict ;)

def thm_552 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => thm_551 t2_1 t1_2 hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)) ;)

(; dict ;)

def thm_553 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_214 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)) ;)

(; dict ;)

def thm_554 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) (thm_334 t1_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) => thm_553 t2_1 t1_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)) ;)

(; dict ;)

def thm_555 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) (thm_552 t2_1 t1_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) => thm_554 t2_1 t1_2 hyp_1 hyp_2).

(; Theorem: |- ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)) ;)

(; dict ;)

def thm_556 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1)) (thm_494 t2_1 t1_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_2) (hol.not t2_1)) (hol.eq hol.bool t1_2 t2_1))) => thm_555 t2_1 t1_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2))) ;)

(; dict ;)

def thm_557 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (thm_470 t2_2 t1_1) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)) (thm_469 t2_2 t1_1) (thm_556 t2_2 t1_1)).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)))) ;)

(; dict ;)

def thm_558 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)))) :=
  t1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2))) (thm_468 t1_1) (thm_557 t1_1).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((= (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((= t1) t2)))) ;)

(; thm ;)

def thm_559 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)))) :=
  hol.EQ_MP (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool (hol.not t1_1) (hol.not t2_2)) (hol.eq hol.bool t1_1 t2_2)))) thm_465 thm_558.

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))))) \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_560 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))))) \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_561 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) thm_560 thm_560.

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_562 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) thm_28 thm_561.

(; Theorem: |- ((= \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_563 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))).

(; Theorem: |- ((= \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_564 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (thm_563 t1_1) (thm_563 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))))) (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_565 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) thm_28 (thm_564 t1_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_566 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_567 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (thm_566 t2_1 t1_2).

(; Theorem: |- ((= (= (\lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2))) t1))) (= (\lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2))) t1))) ;)

(; dict ;)

def thm_568 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1)) (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1)).

(; Theorem: |- ((= (\lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2))) Data.Bool.F)) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_569 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__408_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_2 t2_1)) (hol.and __408_2 (hol.not t2_1))) hol.false) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__408_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_2 t2_1)) (hol.and __408_2 (hol.not t2_1))) hol.false.

(; Theorem: |- ((= ((= (\lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2))) t1)) (\lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2))) Data.Bool.F))) ((= (\lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_570 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1) ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) hol.false)) (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_2)) (hol.and hol.false (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1)) (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1)) ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) hol.false) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_2)) (hol.and hol.false (hol.not t2_2))) (thm_568 t1_1 t2_2) (thm_569 t2_2).

(; Theorem: |- ((= (\lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_571 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1.

(; Theorem: |- ((= (= (\lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2))) t1))) (= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_572 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) thm_232 (thm_571 t1_1 t2_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_573 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1))).

(; Theorem: |- ((= ((= (\lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2))))) ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_574 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_2)) (hol.and hol.false (hol.not t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_2)) (hol.and hol.false (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_2)) (hol.and hol.false (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_2)) (hol.and hol.false (hol.not t2_2))) (thm_572 t1_1 t2_2) (thm_573 t2_2).

(; Theorem: |- ((= ((= (\lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2))) t1)) (\lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2))) Data.Bool.F))) ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_575 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1) ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_2)) (hol.and hol.false (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1) ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) hol.false)) (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_2)) (hol.and hol.false (hol.not t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_2)) (hol.and hol.false (hol.not t2_2)))) (thm_570 t1_1 t2_2) (thm_574 t1_1 t2_2).

(; Theorem: |- ((= \lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2)))) \lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_576 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__408_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_2 t2_1)) (hol.and __408_2 (hol.not t2_1))) (__408_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_2 t2_1)) (hol.and __408_2 (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__408_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_2 t2_1)) (hol.and __408_2 (hol.not t2_1))).

(; Theorem: |- ((= (\lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2))) t1)) (\lambda _408. ((= (Data.Bool.~ ((Data.Bool.==> _408) t2))) ((Data.Bool./\ _408) (Data.Bool.~ t2))) Data.Bool.F)) ;)

(; dict ;)

def thm_577 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) -> hol.proof (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1) ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) hol.false)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) => hol.APP_THM hol.bool hol.bool (__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) (__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_2)) (hol.and __408_3 (hol.not t2_2))) t1_1 hol.false (thm_576 t2_2) (thm_239 t1_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_578 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_1)) (hol.and __408_3 (hol.not t2_1))) t1_2) ((__408_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __408_3 t2_1)) (hol.and __408_3 (hol.not t2_1))) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1)))) (thm_575 t1_2 t2_1) (thm_577 t1_2 t2_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_579 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.false t2_2)) (hol.and hol.false (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_2)) (hol.and hol.false (hol.not t2_2))) (thm_578 t2_2 t1_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_580 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_581 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_580 t_1) (thm_580 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_582 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_583 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_582 thm_582.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) ;)

(; dict ;)

def thm_584 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_28 thm_583.

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_585 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_586 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_585 t_1) (thm_585 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_587 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_23 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_588 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_589 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_586 t_1) (thm_587 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => thm_588 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_590 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_591 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_590 t_1) (thm_590 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_592 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_24 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_593 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_594 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_591 t_1) (thm_592 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => thm_593 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_595 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_25 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_596 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_597 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_580 t_1) (thm_595 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => thm_596 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_598 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_599 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_598 t_1) (thm_598 t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_600 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_601 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_600 thm_600.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_602 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_28 thm_601.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_603 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_184 t_1) (hol.imp t_1 t_1).

(; Theorem: |- ((Data.Bool.==> t) t) ;)

(; dict ;)

def thm_604 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 t_1) :=
  t_1 : hol.term hol.bool => thm_26 t_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_605 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_603 t_1) (thm_604 t_1).

(; Theorem: |- ((= (= ((Data.Bool.==> t) t))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_606 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp t_1 t_1) hol.true thm_232 (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_598 t_1) (thm_605 t_1)).

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_607 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_608 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true) hol.true hol.true (thm_606 t_1) thm_607.

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_609 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true) (thm_608 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_610 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_609 t_1) thm_607.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_611 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_70 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_612 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_599 t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) thm_602 thm_610 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => thm_611 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_613 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_614 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_613 t_1) (thm_613 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_615 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_27 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_616 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_612 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_614 t_1) (thm_615 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_617 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_597 t_1) (thm_616 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_618 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (thm_594 t_1) (thm_617 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_619 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (thm_589 t_1) (thm_618 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_620 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => thm_619 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_621 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_62 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_622 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) thm_584 thm_620 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => thm_621 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_623 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_62 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_624 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_622 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => thm_623 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_625 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_95 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_626 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_624 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => thm_625 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t2)) Data.Bool.T) ;)

(; dict ;)

def thm_627 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t2_1) hol.true) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_581 t_1) (thm_626 t_1)) t2_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) (Data.Bool.~ Data.Bool.T)) ;)

(; dict ;)

def thm_628 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.not hol.true)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.imp hol.false t2_1) hol.true thm_121 (thm_627 t2_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) Data.Bool.F) ;)

(; dict ;)

def thm_629 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) hol.false) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.not hol.true) hol.false (thm_628 t2_1) thm_8.

(; Theorem: |- ((= (= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2)))) (= Data.Bool.F)) ;)

(; dict ;)

def thm_630 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1))) (hol.eq hol.bool hol.false)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.imp hol.false t2_1)) hol.false thm_232 (thm_629 t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2)))) ((= Data.Bool.F) Data.Bool.F)) ;)

(; dict ;)

def thm_631 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1))) (hol.eq hol.bool hol.false hol.false)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1))) (hol.eq hol.bool hol.false) (hol.and hol.false (hol.not t2_1)) hol.false (thm_630 t2_1) (thm_394 t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2)))) Data.Bool.T) ;)

(; dict ;)

def thm_632 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1))) hol.true) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1))) (hol.eq hol.bool hol.false hol.false) hol.true (thm_631 t2_1) thm_398.

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_633 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1))) hol.true (thm_632 t2_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.F) t2))) ((Data.Bool./\ Data.Bool.F) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_634 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1))) (thm_633 t2_1) thm_15.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_635 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.imp hol.false t2_1)) (hol.and hol.false (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (thm_579 t1_2 t2_1 hyp_1) (thm_634 t2_1).

(; Theorem: |- ((Data.Bool.==> ((= t1) Data.Bool.F)) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_636 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => thm_635 t2_1 t1_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2))) t1))) (= (\lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2))) t1))) ;)

(; dict ;)

def thm_637 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1)) (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1)).

(; Theorem: |- ((= (\lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2))) Data.Bool.T)) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_638 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__406_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_2 t2_1)) (hol.and __406_2 (hol.not t2_1))) hol.true) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__406_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_2 t2_1)) (hol.and __406_2 (hol.not t2_1))) hol.true.

(; Theorem: |- ((= ((= (\lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2))) t1)) (\lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2))) Data.Bool.T))) ((= (\lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_639 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1) ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) hol.true)) (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_2)) (hol.and hol.true (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1)) (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1)) ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) hol.true) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_2)) (hol.and hol.true (hol.not t2_2))) (thm_637 t1_1 t2_2) (thm_638 t2_2).

(; Theorem: |- ((= (\lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_640 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1.

(; Theorem: |- ((= (= (\lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2))) t1))) (= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_641 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) thm_232 (thm_640 t1_1 t2_2).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_642 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1))).

(; Theorem: |- ((= ((= (\lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2))) t1)) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2))))) ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_643 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_2)) (hol.and hol.true (hol.not t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_2)) (hol.and hol.true (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_2)) (hol.and hol.true (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_2)) (hol.and hol.true (hol.not t2_2))) (thm_641 t1_1 t2_2) (thm_642 t2_2).

(; Theorem: |- ((= ((= (\lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2))) t1)) (\lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2))) Data.Bool.T))) ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_644 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1) ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_2)) (hol.and hol.true (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1) ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) hol.true)) (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_2)) (hol.and hol.true (hol.not t2_2)))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_2)) (hol.and hol.true (hol.not t2_2)))) (thm_639 t1_1 t2_2) (thm_643 t1_1 t2_2).

(; Theorem: |- ((= \lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2)))) \lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_645 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__406_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_2 t2_1)) (hol.and __406_2 (hol.not t2_1))) (__406_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_2 t2_1)) (hol.and __406_2 (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__406_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_2 t2_1)) (hol.and __406_2 (hol.not t2_1))).

(; Theorem: |- ((= (\lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2))) t1)) (\lambda _406. ((= (Data.Bool.~ ((Data.Bool.==> _406) t2))) ((Data.Bool./\ _406) (Data.Bool.~ t2))) Data.Bool.T)) ;)

(; dict ;)

def thm_646 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) -> hol.proof (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1) ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) hol.true)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) => hol.APP_THM hol.bool hol.bool (__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) (__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_2)) (hol.and __406_3 (hol.not t2_2))) t1_1 hol.true (thm_645 t2_2) (thm_305 t1_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_647 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_1)) (hol.and __406_3 (hol.not t2_1))) t1_2) ((__406_3 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp __406_3 t2_1)) (hol.and __406_3 (hol.not t2_1))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1)))) (thm_644 t1_2 t2_1) (thm_646 t1_2 t2_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_648 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.true t2_2)) (hol.and hol.true (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_2)) (hol.and hol.true (hol.not t2_2))) (thm_647 t2_2 t1_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t2)) t2) ;)

(; dict ;)

def thm_649 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t2_1) t2_1) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_587 t_1) t2_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_650 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.imp hol.true t2_1) t2_1 thm_121 (thm_649 t2_1).

(; Theorem: |- ((= (= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2)))) (= (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_651 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1))) (hol.eq hol.bool (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.not (hol.imp hol.true t2_1)) (hol.not t2_1) thm_232 (thm_650 t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2)))) ((= (Data.Bool.~ t2)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_652 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1))) (hol.eq hol.bool (hol.not t2_1) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1))) (hol.eq hol.bool (hol.not t2_1)) (hol.and hol.true (hol.not t2_1)) (hol.not t2_1) (thm_651 t2_1) (thm_368 t2_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2)))) Data.Bool.T) ;)

(; dict ;)

def thm_653 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1))) hol.true) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1))) (hol.eq hol.bool (hol.not t2_1) (hol.not t2_1)) hol.true (thm_652 t2_1) (thm_328 t2_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_654 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1))) hol.true (thm_653 t2_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> Data.Bool.T) t2))) ((Data.Bool./\ Data.Bool.T) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_655 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1))) (thm_654 t2_1) thm_15.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_656 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.imp hol.true t2_1)) (hol.and hol.true (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (thm_648 t1_2 t2_1 hyp_1) (thm_655 t2_1).

(; Theorem: |- ((Data.Bool.==> ((= t1) Data.Bool.T)) ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_657 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => thm_656 t2_1 t1_2 hyp_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_658 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_214 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_659 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (thm_334 t1_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) => thm_658 t2_1 t1_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_660 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (thm_657 t2_1 t1_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) => thm_659 t2_1 t1_2 hyp_1 hyp_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_661 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1))) (thm_636 t2_1 t1_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.not (hol.imp t1_2 t2_1)) (hol.and t1_2 (hol.not t2_1)))) => thm_660 t2_1 t1_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_662 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (thm_567 t2_2 t1_1) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))) (thm_566 t2_2 t1_1) (thm_661 t2_2 t1_1)).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_663 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2)))) (thm_565 t1_1) (thm_662 t1_1).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.==> t1) t2))) ((Data.Bool./\ t1) (Data.Bool.~ t2))))) ;)

(; thm ;)

def thm_664 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))))) :=
  hol.EQ_MP (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.imp t1_1 t2_2)) (hol.and t1_1 (hol.not t2_2))))) thm_562 thm_663.

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)))) \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)))) ;)

(; dict ;)

def thm_665 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)))) \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)))) ;)

(; dict ;)

def thm_666 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) thm_665 thm_665.

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))))) ;)

(; dict ;)

def thm_667 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) thm_28 thm_666.

(; Theorem: |- ((= \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_668 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)).

(; Theorem: |- ((= \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_669 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (thm_668 t1_1) (thm_668 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)))) (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)))) ;)

(; dict ;)

def thm_670 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) thm_28 (thm_669 t1_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_671 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_672 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (thm_671 t2_1 t1_2).

(; Theorem: |- ((= (= (\lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412)) t1))) (= (\lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412)) t1))) ;)

(; dict ;)

def thm_673 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1)) (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1)).

(; Theorem: |- ((= (\lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412)) Data.Bool.F)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.F))) ;)

(; dict ;)

def thm_674 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__412_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_2) (hol.not t2_1)) (hol.imp t2_1 __412_2)) hol.false) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false))) :=
  t2_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__412_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_2) (hol.not t2_1)) (hol.imp t2_1 __412_2)) hol.false.

(; Theorem: |- ((= ((= (\lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412)) t1)) (\lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412)) Data.Bool.F))) ((= (\lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412)) t1)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.F)))) ;)

(; dict ;)

def thm_675 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1) ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) hol.false)) (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_2)) (hol.imp t2_2 hol.false)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1)) (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1)) ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) hol.false) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_2)) (hol.imp t2_2 hol.false)) (thm_673 t1_1 t2_2) (thm_674 t2_2).

(; Theorem: |- ((= (\lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412)) t1)) ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_676 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1) (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1.

(; Theorem: |- ((= (= (\lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412)) t1))) (= ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)))) ;)

(; dict ;)

def thm_677 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1) (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) thm_232 (thm_676 t1_1 t2_2).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.F))) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.F))) ;)

(; dict ;)

def thm_678 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false)) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false))) :=
  t2_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false)).

(; Theorem: |- ((= ((= (\lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412)) t1)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.F)))) ((= ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.F)))) ;)

(; dict ;)

def thm_679 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_2)) (hol.imp t2_2 hol.false))) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_2)) (hol.imp t2_2 hol.false)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_2)) (hol.imp t2_2 hol.false)) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_2)) (hol.imp t2_2 hol.false)) (thm_677 t1_1 t2_2) (thm_678 t2_2).

(; Theorem: |- ((= ((= (\lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412)) t1)) (\lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412)) Data.Bool.F))) ((= ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.F)))) ;)

(; dict ;)

def thm_680 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1) ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_2)) (hol.imp t2_2 hol.false)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1) ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) hol.false)) (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_2)) (hol.imp t2_2 hol.false))) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_2)) (hol.imp t2_2 hol.false))) (thm_675 t1_1 t2_2) (thm_679 t1_1 t2_2).

(; Theorem: |- ((= \lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412))) \lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412))) ;)

(; dict ;)

def thm_681 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__412_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_2) (hol.not t2_1)) (hol.imp t2_1 __412_2)) (__412_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_2) (hol.not t2_1)) (hol.imp t2_1 __412_2))) :=
  t2_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__412_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_2) (hol.not t2_1)) (hol.imp t2_1 __412_2)).

(; Theorem: |- ((= (\lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412)) t1)) (\lambda _412. ((= ((Data.Bool.==> (Data.Bool.~ _412)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _412)) Data.Bool.F)) ;)

(; dict ;)

def thm_682 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) -> hol.proof (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1) ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) hol.false)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) => hol.APP_THM hol.bool hol.bool (__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) (__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_2)) (hol.imp t2_2 __412_3)) t1_1 hol.false (thm_681 t2_2) (thm_239 t1_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.F))) ;)

(; dict ;)

def thm_683 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_1)) (hol.imp t2_1 __412_3)) t1_2) ((__412_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __412_3) (hol.not t2_1)) (hol.imp t2_1 __412_3)) hol.false)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false))) (thm_680 t1_2 t2_1) (thm_682 t1_2 t2_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.F))) ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_684 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_2)) (hol.imp t2_2 hol.false)) (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.false) => hol.SYM hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_2)) (hol.imp t2_2 hol.false)) (thm_683 t2_2 t1_1 hyp_1).

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_685 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ Data.Bool.F))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_686 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not hol.false)) (hol.imp hol.true)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.not hol.false) hol.true thm_685 thm_9.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> Data.Bool.T) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_687 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp hol.true (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not hol.false)) (hol.imp hol.true) (hol.not t2_1) (hol.not t2_1) thm_686 (thm_285 t2_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) (Data.Bool.~ t2))) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_688 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true (hol.not t2_1)) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_587 t_1) (hol.not t2_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_689 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp hol.true (hol.not t2_1)) (hol.not t2_1) (thm_687 t2_1) (thm_688 t2_1).

(; Theorem: |- ((= (= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2)))) (= (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_690 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1))) (hol.eq hol.bool (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.not t2_1) thm_232 (thm_689 t2_1).

(; Theorem: |- ((= ((Data.Bool.==> t2) Data.Bool.F)) (Data.Bool.~ t2)) ;)

(; dict ;)

def thm_691 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t2_1 hol.false) (hol.not t2_1)) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_615 t_1) t2_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.F))) ((= (Data.Bool.~ t2)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_692 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false)) (hol.eq hol.bool (hol.not t2_1) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1))) (hol.eq hol.bool (hol.not t2_1)) (hol.imp t2_1 hol.false) (hol.not t2_1) (thm_690 t2_1) (thm_691 t2_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.F))) Data.Bool.T) ;)

(; dict ;)

def thm_693 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false)) hol.true) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false)) (hol.eq hol.bool (hol.not t2_1) (hol.not t2_1)) hol.true (thm_692 t2_1) (thm_328 t2_1).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.F))) ;)

(; dict ;)

def thm_694 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false))) :=
  t2_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false)) hol.true (thm_693 t2_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.F)) ;)

(; dict ;)

def thm_695 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false)) :=
  t2_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false)) (thm_694 t2_1) thm_15.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)) ;)

(; dict ;)

def thm_696 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.not t2_1)) (hol.imp t2_1 hol.false)) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (thm_684 t1_2 t2_1 hyp_1) (thm_695 t2_1).

(; Theorem: |- ((Data.Bool.==> ((= t1) Data.Bool.F)) ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_697 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.false) => thm_696 t2_1 t1_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410)) t1))) (= (\lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410)) t1))) ;)

(; dict ;)

def thm_698 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1)) (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1)).

(; Theorem: |- ((= (\lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410)) Data.Bool.T)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.T))) ;)

(; dict ;)

def thm_699 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__410_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_2) (hol.not t2_1)) (hol.imp t2_1 __410_2)) hol.true) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true))) :=
  t2_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__410_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_2) (hol.not t2_1)) (hol.imp t2_1 __410_2)) hol.true.

(; Theorem: |- ((= ((= (\lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410)) t1)) (\lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410)) Data.Bool.T))) ((= (\lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410)) t1)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.T)))) ;)

(; dict ;)

def thm_700 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1) ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) hol.true)) (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_2)) (hol.imp t2_2 hol.true)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1)) (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1)) ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) hol.true) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_2)) (hol.imp t2_2 hol.true)) (thm_698 t1_1 t2_2) (thm_699 t2_2).

(; Theorem: |- ((= (\lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410)) t1)) ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_701 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1) (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1.

(; Theorem: |- ((= (= (\lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410)) t1))) (= ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)))) ;)

(; dict ;)

def thm_702 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1) (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) thm_232 (thm_701 t1_1 t2_2).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.T))) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.T))) ;)

(; dict ;)

def thm_703 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true)) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true))) :=
  t2_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true)).

(; Theorem: |- ((= ((= (\lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410)) t1)) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.T)))) ((= ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.T)))) ;)

(; dict ;)

def thm_704 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_2)) (hol.imp t2_2 hol.true))) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_2)) (hol.imp t2_2 hol.true)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_2)) (hol.imp t2_2 hol.true)) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_2)) (hol.imp t2_2 hol.true)) (thm_702 t1_1 t2_2) (thm_703 t2_2).

(; Theorem: |- ((= ((= (\lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410)) t1)) (\lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410)) Data.Bool.T))) ((= ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.T)))) ;)

(; dict ;)

def thm_705 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1) ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_2)) (hol.imp t2_2 hol.true)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1) ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) hol.true)) (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_2)) (hol.imp t2_2 hol.true))) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_2)) (hol.imp t2_2 hol.true))) (thm_700 t1_1 t2_2) (thm_704 t1_1 t2_2).

(; Theorem: |- ((= \lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410))) \lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410))) ;)

(; dict ;)

def thm_706 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__410_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_2) (hol.not t2_1)) (hol.imp t2_1 __410_2)) (__410_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_2) (hol.not t2_1)) (hol.imp t2_1 __410_2))) :=
  t2_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__410_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_2) (hol.not t2_1)) (hol.imp t2_1 __410_2)).

(; Theorem: |- ((= (\lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410)) t1)) (\lambda _410. ((= ((Data.Bool.==> (Data.Bool.~ _410)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) _410)) Data.Bool.T)) ;)

(; dict ;)

def thm_707 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) -> hol.proof (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1) ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) hol.true)) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) => hol.APP_THM hol.bool hol.bool (__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) (__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_2)) (hol.imp t2_2 __410_3)) t1_1 hol.true (thm_706 t2_2) (thm_305 t1_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.T))) ;)

(; dict ;)

def thm_708 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_1)) (hol.imp t2_1 __410_3)) t1_2) ((__410_3 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not __410_3) (hol.not t2_1)) (hol.imp t2_1 __410_3)) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true))) (thm_705 t1_2 t2_1) (thm_707 t1_2 t2_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.T))) ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_709 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_2)) (hol.imp t2_2 hol.true)) (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_1 hol.true) => hol.SYM hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_2)) (hol.imp t2_2 hol.true)) (thm_708 t2_2 t1_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ Data.Bool.T))) (Data.Bool.==> Data.Bool.F)) ;)

(; dict ;)

def thm_710 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not hol.true)) (hol.imp hol.false)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.not hol.true) hol.false thm_685 thm_8.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> Data.Bool.F) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_711 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp hol.false (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not hol.true)) (hol.imp hol.false) (hol.not t2_1) (hol.not t2_1) thm_710 (thm_285 t2_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) (Data.Bool.~ t2))) Data.Bool.T) ;)

(; dict ;)

def thm_712 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false (hol.not t2_1)) hol.true) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_595 t_1) (hol.not t2_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) Data.Bool.T) ;)

(; dict ;)

def thm_713 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) hol.true) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp hol.false (hol.not t2_1)) hol.true (thm_711 t2_1) (thm_712 t2_1).

(; Theorem: |- ((= (= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2)))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_714 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1))) (hol.eq hol.bool hol.true)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp (hol.not hol.true) (hol.not t2_1)) hol.true thm_232 (thm_713 t2_1).

(; Theorem: |- ((= ((Data.Bool.==> t2) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_715 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t2_1 hol.true) hol.true) :=
  t2_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_592 t_1) t2_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.T))) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_716 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true)) (hol.eq hol.bool hol.true hol.true)) :=
  t2_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1))) (hol.eq hol.bool hol.true) (hol.imp t2_1 hol.true) hol.true (thm_714 t2_1) (thm_715 t2_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.T))) Data.Bool.T) ;)

(; dict ;)

def thm_717 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true)) hol.true) :=
  t2_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true)) (hol.eq hol.bool hol.true hol.true) hol.true (thm_716 t2_1) thm_290.

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.T))) ;)

(; dict ;)

def thm_718 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true))) :=
  t2_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true)) hol.true (thm_717 t2_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) Data.Bool.T)) ;)

(; dict ;)

def thm_719 : t2_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true)) :=
  t2_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true)) (thm_718 t2_1) thm_15.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)) ;)

(; dict ;)

def thm_720 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.not t2_1)) (hol.imp t2_1 hol.true)) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (thm_709 t1_2 t2_1 hyp_1) (thm_719 t2_1).

(; Theorem: |- ((Data.Bool.==> ((= t1) Data.Bool.T)) ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_721 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t1_2 hol.true) => thm_720 t2_1 t1_2 hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)) ;)

(; dict ;)

def thm_722 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_214 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)) ;)

(; dict ;)

def thm_723 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (thm_334 t1_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool t1_2 hol.false)) => thm_722 t2_1 t1_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)) ;)

(; dict ;)

def thm_724 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (thm_721 t2_1 t1_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.true) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) => thm_723 t2_1 t1_2 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)) ;)

(; dict ;)

def thm_725 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (thm_697 t2_1 t1_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool t1_2 hol.false) (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2))) => thm_724 t2_1 t1_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ;)

(; dict ;)

def thm_726 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (thm_672 t2_2 t1_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (thm_671 t2_2 t1_1) (thm_725 t2_2 t1_1)).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)))) ;)

(; dict ;)

def thm_727 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))) :=
  t1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (thm_670 t1_1) (thm_726 t1_1).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)))) ;)

(; thm ;)

def thm_728 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))) :=
  hol.EQ_MP (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))) thm_667 thm_727.
