
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME set_2Dthm_2Da3.

Set_2Eset : hol.type -> hol.type.

Data_2EPair_2E_2A : hol.type -> hol.type -> hol.type.

Set_2E_7B_7D : A : hol.type -> hol.term A.

Set_2Ecross : A : hol.type -> hol.term A.

Set_2Emember : A : hol.type -> hol.term A.

Data_2EPair_2E_2C : A : hol.type -> hol.term A.

Set_2Euniverse : A : hol.type -> hol.term A.

Set_2EfromPredicate : A : hol.type -> hol.term A.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)))).

(; axiom ;)

thm_2 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))))).

(; axiom ;)

thm_3 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.forall (Set_2Eset A) (s_3 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_4 : hol.term (Set_2Eset B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_1 y_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_4)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 s_3) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_2 t_4))))))).

(; axiom ;)

thm_4 : hol.proof (hol.eq hol.bool hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1))).

(; axiom ;)

thm_5 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not (p_1 : hol.term hol.bool => hol.imp p_1 hol.false)).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))))).

(; axiom ;)

thm_7 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)).

(; axiom ;)

thm_8 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_9 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)).

(; axiom ;)

thm_10 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))).

(; axiom ;)

thm_11 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_12 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))))).

(; axiom ;)

thm_13 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))).

(; axiom ;)

thm_14 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))).

(; axiom ;)

thm_15 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2)))).

(; axiom ;)

thm_16 : hol.proof hol.true.

(; axiom ;)

thm_17 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_18 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; axiom ;)

thm_19 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true)).

(; axiom ;)

thm_20 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true)).

(; axiom ;)

thm_21 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1)).

(; axiom ;)

thm_22 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1)).

(; axiom ;)

thm_23 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1)).

(; axiom ;)

thm_24 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_2))))))))).

(; axiom ;)

thm_25 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_2 b_3))))).

(; axiom ;)

thm_26 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A)))).

(; axiom ;)

thm_27 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_28 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_29 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_30 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_31 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_32 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (hol.forall (Set_2Eset A)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_33 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (Set_2Eset B) hol.bool) hol.bool) (hol.forall (Set_2Eset B)) (hol.forall (Set_2Eset B))) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr (Set_2Eset B) hol.bool) hol.bool) (hol.forall (Set_2Eset B)).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_34 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t))))) ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t))))) ;)

(; dict ;)

def thm_35 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1)))) (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1)))).

(; Theorem: |- ((= ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t))))) ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t))))) ;)

(; dict ;)

def thm_36 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1)))) (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1)))) (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1)))) (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1)))) (thm_35 A t_1 s_2) (thm_35 A t_1 s_2).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_37 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_38 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_37 A y_1 x_2) (thm_37 A y_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_39 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => thm_0 A x_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_40 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_39 A x_2 y_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_41 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_2 y_1) (hol.eq hol.bool y_1 x_2)) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_38 A y_1 x_2) (thm_40 A y_1 x_2)) hol.bool y_1 x_2.

(; Theorem: |- ((= ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t))))) ((= (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t))) ;)

(; dict ;)

def thm_42 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => (y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => thm_41 y_1 x_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1).

(; Theorem: |- ((= \lambda t. ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t))))) \lambda t. ((= (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t))) ;)

(; dict ;)

def thm_43 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2)))) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.ABS_THM (Set_2Eset A) hol.bool (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2)))) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => thm_42 A t_2 s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))))) (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t)))) ;)

(; dict ;)

def thm_44 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))))) (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2)))) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)) (thm_32 A) (thm_43 A s_1).

(; Theorem: |- ((= \lambda s. (Data.Bool.! \lambda t. ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))))) \lambda s. (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t)))) ;)

(; dict ;)

def thm_45 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)))) :=
  A : hol.type => hol.ABS_THM (Set_2Eset A) hol.bool (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => thm_44 A s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t))))))) (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t))))) ;)

(; dict ;)

def thm_46 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2)))))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2))) (thm_32 A) (thm_45 A).

(; Theorem: |- ((= (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t))))) (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t))))))) ;)

(; dict ;)

def thm_47 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))))))) :=
  A : hol.type => hol.SYM hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2)))))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)))) (thm_46 A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))))) ;)

(; dict ;)

def thm_48 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2)))))) (thm_47 A) (thm_1 A).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t))))) ;)

(; dict ;)

def thm_49 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_2))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_48 A s_1.

(; Theorem: |- ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ;)

(; dict ;)

def thm_50 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => thm_49 A s_2 t_1.

(; Theorem: |- ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ;)

(; dict ;)

def thm_51 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset (Data_2EPair_2E_2A A B)) -> s_2 : hol.term (Set_2Eset (Data_2EPair_2E_2A A B)) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) s_2 t_1) (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 t_1)))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset (Data_2EPair_2E_2A A B)) => s_2 : hol.term (Set_2Eset (Data_2EPair_2E_2A A B)) => (A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1)))) (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 t_1)))) (thm_36 A t_1 s_2) (thm_50 A t_1 s_2)) (Data_2EPair_2E_2A A B) t_1 s_2.

(; Theorem: |- ((= ((= ((Set.cross s) t)) Set.{})) (Data.Bool.! \lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})))) ;)

(; dict ;)

def thm_52 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => (B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset (Data_2EPair_2E_2A A B)) => s_2 : hol.term (Set_2Eset (Data_2EPair_2E_2A A B)) => thm_51 B A t_1 s_2) B A (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_53 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool) (hol.forall (Data_2EPair_2E_2A A B)) (hol.forall (Data_2EPair_2E_2A A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool) (hol.forall (Data_2EPair_2E_2A A B)).

(; Theorem: |- ((= (\lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})) x)) ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{}))) ;)

(; dict ;)

def thm_54 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> t_2 : hol.term (Set_2Eset B) -> s_3 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_2)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_2)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => t_2 : hol.term (Set_2Eset B) => s_3 : hol.term (Set_2Eset A) => hol.BETA_CONV (Data_2EPair_2E_2A A B) hol.bool (x_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_2)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})) x)) \lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{}))) ;)

(; dict ;)

def thm_55 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_3 : hol.term (Data_2EPair_2E_2A A B) => (x_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) x_3) (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.ABS_THM (Data_2EPair_2E_2A A B) hol.bool (x_3 : hol.term (Data_2EPair_2E_2A A B) => (x_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) x_3) (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (x_3 : hol.term (Data_2EPair_2E_2A A B) => thm_54 B A x_3 t_1 s_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})) x))) (Data.Bool.! \lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})))) ;)

(; dict ;)

def thm_56 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => (x_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) x_3)) (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool (hol.forall (Data_2EPair_2E_2A A B)) (hol.forall (Data_2EPair_2E_2A A B)) (x_3 : hol.term (Data_2EPair_2E_2A A B) => (x_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) x_3) (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (thm_53 B A) (thm_55 B A t_1 s_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. (\lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})) x)))) (= (Data.Bool.! \lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{}))))) ;)

(; dict ;)

def thm_57 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => (x_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) x_3))) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => (x_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) x_3)) (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) thm_34 (thm_56 B A t_1 s_2).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_58 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_59 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B) (hol.forall B)) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B).

(; Theorem: |- ((= (\lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})) ((Data.Pair., a) b))) ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{}))) ;)

(; dict ;)

def thm_60 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> t_3 : hol.term (Set_2Eset B) -> s_4 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_4 t_3)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_4 t_3)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => t_3 : hol.term (Set_2Eset B) => s_4 : hol.term (Set_2Eset A) => hol.BETA_CONV (Data_2EPair_2E_2A A B) hol.bool (x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_4 t_3)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1).

(; Theorem: |- ((= \lambda b. (\lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})) ((Data.Pair., a) b))) \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{}))) ;)

(; dict ;)

def thm_61 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> t_2 : hol.term (Set_2Eset B) -> s_3 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_4 : hol.term B => (x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_2)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4)) (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_2)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => t_2 : hol.term (Set_2Eset B) => s_3 : hol.term (Set_2Eset A) => hol.ABS_THM B hol.bool (b_4 : hol.term B => (x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_2)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4)) (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_2)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (b_4 : hol.term B => thm_60 B A b_4 a_1 t_2 s_3).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (\lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})) ((Data.Pair., a) b)))) (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{})))) ;)

(; dict ;)

def thm_62 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> t_2 : hol.term (Set_2Eset B) -> s_3 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => (x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_2)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4))) (hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_2)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => t_2 : hol.term (Set_2Eset B) => s_3 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_4 : hol.term B => (x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_2)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4)) (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_2)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (thm_59 B) (thm_61 A B a_1 t_2 s_3).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. (\lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})) ((Data.Pair., a) b)))) \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{})))) ;)

(; dict ;)

def thm_63 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => (x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.ABS_THM A hol.bool (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => (x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) (a_3 : hol.term A => thm_62 A B a_3 t_1 s_2).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (\lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})) ((Data.Pair., a) b))))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{}))))) ;)

(; dict ;)

def thm_64 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => (x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)))) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => (x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) (thm_58 A) (thm_63 B A t_1 s_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (\lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})) x))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (\lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})) ((Data.Pair., a) b)))))) ((= (Data.Bool.! \lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{})))))) ;)

(; dict ;)

def thm_65 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => (x_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) x_3)) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => (x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))))) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => (x_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) x_3))) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))))) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => (x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)))) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))))) (thm_57 B A t_1 s_2) (thm_64 B A t_1 s_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b)))))) ((= (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b)))))) ;)

(; dict ;)

def thm_66 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3))))) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3))))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b)))))) ((= (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b)))))) ;)

(; dict ;)

def thm_67 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3))))) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3))))) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3))))) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3))))) (thm_66 B A p_1) (thm_66 B A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_68 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => thm_2 B A p_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})) x))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (\lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})) ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_69 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => (x_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) x_3)) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => (x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => (B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => (B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3))))) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3))))) (thm_67 B A p_1) (thm_68 B A p_1)) B A p_1) B A (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Set.member x) ((Set.cross s) t))) ((Set.member x) Set.{})))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{}))))) ;)

(; dict ;)

def thm_70 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => (x_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_4 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) x_3)) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => (x_5 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_5 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))))) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))))) (thm_65 B A t_1 s_2) (thm_69 B A t_1 s_2).

(; Theorem: |- ((= ((= ((Set.cross s) t)) Set.{})) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{}))))) ;)

(; dict ;)

def thm_71 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.forall (Data_2EPair_2E_2A A B) (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))))) (thm_52 B A t_1 s_2) (thm_70 B A t_1 s_2).

(; Theorem: |- ((= ((= ((Set.member ((Data.Pair., x) y)) ((Set.cross s) t))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))) ((= ((Set.member ((Data.Pair., x) y)) ((Set.cross s) t))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))) ;)

(; dict ;)

def thm_72 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> y_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 t_1))) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 t_1)))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => y_3 : hol.term B => x_4 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 t_1))).

(; Theorem: |- ((= ((= ((Set.member ((Data.Pair., x) y)) ((Set.cross s) t))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))) ((= ((Set.member ((Data.Pair., x) y)) ((Set.cross s) t))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))) ;)

(; dict ;)

def thm_73 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> y_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 t_1))) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 t_1)))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => y_3 : hol.term B => x_4 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 t_1))) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 t_1))) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 t_1))) (thm_72 B A t_1 s_2 y_3 x_4) (thm_72 B A t_1 s_2 y_3 x_4).

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.member ((Data.Pair., x) y)) ((Set.cross s) t))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))))) ;)

(; dict ;)

def thm_74 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall B (y_2 : hol.term B => hol.forall (Set_2Eset A) (s_3 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_4 : hol.term (Set_2Eset B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_1 y_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_4)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 s_3) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_2 t_4)))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => thm_3 B A x_1.

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.member ((Data.Pair., x) y)) ((Set.cross s) t))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))) ;)

(; dict ;)

def thm_75 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.forall (Set_2Eset A) (s_3 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_4 : hol.term (Set_2Eset B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_1) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_3 t_4)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_3) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_1 t_4))))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => thm_74 A B x_2 y_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Set.member ((Data.Pair., x) y)) ((Set.cross s) t))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))) ;)

(; dict ;)

def thm_76 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> y_2 : hol.term B -> x_3 : hol.term A -> hol.proof (hol.forall (Set_2Eset B) (t_4 : hol.term (Set_2Eset B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_3 y_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_4)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_2 t_4)))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => y_2 : hol.term B => x_3 : hol.term A => thm_75 B A y_2 x_3 s_1.

(; Theorem: |- ((= ((Set.member ((Data.Pair., x) y)) ((Set.cross s) t))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))) ;)

(; dict ;)

def thm_77 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> y_3 : hol.term B -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 t_1))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => y_3 : hol.term B => x_4 : hol.term A => thm_76 A B s_2 y_3 x_4 t_1.

(; Theorem: |- ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t))) ;)

(; dict ;)

def thm_78 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => b_3 : hol.term B => a_4 : hol.term A => (B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => y_3 : hol.term B => x_4 : hol.term A => (B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => y_3 : hol.term B => x_4 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 t_1))) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 t_1))) (thm_73 B A t_1 s_2 y_3 x_4) (thm_77 B A t_1 s_2 y_3 x_4)) B A t_1 s_2 y_3 x_4) B A t_1 s_2 b_3 a_4.

(; Theorem: |- ((= (= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t)))) (= ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))) ;)

(; dict ;)

def thm_79 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1))) (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)) thm_34 (thm_78 B A t_1 s_2 b_3 a_4).

(; Theorem: |- ((= ((= ((Set.member x) Set.{})) Data.Bool.F)) ((= ((Set.member x) Set.{})) Data.Bool.F)) ;)

(; dict ;)

def thm_80 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))) hol.false) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))) hol.false)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))) hol.false).

(; Theorem: |- ((= ((= ((Set.member x) Set.{})) Data.Bool.F)) ((= ((Set.member x) Set.{})) Data.Bool.F)) ;)

(; dict ;)

def thm_81 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))) hol.false) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))) hol.false)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))) hol.false) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))) hol.false) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))) hol.false) (thm_80 A x_1) (thm_80 A x_1).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_82 : hyp_1 : hol.proof hol.false -> hol.proof hol.false :=
  hyp_1 : hol.proof hol.false => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda p. p) ;)

(; dict ;)

def thm_83 : hyp_1 : hol.proof hol.false -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) :=
  hyp_1 : hol.proof hol.false => hol.EQ_MP hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) thm_4 (thm_82 hyp_1).

(; Theorem: |- P ;)

(; dict ;)

def thm_84 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.false -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_83 hyp_1 P_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) P) ;)

(; dict ;)

def thm_85 : P_1 : hol.term hol.bool -> hol.proof (hol.imp hol.false P_1) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_84 P_1 hyp_1.

(; Theorem: |- ((= (= (Data.Bool.~ P))) (= (Data.Bool.~ P))) ;)

(; dict ;)

def thm_86 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)).

(; Theorem: |- ((= (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_87 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1.

(; Theorem: |- ((= ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P))) ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F))) ;)

(; dict ;)

def thm_88 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false))) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1)) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false) (thm_86 P_1) (thm_87 P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_89 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool P_1 P_1) :=
  P_1 : hol.term hol.bool => hol.REFL hol.bool P_1.

(; Theorem: |- ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ;)

(; dict ;)

def thm_90 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1 P_1 thm_5 (thm_89 P_1).

(; Theorem: |- ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_91 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) (thm_88 P_1) (thm_90 P_1).

(; Theorem: |- (Data.Bool.~ P) ;)

(; dict ;)

def thm_92 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.not P_1) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> P) Data.Bool.F) ;)

(; dict ;)

def thm_93 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.imp P_1 hol.false) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hol.EQ_MP (hol.not P_1) (hol.imp P_1 hol.false) ((P_1 : hol.term hol.bool => thm_91 P_1) P_1) (thm_92 P_1 hyp_1).

(; Theorem: |- P ;)

(; dict ;)

def thm_94 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_95 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hyp_2 : hol.proof (hol.not P_1) -> hol.proof hol.false :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_2 : hol.proof (hol.not P_1) => thm_93 P_1 hyp_2 (thm_94 P_1 hyp_1).

(; Theorem: |- ((= P) Data.Bool.F) ;)

(; dict ;)

def thm_96 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.eq hol.bool P_1 hol.false) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hol.PROP_EXT P_1 hol.false (hyp_2 : hol.proof hol.false => thm_85 P_1 (thm_82 hyp_2)) (hyp_2 : hol.proof P_1 => thm_95 P_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ P)) ((= P) Data.Bool.F)) ;)

(; dict ;)

def thm_97 : P_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.not P_1) (hol.eq hol.bool P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => thm_96 P_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((Set.member x) Set.{}))) ((= ((Set.member x) Set.{})) Data.Bool.F)) ;)

(; dict ;)

def thm_98 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.imp (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A)))) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))) hol.false)) :=
  A : hol.type => x_1 : hol.term A => (P_1 : hol.term hol.bool => thm_97 P_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))).

(; Theorem: |- (Data.Bool.~ ((Set.member x) Set.{})) ;)

(; dict ;)

def thm_99 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A)))) :=
  A : hol.type => x_1 : hol.term A => thm_6 A x_1.

(; Theorem: |- ((= ((Set.member x) Set.{})) Data.Bool.F) ;)

(; dict ;)

def thm_100 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))) hol.false) :=
  A : hol.type => x_1 : hol.term A => thm_98 A x_1 (thm_99 A x_1).

(; Theorem: |- ((= ((Set.member x) Set.{})) Data.Bool.F) ;)

(; dict ;)

def thm_101 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) hol.false) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))) hol.false) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset A))) hol.false) (thm_81 A x_1) (thm_100 A x_1)) (Data_2EPair_2E_2A A B) x_1.

(; Theorem: |- ((= ((Set.member ((Data.Pair., a) b)) Set.{})) Data.Bool.F) ;)

(; dict ;)

def thm_102 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) hol.false) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => (B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_101 B A x_1) B A (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1).

(; Theorem: |- ((= ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{}))) ((= ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t))) Data.Bool.F)) ;)

(; dict ;)

def thm_103 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_3) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)) hol.false)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => b_3 : hol.term B => a_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1))) (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_3) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) hol.false (thm_79 B A t_1 s_2 b_3 a_4) (thm_102 B A b_3 a_4).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_104 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_105 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_104 t_1) (thm_104 t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_106 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_107 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_108 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_107 thm_107.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_109 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_106 thm_108.

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_110 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_111 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_110 t_1) (thm_110 t_1).

(; Theorem: |- ((= ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_112 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_7 t_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_113 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_114 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_115 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_113 q_1 p_2) (thm_114 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_116 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_117 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_118 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_116 p_1) (thm_117 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_119 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_120 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_8 (thm_119 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_121 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_118 p_1) (thm_120 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_122 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_123 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_121 p_2) (thm_122 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_124 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_115 q_1 p_2) (thm_123 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_125 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_126 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_124 q_1 p_2) (thm_125 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_127 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_126 q_1 p_2 hyp_1 q_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_128 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_129 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_130 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_128 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_129 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_131 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_130 q_2 p_1 hyp_1 hyp_2) (thm_128 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_132 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_131 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_133 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_132 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_134 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_127 q_2 p_1 hyp_1 (thm_133 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_135 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_124 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_136 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_137 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_136 x_2 q_3 p_1 hyp_2 (thm_128 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_138 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_137 p_2 x_3 q_1 hyp_1 hyp_3 (thm_129 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_139 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_138 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_140 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_139 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_141 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_135 q_1 p_2) (thm_140 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_142 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_134 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_141 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_143 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_142 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_144 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_111 t_1) (thm_112 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => thm_143 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_145 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_146 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_145 t_1) (thm_145 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_147 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_9 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_148 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_142 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_149 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_146 t_1) (thm_147 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => thm_148 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_150 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_151 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_150 t_1) (thm_150 t_1).

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_152 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_10 t_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_153 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_142 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_154 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_151 t_1) (thm_152 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => thm_153 t_1 hyp_1).

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_155 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_11 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_156 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_154 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_104 t_1) (thm_155 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_157 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (thm_149 t_1) (thm_156 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_158 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (thm_144 t_1) (thm_157 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_159 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => thm_158 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_160 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_134 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_161 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) thm_109 thm_159 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => thm_160 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_162 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_134 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_163 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_161 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => thm_162 t_1 hyp_1).

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_164 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_134 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_165 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_163 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) => thm_164 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t))) Data.Bool.F)) (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))) ;)

(; dict ;)

def thm_166 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> b_2 : hol.term B -> s_3 : hol.term (Set_2Eset A) -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_3) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 t_1)) hol.false) (hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_3) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 t_1)))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => b_2 : hol.term B => s_3 : hol.term (Set_2Eset A) => a_4 : hol.term A => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_105 t_1) (thm_165 t_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_3) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 t_1)).

(; Theorem: |- ((= ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{}))) (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))) ;)

(; dict ;)

def thm_167 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> b_3 : hol.term B -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_3) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => b_3 : hol.term B => a_4 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_3) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_3) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)) hol.false) (hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))) (thm_103 B A t_1 s_2 b_3 a_4) (thm_166 B A t_1 b_3 s_2 a_4).

(; Theorem: |- ((= \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{}))) \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))) ;)

(; dict ;)

def thm_168 : A : hol.type -> B : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) :=
  A : hol.type => B : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => a_3 : hol.term A => hol.ABS_THM B hol.bool (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))) (b_4 : hol.term B => thm_167 B A t_1 s_2 b_4 a_3).

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{})))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t))))) ;)

(; dict ;)

def thm_169 : A : hol.type -> B : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) (hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) :=
  A : hol.type => B : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => a_3 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))) (thm_59 B) (thm_168 A B t_1 s_2 a_3).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{})))) \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t))))) ;)

(; dict ;)

def thm_170 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.ABS_THM A hol.bool (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (a_3 : hol.term A => thm_169 A B t_1 s_2 a_3).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross s) t))) ((Set.member ((Data.Pair., a) b)) Set.{}))))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ;)

(; dict ;)

def thm_171 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))))) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (thm_58 A) (thm_170 B A t_1 s_2).

(; Theorem: |- ((= ((= ((Set.cross s) t)) Set.{})) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ;)

(; dict ;)

def thm_172 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))))) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (thm_71 B A t_1 s_2) (thm_171 B A t_1 s_2).

(; Theorem: |- ((= (= ((= ((Set.cross s) t)) Set.{}))) (= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t))))))) ;)

(; dict ;)

def thm_173 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) thm_34 (thm_172 B A t_1 s_2).

(; Theorem: |- ((= Data.Bool.\/) Data.Bool.\/) ;)

(; dict ;)

def thm_174 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or hol.or) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or.

(; Theorem: |- ((= ((= s) Set.{})) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) Set.{})))) ;)

(; dict ;)

def thm_175 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset A)))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => (A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => thm_50 A t_1 s_2) A (Set_2E_7B_7D (Set_2Eset A)) s_1.

(; Theorem: |- ((= (= ((Set.member x) s))) (= ((Set.member x) s))) ;)

(; dict ;)

def thm_176 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1)) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1)).

(; Theorem: |- ((= ((= ((Set.member x) s)) ((Set.member x) Set.{}))) ((= ((Set.member x) s)) Data.Bool.F)) ;)

(; dict ;)

def thm_177 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset A)))) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1) hol.false)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1)) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1)) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset A))) hol.false (thm_176 A s_1 x_2) (thm_100 A x_2).

(; Theorem: |- ((= ((= ((Set.member x) s)) Data.Bool.F)) (Data.Bool.~ ((Set.member x) s))) ;)

(; dict ;)

def thm_178 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1) hol.false) (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => (t_1 : hol.term hol.bool => thm_155 t_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1).

(; Theorem: |- ((= ((= ((Set.member x) s)) ((Set.member x) Set.{}))) (Data.Bool.~ ((Set.member x) s))) ;)

(; dict ;)

def thm_179 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset A)))) (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset A)))) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1) hol.false) (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1)) (thm_177 A s_1 x_2) (thm_178 A s_1 x_2).

(; Theorem: |- ((= \lambda x. ((= ((Set.member x) s)) ((Set.member x) Set.{}))) \lambda x. (Data.Bool.~ ((Set.member x) s))) ;)

(; dict ;)

def thm_180 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset A)))) (x_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset A)))) (x_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1)) (x_2 : hol.term A => thm_179 A s_1 x_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) Set.{})))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) ;)

(; dict ;)

def thm_181 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset A))))) (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset A)))) (x_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1)) (thm_58 A) (thm_180 A s_1).

(; Theorem: |- ((= ((= s) Set.{})) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) ;)

(; dict ;)

def thm_182 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset A))))) (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1))) (thm_175 A s_1) (thm_181 A s_1).

(; Theorem: |- ((= (Data.Bool.\/ ((= s) Set.{}))) (Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s))))) ;)

(; dict ;)

def thm_183 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A)))) (hol.or (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 s_1))) thm_174 (thm_182 A s_1).

(; Theorem: |- ((= ((= s) t)) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ;)

(; dict ;)

def thm_184 : B : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset B) s_2 t_1) (hol.forall B (x_3 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1)))) :=
  B : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset B) => (A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => thm_50 A t_1 s_2) B t_1 s_2.

(; Theorem: |- ((= ((= t) Set.{})) (Data.Bool.! \lambda x. ((= ((Set.member x) t)) ((Set.member x) Set.{})))) ;)

(; dict ;)

def thm_185 : B : hol.type -> t_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))) (hol.forall B (x_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset B)))))) :=
  B : hol.type => t_1 : hol.term (Set_2Eset B) => (B : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset B) => thm_184 B t_1 s_2) B (Set_2E_7B_7D (Set_2Eset B)) t_1.

(; Theorem: |- ((= (= ((Set.member x) t))) (= ((Set.member x) t))) ;)

(; dict ;)

def thm_186 : B : hol.type -> t_1 : hol.term (Set_2Eset B) -> x_2 : hol.term B -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1)) (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1))) :=
  B : hol.type => t_1 : hol.term (Set_2Eset B) => x_2 : hol.term B => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1)).

(; Theorem: |- ((= ((Set.member x) Set.{})) Data.Bool.F) ;)

(; dict ;)

def thm_187 : B : hol.type -> x_1 : hol.term B -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_1 (Set_2E_7B_7D (Set_2Eset B))) hol.false) :=
  B : hol.type => x_1 : hol.term B => (A : hol.type => x_1 : hol.term A => thm_100 A x_1) B x_1.

(; Theorem: |- ((= ((= ((Set.member x) t)) ((Set.member x) Set.{}))) ((= ((Set.member x) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_188 : B : hol.type -> t_1 : hol.term (Set_2Eset B) -> x_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset B)))) (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1) hol.false)) :=
  B : hol.type => t_1 : hol.term (Set_2Eset B) => x_2 : hol.term B => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1)) (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1)) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset B))) hol.false (thm_186 B t_1 x_2) (thm_187 B x_2).

(; Theorem: |- ((= ((= ((Set.member x) t)) Data.Bool.F)) (Data.Bool.~ ((Set.member x) t))) ;)

(; dict ;)

def thm_189 : B : hol.type -> t_1 : hol.term (Set_2Eset B) -> x_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1) hol.false) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1))) :=
  B : hol.type => t_1 : hol.term (Set_2Eset B) => x_2 : hol.term B => (t_1 : hol.term hol.bool => thm_155 t_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1).

(; Theorem: |- ((= ((= ((Set.member x) t)) ((Set.member x) Set.{}))) (Data.Bool.~ ((Set.member x) t))) ;)

(; dict ;)

def thm_190 : B : hol.type -> t_1 : hol.term (Set_2Eset B) -> x_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset B)))) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1))) :=
  B : hol.type => t_1 : hol.term (Set_2Eset B) => x_2 : hol.term B => hol.TRANS hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset B)))) (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1) hol.false) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1)) (thm_188 B t_1 x_2) (thm_189 B t_1 x_2).

(; Theorem: |- ((= \lambda x. ((= ((Set.member x) t)) ((Set.member x) Set.{}))) \lambda x. (Data.Bool.~ ((Set.member x) t))) ;)

(; dict ;)

def thm_191 : B : hol.type -> t_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq (hol.arr B hol.bool) (x_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset B)))) (x_2 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1))) :=
  B : hol.type => t_1 : hol.term (Set_2Eset B) => hol.ABS_THM B hol.bool (x_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset B)))) (x_2 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1)) (x_2 : hol.term B => thm_190 B t_1 x_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Set.member x) t)) ((Set.member x) Set.{})))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))) ;)

(; dict ;)

def thm_192 : B : hol.type -> t_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool (hol.forall B (x_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset B))))) (hol.forall B (x_2 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1)))) :=
  B : hol.type => t_1 : hol.term (Set_2Eset B) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (x_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset B)))) (x_2 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1)) (thm_59 B) (thm_191 B t_1).

(; Theorem: |- ((= ((= t) Set.{})) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))) ;)

(; dict ;)

def thm_193 : B : hol.type -> t_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))) (hol.forall B (x_2 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1)))) :=
  B : hol.type => t_1 : hol.term (Set_2Eset B) => hol.TRANS hol.bool (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))) (hol.forall B (x_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 (Set_2E_7B_7D (Set_2Eset B))))) (hol.forall B (x_2 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_2 t_1))) (thm_185 B t_1) (thm_192 B t_1).

(; Theorem: |- ((= ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{}))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t))))) ;)

(; dict ;)

def thm_194 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2)))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))) (thm_183 A s_2) (thm_193 B t_1).

(; Theorem: |- ((= ((= ((= ((Set.cross s) t)) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{})))) ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) ;)

(; dict ;)

def thm_195 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))))) (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))))) (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1)))) (thm_173 B A t_1 s_2) (thm_194 B A t_1 s_2).

(; Theorem: |- ((= \lambda t. ((= ((= ((Set.cross s) t)) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{})))) \lambda t. ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) ;)

(; dict ;)

def thm_196 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset B) hol.bool) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_2 (Set_2E_7B_7D (Set_2Eset B))))) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2)))))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => hol.ABS_THM (Set_2Eset B) hol.bool (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_2 (Set_2E_7B_7D (Set_2Eset B))))) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))) (t_2 : hol.term (Set_2Eset B) => thm_195 B A t_2 s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((= ((Set.cross s) t)) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{}))))) (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t))))))) ;)

(; dict ;)

def thm_197 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_2 (Set_2E_7B_7D (Set_2Eset B)))))) (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr (Set_2Eset B) hol.bool) hol.bool (hol.forall (Set_2Eset B)) (hol.forall (Set_2Eset B)) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_2 (Set_2E_7B_7D (Set_2Eset B))))) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))) (thm_33 B) (thm_196 A B s_1).

(; Theorem: |- ((= \lambda s. (Data.Bool.! \lambda t. ((= ((= ((Set.cross s) t)) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{}))))) \lambda s. (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t))))))) ;)

(; dict ;)

def thm_198 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_2 (Set_2E_7B_7D (Set_2Eset B)))))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (Set_2Eset A) hol.bool (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_2 (Set_2E_7B_7D (Set_2Eset B)))))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2)))))) (s_1 : hol.term (Set_2Eset A) => thm_197 A B s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((= ((Set.cross s) t)) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{})))))) (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))))) ;)

(; dict ;)

def thm_199 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_2 (Set_2E_7B_7D (Set_2Eset B))))))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_2 (Set_2E_7B_7D (Set_2Eset B)))))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2)))))) (thm_32 A) (thm_198 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))))) (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((= ((Set.cross s) t)) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{})))))) ;)

(; dict ;)

def thm_200 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_2 (Set_2E_7B_7D (Set_2Eset B)))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_2 (Set_2E_7B_7D (Set_2Eset B))))))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))))) (thm_199 B A).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_201 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_202 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_201 t2_1 t1_2) (thm_201 t2_1 t1_2).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_203 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_204 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) thm_203 thm_203.

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))))) ;)

(; dict ;)

def thm_205 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) thm_106 thm_204.

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_206 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))).

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_207 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (thm_206 t1_1) (thm_206 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_208 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) thm_106 (thm_207 t1_1).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_209 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => thm_12 t1_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_210 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_209 t1_2 t2_1.

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_211 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_142 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_212 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_201 t2_1 t1_2) (thm_210 t2_1 t1_2)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) => thm_211 t2_1 t1_2 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_213 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))).

(; Theorem: |- ((= ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_214 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (thm_213 t2_1 t1_2) (thm_213 t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_215 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => thm_13 t1_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_216 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => thm_215 t1_2 t2_1.

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_217 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) (thm_212 t2_1 t1_2) (hol.EQ_MP (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (thm_214 t2_1 t1_2) (thm_216 t2_1 t1_2)).

(; Theorem: |- (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_218 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => thm_217 t2_2 t1_1.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= (Data.Bool.~ ((Data.Bool.\/ t1) t2))) ((Data.Bool./\ (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_219 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2)))))) :=
  t1_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_1 t2_2)) (hol.or (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.not (hol.or t1_1 t2_2)) (hol.and (hol.not t1_1) (hol.not t2_2))))) (thm_208 t1_1) (thm_218 t1_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_220 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_126 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_221 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_130 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_222 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_221 p_2 q_1 hyp_1 hyp_2) (thm_129 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_223 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_222 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_224 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_223 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_225 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_220 q_1 p_2 hyp_1 (thm_224 q_1 p_2).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_226 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_225 q_1 p_2 hyp_1) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) hyp_1.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ t1) t2))) ((Data.Bool.\/ (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_227 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.EQ_MP (hol.forall hol.bool (t1_3 : hol.term hol.bool => hol.forall hol.bool (t2_4 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_3 t2_4)) (hol.or (hol.not t1_3) (hol.not t2_4))) (hol.eq hol.bool (hol.not (hol.or t1_3 t2_4)) (hol.and (hol.not t1_3) (hol.not t2_4)))))) (hol.forall hol.bool (t1_3 : hol.term hol.bool => hol.forall hol.bool (t2_4 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.not (hol.and t1_3 t2_4)) (hol.or (hol.not t1_3) (hol.not t2_4))) (hol.eq hol.bool (hol.not (hol.or t1_3 t2_4)) (hol.and (hol.not t1_3) (hol.not t2_4)))))) thm_205 thm_219 t1_2 t2_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.or t1_2 t2_1)) (hol.and (hol.not t1_2) (hol.not t2_1)))) => thm_226 t2_1 t1_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))) ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.~ ((Set.member b) t)))) ;)

(; dict ;)

def thm_228 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> b_2 : hol.term B -> s_3 : hol.term (Set_2Eset A) -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_3) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 t_1))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_3)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 t_1)))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => b_2 : hol.term B => s_3 : hol.term (Set_2Eset A) => a_4 : hol.term A => (t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (hol.eq hol.bool (hol.not (hol.and t1_2 t2_1)) (hol.or (hol.not t1_2) (hol.not t2_1))) (thm_202 t2_1 t1_2) (thm_227 t2_1 t1_2)) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 t_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_3).

(; Theorem: |- ((= \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))) \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.~ ((Set.member b) t)))) ;)

(; dict ;)

def thm_229 : A : hol.type -> B : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))) (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) :=
  A : hol.type => B : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => a_3 : hol.term A => hol.ABS_THM B hol.bool (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))) (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))) (b_4 : hol.term B => thm_228 B A t_1 b_4 s_2 a_3).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t))))) (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.~ ((Set.member b) t))))) ;)

(; dict ;)

def thm_230 : A : hol.type -> B : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) :=
  A : hol.type => B : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => a_3 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))) (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))) (thm_59 B) (thm_229 A B t_1 s_2 a_3).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.\/ (Data.Bool.~ ((Set.member a) s)))) ;)

(; dict ;)

def thm_231 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 s_1))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => a_2 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 s_1))).

(; Theorem: |- ((= (\lambda b. (Data.Bool.~ ((Set.member b) t)) b)) (Data.Bool.~ ((Set.member b) t))) ;)

(; dict ;)

def thm_232 : B : hol.type -> b_1 : hol.term B -> t_2 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool ((b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_2)) b_1) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 t_2))) :=
  B : hol.type => b_1 : hol.term B => t_2 : hol.term (Set_2Eset B) => hol.BETA_CONV B hol.bool (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_2)) b_1.

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (\lambda b. (Data.Bool.~ ((Set.member b) t)) b))) ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.~ ((Set.member b) t)))) ;)

(; dict ;)

def thm_233 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> t_2 : hol.term (Set_2Eset B) -> s_3 : hol.term (Set_2Eset A) -> a_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_3)) ((b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_2)) b_1)) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_3)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 t_2)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => t_2 : hol.term (Set_2Eset B) => s_3 : hol.term (Set_2Eset A) => a_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_3))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_3))) ((b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_2)) b_1) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 t_2)) (thm_231 A s_3 a_4) (thm_232 B b_1 t_2).

(; Theorem: |- ((= \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (\lambda b. (Data.Bool.~ ((Set.member b) t)) b))) \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.~ ((Set.member b) t)))) ;)

(; dict ;)

def thm_234 : A : hol.type -> B : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) ((b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4)) (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) :=
  A : hol.type => B : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => a_3 : hol.term A => hol.ABS_THM B hol.bool (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) ((b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4)) (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))) (b_4 : hol.term B => thm_233 B A b_4 t_1 s_2 a_3).

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (\lambda b. (Data.Bool.~ ((Set.member b) t)) b)))) (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.~ ((Set.member b) t))))) ;)

(; dict ;)

def thm_235 : A : hol.type -> B : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) ((b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4))) (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) :=
  A : hol.type => B : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => a_3 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) ((b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4)) (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))) (thm_59 B) (thm_234 A B t_1 s_2 a_3).

(; Theorem: |- ((= (= (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (\lambda b. (Data.Bool.~ ((Set.member b) t)) b))))) (= (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.~ ((Set.member b) t)))))) ;)

(; dict ;)

def thm_236 : A : hol.type -> B : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> a_3 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) ((b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4)))) (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))))) :=
  A : hol.type => B : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => a_3 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) ((b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4))) (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) thm_34 (thm_235 A B t_1 s_2 a_3).

(; Theorem: |- ((= \lambda b. (\lambda b. (Data.Bool.~ ((Set.member b) t)) b)) \lambda b. (Data.Bool.~ ((Set.member b) t))) ;)

(; dict ;)

def thm_237 : B : hol.type -> t_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_2 : hol.term B => (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)) b_2) (b_2 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 t_1))) :=
  B : hol.type => t_1 : hol.term (Set_2Eset B) => hol.ABS_THM B hol.bool (b_2 : hol.term B => (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)) b_2) (b_2 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 t_1)) (b_2 : hol.term B => thm_232 B b_2 t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ ((Set.member b) t)) b))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))) ;)

(; dict ;)

def thm_238 : B : hol.type -> t_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool (hol.forall B (b_2 : hol.term B => (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)) b_2)) (hol.forall B (b_2 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 t_1)))) :=
  B : hol.type => t_1 : hol.term (Set_2Eset B) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_2 : hol.term B => (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)) b_2) (b_2 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 t_1)) (thm_59 B) (thm_237 B t_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ ((Set.member b) t)) b)))) ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ;)

(; dict ;)

def thm_239 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => (b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => a_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_4 : hol.term B => (b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))) (thm_231 A s_2 a_3) (thm_238 B t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (\lambda b. (Data.Bool.~ ((Set.member b) t)) b)))) ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ ((Set.member b) t)) b))))) ((= (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) ;)

(; dict ;)

def thm_240 : A : hol.type -> B : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) ((b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => (b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4)))) (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))))) :=
  A : hol.type => B : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => a_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) ((b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4)))) (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => (b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (thm_236 A B t_1 s_2 a_3) (thm_239 B A t_1 s_2 a_3).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_241 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda b. ((Data.Bool.\/ p) (q b)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda b. (q b))))) ((= (Data.Bool.! \lambda b. ((Data.Bool.\/ p) (q b)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda b. (q b))))) ;)

(; dict ;)

def thm_242 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (b_3 : hol.term A => hol.or p_2 (q_1 b_3))) (hol.or p_2 (hol.forall A (b_3 : hol.term A => q_1 b_3)))) (hol.eq hol.bool (hol.forall A (b_3 : hol.term A => hol.or p_2 (q_1 b_3))) (hol.or p_2 (hol.forall A (b_3 : hol.term A => q_1 b_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (b_3 : hol.term A => hol.or p_2 (q_1 b_3))) (hol.or p_2 (hol.forall A (b_3 : hol.term A => q_1 b_3)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) ((= (Data.Bool.! \lambda b. ((Data.Bool.\/ p) (q b)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda b. (q b))))) ;)

(; dict ;)

def thm_243 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (b_3 : hol.term A => hol.or p_2 (q_1 b_3))) (hol.or p_2 (hol.forall A (b_3 : hol.term A => q_1 b_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (b_3 : hol.term A => hol.or p_2 (q_1 b_3))) (hol.or p_2 (hol.forall A (b_3 : hol.term A => q_1 b_3)))) (thm_241 A q_1 p_2) (thm_242 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x))))) ;)

(; dict ;)

def thm_244 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_1 (q_2 x_3))) (hol.or p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => thm_14 A p_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ p) (q x)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_245 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_244 A p_2 q_1.

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((Data.Bool.\/ p) (q b)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda b. (q b)))) ;)

(; dict ;)

def thm_246 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (b_3 : hol.term A => hol.or p_2 (q_1 b_3))) (hol.or p_2 (hol.forall A (b_3 : hol.term A => q_1 b_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or p_2 (q_1 x_3))) (hol.or p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.forall A (b_3 : hol.term A => hol.or p_2 (q_1 b_3))) (hol.or p_2 (hol.forall A (b_3 : hol.term A => q_1 b_3)))) (thm_243 A q_1 p_2) (thm_245 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((Data.Bool.\/ p) (q b)))) ((Data.Bool.\/ p) (Data.Bool.! \lambda b. (q b)))) ;)

(; dict ;)

def thm_247 : B : hol.type -> q_1 : hol.term (hol.arr B hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall B (b_3 : hol.term B => hol.or p_2 (q_1 b_3))) (hol.or p_2 (hol.forall B (b_3 : hol.term B => q_1 b_3)))) :=
  B : hol.type => q_1 : hol.term (hol.arr B hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_246 A q_1 p_2) B q_1 p_2.

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (\lambda b. (Data.Bool.~ ((Set.member b) t)) b)))) ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (\lambda b. (Data.Bool.~ ((Set.member b) t)) b)))) ;)

(; dict ;)

def thm_248 : A : hol.type -> B : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) ((b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => (b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4)))) :=
  A : hol.type => B : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => a_3 : hol.term A => (B : hol.type => q_1 : hol.term (hol.arr B hol.bool) => p_2 : hol.term hol.bool => thm_247 B q_1 p_2) B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)) (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)).

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ;)

(; dict ;)

def thm_249 : A : hol.type -> B : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) :=
  A : hol.type => B : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => a_3 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) ((b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => (b_5 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_5 t_1)) b_4)))) (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (thm_240 A B t_1 s_2 a_3) (thm_248 A B t_1 s_2 a_3).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ;)

(; dict ;)

def thm_250 : A : hol.type -> B : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) :=
  A : hol.type => B : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => a_3 : hol.term A => hol.TRANS hol.bool (hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (hol.forall B (b_4 : hol.term B => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (thm_230 A B t_1 s_2 a_3) (thm_249 A B t_1 s_2 a_3).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t))))) \lambda a. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ;)

(; dict ;)

def thm_251 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.ABS_THM A hol.bool (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (a_3 : hol.term A => thm_250 A B t_1 s_2 a_3).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) (Data.Bool.! \lambda a. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) ;)

(; dict ;)

def thm_252 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.forall A (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (thm_58 A) (thm_251 B A t_1 s_2).

(; Theorem: |- ((= (\lambda a. (Data.Bool.~ ((Set.member a) s)) a)) (Data.Bool.~ ((Set.member a) s))) ;)

(; dict ;)

def thm_253 : A : hol.type -> a_1 : hol.term A -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) a_1) (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 s_2))) :=
  A : hol.type => a_1 : hol.term A => s_2 : hol.term (Set_2Eset A) => hol.BETA_CONV A hol.bool (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) a_1.

(; Theorem: |- ((= (Data.Bool.\/ (\lambda a. (Data.Bool.~ ((Set.member a) s)) a))) (Data.Bool.\/ (Data.Bool.~ ((Set.member a) s)))) ;)

(; dict ;)

def thm_254 : A : hol.type -> a_1 : hol.term A -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or ((a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) a_1)) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 s_2)))) :=
  A : hol.type => a_1 : hol.term A => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or ((a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) a_1) (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 s_2)) thm_174 (thm_253 A a_1 s_2).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))) ;)

(; dict ;)

def thm_255 : B : hol.type -> t_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool (hol.forall B (b_2 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 t_1))) (hol.forall B (b_2 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 t_1)))) :=
  B : hol.type => t_1 : hol.term (Set_2Eset B) => hol.REFL hol.bool (hol.forall B (b_2 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 t_1))).

(; Theorem: |- ((= ((Data.Bool.\/ (\lambda a. (Data.Bool.~ ((Set.member a) s)) a)) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ;)

(; dict ;)

def thm_256 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> a_2 : hol.term A -> s_3 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.or ((a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_3)) a_2) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 s_3)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => a_2 : hol.term A => s_3 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.or ((a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_3)) a_2)) (hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 s_3))) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))) (thm_254 A a_2 s_3) (thm_255 B t_1).

(; Theorem: |- ((= \lambda a. ((Data.Bool.\/ (\lambda a. (Data.Bool.~ ((Set.member a) s)) a)) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) \lambda a. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ;)

(; dict ;)

def thm_257 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_3 : hol.term A => hol.or ((a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.ABS_THM A hol.bool (a_3 : hol.term A => hol.or ((a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (a_3 : hol.term A => thm_256 B A t_1 a_3 s_2).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((Data.Bool.\/ (\lambda a. (Data.Bool.~ ((Set.member a) s)) a)) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) (Data.Bool.! \lambda a. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) ;)

(; dict ;)

def thm_258 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or ((a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.forall A (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_3 : hol.term A => hol.or ((a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))) (thm_58 A) (thm_257 B A t_1 s_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda a. ((Data.Bool.\/ (\lambda a. (Data.Bool.~ ((Set.member a) s)) a)) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))))) (= (Data.Bool.! \lambda a. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))))) ;)

(; dict ;)

def thm_259 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or ((a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))))) (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (a_3 : hol.term A => hol.or ((a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.forall A (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) thm_34 (thm_258 B A t_1 s_2).

(; Theorem: |- ((= \lambda a. (\lambda a. (Data.Bool.~ ((Set.member a) s)) a)) \lambda a. (Data.Bool.~ ((Set.member a) s))) ;)

(; dict ;)

def thm_260 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1)) a_2) (a_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.ABS_THM A hol.bool (a_2 : hol.term A => (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1)) a_2) (a_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 s_1)) (a_2 : hol.term A => thm_253 A a_2 s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (\lambda a. (Data.Bool.~ ((Set.member a) s)) a))) (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) ;)

(; dict ;)

def thm_261 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1)) a_2)) (hol.forall A (a_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_2 : hol.term A => (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1)) a_2) (a_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 s_1)) (thm_58 A) (thm_260 A s_1).

(; Theorem: |- ((= (Data.Bool.\/ (Data.Bool.! \lambda a. (\lambda a. (Data.Bool.~ ((Set.member a) s)) a)))) (Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s))))) ;)

(; dict ;)

def thm_262 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1)) a_2))) (hol.or (hol.forall A (a_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 s_1))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.forall A (a_2 : hol.term A => (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1)) a_2)) (hol.forall A (a_2 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 s_1))) thm_174 (thm_261 A s_1).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (\lambda a. (Data.Bool.~ ((Set.member a) s)) a))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ;)

(; dict ;)

def thm_263 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => (a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3)) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.or (hol.forall A (a_3 : hol.term A => (a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))) (thm_262 A s_2) (thm_255 B t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda a. ((Data.Bool.\/ (\lambda a. (Data.Bool.~ ((Set.member a) s)) a)) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (\lambda a. (Data.Bool.~ ((Set.member a) s)) a))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) ((= (Data.Bool.! \lambda a. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) ;)

(; dict ;)

def thm_264 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or ((a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.forall A (a_3 : hol.term A => (a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3)) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or ((a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))))) (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))))) (hol.or (hol.forall A (a_3 : hol.term A => (a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3)) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (thm_259 B A t_1 s_2) (thm_263 B A t_1 s_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_265 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda a. ((Data.Bool.\/ (p a)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (p a))) q))) ((= (Data.Bool.! \lambda a. ((Data.Bool.\/ (p a)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (p a))) q))) ;)

(; dict ;)

def thm_266 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1)) (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1)) (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1)) (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1)) (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1)).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) ((= (Data.Bool.! \lambda a. ((Data.Bool.\/ (p a)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (p a))) q))) ;)

(; dict ;)

def thm_267 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1)) (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1))) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1)) (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1)) (thm_265 A q_1 p_2) (thm_266 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q))) ;)

(; dict ;)

def thm_268 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_1 x_3) q_2)) (hol.or (hol.forall A (x_3 : hol.term A => p_1 x_3)) q_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_15 A p_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.\/ (p x)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (p x))) q)) ;)

(; dict ;)

def thm_269 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_268 A p_2 q_1.

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((Data.Bool.\/ (p a)) q))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (p a))) q)) ;)

(; dict ;)

def thm_270 : A : hol.type -> q_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1)) (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1)) :=
  A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.or (p_2 x_3) q_1)) (hol.or (hol.forall A (x_3 : hol.term A => p_2 x_3)) q_1)) (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or (p_2 a_3) q_1)) (hol.or (hol.forall A (a_3 : hol.term A => p_2 a_3)) q_1)) (thm_267 A q_1 p_2) (thm_269 A q_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((Data.Bool.\/ (\lambda a. (Data.Bool.~ ((Set.member a) s)) a)) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (\lambda a. (Data.Bool.~ ((Set.member a) s)) a))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ;)

(; dict ;)

def thm_271 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or ((a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.forall A (a_3 : hol.term A => (a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3)) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => (A : hol.type => q_1 : hol.term hol.bool => p_2 : hol.term (hol.arr A hol.bool) => thm_270 A q_1 p_2) A q_1 p_2) A (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))) (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((Data.Bool.\/ (Data.Bool.~ ((Set.member a) s))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ;)

(; dict ;)

def thm_272 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or ((a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.forall A (a_3 : hol.term A => (a_4 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_4 s_2)) a_3)) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) (thm_264 B A t_1 s_2) (thm_271 B A t_1 s_2).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ;)

(; dict ;)

def thm_273 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.forall A (a_3 : hol.term A => hol.or (hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2)) (hol.forall B (b_4 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (thm_252 B A t_1 s_2) (thm_272 B A t_1 s_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t))))))) (= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) ;)

(; dict ;)

def thm_274 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) thm_34 (thm_273 B A t_1 s_2).

(; Theorem: |- ((= ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t))))) ;)

(; dict ;)

def thm_275 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) ;)

(; dict ;)

def thm_276 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1)))))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1)))) (thm_274 B A t_1 s_2) (thm_275 B A t_1 s_2).

(; Theorem: |- ((= (= (\lambda _10546. ((= _10546) Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))))) (= (\lambda _10546. ((= _10546) Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))))) ;)

(; dict ;)

def thm_277 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))))) (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))))).

(; Theorem: |- ((= (\lambda _10546. ((= _10546) Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t))))))) ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) Data.Bool.T)) ;)

(; dict ;)

def thm_278 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1)))))) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.BETA_CONV hol.bool hol.bool (__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))).

(; Theorem: |- ((= ((= (\lambda _10546. ((= _10546) Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))))) (\lambda _10546. ((= _10546) Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))))) ((= (\lambda _10546. ((= _10546) Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))))) ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) Data.Bool.T))) ;)

(; dict ;)

def thm_279 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))) ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))))) (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))))) (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))))) ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1)))))) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true) (thm_277 B A t_1 s_2) (thm_278 B A t_1 s_2).

(; Theorem: |- ((= (\lambda _10546. ((= _10546) Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))))) ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) Data.Bool.T)) ;)

(; dict ;)

def thm_280 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) hol.true)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.BETA_CONV hol.bool hol.bool (__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))).

(; Theorem: |- ((= (= (\lambda _10546. ((= _10546) Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))))) (= ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) Data.Bool.T))) ;)

(; dict ;)

def thm_281 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) hol.true))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) hol.true) thm_34 (thm_280 B A t_1 s_2).

(; Theorem: |- ((= ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) Data.Bool.T)) ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) Data.Bool.T)) ;)

(; dict ;)

def thm_282 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true).

(; Theorem: |- ((= ((= (\lambda _10546. ((= _10546) Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))))) ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) Data.Bool.T))) ((= ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) Data.Bool.T)) ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) Data.Bool.T))) ;)

(; dict ;)

def thm_283 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true) (thm_281 B A t_1 s_2) (thm_282 B A t_1 s_2).

(; Theorem: |- ((= ((= (\lambda _10546. ((= _10546) Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))))) (\lambda _10546. ((= _10546) Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))))) ((= ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) Data.Bool.T)) ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) Data.Bool.T))) ;)

(; dict ;)

def thm_284 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))) ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))) ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))))) (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true)) (thm_279 B A t_1 s_2) (thm_283 B A t_1 s_2).

(; Theorem: |- ((= \lambda _10546. ((= _10546) Data.Bool.T)) \lambda _10546. ((= _10546) Data.Bool.T)) ;)

(; dict ;)

def thm_285 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__10546_1 : hol.term hol.bool => hol.eq hol.bool __10546_1 hol.true) (__10546_1 : hol.term hol.bool => hol.eq hol.bool __10546_1 hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (__10546_1 : hol.term hol.bool => hol.eq hol.bool __10546_1 hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) ;)

(; dict ;)

def thm_286 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) ;)

(; dict ;)

def thm_287 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) ;)

(; dict ;)

def thm_288 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) (thm_286 B A t_1 s_2) (thm_287 B A t_1 s_2).

(; Theorem: |- ((= (\lambda _10546. ((= _10546) Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))))) (\lambda _10546. ((= _10546) Data.Bool.T) ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t))))))) ;)

(; dict ;)

def thm_289 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))) ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) thm_285 (thm_288 B A t_1 s_2).

(; Theorem: |- ((= ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) Data.Bool.T)) ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) Data.Bool.T)) ;)

(; dict ;)

def thm_290 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq hol.bool ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))))) ((__10546_3 : hol.term hol.bool => hol.eq hol.bool __10546_3 hol.true) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))))) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true)) (thm_284 B A t_1 s_2) (thm_289 B A t_1 s_2).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_291 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_292 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_291 A x_1) (thm_291 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_293 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_294 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_293 A) (thm_293 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_295 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_58 A) (thm_294 A).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_296 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_297 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_296 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_298 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_297 t_1 hyp_1) thm_16.

(; Theorem: |- t ;)

(; dict ;)

def thm_299 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_300 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_299 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_16).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_301 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_298 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_300 t_1 hyp_1).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_302 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_301 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_303 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_17 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_304 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_302 A x_1) (thm_303 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_305 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_291 A x_1) (thm_304 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_306 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 x_1) hol.true) :=
  x_1 : hol.term hol.bool => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_292 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_295 A) (thm_305 A) x_1)) hol.bool x_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t)))))) Data.Bool.T) ;)

(; dict ;)

def thm_307 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) hol.true) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => (x_1 : hol.term hol.bool => thm_306 x_1) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))).

(; Theorem: |- ((= ((= ((Data.Bool.\/ (Data.Bool.! \lambda a. (Data.Bool.~ ((Set.member a) s)))) (Data.Bool.! \lambda b. (Data.Bool.~ ((Set.member b) t))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) Data.Bool.T) ;)

(; dict ;)

def thm_308 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1))))) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true) (thm_290 B A t_1 s_2) (thm_307 B A t_1 s_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) Data.Bool.T) ;)

(; dict ;)

def thm_309 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_1))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) (hol.eq hol.bool (hol.or (hol.forall A (a_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_2))) (hol.forall B (b_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_3 t_1)))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_2))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_1))))) hol.true (thm_276 B A t_1 s_2) (thm_308 B A t_1 s_2).

(; Theorem: |- ((= \lambda t. ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))) \lambda t. Data.Bool.T) ;)

(; dict ;)

def thm_310 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset B) hol.bool) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))) (t_2 : hol.term (Set_2Eset B) => hol.true)) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => hol.ABS_THM (Set_2Eset B) hol.bool (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))) (t_2 : hol.term (Set_2Eset B) => hol.true) (t_2 : hol.term (Set_2Eset B) => thm_309 B A t_2 s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t))))))) (Data.Bool.! \lambda t. Data.Bool.T)) ;)

(; dict ;)

def thm_311 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2)))))) (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.true))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr (Set_2Eset B) hol.bool) hol.bool (hol.forall (Set_2Eset B)) (hol.forall (Set_2Eset B)) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))) (t_2 : hol.term (Set_2Eset B) => hol.true) (thm_33 B) (thm_310 A B s_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_312 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda t. t)) t)) ((= (Data.Bool.! \lambda t. t)) t)) ;)

(; dict ;)

def thm_313 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda t. t)) t)) ;)

(; dict ;)

def thm_314 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1) (thm_312 A t_1) (thm_313 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_315 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_18 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda t. t)) t) ;)

(; dict ;)

def thm_316 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t_2 : hol.term A => t_1)) t_1) (thm_314 A t_1) (thm_315 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. t)) t) ;)

(; dict ;)

def thm_317 : B : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => t_1)) t_1) :=
  B : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_316 A t_1) (Set_2Eset B) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda t. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_318 : B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset B) (t_1 : hol.term (Set_2Eset B) => hol.true)) hol.true) :=
  B : hol.type => (B : hol.type => t_1 : hol.term hol.bool => thm_317 B t_1) B hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t))))))) Data.Bool.T) ;)

(; dict ;)

def thm_319 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2)))))) hol.true) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2)))))) (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.true)) hol.true (thm_311 A B s_1) (thm_318 B).

(; Theorem: |- ((= \lambda s. (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t))))))) \lambda s. Data.Bool.T) ;)

(; dict ;)

def thm_320 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2)))))) (s_1 : hol.term (Set_2Eset A) => hol.true)) :=
  B : hol.type => A : hol.type => hol.ABS_THM (Set_2Eset A) hol.bool (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2)))))) (s_1 : hol.term (Set_2Eset A) => hol.true) (s_1 : hol.term (Set_2Eset A) => thm_319 A B s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))))) (Data.Bool.! \lambda s. Data.Bool.T)) ;)

(; dict ;)

def thm_321 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.true))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2)))))) (s_1 : hol.term (Set_2Eset A) => hol.true) (thm_32 A) (thm_320 B A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda s. t)) t)) ((= (Data.Bool.! \lambda s. t)) t)) ;)

(; dict ;)

def thm_322 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda s. t)) t)) ;)

(; dict ;)

def thm_323 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1) (thm_312 A t_1) (thm_322 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda s. t)) t) ;)

(; dict ;)

def thm_324 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (s_2 : hol.term A => t_1)) t_1) (thm_323 A t_1) (thm_315 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda s. t)) t) ;)

(; dict ;)

def thm_325 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_2 : hol.term (Set_2Eset A) => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_324 A t_1) (Set_2Eset A) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda s. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_326 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => thm_325 A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))))) Data.Bool.T) ;)

(; dict ;)

def thm_327 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))))) hol.true) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.true)) hol.true (thm_321 B A) (thm_326 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t)))))))) ;)

(; dict ;)

def thm_328 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2)))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))))) hol.true (thm_327 B A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((Data.Bool./\ ((Set.member a) s)) ((Set.member b) t)))))) ((Data.Bool.\/ (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) t))))))) ;)

(; dict ;)

def thm_329 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP hol.true (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))))) (thm_328 B A) thm_16.

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((= ((Set.cross s) t)) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{}))))) ;)

(; dict ;)

def thm_330 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_2 (Set_2E_7B_7D (Set_2Eset B))))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.not (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_3 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_4 t_2))))) (hol.or (hol.forall A (x_3 : hol.term A => hol.not (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 s_1))) (hol.forall B (x_3 : hol.term B => hol.not (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_3 t_2))))))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_2 (Set_2E_7B_7D (Set_2Eset B))))))) (thm_200 B A) (thm_329 B A).

(; Theorem: |- ((= ((= ((= ((Set.cross s) t)) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{})))) ((= ((= ((Set.cross s) t)) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{})))) ;)

(; dict ;)

def thm_331 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))))) (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))))).

(; Theorem: |- ((= ((= ((= ((Set.cross s) t)) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{})))) ((= ((= ((Set.cross s) t)) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{})))) ;)

(; dict ;)

def thm_332 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))))) (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B)))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))))) (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))))) (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))))) (thm_331 B A t_1 s_2) (thm_331 B A t_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((= ((Set.cross s) t)) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{})))) ;)

(; dict ;)

def thm_333 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_2 (Set_2E_7B_7D (Set_2Eset B)))))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => thm_330 B A s_1.

(; Theorem: |- ((= ((= ((Set.cross s) t)) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= t) Set.{}))) ;)

(; dict ;)

def thm_334 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => thm_333 A B s_2 t_1.

(; Theorem: |- ((= ((= ((Set.cross Set.{}) s)) Set.{})) ((Data.Bool.\/ ((= Set.{}) Set.{})) ((= s) Set.{}))) ;)

(; dict ;)

def thm_335 : B : hol.type -> A : hol.type -> s_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2E_7B_7D (Set_2Eset A)) s_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) (Set_2E_7B_7D (Set_2Eset A)) (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B))))) :=
  B : hol.type => A : hol.type => s_1 : hol.term (Set_2Eset B) => (B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => (B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))))) (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_2 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) t_1 (Set_2E_7B_7D (Set_2Eset B))))) (thm_332 B A t_1 s_2) (thm_334 B A t_1 s_2)) B A t_1 s_2) B A s_1 (Set_2E_7B_7D (Set_2Eset A)).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_336 : A : hol.type -> x_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term (Set_2Eset A) => (A : hol.type => x_1 : hol.term A => thm_304 A x_1) (Set_2Eset A) x_1.

(; Theorem: |- ((= ((= Set.{}) Set.{})) Data.Bool.T) ;)

(; dict ;)

def thm_337 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) (Set_2E_7B_7D (Set_2Eset A)) (Set_2E_7B_7D (Set_2Eset A))) hol.true) :=
  A : hol.type => (A : hol.type => x_1 : hol.term (Set_2Eset A) => thm_336 A x_1) A (Set_2E_7B_7D (Set_2Eset A)).

(; Theorem: |- ((= (Data.Bool.\/ ((= Set.{}) Set.{}))) (Data.Bool.\/ Data.Bool.T)) ;)

(; dict ;)

def thm_338 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.eq (Set_2Eset A) (Set_2E_7B_7D (Set_2Eset A)) (Set_2E_7B_7D (Set_2Eset A)))) (hol.or hol.true)) :=
  A : hol.type => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or hol.or (hol.eq (Set_2Eset A) (Set_2E_7B_7D (Set_2Eset A)) (Set_2E_7B_7D (Set_2Eset A))) hol.true thm_174 (thm_337 A).

(; Theorem: |- ((= ((= s) Set.{})) ((= s) Set.{})) ;)

(; dict ;)

def thm_339 : B : hol.type -> s_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B))) (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B)))) :=
  B : hol.type => s_1 : hol.term (Set_2Eset B) => hol.REFL hol.bool (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B))).

(; Theorem: |- ((= ((Data.Bool.\/ ((= Set.{}) Set.{})) ((= s) Set.{}))) ((Data.Bool.\/ Data.Bool.T) ((= s) Set.{}))) ;)

(; dict ;)

def thm_340 : B : hol.type -> A : hol.type -> s_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool (hol.or (hol.eq (Set_2Eset A) (Set_2E_7B_7D (Set_2Eset A)) (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B)))) (hol.or hol.true (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B))))) :=
  B : hol.type => A : hol.type => s_1 : hol.term (Set_2Eset B) => hol.APP_THM hol.bool hol.bool (hol.or (hol.eq (Set_2Eset A) (Set_2E_7B_7D (Set_2Eset A)) (Set_2E_7B_7D (Set_2Eset A)))) (hol.or hol.true) (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B))) (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B))) (thm_338 A) (thm_339 B s_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_341 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_342 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (thm_341 t_1) (thm_341 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_343 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_344 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) thm_343 thm_343.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))))) ;)

(; dict ;)

def thm_345 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) thm_106 thm_344.

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T) ;)

(; dict ;)

def thm_346 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_19 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_347 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_142 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_348 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (thm_341 t_1) (thm_346 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) => thm_347 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_349 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_350 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (thm_349 t_1) (thm_349 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_351 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_20 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_352 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_142 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_353 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (thm_350 t_1) (thm_351 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) => thm_352 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; dict ;)

def thm_354 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; dict ;)

def thm_355 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_354 t_1) (thm_354 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t)) t) ;)

(; dict ;)

def thm_356 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_21 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_357 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_142 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_358 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_355 t_1) (thm_356 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) => thm_357 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; dict ;)

def thm_359 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; dict ;)

def thm_360 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (thm_359 t_1) (thm_359 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) Data.Bool.F)) t) ;)

(; dict ;)

def thm_361 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) :=
  t_1 : hol.term hol.bool => thm_22 t_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_362 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_142 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_363 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (thm_360 t_1) (thm_361 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) => thm_362 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_364 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_365 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (thm_364 t_1) (thm_364 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) t)) t) ;)

(; dict ;)

def thm_366 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_23 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_367 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (thm_363 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (thm_365 t_1) (thm_366 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_368 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (thm_358 t_1) (thm_367 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_369 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (thm_353 t_1) (thm_368 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_370 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (thm_348 t_1) (thm_369 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_371 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_370 t_1.

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T) ;)

(; dict ;)

def thm_372 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) -> hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_225 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T) ;)

(; dict ;)

def thm_373 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_2) hol.true) (hol.and (hol.eq hol.bool (hol.or t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_2) t_2) (hol.and (hol.eq hol.bool (hol.or t_2 hol.false) t_2) (hol.eq hol.bool (hol.or t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_2) hol.true) (hol.and (hol.eq hol.bool (hol.or t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_2) t_2) (hol.and (hol.eq hol.bool (hol.or t_2 hol.false) t_2) (hol.eq hol.bool (hol.or t_2 t_2) t_2)))))) thm_345 thm_371 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) => thm_372 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) ((= s) Set.{}))) Data.Bool.T) ;)

(; dict ;)

def thm_374 : B : hol.type -> s_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool (hol.or hol.true (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B)))) hol.true) :=
  B : hol.type => s_1 : hol.term (Set_2Eset B) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (thm_342 t_1) (thm_373 t_1)) (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B))).

(; Theorem: |- ((= ((Data.Bool.\/ ((= Set.{}) Set.{})) ((= s) Set.{}))) Data.Bool.T) ;)

(; dict ;)

def thm_375 : B : hol.type -> A : hol.type -> s_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool (hol.or (hol.eq (Set_2Eset A) (Set_2E_7B_7D (Set_2Eset A)) (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B)))) hol.true) :=
  B : hol.type => A : hol.type => s_1 : hol.term (Set_2Eset B) => hol.TRANS hol.bool (hol.or (hol.eq (Set_2Eset A) (Set_2E_7B_7D (Set_2Eset A)) (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B)))) (hol.or hol.true (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B)))) hol.true (thm_340 B A s_1) (thm_374 B s_1).

(; Theorem: |- ((= ((= ((Set.cross Set.{}) s)) Set.{})) Data.Bool.T) ;)

(; dict ;)

def thm_376 : B : hol.type -> A : hol.type -> s_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2E_7B_7D (Set_2Eset A)) s_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) hol.true) :=
  B : hol.type => A : hol.type => s_1 : hol.term (Set_2Eset B) => hol.TRANS hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2E_7B_7D (Set_2Eset A)) s_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) (Set_2E_7B_7D (Set_2Eset A)) (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) s_1 (Set_2E_7B_7D (Set_2Eset B)))) hol.true (thm_335 B A s_1) (thm_375 B A s_1).

(; Theorem: |- ((= \lambda s. ((= ((Set.cross Set.{}) s)) Set.{})) \lambda s. Data.Bool.T) ;)

(; dict ;)

def thm_377 : A : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset B) hol.bool) (s_1 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2E_7B_7D (Set_2Eset A)) s_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (s_1 : hol.term (Set_2Eset B) => hol.true)) :=
  A : hol.type => B : hol.type => hol.ABS_THM (Set_2Eset B) hol.bool (s_1 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2E_7B_7D (Set_2Eset A)) s_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (s_1 : hol.term (Set_2Eset B) => hol.true) (s_1 : hol.term (Set_2Eset B) => thm_376 B A s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda s. ((= ((Set.cross Set.{}) s)) Set.{}))) (Data.Bool.! \lambda s. Data.Bool.T)) ;)

(; dict ;)

def thm_378 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset B) (s_1 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2E_7B_7D (Set_2Eset A)) s_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (hol.forall (Set_2Eset B) (s_1 : hol.term (Set_2Eset B) => hol.true))) :=
  A : hol.type => B : hol.type => hol.APP_THM (hol.arr (Set_2Eset B) hol.bool) hol.bool (hol.forall (Set_2Eset B)) (hol.forall (Set_2Eset B)) (s_1 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2E_7B_7D (Set_2Eset A)) s_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (s_1 : hol.term (Set_2Eset B) => hol.true) (thm_33 B) (thm_377 A B).

(; Theorem: |- ((= (Data.Bool.! \lambda s. t)) t) ;)

(; dict ;)

def thm_379 : B : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset B) (s_2 : hol.term (Set_2Eset B) => t_1)) t_1) :=
  B : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_324 A t_1) (Set_2Eset B) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda s. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_380 : B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset B) (s_1 : hol.term (Set_2Eset B) => hol.true)) hol.true) :=
  B : hol.type => (B : hol.type => t_1 : hol.term hol.bool => thm_379 B t_1) B hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda s. ((= ((Set.cross Set.{}) s)) Set.{}))) Data.Bool.T) ;)

(; dict ;)

def thm_381 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset B) (s_1 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2E_7B_7D (Set_2Eset A)) s_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) hol.true) :=
  A : hol.type => B : hol.type => hol.TRANS hol.bool (hol.forall (Set_2Eset B) (s_1 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2E_7B_7D (Set_2Eset A)) s_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (hol.forall (Set_2Eset B) (s_1 : hol.term (Set_2Eset B) => hol.true)) hol.true (thm_378 A B) (thm_380 B).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda s. ((= ((Set.cross Set.{}) s)) Set.{}))) ;)

(; dict ;)

def thm_382 : A : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (Set_2Eset B) (s_1 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2E_7B_7D (Set_2Eset A)) s_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) :=
  A : hol.type => B : hol.type => hol.SYM hol.bool (hol.forall (Set_2Eset B) (s_1 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2E_7B_7D (Set_2Eset A)) s_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) hol.true (thm_381 A B).

(; Theorem: |- (Data.Bool.! \lambda s. ((= ((Set.cross Set.{}) s)) Set.{})) ;)

(; dict ;)

def thm_383 : A : hol.type -> B : hol.type -> hol.proof (hol.forall (Set_2Eset B) (s_1 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2E_7B_7D (Set_2Eset A)) s_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) :=
  A : hol.type => B : hol.type => hol.EQ_MP hol.true (hol.forall (Set_2Eset B) (s_1 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2E_7B_7D (Set_2Eset A)) s_1) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (thm_382 A B) thm_16.

(; Theorem: |- ((= ((= ((Set.cross s) Set.{})) Set.{})) ((Data.Bool.\/ ((= s) Set.{})) ((= Set.{}) Set.{}))) ;)

(; dict ;)

def thm_384 : B : hol.type -> A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 (Set_2E_7B_7D (Set_2Eset B))) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) (Set_2E_7B_7D (Set_2Eset B)) (Set_2E_7B_7D (Set_2Eset B))))) :=
  B : hol.type => A : hol.type => s_1 : hol.term (Set_2Eset A) => (B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => thm_334 B A t_1 s_2) B A (Set_2E_7B_7D (Set_2Eset B)) s_1.

(; Theorem: |- ((= (Data.Bool.\/ ((= s) Set.{}))) (Data.Bool.\/ ((= s) Set.{}))) ;)

(; dict ;)

def thm_385 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.REFL (hol.arr hol.bool hol.bool) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A)))).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_386 : B : hol.type -> x_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset B) x_1 x_1) hol.true) :=
  B : hol.type => x_1 : hol.term (Set_2Eset B) => (A : hol.type => x_1 : hol.term A => thm_304 A x_1) (Set_2Eset B) x_1.

(; Theorem: |- ((= ((= Set.{}) Set.{})) Data.Bool.T) ;)

(; dict ;)

def thm_387 : B : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset B) (Set_2E_7B_7D (Set_2Eset B)) (Set_2E_7B_7D (Set_2Eset B))) hol.true) :=
  B : hol.type => (B : hol.type => x_1 : hol.term (Set_2Eset B) => thm_386 B x_1) B (Set_2E_7B_7D (Set_2Eset B)).

(; Theorem: |- ((= ((Data.Bool.\/ ((= s) Set.{})) ((= Set.{}) Set.{}))) ((Data.Bool.\/ ((= s) Set.{})) Data.Bool.T)) ;)

(; dict ;)

def thm_388 : B : hol.type -> A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) (Set_2E_7B_7D (Set_2Eset B)) (Set_2E_7B_7D (Set_2Eset B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) hol.true)) :=
  B : hol.type => A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A)))) (hol.eq (Set_2Eset B) (Set_2E_7B_7D (Set_2Eset B)) (Set_2E_7B_7D (Set_2Eset B))) hol.true (thm_385 A s_1) (thm_387 B).

(; Theorem: |- ((= ((Data.Bool.\/ ((= s) Set.{})) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_389 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) hol.true) hol.true) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => (t_1 : hol.term hol.bool => thm_351 t_1) (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))).

(; Theorem: |- ((= ((Data.Bool.\/ ((= s) Set.{})) ((= Set.{}) Set.{}))) Data.Bool.T) ;)

(; dict ;)

def thm_390 : B : hol.type -> A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) (Set_2E_7B_7D (Set_2Eset B)) (Set_2E_7B_7D (Set_2Eset B)))) hol.true) :=
  B : hol.type => A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) (Set_2E_7B_7D (Set_2Eset B)) (Set_2E_7B_7D (Set_2Eset B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) hol.true) hol.true (thm_388 B A s_1) (thm_389 A s_1).

(; Theorem: |- ((= ((= ((Set.cross s) Set.{})) Set.{})) Data.Bool.T) ;)

(; dict ;)

def thm_391 : B : hol.type -> A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 (Set_2E_7B_7D (Set_2Eset B))) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) hol.true) :=
  B : hol.type => A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 (Set_2E_7B_7D (Set_2Eset B))) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.or (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D (Set_2Eset A))) (hol.eq (Set_2Eset B) (Set_2E_7B_7D (Set_2Eset B)) (Set_2E_7B_7D (Set_2Eset B)))) hol.true (thm_384 B A s_1) (thm_390 B A s_1).

(; Theorem: |- ((= \lambda s. ((= ((Set.cross s) Set.{})) Set.{})) \lambda s. Data.Bool.T) ;)

(; dict ;)

def thm_392 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 (Set_2E_7B_7D (Set_2Eset B))) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (s_1 : hol.term (Set_2Eset A) => hol.true)) :=
  B : hol.type => A : hol.type => hol.ABS_THM (Set_2Eset A) hol.bool (s_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 (Set_2E_7B_7D (Set_2Eset B))) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (s_1 : hol.term (Set_2Eset A) => hol.true) (s_1 : hol.term (Set_2Eset A) => thm_391 B A s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda s. ((= ((Set.cross s) Set.{})) Set.{}))) (Data.Bool.! \lambda s. Data.Bool.T)) ;)

(; dict ;)

def thm_393 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 (Set_2E_7B_7D (Set_2Eset B))) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.true))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (s_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 (Set_2E_7B_7D (Set_2Eset B))) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))) (s_1 : hol.term (Set_2Eset A) => hol.true) (thm_32 A) (thm_392 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda s. ((= ((Set.cross s) Set.{})) Set.{}))) Data.Bool.T) ;)

(; dict ;)

def thm_394 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 (Set_2E_7B_7D (Set_2Eset B))) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) hol.true) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 (Set_2E_7B_7D (Set_2Eset B))) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.true)) hol.true (thm_393 B A) (thm_326 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda s. ((= ((Set.cross s) Set.{})) Set.{}))) ;)

(; dict ;)

def thm_395 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 (Set_2E_7B_7D (Set_2Eset B))) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B)))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 (Set_2E_7B_7D (Set_2Eset B))) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) hol.true (thm_394 B A).

(; Theorem: |- (Data.Bool.! \lambda s. ((= ((Set.cross s) Set.{})) Set.{})) ;)

(; dict ;)

def thm_396 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 (Set_2E_7B_7D (Set_2Eset B))) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP hol.true (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 (Set_2E_7B_7D (Set_2Eset B))) (Set_2E_7B_7D (Set_2Eset (Data_2EPair_2E_2A A B))))) (thm_395 B A) thm_16.

(; Theorem: |- ((= ((= ((Set.cross Set.universe) Set.universe)) Set.universe)) (Data.Bool.! \lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)))) ;)

(; dict ;)

def thm_397 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset (Data_2EPair_2E_2A A B)) => s_2 : hol.term (Set_2Eset (Data_2EPair_2E_2A A B)) => thm_51 B A t_1 s_2) B A (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))).

(; Theorem: |- ((= (\lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)) x)) ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe))) ;)

(; dict ;)

def thm_398 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.BETA_CONV (Data_2EPair_2E_2A A B) hol.bool (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)) x)) \lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe))) ;)

(; dict ;)

def thm_399 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_1 : hol.term (Data_2EPair_2E_2A A B) => (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (Data_2EPair_2E_2A A B) hol.bool (x_1 : hol.term (Data_2EPair_2E_2A A B) => (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_398 B A x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)) x))) (Data.Bool.! \lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)))) ;)

(; dict ;)

def thm_400 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1)) (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool (hol.forall (Data_2EPair_2E_2A A B)) (hol.forall (Data_2EPair_2E_2A A B)) (x_1 : hol.term (Data_2EPair_2E_2A A B) => (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (thm_53 B A) (thm_399 B A).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. (\lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)) x)))) (= (Data.Bool.! \lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe))))) ;)

(; dict ;)

def thm_401 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1))) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1)) (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) thm_34 (thm_400 B A).

(; Theorem: |- ((= (\lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)) ((Data.Pair., a) b))) ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))) ;)

(; dict ;)

def thm_402 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool ((x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.BETA_CONV (Data_2EPair_2E_2A A B) hol.bool (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1).

(; Theorem: |- ((= \lambda b. (\lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)) ((Data.Pair., a) b))) \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))) ;)

(; dict ;)

def thm_403 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_2 : hol.term B => (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2)) (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.ABS_THM B hol.bool (b_2 : hol.term B => (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2)) (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (b_2 : hol.term B => thm_402 B A b_2 a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (\lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)) ((Data.Pair., a) b)))) (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe)))) ;)

(; dict ;)

def thm_404 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_2 : hol.term B => (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2))) (hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_2 : hol.term B => (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2)) (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (thm_59 B) (thm_403 A B a_1).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. (\lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)) ((Data.Pair., a) b)))) \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe)))) ;)

(; dict ;)

def thm_405 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2))) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM A hol.bool (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2))) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (a_1 : hol.term A => thm_404 A B a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (\lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)) ((Data.Pair., a) b))))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))))) ;)

(; dict ;)

def thm_406 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2)))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2))) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (thm_58 A) (thm_405 B A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (\lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)) x))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (\lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)) ((Data.Pair., a) b)))))) ((= (Data.Bool.! \lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe)))))) ;)

(; dict ;)

def thm_407 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1)) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2))))) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1))) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2)))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) (thm_401 B A) (thm_406 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)) x))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (\lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)) ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_408 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1)) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2))))) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => thm_68 B A p_1) B A (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Set.member x) ((Set.cross Set.universe) Set.universe))) ((Set.member x) Set.universe)))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))))) ;)

(; dict ;)

def thm_409 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => (x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) x_1)) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => (x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2))))) (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))))) (thm_407 B A) (thm_408 B A).

(; Theorem: |- ((= ((= ((Set.cross Set.universe) Set.universe)) Set.universe)) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))))) ;)

(; dict ;)

def thm_410 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) (thm_397 B A) (thm_409 B A).

(; Theorem: |- ((= (Set.member ((Data.Pair., a) b))) (Set.member ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_411 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.REFL (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)).

(; Theorem: |- ((= ((= ((Set.cross s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))))))) ((= ((Set.cross s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))))))) ;)

(; dict ;)

def thm_412 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1)))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))).

(; Theorem: |- ((= ((= ((Set.cross s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))))))) ((= ((Set.cross s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))))))) ;)

(; dict ;)

def thm_413 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1)))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (thm_412 B A t_1 s_2) (thm_412 B A t_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Set.cross s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t)))))))) ;)

(; dict ;)

def thm_414 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_1 t_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_1) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_2)))))))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => thm_24 B A s_1.

(; Theorem: |- ((= ((Set.cross s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))) ;)

(; dict ;)

def thm_415 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => thm_414 A B s_2 t_1.

(; Theorem: |- ((= ((Set.cross Set.universe) Set.universe)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe))))))) ;)

(; dict ;)

def thm_416 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B))))))))) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => (B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) s_2 t_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 s_2) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 t_1))))))) (thm_413 B A t_1 s_2) (thm_415 B A t_1 s_2)) B A t_1 s_2) B A (Set_2Euniverse (Set_2Eset B)) (Set_2Euniverse (Set_2Eset A)).

(; Theorem: |- ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)))))))) ;)

(; dict ;)

def thm_417 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))))))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))))))) (thm_411 B A b_1 a_2) (thm_416 B A).

(; Theorem: |- ((= Set.fromPredicate) Set.fromPredicate) ;)

(; dict ;)

def thm_418 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B)))).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_419 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_420 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool))) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)).

(; Theorem: |- ((= (Data.Bool./\ ((= v) ((Data.Pair., x) y)))) (Data.Bool./\ ((= v) ((Data.Pair., x) y)))) ;)

(; dict ;)

def thm_421 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> v_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_1))) (hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_1)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => v_3 : hol.term (Data_2EPair_2E_2A A B) => hol.REFL (hol.arr hol.bool hol.bool) (hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_1))).

(; Theorem: |- ((= (\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x)) \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe))) ;)

(; dict ;)

def thm_422 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) ((x_2 : hol.term A => y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) x_1) (y_2 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_2 (Set_2Euniverse (Set_2Eset B))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.BETA_CONV A (hol.arr B hol.bool) (x_2 : hol.term A => y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) x_1.

(; Theorem: |- ((= y) y) ;)

(; dict ;)

def thm_423 : B : hol.type -> y_1 : hol.term B -> hol.proof (hol.eq B y_1 y_1) :=
  B : hol.type => y_1 : hol.term B => hol.REFL B y_1.

(; Theorem: |- ((= ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x) y)) (\lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) y)) ;)

(; dict ;)

def thm_424 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => y_4 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_4 (Set_2Euniverse (Set_2Eset B)))) x_2 y_1) ((y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.APP_THM B hol.bool ((x_3 : hol.term A => y_4 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_4 (Set_2Euniverse (Set_2Eset B)))) x_2) (y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) y_1 y_1 (thm_422 A B x_2) (thm_423 B y_1).

(; Theorem: |- ((= (\lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) y)) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe))) ;)

(; dict ;)

def thm_425 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) y_1) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_1 (Set_2Euniverse (Set_2Eset B))))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.BETA_CONV B hol.bool (y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) y_1.

(; Theorem: |- ((= ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x) y)) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe))) ;)

(; dict ;)

def thm_426 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => y_4 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_4 (Set_2Euniverse (Set_2Eset B)))) x_2 y_1) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_1 (Set_2Euniverse (Set_2Eset B))))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.TRANS hol.bool ((x_3 : hol.term A => y_4 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_4 (Set_2Euniverse (Set_2Eset B)))) x_2 y_1) ((y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) y_1) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_1 (Set_2Euniverse (Set_2Eset B)))) (thm_424 B A y_1 x_2) (thm_425 A B y_1 x_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x) y))) ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)))) ;)

(; dict ;)

def thm_427 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> v_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_1)) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_2 y_1)) (hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_1)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_1 (Set_2Euniverse (Set_2Eset B)))))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => v_3 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM hol.bool hol.bool (hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_1))) (hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_1))) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_2 y_1) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_1 (Set_2Euniverse (Set_2Eset B)))) (thm_421 B A y_1 x_2 v_3) (thm_426 B A y_1 x_2).

(; Theorem: |- ((= \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x) y))) \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)))) ;)

(; dict ;)

def thm_428 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> v_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_1 y_3)) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_1 y_3)) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_1 y_3)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => v_2 : hol.term (Data_2EPair_2E_2A A B) => hol.ABS_THM B hol.bool (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_1 y_3)) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_1 y_3)) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_1 y_3)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B))))) (y_3 : hol.term B => thm_427 B A y_3 x_1 v_2).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x) y)))) (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe))))) ;)

(; dict ;)

def thm_429 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> v_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_1 y_3)) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_1 y_3)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B))))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => v_2 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_1 y_3)) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_1 y_3)) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_1 y_3)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B))))) (thm_420 B) (thm_428 A B x_1 v_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x) y)))) \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe))))) ;)

(; dict ;)

def thm_430 : B : hol.type -> A : hol.type -> v_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_2 y_3))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B))))))) :=
  B : hol.type => A : hol.type => v_1 : hol.term (Data_2EPair_2E_2A A B) => hol.ABS_THM A hol.bool (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_2 y_3))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))))) (x_2 : hol.term A => thm_429 A B x_2 v_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x) y))))) (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)))))) ;)

(; dict ;)

def thm_431 : B : hol.type -> A : hol.type -> v_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_2 y_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))))))) :=
  B : hol.type => A : hol.type => v_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_2 y_3))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))))) (thm_419 A) (thm_430 B A v_1).

(; Theorem: |- ((= \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x) y))))) \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)))))) ;)

(; dict ;)

def thm_432 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (v_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_2 y_3)))) (v_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (Data_2EPair_2E_2A A B) hol.bool (v_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_2 y_3)))) (v_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B))))))) (v_1 : hol.term (Data_2EPair_2E_2A A B) => thm_431 B A v_1).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x) y)))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe))))))) ;)

(; dict ;)

def thm_433 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_2 y_3))))) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B))))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B)))) (v_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) ((x_4 : hol.term A => y_5 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))) x_2 y_3)))) (v_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_2 y_3)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B))))))) (thm_418 B A) (thm_432 B A).

(; Theorem: |- ((= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x) y))))))) ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)))))))) ;)

(; dict ;)

def thm_434 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) ((x_6 : hol.term A => y_7 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 (Set_2Euniverse (Set_2Eset B)))) x_4 y_5)))))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))))))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) ((x_6 : hol.term A => y_7 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 (Set_2Euniverse (Set_2Eset B)))) x_4 y_5))))) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))))))) (thm_411 B A b_1 a_2) (thm_433 B A).

(; Theorem: |- ((= (= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x) y)))))))) (= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe))))))))) ;)

(; dict ;)

def thm_435 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) ((x_6 : hol.term A => y_7 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 (Set_2Euniverse (Set_2Eset B)))) x_4 y_5))))))) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B))))))))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) ((x_6 : hol.term A => y_7 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 (Set_2Euniverse (Set_2Eset B)))) x_4 y_5)))))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B))))))))) thm_34 (thm_434 B A b_1 a_2).

(; Theorem: |- ((= (\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) a)) \lambda y. ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member y) Set.universe))) ;)

(; dict ;)

def thm_436 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) ((x_2 : hol.term A => y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) a_1) (y_2 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_2 (Set_2Euniverse (Set_2Eset B))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.BETA_CONV A (hol.arr B hol.bool) (x_2 : hol.term A => y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) a_1.

(; Theorem: |- ((= b) b) ;)

(; dict ;)

def thm_437 : B : hol.type -> b_1 : hol.term B -> hol.proof (hol.eq B b_1 b_1) :=
  B : hol.type => b_1 : hol.term B => hol.REFL B b_1.

(; Theorem: |- ((= ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) a) b)) (\lambda y. ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member y) Set.universe)) b)) ;)

(; dict ;)

def thm_438 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => y_4 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_4 (Set_2Euniverse (Set_2Eset B)))) a_2 b_1) ((y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM B hol.bool ((x_3 : hol.term A => y_4 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_4 (Set_2Euniverse (Set_2Eset B)))) a_2) (y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) b_1 b_1 (thm_436 A B a_2) (thm_437 B b_1).

(; Theorem: |- ((= (\lambda y. ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member y) Set.universe)) b)) ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ;)

(; dict ;)

def thm_439 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) b_1) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B))))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.BETA_CONV B hol.bool (y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) b_1.

(; Theorem: |- ((= ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) a) b)) ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ;)

(; dict ;)

def thm_440 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => y_4 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_4 (Set_2Euniverse (Set_2Eset B)))) a_2 b_1) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.TRANS hol.bool ((x_3 : hol.term A => y_4 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_4 (Set_2Euniverse (Set_2Eset B)))) a_2 b_1) ((y_3 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_3 (Set_2Euniverse (Set_2Eset B)))) b_1) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))) (thm_438 B A b_1 a_2) (thm_439 A B b_1 a_2).

(; Theorem: |- ((= ((= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x) y))))))) ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) a) b))) ((= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)))))))) ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe)))) ;)

(; dict ;)

def thm_441 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) ((x_6 : hol.term A => y_7 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 (Set_2Euniverse (Set_2Eset B)))) x_4 y_5)))))) ((x_3 : hol.term A => y_4 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_4 (Set_2Euniverse (Set_2Eset B)))) a_2 b_1)) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B))))))))) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) ((x_6 : hol.term A => y_7 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 (Set_2Euniverse (Set_2Eset B)))) x_4 y_5))))))) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B)))))))))) ((x_3 : hol.term A => y_4 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_4 (Set_2Euniverse (Set_2Eset B)))) a_2 b_1) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))) (thm_435 B A b_1 a_2) (thm_440 B A b_1 a_2).

(; Theorem: |- ((= ((= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((p x) y))))))) ((p a) b))) ((= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((p x) y))))))) ((p a) b))) ;)

(; dict ;)

def thm_442 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_3 b_2)) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_3 b_2))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_2 : hol.term B => a_3 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_3 b_2)).

(; Theorem: |- ((= ((= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((p x) y))))))) ((p a) b))) ((= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((p x) y))))))) ((p a) b))) ;)

(; dict ;)

def thm_443 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_3 b_2)) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_3 b_2))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_2 : hol.term B => a_3 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_3 b_2)) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_3 b_2)) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_3 b_2)) (thm_442 B A p_1 b_2 a_3) (thm_442 B A p_1 b_2 a_3).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((p x) y))))))) ((p a) b)))) ;)

(; dict ;)

def thm_444 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_2 b_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_25 B A p_1.

(; Theorem: |- (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((p x) y))))))) ((p a) b))) ;)

(; dict ;)

def thm_445 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> a_2 : hol.term A -> hol.proof (hol.forall B (b_3 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_2 b_3))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => a_2 : hol.term A => thm_444 B A p_1 a_2.

(; Theorem: |- ((= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((p x) y))))))) ((p a) b)) ;)

(; dict ;)

def thm_446 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> b_2 : hol.term B -> a_3 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_3 b_2)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_2 : hol.term B => a_3 : hol.term A => thm_445 A B p_1 a_3 b_2.

(; Theorem: |- ((= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) x) y))))))) ((\lambda x. \lambda y. ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)) a) b)) ;)

(; dict ;)

def thm_447 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) ((x_6 : hol.term A => y_7 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 (Set_2Euniverse (Set_2Eset B)))) x_4 y_5)))))) ((x_3 : hol.term A => y_4 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_4 (Set_2Euniverse (Set_2Eset B)))) a_2 b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => (B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_2 : hol.term B => a_3 : hol.term A => (B : hol.type => A : hol.type => p_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => b_2 : hol.term B => a_3 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_3 b_2)) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_4 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_6 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_4 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_5 y_6)) (p_1 x_5 y_6)))))) (p_1 a_3 b_2)) (thm_443 B A p_1 b_2 a_3) (thm_446 B A p_1 b_2 a_3)) B A p_1 b_2 a_3) B A (x_3 : hol.term A => y_4 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_4 (Set_2Euniverse (Set_2Eset B)))) b_1 a_2.

(; Theorem: |- ((= ((Set.member ((Data.Pair., a) b)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) Set.universe)) ((Set.member y) Set.universe)))))))) ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ;)

(; dict ;)

def thm_448 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B))))))))) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) ((x_6 : hol.term A => y_7 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_6 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_7 (Set_2Euniverse (Set_2Eset B)))) x_4 y_5)))))) ((x_3 : hol.term A => y_4 : hol.term B => hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_3 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_4 (Set_2Euniverse (Set_2Eset B)))) a_2 b_1)) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B))))))))) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B))))) (thm_441 B A b_1 a_2) (thm_447 B A b_1 a_2).

(; Theorem: |- ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ;)

(; dict ;)

def thm_449 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.TRANS hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2EfromPredicate (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (Set_2Eset (Data_2EPair_2E_2A A B))) (v_3 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq (Data_2EPair_2E_2A A B) v_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) x_4 y_5)) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_4 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) y_5 (Set_2Euniverse (Set_2Eset B))))))))) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))) (thm_417 B A b_1 a_2) (thm_448 B A b_1 a_2).

(; Theorem: |- ((= (= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe)))) (= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe)))) ;)

(; dict ;)

def thm_450 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))))) (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))) thm_34 (thm_449 B A b_1 a_2).

(; Theorem: |- ((= ((Set.member ((Data.Pair., a) b)) Set.universe)) ((Set.member ((Data.Pair., a) b)) Set.universe)) ;)

(; dict ;)

def thm_451 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.REFL hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))).

(; Theorem: |- ((= ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))) ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))) ;)

(; dict ;)

def thm_452 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))))) (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B))))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) (thm_450 B A b_1 a_2) (thm_451 B A b_1 a_2).

(; Theorem: |- ((= \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))) \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))) ;)

(; dict ;)

def thm_453 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.ABS_THM B hol.bool (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (b_2 : hol.term B => thm_452 B A b_2 a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe)))) (Data.Bool.! \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe)))) ;)

(; dict ;)

def thm_454 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (thm_59 B) (thm_453 A B a_1).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe)))) \lambda a. (Data.Bool.! \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe)))) ;)

(; dict ;)

def thm_455 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM A hol.bool (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (a_1 : hol.term A => thm_454 A B a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Set.member ((Data.Pair., a) b)) ((Set.cross Set.universe) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))))) ;)

(; dict ;)

def thm_456 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (thm_58 A) (thm_455 B A).

(; Theorem: |- ((= ((= ((Set.cross Set.universe) Set.universe)) Set.universe)) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))))) ;)

(; dict ;)

def thm_457 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) (thm_410 B A) (thm_456 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))))) ((= ((Set.cross Set.universe) Set.universe)) Set.universe)) ;)

(; dict ;)

def thm_458 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) (thm_457 B A).

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_459 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= ((= ((Set.member x) Set.universe)) Data.Bool.T)) ((= ((Set.member x) Set.universe)) Data.Bool.T)) ;)

(; dict ;)

def thm_460 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) hol.true) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) hol.true).

(; Theorem: |- ((= ((= ((Set.member x) Set.universe)) Data.Bool.T)) ((= ((Set.member x) Set.universe)) Data.Bool.T)) ;)

(; dict ;)

def thm_461 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) hol.true) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) hol.true) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) hol.true) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) hol.true) (thm_460 A x_1) (thm_460 A x_1).

(; Theorem: |- ((= ((Set.member x) Set.universe)) ((= ((Set.member x) Set.universe)) Data.Bool.T)) ;)

(; dict ;)

def thm_462 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_301 t_1) (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))).

(; Theorem: |- ((Set.member x) Set.universe) ;)

(; dict ;)

def thm_463 : A : hol.type -> x_1 : hol.term A -> hol.proof (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) :=
  A : hol.type => x_1 : hol.term A => thm_26 A x_1.

(; Theorem: |- ((= ((Set.member x) Set.universe)) Data.Bool.T) ;)

(; dict ;)

def thm_464 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) hol.true) (thm_462 A x_1) (thm_463 A x_1).

(; Theorem: |- ((= ((Set.member a) Set.universe)) Data.Bool.T) ;)

(; dict ;)

def thm_465 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) hol.true) :=
  A : hol.type => a_1 : hol.term A => (A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) hol.true) (hol.eq hol.bool (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset A))) hol.true) (thm_461 A x_1) (thm_464 A x_1)) A x_1) A a_1.

(; Theorem: |- ((= (Data.Bool./\ ((Set.member a) Set.universe))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_466 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A)))) (hol.and hol.true)) :=
  A : hol.type => a_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) hol.true thm_459 (thm_465 A a_1).

(; Theorem: |- ((= ((Set.member x) Set.universe)) Data.Bool.T) ;)

(; dict ;)

def thm_467 : B : hol.type -> x_1 : hol.term B -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset B))) hol.true) :=
  B : hol.type => x_1 : hol.term B => (A : hol.type => x_1 : hol.term A => thm_464 A x_1) B x_1.

(; Theorem: |- ((= ((Set.member b) Set.universe)) Data.Bool.T) ;)

(; dict ;)

def thm_468 : B : hol.type -> b_1 : hol.term B -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B))) hol.true) :=
  B : hol.type => b_1 : hol.term B => (B : hol.type => x_1 : hol.term B => thm_467 B x_1) B b_1.

(; Theorem: |- ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_469 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))) (hol.and hol.true hol.true)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A)))) (hol.and hol.true) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B))) hol.true (thm_466 A a_2) (thm_468 B b_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_470 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_471 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_470 t_1) (thm_470 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_472 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_473 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_472 thm_472.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_474 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_106 thm_473.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_475 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_27 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_476 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_142 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_477 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_470 t_1) (thm_475 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_476 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_478 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_479 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_478 t_1) (thm_478 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_480 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_28 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_481 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_142 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_482 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_479 t_1) (thm_480 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_481 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_483 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_484 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_483 t_1) (thm_483 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_485 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_29 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_486 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_142 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_487 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_484 t_1) (thm_485 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_486 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_488 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_489 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_488 t_1) (thm_488 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_490 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_30 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_491 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_142 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_492 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_489 t_1) (thm_490 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_491 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_493 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_494 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_493 t_1) (thm_493 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_495 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_31 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_496 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_492 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_494 t_1) (thm_495 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_497 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_487 t_1) (thm_496 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_498 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_482 t_1) (thm_497 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_499 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_477 t_1) (thm_498 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_500 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_499 t_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_501 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_225 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_502 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_474 thm_500 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_501 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_503 : hol.proof (hol.eq hol.bool (hol.and hol.true hol.true) hol.true) :=
  (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_471 t_1) (thm_502 t_1)) hol.true.

(; Theorem: |- ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) Data.Bool.T) ;)

(; dict ;)

def thm_504 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))) hol.true) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.TRANS hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))) (hol.and hol.true hol.true) hol.true (thm_469 B A b_1 a_2) thm_503.

(; Theorem: |- ((= (= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe)))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_505 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B))))) (hol.eq hol.bool hol.true)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))) hol.true thm_34 (thm_504 B A b_1 a_2).

(; Theorem: |- ((= ((Set.member x) Set.universe)) Data.Bool.T) ;)

(; dict ;)

def thm_506 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) x_1 (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) hol.true) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => (A : hol.type => x_1 : hol.term A => thm_464 A x_1) (Data_2EPair_2E_2A A B) x_1.

(; Theorem: |- ((= ((Set.member ((Data.Pair., a) b)) Set.universe)) Data.Bool.T) ;)

(; dict ;)

def thm_507 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) hol.true) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => (B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_506 B A x_1) B A (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_508 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (hol.eq hol.bool hol.true hol.true)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B))))) (hol.eq hol.bool hol.true) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) hol.true (thm_505 B A b_1 a_2) (thm_507 B A b_1 a_2).

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_509 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) hol.true) :=
  (t_1 : hol.term hol.bool => thm_112 t_1) hol.true.

(; Theorem: |- ((= ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))) Data.Bool.T) ;)

(; dict ;)

def thm_510 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) hol.true) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_2 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_1 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (hol.eq hol.bool hol.true hol.true) hol.true (thm_508 B A b_1 a_2) thm_509.

(; Theorem: |- ((= \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))) \lambda b. Data.Bool.T) ;)

(; dict ;)

def thm_511 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (b_2 : hol.term B => hol.true)) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.ABS_THM B hol.bool (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (b_2 : hol.term B => hol.true) (b_2 : hol.term B => thm_510 B A b_2 a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe)))) (Data.Bool.! \lambda b. Data.Bool.T)) ;)

(; dict ;)

def thm_512 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (hol.forall B (b_2 : hol.term B => hol.true))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))) (b_2 : hol.term B => hol.true) (thm_59 B) (thm_511 A B a_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda b. t)) t)) ((= (Data.Bool.! \lambda b. t)) t)) ;)

(; dict ;)

def thm_513 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda b. t)) t)) ;)

(; dict ;)

def thm_514 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1) (thm_312 A t_1) (thm_513 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. t)) t) ;)

(; dict ;)

def thm_515 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1) (thm_514 A t_1) (thm_315 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. t)) t) ;)

(; dict ;)

def thm_516 : B : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall B (b_2 : hol.term B => t_1)) t_1) :=
  B : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_515 A t_1) B t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda b. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_517 : B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_1 : hol.term B => hol.true)) hol.true) :=
  B : hol.type => (B : hol.type => t_1 : hol.term hol.bool => thm_516 B t_1) B hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe)))) Data.Bool.T) ;)

(; dict ;)

def thm_518 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) hol.true) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => hol.TRANS hol.bool (hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (hol.forall B (b_2 : hol.term B => hol.true)) hol.true (thm_512 A B a_1) (thm_517 B).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe)))) \lambda a. Data.Bool.T) ;)

(; dict ;)

def thm_519 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (a_1 : hol.term A => hol.true)) :=
  B : hol.type => A : hol.type => hol.ABS_THM A hol.bool (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (a_1 : hol.term A => hol.true) (a_1 : hol.term A => thm_518 A B a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))))) (Data.Bool.! \lambda a. Data.Bool.T)) ;)

(; dict ;)

def thm_520 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) (hol.forall A (a_1 : hol.term A => hol.true))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))) (a_1 : hol.term A => hol.true) (thm_58 A) (thm_519 B A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda a. t)) t)) ((= (Data.Bool.! \lambda a. t)) t)) ;)

(; dict ;)

def thm_521 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda a. t)) t)) ;)

(; dict ;)

def thm_522 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1) (thm_312 A t_1) (thm_521 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. t)) t) ;)

(; dict ;)

def thm_523 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1) (thm_522 A t_1) (thm_315 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_524 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_523 A t_1) A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))))) Data.Bool.T) ;)

(; dict ;)

def thm_525 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) hol.true) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) (hol.forall A (a_1 : hol.term A => hol.true)) hol.true (thm_520 B A) (thm_524 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe))))) ;)

(; dict ;)

def thm_526 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) hol.true (thm_525 B A).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((Data.Bool./\ ((Set.member a) Set.universe)) ((Set.member b) Set.universe))) ((Set.member ((Data.Pair., a) b)) Set.universe)))) ;)

(; dict ;)

def thm_527 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP hol.true (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) (thm_526 B A) thm_16.

(; Theorem: |- ((= ((Set.cross Set.universe) Set.universe)) Set.universe) ;)

(; dict ;)

def thm_528 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq hol.bool (hol.and (Set_2Emember (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) a_1 (Set_2Euniverse (Set_2Eset A))) (Set_2Emember (hol.arr B (hol.arr (Set_2Eset B) hol.bool)) b_2 (Set_2Euniverse (Set_2Eset B)))) (Set_2Emember (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Set_2Eset (Data_2EPair_2E_2A A B)) hol.bool)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B))))))) (hol.eq (Set_2Eset (Data_2EPair_2E_2A A B)) (Set_2Ecross (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (Data_2EPair_2E_2A A B)))) (Set_2Euniverse (Set_2Eset A)) (Set_2Euniverse (Set_2Eset B))) (Set_2Euniverse (Set_2Eset (Data_2EPair_2E_2A A B)))) (thm_458 B A) (thm_527 B A).
