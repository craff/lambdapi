
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME set_2Ddef.

Set_2Eset : hol.type -> hol.type.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

Set_2EfromPredicate : A : hol.type -> hol.term (hol.arr (hol.arr A hol.bool) (Set_2Eset A)).

HOLLight_2Edest__set : A : hol.type -> hol.term (hol.arr (Set_2Eset A) (hol.arr A hol.bool)).

(; Constant Set.member ;)

def Set_2Emember : A : hol.type -> hol.term (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) :=
  A : hol.type => __9437_1 : hol.term A => __9438_2 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_2 __9437_1.

(; Constant Set.{} ;)

def Set_2E_7B_7D : A : hol.type -> hol.term (Set_2Eset A) :=
  A : hol.type => Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false)).

(; Constant Set.insert ;)

def Set_2Einsert : A : hol.type -> hol.term (hol.arr A (hol.arr (Set_2Eset A) (Set_2Eset A))) :=
  A : hol.type => __9449_1 : hol.term A => __9450_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 __9449_1) (Set_2Emember A y_4 __9450_2)))).

(; Constant Set.universe ;)

def Set_2Euniverse : A : hol.type -> hol.term (Set_2Eset A) :=
  A : hol.type => Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.true)).

(; Constant Set.union ;)

def Set_2Eunion : A : hol.type -> hol.term (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A))) :=
  A : hol.type => __9461_1 : hol.term (Set_2Eset A) => __9462_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 __9461_1) (Set_2Emember A x_4 __9462_2)))).

(; Constant Set.bigUnion ;)

def Set_2EbigUnion : A : hol.type -> hol.term (hol.arr (Set_2Eset (Set_2Eset A)) (Set_2Eset A)) :=
  A : hol.type => __9473_1 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 __9473_1) (Set_2Emember A x_3 u_4))))).

(; Constant Set.intersect ;)

def Set_2Eintersect : A : hol.type -> hol.term (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A))) :=
  A : hol.type => __9478_1 : hol.term (Set_2Eset A) => __9479_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9478_1) (Set_2Emember A x_4 __9479_2)))).

(; Constant Set.bigIntersect ;)

def Set_2EbigIntersect : A : hol.type -> hol.term (hol.arr (Set_2Eset (Set_2Eset A)) (Set_2Eset A)) :=
  A : hol.type => __9490_1 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 __9490_1) (Set_2Emember A x_3 u_4))))).

(; Constant Set.difference ;)

def Set_2Edifference : A : hol.type -> hol.term (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A))) :=
  A : hol.type => __9495_1 : hol.term (Set_2Eset A) => __9496_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9495_1) (hol.not (Set_2Emember A x_4 __9496_2))))).

(; Constant Set.delete ;)

def Set_2Edelete : A : hol.type -> hol.term (hol.arr (Set_2Eset A) (hol.arr A (Set_2Eset A))) :=
  A : hol.type => __9507_1 : hol.term (Set_2Eset A) => __9508_2 : hol.term A => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 __9507_1) (hol.not (hol.eq A y_4 __9508_2))))).

(; Constant Set.subset ;)

def Set_2Esubset : A : hol.type -> hol.term (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool)) :=
  A : hol.type => __9519_1 : hol.term (Set_2Eset A) => __9520_2 : hol.term (Set_2Eset A) => hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 __9519_1) (Set_2Emember A x_3 __9520_2)).

(; Constant Set.properSubset ;)

def Set_2EproperSubset : A : hol.type -> hol.term (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool)) :=
  A : hol.type => __9531_1 : hol.term (Set_2Eset A) => __9532_2 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_1 __9532_2) (hol.not (hol.eq (Set_2Eset A) __9531_1 __9532_2)).

(; Constant Set.disjoint ;)

def Set_2Edisjoint : A : hol.type -> hol.term (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool)) :=
  A : hol.type => __9543_1 : hol.term (Set_2Eset A) => __9544_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_1 __9544_2) (Set_2E_7B_7D A).

(; Constant Set.singleton ;)

def Set_2Esingleton : A : hol.type -> hol.term (hol.arr (Set_2Eset A) hol.bool) :=
  A : hol.type => __9555_1 : hol.term (Set_2Eset A) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) __9555_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A))).

(; Constant Set.image ;)

def Set_2Eimage : B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr A B) (hol.arr (Set_2Eset A) (Set_2Eset B))) :=
  B : hol.type => A : hol.type => __9560_1 : hol.term (hol.arr A B) => __9561_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 __9561_2) (hol.eq B y_4 (__9560_1 x_5)))))).

(; Constant Set.injections ;)

def Set_2Einjections : B : hol.type -> A : hol.type -> hol.term (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B)))) :=
  B : hol.type => A : hol.type => __9572_1 : hol.term (Set_2Eset A) => __9573_2 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9572_1) (Set_2Emember B (f_4 x_5) __9573_2))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 __9572_1) (hol.and (Set_2Emember A y_6 __9572_1) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6))))))).

(; Constant Set.surjections ;)

def Set_2Esurjections : B : hol.type -> A : hol.type -> hol.term (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B)))) :=
  B : hol.type => A : hol.type => __9584_1 : hol.term (Set_2Eset A) => __9585_2 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9584_1) (Set_2Emember B (f_4 x_5) __9585_2))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 __9585_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 __9584_1) (hol.eq B (f_4 y_6) x_5)))))))).

(; Constant Set.bijections ;)

def Set_2Ebijections : B : hol.type -> A : hol.type -> hol.term (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B)))) :=
  B : hol.type => A : hol.type => __9596_1 : hol.term (Set_2Eset A) => __9597_2 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_1 __9597_2) (Set_2Esurjections B A __9596_1 __9597_2).

(; Constant Set.choice ;)

def Set_2Echoice : A : hol.type -> hol.term (hol.arr (Set_2Eset A) A) :=
  A : hol.type => __9608_1 : hol.term (Set_2Eset A) => hol.select A (x_2 : hol.term A => Set_2Emember A x_2 __9608_1).

(; Constant Set.rest ;)

def Set_2Erest : A : hol.type -> hol.term (hol.arr (Set_2Eset A) (Set_2Eset A)) :=
  A : hol.type => __9613_1 : hol.term (Set_2Eset A) => Set_2Edelete A __9613_1 (Set_2Echoice A __9613_1).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))).

(; axiom ;)

thm_1 : hol.proof hol.true.

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; defineTypeOp ;)

thm_3 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (r_1 : hol.term (hol.arr A hol.bool) => (p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) r_1)).

(; defineTypeOp ;)

thm_4 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) (a_1 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) (a_1 : hol.term (Set_2Eset A) => a_1)).

(; axiom ;)

thm_5 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)).

(; axiom ;)

thm_6 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_7 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)).

(; axiom ;)

thm_8 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))).

(; axiom ;)

thm_9 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_10 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; axiom ;)

thm_11 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))).

(; axiom ;)

thm_12 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)).

(; axiom ;)

thm_13 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))).

(; axiom ;)

thm_14 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)).

(; axiom ;)

thm_15 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false).

(; axiom ;)

thm_16 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true).

(; axiom ;)

thm_17 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_18 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_19 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_20 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_21 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; axiom ;)

thm_22 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)).

(; axiom ;)

thm_23 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_24 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_25 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_26 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= ((= Data.Bool.?) \lambda p. (p (select p)))) ((= Data.Bool.?) \lambda p. (p (select p)))) ;)

(; dict ;)

def thm_27 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)))) :=
  A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))).

(; Theorem: |- ((= ((= Data.Bool.?) \lambda p. (p (select p)))) ((= Data.Bool.?) \lambda p. (p (select p)))) ;)

(; dict ;)

def thm_28 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)))) :=
  A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (thm_27 A) (thm_27 A).

(; Theorem: |- ((= Data.Bool.?) \lambda p. (p (select p))) ;)

(; dict ;)

def thm_29 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool)) (p_1 : hol.term (hol.arr (hol.arr A hol.bool) hol.bool) => p_1 (hol.select (hol.arr A hol.bool) p_1))) :=
  A : hol.type => (A : hol.type => hol.EQ_MP (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (thm_28 A) (thm_0 A)) (hol.arr A hol.bool).

(; Theorem: |- ((= \lambda p. (\lambda x. Data.Bool.T p)) \lambda p. (\lambda x. Data.Bool.T p)) ;)

(; dict ;)

def thm_30 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda p. (\lambda x. Data.Bool.T p))) (\lambda p. (p (select p)) \lambda p. (\lambda x. Data.Bool.T p))) ;)

(; dict ;)

def thm_31 : A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) ((p_1 : hol.term (hol.arr (hol.arr A hol.bool) hol.bool) => p_1 (hol.select (hol.arr A hol.bool) p_1)) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool)) (p_1 : hol.term (hol.arr (hol.arr A hol.bool) hol.bool) => p_1 (hol.select (hol.arr A hol.bool) p_1)) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) (thm_29 A) (thm_30 A).

(; Theorem: |- ((= (\lambda p. (p (select p)) \lambda p. (\lambda x. Data.Bool.T p))) (\lambda p. (\lambda x. Data.Bool.T p) (select \lambda p. (\lambda x. Data.Bool.T p)))) ;)

(; dict ;)

def thm_32 : A : hol.type -> hol.proof (hol.eq hol.bool ((p_1 : hol.term (hol.arr (hol.arr A hol.bool) hol.bool) => p_1 (hol.select (hol.arr A hol.bool) p_1)) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) ((p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) (hol.select (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)))) :=
  A : hol.type => hol.BETA_CONV (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (p_1 : hol.term (hol.arr (hol.arr A hol.bool) hol.bool) => p_1 (hol.select (hol.arr A hol.bool) p_1)) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda p. (\lambda x. Data.Bool.T p))) (\lambda p. (\lambda x. Data.Bool.T p) (select \lambda p. (\lambda x. Data.Bool.T p)))) ;)

(; dict ;)

def thm_33 : A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) ((p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) (hol.select (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)))) :=
  A : hol.type => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) ((p_1 : hol.term (hol.arr (hol.arr A hol.bool) hol.bool) => p_1 (hol.select (hol.arr A hol.bool) p_1)) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) ((p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) (hol.select (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1))) (thm_31 A) (thm_32 A).

(; Theorem: |- ((= (\lambda p. (\lambda x. Data.Bool.T p) p)) (\lambda x. Data.Bool.T p)) ;)

(; dict ;)

def thm_34 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) p_1) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) p_1.

(; Theorem: |- ((= (\lambda x. Data.Bool.T p)) (\lambda p. (\lambda x. Data.Bool.T p) p)) ;)

(; dict ;)

def thm_35 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) p_1) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) (thm_34 A p_1).

(; Theorem: |- ((= (\lambda x. Data.Bool.T x)) Data.Bool.T) ;)

(; dict ;)

def thm_36 : A : hol.type -> x_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) x_1) hol.true) :=
  A : hol.type => x_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (x_2 : hol.term (hol.arr A hol.bool) => hol.true) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. Data.Bool.T x)) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_37 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) x_1) (x_1 : hol.term (hol.arr A hol.bool) => hol.true)) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (x_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) x_1) (x_1 : hol.term (hol.arr A hol.bool) => hol.true) (x_1 : hol.term (hol.arr A hol.bool) => thm_36 A x_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_38 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) p_1 p_1) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) p_1.

(; Theorem: |- ((= (\lambda x. (\lambda x. Data.Bool.T x) p)) (\lambda x. Data.Bool.T p)) ;)

(; dict ;)

def thm_39 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) p_1) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1 p_1 (thm_37 A) (thm_38 A p_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. Data.Bool.T x) p))) (= (\lambda x. Data.Bool.T p))) ;)

(; dict ;)

def thm_40 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) p_1)) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) p_1) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) thm_26 (thm_39 A p_1).

(; Theorem: |- ((= (\lambda x. Data.Bool.T p)) Data.Bool.T) ;)

(; dict ;)

def thm_41 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1.

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. Data.Bool.T x) p)) (\lambda x. Data.Bool.T p))) ((= (\lambda x. Data.Bool.T p)) Data.Bool.T)) ;)

(; dict ;)

def thm_42 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) p_1) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) p_1)) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) hol.true (thm_40 A p_1) (thm_41 A p_1).

(; Theorem: |- ((= Data.Bool.T) (\lambda x. Data.Bool.T p)) ;)

(; dict ;)

def thm_43 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool hol.true ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) hol.true (hol.EQ_MP (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) p_1) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) hol.true) (thm_42 A p_1) (thm_39 A p_1)).

(; Theorem: |- (\lambda x. Data.Bool.T p) ;)

(; dict ;)

def thm_44 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP hol.true ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) (thm_43 A p_1) thm_1.

(; Theorem: |- (\lambda p. (\lambda x. Data.Bool.T p) p) ;)

(; dict ;)

def thm_45 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) p_1) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) p_1) (thm_35 A p_1) (thm_44 A p_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_46 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_47 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_48 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_46 A P_1) (thm_47 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_49 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_50 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_2 A) (thm_49 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_51 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_48 A P_1) (thm_50 A P_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_52 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_51 A P_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_53 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_54 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_53 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_55 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_56 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_54 A Q_3 x_1 P_2 hyp_2 (thm_55 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_57 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_56 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_58 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_57 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_59 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_52 A P_2) (thm_58 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda p. (\lambda x. Data.Bool.T p)) ;)

(; dict ;)

def thm_60 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) p_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) p_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_59 A x_1 P_2 hyp_1) (hol.arr A hol.bool) p_1 (p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda p. (\lambda x. Data.Bool.T p)) ;)

(; dict ;)

def thm_61 : A : hol.type -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) :=
  A : hol.type => hol.PROVE_HYP ((p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) (hol.witness (hol.arr A hol.bool))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) (thm_45 A (hol.witness (hol.arr A hol.bool))) (hyp_1 : hol.proof ((p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) (hol.witness (hol.arr A hol.bool))) => thm_60 A (hol.witness (hol.arr A hol.bool)) hyp_1).

(; Theorem: |- (\lambda p. (\lambda x. Data.Bool.T p) (select \lambda p. (\lambda x. Data.Bool.T p))) ;)

(; dict ;)

def thm_62 : A : hol.type -> hol.proof ((p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) (hol.select (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1))) :=
  A : hol.type => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1)) ((p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1) (hol.select (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (x_2 : hol.term (hol.arr A hol.bool) => hol.true) p_1))) (thm_33 A) (thm_61 A).

(; Theorem: |- ((= (Set.fromPredicate (HOLLight.dest_set a))) a) ;)

(; dict ;)

def thm_63 : A : hol.type -> a_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) :=
  A : hol.type => a_1 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq (Set_2Eset A) ((a_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (HOLLight_2Edest__set A a_2)) a_1) ((a_2 : hol.term (Set_2Eset A) => a_2) a_1)) (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) (hol.APP_THM (Set_2Eset A) hol.bool (hol.eq (Set_2Eset A) ((a_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (HOLLight_2Edest__set A a_2)) a_1)) (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) ((a_2 : hol.term (Set_2Eset A) => a_2) a_1) a_1 (hol.APP_THM (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool) (hol.eq (Set_2Eset A)) (hol.eq (Set_2Eset A)) ((a_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (HOLLight_2Edest__set A a_2)) a_1) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) (hol.REFL (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool)) (hol.eq (Set_2Eset A))) (hol.BETA_CONV (Set_2Eset A) (Set_2Eset A) (a_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (HOLLight_2Edest__set A a_2)) a_1)) (hol.BETA_CONV (Set_2Eset A) (Set_2Eset A) (a_2 : hol.term (Set_2Eset A) => a_2) a_1)) (hol.APP_THM (Set_2Eset A) (Set_2Eset A) (a_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (HOLLight_2Edest__set A a_2)) (a_2 : hol.term (Set_2Eset A) => a_2) a_1 a_1 (thm_4 A) (hol.REFL (Set_2Eset A) a_1)).

(; Theorem: |- ((= (\lambda p. (\lambda x. Data.Bool.T p) r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r)) ;)

(; dict ;)

def thm_64 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) r_1) (hol.EQ_MP (hol.eq hol.bool ((r_2 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_2)) r_2) r_1) ((r_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => (x_4 : hol.term (hol.arr A hol.bool) => hol.true) p_3) r_2) r_1)) (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) r_1)) (hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((r_2 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_2)) r_2) r_1)) (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) ((r_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => (x_4 : hol.term (hol.arr A hol.bool) => hol.true) p_3) r_2) r_1) ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) r_1) (hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((r_2 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_2)) r_2) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) thm_26 (hol.BETA_CONV (hol.arr A hol.bool) hol.bool (r_2 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_2)) r_2) r_1)) (hol.BETA_CONV (hol.arr A hol.bool) hol.bool (r_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => (x_4 : hol.term (hol.arr A hol.bool) => hol.true) p_3) r_2) r_1)) (hol.APP_THM (hol.arr A hol.bool) hol.bool (r_2 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_2)) r_2) (r_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => (x_4 : hol.term (hol.arr A hol.bool) => hol.true) p_3) r_2) r_1 r_1 (thm_3 A) (hol.REFL (hol.arr A hol.bool) r_1))).

(; Theorem: |- ((= Set.member) \lambda _9437. \lambda _9438. ((HOLLight.dest_set _9438) _9437)) ;)

(; dict ;)

def thm_65 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) (Set_2Emember A) (__9437_1 : hol.term A => __9438_2 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_2 __9437_1)) :=
  A : hol.type => hol.REFL (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) (Set_2Emember A).

(; Theorem: |- ((= ((= ((Set.member x) p)) ((HOLLight.dest_set p) x))) ((= ((Set.member x) p)) ((HOLLight.dest_set p) x))) ;)

(; dict ;)

def thm_66 : A : hol.type -> p_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2)) (hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2)).

(; Theorem: |- ((= ((= ((Set.member x) p)) ((HOLLight.dest_set p) x))) ((= ((Set.member x) p)) ((HOLLight.dest_set p) x))) ;)

(; dict ;)

def thm_67 : A : hol.type -> p_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2)) (hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2)) (hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2)) (hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2)) (thm_66 A p_1 x_2) (thm_66 A p_1 x_2).

(; Theorem: |- ((= _9437) _9437) ;)

(; dict ;)

def thm_68 : A : hol.type -> __9437_1 : hol.term A -> hol.proof (hol.eq A __9437_1 __9437_1) :=
  A : hol.type => __9437_1 : hol.term A => hol.REFL A __9437_1.

(; Theorem: |- ((= (Set.member _9437)) (\lambda _9437. \lambda _9438. ((HOLLight.dest_set _9438) _9437) _9437)) ;)

(; dict ;)

def thm_69 : A : hol.type -> __9437_1 : hol.term A -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (Set_2Emember A __9437_1) ((__9437_2 : hol.term A => __9438_3 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_3 __9437_2) __9437_1)) :=
  A : hol.type => __9437_1 : hol.term A => hol.APP_THM A (hol.arr (Set_2Eset A) hol.bool) (Set_2Emember A) (__9437_2 : hol.term A => __9438_3 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_3 __9437_2) __9437_1 __9437_1 (thm_65 A) (thm_68 A __9437_1).

(; Theorem: |- ((= (\lambda _9437. \lambda _9438. ((HOLLight.dest_set _9438) _9437) _9437)) \lambda _9438. ((HOLLight.dest_set _9438) _9437)) ;)

(; dict ;)

def thm_70 : A : hol.type -> __9437_1 : hol.term A -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) ((__9437_2 : hol.term A => __9438_3 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_3 __9437_2) __9437_1) (__9438_2 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_2 __9437_1)) :=
  A : hol.type => __9437_1 : hol.term A => hol.BETA_CONV A (hol.arr (Set_2Eset A) hol.bool) (__9437_2 : hol.term A => __9438_3 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_3 __9437_2) __9437_1.

(; Theorem: |- ((= (Set.member _9437)) \lambda _9438. ((HOLLight.dest_set _9438) _9437)) ;)

(; dict ;)

def thm_71 : A : hol.type -> __9437_1 : hol.term A -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (Set_2Emember A __9437_1) (__9438_2 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_2 __9437_1)) :=
  A : hol.type => __9437_1 : hol.term A => hol.TRANS (hol.arr (Set_2Eset A) hol.bool) (Set_2Emember A __9437_1) ((__9437_2 : hol.term A => __9438_3 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_3 __9437_2) __9437_1) (__9438_2 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_2 __9437_1) (thm_69 A __9437_1) (thm_70 A __9437_1).

(; Theorem: |- ((= _9438) _9438) ;)

(; dict ;)

def thm_72 : A : hol.type -> __9438_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9438_1 __9438_1) :=
  A : hol.type => __9438_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9438_1.

(; Theorem: |- ((= ((Set.member _9437) _9438)) (\lambda _9438. ((HOLLight.dest_set _9438) _9437) _9438)) ;)

(; dict ;)

def thm_73 : A : hol.type -> __9438_1 : hol.term (Set_2Eset A) -> __9437_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember A __9437_2 __9438_1) ((__9438_3 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_3 __9437_2) __9438_1)) :=
  A : hol.type => __9438_1 : hol.term (Set_2Eset A) => __9437_2 : hol.term A => hol.APP_THM (Set_2Eset A) hol.bool (Set_2Emember A __9437_2) (__9438_3 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_3 __9437_2) __9438_1 __9438_1 (thm_71 A __9437_2) (thm_72 A __9438_1).

(; Theorem: |- ((= (\lambda _9438. ((HOLLight.dest_set _9438) _9437) _9438)) ((HOLLight.dest_set _9438) _9437)) ;)

(; dict ;)

def thm_74 : A : hol.type -> __9438_1 : hol.term (Set_2Eset A) -> __9437_2 : hol.term A -> hol.proof (hol.eq hol.bool ((__9438_3 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_3 __9437_2) __9438_1) (HOLLight_2Edest__set A __9438_1 __9437_2)) :=
  A : hol.type => __9438_1 : hol.term (Set_2Eset A) => __9437_2 : hol.term A => hol.BETA_CONV (Set_2Eset A) hol.bool (__9438_3 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_3 __9437_2) __9438_1.

(; Theorem: |- ((= ((Set.member _9437) _9438)) ((HOLLight.dest_set _9438) _9437)) ;)

(; dict ;)

def thm_75 : A : hol.type -> __9438_1 : hol.term (Set_2Eset A) -> __9437_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember A __9437_2 __9438_1) (HOLLight_2Edest__set A __9438_1 __9437_2)) :=
  A : hol.type => __9438_1 : hol.term (Set_2Eset A) => __9437_2 : hol.term A => hol.TRANS hol.bool (Set_2Emember A __9437_2 __9438_1) ((__9438_3 : hol.term (Set_2Eset A) => HOLLight_2Edest__set A __9438_3 __9437_2) __9438_1) (HOLLight_2Edest__set A __9438_1 __9437_2) (thm_73 A __9438_1 __9437_2) (thm_74 A __9438_1 __9437_2).

(; Theorem: |- (Data.Bool.! \lambda _9438. ((= ((Set.member _9437) _9438)) ((HOLLight.dest_set _9438) _9437))) ;)

(; dict ;)

def thm_76 : A : hol.type -> __9437_1 : hol.term A -> hol.proof (hol.forall (Set_2Eset A) (__9438_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2Emember A __9437_1 __9438_2) (HOLLight_2Edest__set A __9438_2 __9437_1))) :=
  A : hol.type => __9437_1 : hol.term A => __9438_2 : hol.term (Set_2Eset A) => thm_75 A __9438_2 __9437_1.

(; Theorem: |- (Data.Bool.! \lambda _9437. (Data.Bool.! \lambda _9438. ((= ((Set.member _9437) _9438)) ((HOLLight.dest_set _9438) _9437)))) ;)

(; dict ;)

def thm_77 : A : hol.type -> hol.proof (hol.forall A (__9437_1 : hol.term A => hol.forall (Set_2Eset A) (__9438_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2Emember A __9437_1 __9438_2) (HOLLight_2Edest__set A __9438_2 __9437_1)))) :=
  A : hol.type => __9437_1 : hol.term A => thm_76 A __9437_1.

(; Theorem: |- ((= ((Set.member x) p)) ((HOLLight.dest_set p) x)) ;)

(; dict ;)

def thm_78 : A : hol.type -> p_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => (A : hol.type => __9438_1 : hol.term (Set_2Eset A) => __9437_2 : hol.term A => thm_77 A __9437_2 __9438_1) A p_1 x_2.

(; Theorem: |- ((= ((HOLLight.dest_set p) x)) ((HOLLight.dest_set p) x)) ;)

(; dict ;)

def thm_79 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (HOLLight_2Edest__set A p_2 x_1) (HOLLight_2Edest__set A p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (HOLLight_2Edest__set A p_2 x_1).

(; Theorem: |- ((= ((HOLLight.dest_set p) x)) ((HOLLight.dest_set p) x)) ;)

(; dict ;)

def thm_80 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (HOLLight_2Edest__set A p_2 x_1) (HOLLight_2Edest__set A p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (Set_2Eset A) => hol.SYM hol.bool (HOLLight_2Edest__set A p_2 x_1) (HOLLight_2Edest__set A p_2 x_1) (thm_79 A x_1 p_2).

(; Theorem: |- ((= ((Set.member x) p)) ((HOLLight.dest_set p) x)) ;)

(; dict ;)

def thm_81 : A : hol.type -> p_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => hol.TRANS hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2) (HOLLight_2Edest__set A p_1 x_2) (thm_78 A p_1 x_2) (thm_80 A x_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((Set.member x) p)) ((HOLLight.dest_set p) x))) ;)

(; dict ;)

def thm_82 : A : hol.type -> p_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => thm_81 A p_1 x_2.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((= ((Set.member x) p)) ((HOLLight.dest_set p) x)))) ;)

(; dict ;)

def thm_83 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (p_1 : hol.term (Set_2Eset A) => hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (Set_2Eset A) => thm_82 A p_1.

(; Theorem: |- ((= ((Set.member x) (Set.fromPredicate p))) ((HOLLight.dest_set (Set.fromPredicate p)) x)) ;)

(; dict ;)

def thm_84 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (HOLLight_2Edest__set A (Set_2EfromPredicate A p_1) x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => (A : hol.type => p_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => (A : hol.type => p_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2)) (hol.eq hol.bool (Set_2Emember A x_2 p_1) (HOLLight_2Edest__set A p_1 x_2)) (thm_67 A p_1 x_2) (thm_83 A p_1 x_2)) A p_1 x_2) A (Set_2EfromPredicate A p_1) x_2.

(; Theorem: |- ((= ((= (HOLLight.dest_set (Set.fromPredicate r))) r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r)) ;)

(; dict ;)

def thm_85 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1).

(; Theorem: |- ((= ((= (HOLLight.dest_set (Set.fromPredicate r))) r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r)) ;)

(; dict ;)

def thm_86 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (thm_85 A r_1) (thm_85 A r_1).

(; Theorem: |- ((= (Data.Bool./\ (Data.Bool.! \lambda a. ((= (Set.fromPredicate (HOLLight.dest_set a))) a)))) (Data.Bool./\ (Data.Bool.! \lambda a. ((= (Set.fromPredicate (HOLLight.dest_set a))) a)))) ;)

(; dict ;)

def thm_87 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1))) (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)))) :=
  A : hol.type => hol.REFL (hol.arr hol.bool hol.bool) (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1))).

(; Theorem: |- ((= r) r) ;)

(; dict ;)

def thm_88 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) r_1 r_1) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) r_1.

(; Theorem: |- ((= (\lambda x. (\lambda x. Data.Bool.T x) r)) (\lambda x. Data.Bool.T r)) ;)

(; dict ;)

def thm_89 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) r_1) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1)) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) (x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1 r_1 (thm_37 A) (thm_88 A r_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. Data.Bool.T x) r))) (= (\lambda x. Data.Bool.T r))) ;)

(; dict ;)

def thm_90 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) r_1)) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1))) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) r_1) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) thm_26 (thm_89 A r_1).

(; Theorem: |- ((= (\lambda x. Data.Bool.T r)) Data.Bool.T) ;)

(; dict ;)

def thm_91 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) hol.true) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1.

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. Data.Bool.T x) r)) (\lambda x. Data.Bool.T r))) ((= (\lambda x. Data.Bool.T r)) Data.Bool.T)) ;)

(; dict ;)

def thm_92 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) r_1) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1)) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) hol.true)) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) r_1)) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1)) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) hol.true (thm_90 A r_1) (thm_91 A r_1).

(; Theorem: |- ((= (= (\lambda x. Data.Bool.T r))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_93 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1)) (hol.eq hol.bool hol.true)) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) hol.true thm_26 (hol.EQ_MP (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) x_2) r_1) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1)) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) hol.true) (thm_92 A r_1) (thm_89 A r_1)).

(; Theorem: |- ((= ((= (\lambda x. Data.Bool.T r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r))) ((= Data.Bool.T) ((= (HOLLight.dest_set (Set.fromPredicate r))) r))) ;)

(; dict ;)

def thm_94 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) (hol.eq hol.bool hol.true (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1)) (hol.eq hol.bool hol.true) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (thm_93 A r_1) (thm_85 A r_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_95 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_96 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_95 t_1) (thm_95 t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_97 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_98 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_99 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_98 thm_98.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_100 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_97 thm_99.

(; Theorem: |- ((= ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_101 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_5 t_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_102 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_103 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_104 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_102 q_1 p_2) (thm_103 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_105 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_106 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_107 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_105 p_1) (thm_106 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_108 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_109 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_6 (thm_108 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_110 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_107 p_1) (thm_109 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_111 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_112 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_110 p_2) (thm_111 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_113 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_104 q_1 p_2) (thm_112 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_114 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_115 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_113 q_1 p_2) (thm_114 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_116 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_115 q_1 p_2 hyp_1 q_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_117 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_118 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_119 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_117 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_118 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_120 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_119 q_2 p_1 hyp_1 hyp_2) (thm_117 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_121 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_120 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_122 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_121 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_123 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_116 q_2 p_1 hyp_1 (thm_122 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_124 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_113 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_125 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_126 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_125 x_2 q_3 p_1 hyp_2 (thm_117 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_127 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_126 p_2 x_3 q_1 hyp_1 hyp_3 (thm_118 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_128 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_127 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_129 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_128 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_130 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_124 q_1 p_2) (thm_129 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_131 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_123 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_130 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_132 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_131 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_133 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_95 t_1) (thm_101 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => thm_132 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_134 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_135 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_134 t_1) (thm_134 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_136 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_7 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_137 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_131 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_138 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_135 t_1) (thm_136 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => thm_137 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_139 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_140 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_139 t_1) (thm_139 t_1).

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_141 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_8 t_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_142 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_131 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_143 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_140 t_1) (thm_141 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => thm_142 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_144 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_145 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_144 t_1) (thm_144 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_146 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_9 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_147 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_143 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_145 t_1) (thm_146 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_148 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (thm_138 t_1) (thm_147 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_149 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (thm_133 t_1) (thm_148 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_150 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => thm_149 t_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_151 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_115 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_152 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_119 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_153 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_152 p_2 q_1 hyp_1 hyp_2) (thm_118 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_154 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_153 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_155 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_154 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_156 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_151 q_1 p_2 hyp_1 (thm_155 q_1 p_2).

(; Theorem: |- ((= ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_157 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_156 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_158 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) thm_100 thm_150 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => thm_157 t_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.T) ((= (HOLLight.dest_set (Set.fromPredicate r))) r))) ((= (HOLLight.dest_set (Set.fromPredicate r))) r)) ;)

(; dict ;)

def thm_159 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_96 t_1) (thm_158 t_1)) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1).

(; Theorem: |- ((= ((= (\lambda x. Data.Bool.T r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r))) ((= (HOLLight.dest_set (Set.fromPredicate r))) r)) ;)

(; dict ;)

def thm_160 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) (hol.eq hol.bool hol.true (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (thm_94 A r_1) (thm_159 A r_1).

(; Theorem: |- ((= \lambda r. ((= (\lambda x. Data.Bool.T r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r))) \lambda r. ((= (HOLLight.dest_set (Set.fromPredicate r))) r)) ;)

(; dict ;)

def thm_161 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (r_1 : hol.term (hol.arr A hol.bool) => thm_160 A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= (\lambda x. Data.Bool.T r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r)))) (Data.Bool.! \lambda r. ((= (HOLLight.dest_set (Set.fromPredicate r))) r))) ;)

(; dict ;)

def thm_162 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (thm_24 A) (thm_161 A).

(; Theorem: |- ((= ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (Set.fromPredicate (HOLLight.dest_set a))) a))) (Data.Bool.! \lambda r. ((= (\lambda x. Data.Bool.T r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r))))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (Set.fromPredicate (HOLLight.dest_set a))) a))) (Data.Bool.! \lambda r. ((= (HOLLight.dest_set (Set.fromPredicate r))) r)))) ;)

(; dict ;)

def thm_163 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)))) (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)))) :=
  A : hol.type => hol.APP_THM hol.bool hol.bool (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1))) (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1))) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) (thm_87 A) (thm_162 A).

(; Theorem: |- (Data.Bool.! \lambda a. ((= (Set.fromPredicate (HOLLight.dest_set a))) a)) ;)

(; dict ;)

def thm_164 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) :=
  A : hol.type => a_1 : hol.term (Set_2Eset A) => thm_63 A a_1.

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= (\lambda x. Data.Bool.T r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r)))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (Set.fromPredicate (HOLLight.dest_set a))) a))) (Data.Bool.! \lambda r. ((= (\lambda x. Data.Bool.T r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r))))) ;)

(; dict ;)

def thm_165 : A : hol.type -> hyp_1 : hol.proof (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))))) :=
  A : hol.type => hyp_1 : hol.proof (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_131 p_1 q_2 hyp_1) (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= (\lambda x. Data.Bool.T r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r)))) ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (Set.fromPredicate (HOLLight.dest_set a))) a))) (Data.Bool.! \lambda r. ((= (\lambda x. Data.Bool.T r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r))))) ;)

(; dict ;)

def thm_166 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))))) :=
  A : hol.type => hol.PROVE_HYP (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))))) (thm_164 A) (hyp_1 : hol.proof (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) => thm_165 A hyp_1).

(; Theorem: |- ((= (\lambda p. (\lambda x. Data.Bool.T p) r)) (\lambda x. Data.Bool.T r)) ;)

(; dict ;)

def thm_167 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) r_1) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1)) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) r_1.

(; Theorem: |- ((= (= (\lambda p. (\lambda x. Data.Bool.T p) r))) (= (\lambda x. Data.Bool.T r))) ;)

(; dict ;)

def thm_168 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) r_1)) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1))) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) r_1) ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) thm_26 (thm_167 A r_1).

(; Theorem: |- ((= ((= (\lambda p. (\lambda x. Data.Bool.T p) r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r))) ((= (\lambda x. Data.Bool.T r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r))) ;)

(; dict ;)

def thm_169 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) r_1)) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1)) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (thm_168 A r_1) (thm_85 A r_1).

(; Theorem: |- ((= (\lambda x. Data.Bool.T r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r)) ;)

(; dict ;)

def thm_170 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (x_3 : hol.term (hol.arr A hol.bool) => hol.true) p_2) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) (hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) (thm_169 A r_1) (thm_64 A r_1).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (\lambda x. Data.Bool.T r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r))) ;)

(; dict ;)

def thm_171 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => thm_170 A r_1.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (Set.fromPredicate (HOLLight.dest_set a))) a))) (Data.Bool.! \lambda r. ((= (\lambda x. Data.Bool.T r)) ((= (HOLLight.dest_set (Set.fromPredicate r))) r)))) ;)

(; dict ;)

def thm_172 : A : hol.type -> hol.proof (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)))) (thm_166 A) (thm_171 A).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda a. ((= (Set.fromPredicate (HOLLight.dest_set a))) a))) (Data.Bool.! \lambda r. ((= (HOLLight.dest_set (Set.fromPredicate r))) r))) ;)

(; dict ;)

def thm_173 : A : hol.type -> hol.proof (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) :=
  A : hol.type => hol.EQ_MP (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool ((x_2 : hol.term (hol.arr A hol.bool) => hol.true) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)))) (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) (thm_163 A) (thm_172 A).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (HOLLight.dest_set (Set.fromPredicate r))) r)) ;)

(; dict ;)

def thm_174 : A : hol.type -> hyp_1 : hol.proof (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) -> hol.proof (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) :=
  A : hol.type => hyp_1 : hol.proof (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_123 p_1 q_2 hyp_1) (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((= (HOLLight.dest_set (Set.fromPredicate r))) r)) ;)

(; dict ;)

def thm_175 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) :=
  A : hol.type => hol.PROVE_HYP (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1)) (thm_173 A) (hyp_1 : hol.proof (hol.and (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (hol.arr A hol.bool) (r_1 : hol.term (hol.arr A hol.bool) => hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1))) => thm_174 A hyp_1).

(; Theorem: |- ((= (HOLLight.dest_set (Set.fromPredicate r))) r) ;)

(; dict ;)

def thm_176 : A : hol.type -> r_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) :=
  A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => thm_175 A r_1.

(; Theorem: |- ((= (HOLLight.dest_set (Set.fromPredicate p))) p) ;)

(; dict ;)

def thm_177 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A p_1)) p_1) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => r_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A (Set_2EfromPredicate A r_1)) r_1) (thm_86 A r_1) (thm_176 A r_1)) A r_1) A p_1.

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_178 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => hol.REFL A x_1.

(; Theorem: |- ((= ((HOLLight.dest_set (Set.fromPredicate p)) x)) (p x)) ;)

(; dict ;)

def thm_179 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (HOLLight_2Edest__set A (Set_2EfromPredicate A p_2) x_1) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM A hol.bool (HOLLight_2Edest__set A (Set_2EfromPredicate A p_2)) p_2 x_1 x_1 (thm_177 A p_2) (thm_178 A x_1).

(; Theorem: |- ((= ((Set.member x) (Set.fromPredicate p))) (p x)) ;)

(; dict ;)

def thm_180 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.TRANS hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (HOLLight_2Edest__set A (Set_2EfromPredicate A p_1) x_2) (p_1 x_2) (thm_84 A p_1 x_2) (thm_179 A x_2 p_1).

(; Theorem: |- ((= (= ((Set.member x) (Set.fromPredicate p)))) (= (p x))) ;)

(; dict ;)

def thm_181 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1))) (hol.eq hol.bool (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2) thm_26 (thm_180 A p_1 x_2).

(; Theorem: |- ((= (p x)) (p x)) ;)

(; dict ;)

def thm_182 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 x_1) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (p_2 x_1).

(; Theorem: |- ((= ((= ((Set.member x) (Set.fromPredicate p))) (p x))) ((= (p x)) (p x))) ;)

(; dict ;)

def thm_183 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2)) (hol.eq hol.bool (p_1 x_2) (p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1))) (hol.eq hol.bool (p_1 x_2)) (p_1 x_2) (p_1 x_2) (thm_181 A p_1 x_2) (thm_182 A x_2 p_1).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_184 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_185 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_184 A x_1) (thm_184 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_186 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_187 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_186 A) (thm_186 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_188 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_25 A) (thm_187 A).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_189 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_190 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_189 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_191 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_190 t_1 hyp_1) thm_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_192 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_193 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_192 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_1).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_194 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_191 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_193 t_1 hyp_1).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_195 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_194 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_196 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_195 A x_1) (thm_178 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_197 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_184 A x_1) (thm_196 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_198 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 x_1) hol.true) :=
  x_1 : hol.term hol.bool => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_185 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_188 A) (thm_197 A) x_1)) hol.bool x_1.

(; Theorem: |- ((= ((= (p x)) (p x))) Data.Bool.T) ;)

(; dict ;)

def thm_199 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 x_1) (p_2 x_1)) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_198 x_1) (p_2 x_1).

(; Theorem: |- ((= ((= ((Set.member x) (Set.fromPredicate p))) (p x))) Data.Bool.T) ;)

(; dict ;)

def thm_200 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2)) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2)) (hol.eq hol.bool (p_1 x_2) (p_1 x_2)) hol.true (thm_183 A p_1 x_2) (thm_199 A x_2 p_1).

(; Theorem: |- ((= \lambda x. ((= ((Set.member x) (Set.fromPredicate p))) (p x))) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_201 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2)) (x_2 : hol.term A => hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2)) (x_2 : hol.term A => hol.true) (x_2 : hol.term A => thm_200 A p_1 x_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Set.member x) (Set.fromPredicate p))) (p x)))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_202 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.true))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2)) (x_2 : hol.term A => hol.true) (thm_25 A) (thm_201 A p_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_203 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_204 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (thm_203 A t_1) (thm_203 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_205 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_10 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_206 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (thm_204 A t_1) (thm_205 A t_1)) A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Set.member x) (Set.fromPredicate p))) (p x)))) Data.Bool.T) ;)

(; dict ;)

def thm_207 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.true)) hol.true (thm_202 A p_1) (thm_206 A).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda x. ((= ((Set.member x) (Set.fromPredicate p))) (p x)))) \lambda p. Data.Bool.T) ;)

(; dict ;)

def thm_208 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.true)) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.true) (p_1 : hol.term (hol.arr A hol.bool) => thm_207 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((= ((Set.member x) (Set.fromPredicate p))) (p x))))) (Data.Bool.! \lambda p. Data.Bool.T)) ;)

(; dict ;)

def thm_209 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.true) (thm_24 A) (thm_208 A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda p. t)) t)) ((= (Data.Bool.! \lambda p. t)) t)) ;)

(; dict ;)

def thm_210 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda p. t)) t)) ;)

(; dict ;)

def thm_211 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (thm_203 A t_1) (thm_210 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. t)) t) ;)

(; dict ;)

def thm_212 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (thm_211 A t_1) (thm_205 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. t)) t) ;)

(; dict ;)

def thm_213 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_212 A t_1) (hol.arr A hol.bool) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda p. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_214 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => thm_213 A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((= ((Set.member x) (Set.fromPredicate p))) (p x))))) Data.Bool.T) ;)

(; dict ;)

def thm_215 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2)))) hol.true) :=
  A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.true)) hol.true (thm_209 A) (thm_214 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((= ((Set.member x) (Set.fromPredicate p))) (p x))))) ;)

(; dict ;)

def thm_216 : A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2))))) :=
  A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2)))) hol.true (thm_215 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((= ((Set.member x) (Set.fromPredicate p))) (p x)))) ;)

(; dict ;)

def thm_217 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2)))) :=
  A : hol.type => hol.EQ_MP hol.true (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 (Set_2EfromPredicate A p_1)) (p_1 x_2)))) (thm_216 A) thm_1.

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_218 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (hol.forall (Set_2Eset A)).

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_219 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= (\lambda x. ((Set.member x) s) x)) ((Set.member x) s)) ;)

(; dict ;)

def thm_220 : A : hol.type -> x_1 : hol.term A -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => Set_2Emember A x_3 s_2) x_1) (Set_2Emember A x_1 s_2)) :=
  A : hol.type => x_1 : hol.term A => s_2 : hol.term (Set_2Eset A) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => Set_2Emember A x_3 s_2) x_1.

(; Theorem: |- ((= (= (\lambda x. ((Set.member x) s) x))) (= ((Set.member x) s))) ;)

(; dict ;)

def thm_221 : A : hol.type -> x_1 : hol.term A -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((x_3 : hol.term A => Set_2Emember A x_3 s_2) x_1)) (hol.eq hol.bool (Set_2Emember A x_1 s_2))) :=
  A : hol.type => x_1 : hol.term A => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((x_3 : hol.term A => Set_2Emember A x_3 s_2) x_1) (Set_2Emember A x_1 s_2) thm_26 (thm_220 A x_1 s_2).

(; Theorem: |- ((= (\lambda x. ((Set.member x) t) x)) ((Set.member x) t)) ;)

(; dict ;)

def thm_222 : A : hol.type -> x_1 : hol.term A -> t_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => Set_2Emember A x_3 t_2) x_1) (Set_2Emember A x_1 t_2)) :=
  A : hol.type => x_1 : hol.term A => t_2 : hol.term (Set_2Eset A) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => Set_2Emember A x_3 t_2) x_1.

(; Theorem: |- ((= ((= (\lambda x. ((Set.member x) s) x)) (\lambda x. ((Set.member x) t) x))) ((= ((Set.member x) s)) ((Set.member x) t))) ;)

(; dict ;)

def thm_223 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> s_3 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((x_4 : hol.term A => Set_2Emember A x_4 s_3) x_2) ((x_4 : hol.term A => Set_2Emember A x_4 t_1) x_2)) (hol.eq hol.bool (Set_2Emember A x_2 s_3) (Set_2Emember A x_2 t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => s_3 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((x_4 : hol.term A => Set_2Emember A x_4 s_3) x_2)) (hol.eq hol.bool (Set_2Emember A x_2 s_3)) ((x_4 : hol.term A => Set_2Emember A x_4 t_1) x_2) (Set_2Emember A x_2 t_1) (thm_221 A x_2 s_3) (thm_222 A x_2 t_1).

(; Theorem: |- ((= \lambda x. ((= (\lambda x. ((Set.member x) s) x)) (\lambda x. ((Set.member x) t) x))) \lambda x. ((= ((Set.member x) s)) ((Set.member x) t))) ;)

(; dict ;)

def thm_224 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq hol.bool ((x_4 : hol.term A => Set_2Emember A x_4 s_2) x_3) ((x_4 : hol.term A => Set_2Emember A x_4 t_1) x_3)) (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.eq hol.bool ((x_4 : hol.term A => Set_2Emember A x_4 s_2) x_3) ((x_4 : hol.term A => Set_2Emember A x_4 t_1) x_3)) (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1)) (x_3 : hol.term A => thm_223 A t_1 x_3 s_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (\lambda x. ((Set.member x) s) x)) (\lambda x. ((Set.member x) t) x)))) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ;)

(; dict ;)

def thm_225 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool ((x_4 : hol.term A => Set_2Emember A x_4 s_2) x_3) ((x_4 : hol.term A => Set_2Emember A x_4 t_1) x_3))) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.eq hol.bool ((x_4 : hol.term A => Set_2Emember A x_4 s_2) x_3) ((x_4 : hol.term A => Set_2Emember A x_4 t_1) x_3)) (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1)) (thm_25 A) (thm_224 A t_1 s_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. ((= (\lambda x. ((Set.member x) s) x)) (\lambda x. ((Set.member x) t) x))))) (= (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t))))) ;)

(; dict ;)

def thm_226 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool ((x_4 : hol.term A => Set_2Emember A x_4 s_2) x_3) ((x_4 : hol.term A => Set_2Emember A x_4 t_1) x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool ((x_4 : hol.term A => Set_2Emember A x_4 s_2) x_3) ((x_4 : hol.term A => Set_2Emember A x_4 t_1) x_3))) (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) thm_26 (thm_225 A t_1 s_2).

(; Theorem: |- ((= ((= \lambda x. ((Set.member x) s)) \lambda x. ((Set.member x) t))) ((= \lambda x. ((Set.member x) s)) \lambda x. ((Set.member x) t))) ;)

(; dict ;)

def thm_227 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2) (x_3 : hol.term A => Set_2Emember A x_3 t_1)) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2) (x_3 : hol.term A => Set_2Emember A x_3 t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2) (x_3 : hol.term A => Set_2Emember A x_3 t_1)).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((= (\lambda x. ((Set.member x) s) x)) (\lambda x. ((Set.member x) t) x)))) ((= \lambda x. ((Set.member x) s)) \lambda x. ((Set.member x) t)))) ((= (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= \lambda x. ((Set.member x) s)) \lambda x. ((Set.member x) t)))) ;)

(; dict ;)

def thm_228 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool ((x_4 : hol.term A => Set_2Emember A x_4 s_2) x_3) ((x_4 : hol.term A => Set_2Emember A x_4 t_1) x_3))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2) (x_3 : hol.term A => Set_2Emember A x_3 t_1))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2) (x_3 : hol.term A => Set_2Emember A x_3 t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool ((x_4 : hol.term A => Set_2Emember A x_4 s_2) x_3) ((x_4 : hol.term A => Set_2Emember A x_4 t_1) x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1)))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2) (x_3 : hol.term A => Set_2Emember A x_3 t_1)) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2) (x_3 : hol.term A => Set_2Emember A x_3 t_1)) (thm_226 A t_1 s_2) (thm_227 A t_1 s_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_229 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_230 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (thm_229 B A g_1 f_2) (thm_229 B A g_1 f_2).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_231 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)) ;)

(; dict ;)

def thm_232 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) => hyp_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_233 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) => hol.SYM hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1) (thm_232 B A g_1 f_2 hyp_1).

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_234 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)) ;)

(; dict ;)

def thm_235 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) => hol.SYM hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (thm_234 B A g_1 f_2 hyp_1).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_236 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.PROP_EXT (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) => thm_233 B A g_1 f_2 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) => thm_235 B A g_1 f_2 hyp_1).

(; Theorem: |- ((= \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_237 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (g_2 : hol.term (hol.arr A B) => thm_236 B A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_238 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (thm_231 B A) (thm_237 B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_239 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) hol.bool (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (f_1 : hol.term (hol.arr A B) => thm_238 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) ;)

(; dict ;)

def thm_240 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (thm_231 B A) (thm_239 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) ;)

(; dict ;)

def thm_241 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (thm_240 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) ;)

(; dict ;)

def thm_242 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (thm_241 B A) (thm_11 B A).

(; Theorem: |- (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_243 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.EQ_MP (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_3) (hol.forall A (x_4 : hol.term A => hol.eq B (f_2 x_4) (g_3 x_4)))))) (hol.forall (hol.arr A B) (f_2 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.eq B (f_2 x_4) (g_3 x_4))) (hol.eq (hol.arr A B) f_2 g_3)))) (thm_240 B A) (thm_242 B A) f_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)) ;)

(; dict ;)

def thm_244 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_243 B A f_2 g_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)) ;)

(; dict ;)

def thm_245 : A : hol.type -> g_1 : hol.term (hol.arr A hol.bool) -> f_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A hol.bool) f_2 g_1)) :=
  A : hol.type => g_1 : hol.term (hol.arr A hol.bool) => f_2 : hol.term (hol.arr A hol.bool) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1)) (thm_230 B A g_1 f_2) (thm_244 B A g_1 f_2)) hol.bool A g_1 f_2.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (\lambda x. ((Set.member x) s) x)) (\lambda x. ((Set.member x) t) x)))) ((= \lambda x. ((Set.member x) s)) \lambda x. ((Set.member x) t))) ;)

(; dict ;)

def thm_246 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool ((x_4 : hol.term A => Set_2Emember A x_4 s_2) x_3) ((x_4 : hol.term A => Set_2Emember A x_4 t_1) x_3))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2) (x_3 : hol.term A => Set_2Emember A x_3 t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => (A : hol.type => g_1 : hol.term (hol.arr A hol.bool) => f_2 : hol.term (hol.arr A hol.bool) => thm_245 A g_1 f_2) A (x_3 : hol.term A => Set_2Emember A x_3 t_1) (x_3 : hol.term A => Set_2Emember A x_3 s_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= \lambda x. ((Set.member x) s)) \lambda x. ((Set.member x) t))) ;)

(; dict ;)

def thm_247 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2) (x_3 : hol.term A => Set_2Emember A x_3 t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool ((x_4 : hol.term A => Set_2Emember A x_4 s_2) x_3) ((x_4 : hol.term A => Set_2Emember A x_4 t_1) x_3))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2) (x_3 : hol.term A => Set_2Emember A x_3 t_1))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2) (x_3 : hol.term A => Set_2Emember A x_3 t_1))) (thm_228 A t_1 s_2) (thm_246 A t_1 s_2).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_248 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) (hol.arr (hol.arr A hol.bool) hol.bool)) (hol.eq (hol.arr A hol.bool)) (hol.eq (hol.arr A hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) (hol.arr (hol.arr A hol.bool) hol.bool)) (hol.eq (hol.arr A hol.bool)).

(; Theorem: |- ((= ((Set.member x) s)) ((HOLLight.dest_set s) x)) ;)

(; dict ;)

def thm_249 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember A x_2 s_1) (HOLLight_2Edest__set A s_1 x_2)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => (A : hol.type => p_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => thm_78 A p_1 x_2) A s_1 x_2.

(; Theorem: |- ((= \lambda x. ((Set.member x) s)) \lambda x. ((HOLLight.dest_set s) x)) ;)

(; dict ;)

def thm_250 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1) (x_2 : hol.term A => HOLLight_2Edest__set A s_1 x_2)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.ABS_THM A hol.bool (x_2 : hol.term A => Set_2Emember A x_2 s_1) (x_2 : hol.term A => HOLLight_2Edest__set A s_1 x_2) (x_2 : hol.term A => thm_249 A s_1 x_2).

(; Theorem: |- ((= (= \lambda x. ((Set.member x) s))) (= \lambda x. ((HOLLight.dest_set s) x))) ;)

(; dict ;)

def thm_251 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => HOLLight_2Edest__set A s_1 x_2))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) (hol.arr (hol.arr A hol.bool) hol.bool) (hol.eq (hol.arr A hol.bool)) (hol.eq (hol.arr A hol.bool)) (x_2 : hol.term A => Set_2Emember A x_2 s_1) (x_2 : hol.term A => HOLLight_2Edest__set A s_1 x_2) (thm_248 A) (thm_250 A s_1).

(; Theorem: |- ((= ((Set.member x) t)) ((HOLLight.dest_set t) x)) ;)

(; dict ;)

def thm_252 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember A x_2 t_1) (HOLLight_2Edest__set A t_1 x_2)) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => (A : hol.type => p_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => thm_78 A p_1 x_2) A t_1 x_2.

(; Theorem: |- ((= \lambda x. ((Set.member x) t)) \lambda x. ((HOLLight.dest_set t) x)) ;)

(; dict ;)

def thm_253 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 t_1) (x_2 : hol.term A => HOLLight_2Edest__set A t_1 x_2)) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => hol.ABS_THM A hol.bool (x_2 : hol.term A => Set_2Emember A x_2 t_1) (x_2 : hol.term A => HOLLight_2Edest__set A t_1 x_2) (x_2 : hol.term A => thm_252 A t_1 x_2).

(; Theorem: |- ((= ((= \lambda x. ((Set.member x) s)) \lambda x. ((Set.member x) t))) ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ;)

(; dict ;)

def thm_254 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2) (x_3 : hol.term A => Set_2Emember A x_3 t_1)) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2)) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3)) (x_3 : hol.term A => Set_2Emember A x_3 t_1) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3) (thm_251 A s_2) (thm_253 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ;)

(; dict ;)

def thm_255 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => Set_2Emember A x_3 s_2) (x_3 : hol.term A => Set_2Emember A x_3 t_1)) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3)) (thm_247 A t_1 s_2) (thm_254 A t_1 s_2).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t))))) (Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x)))) ;)

(; dict ;)

def thm_256 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1)))) (hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3)) thm_219 (thm_255 A t_1 s_2).

(; Theorem: |- ((= ((= s) t)) ((= s) t)) ;)

(; dict ;)

def thm_257 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.eq (Set_2Eset A) s_2 t_1)) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.eq (Set_2Eset A) s_2 t_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t))) ((Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= s) t))) ;)

(; dict ;)

def thm_258 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1)) (hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3)) (hol.eq (Set_2Eset A) s_2 t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1)))) (hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3))) (hol.eq (Set_2Eset A) s_2 t_1) (hol.eq (Set_2Eset A) s_2 t_1) (thm_256 A t_1 s_2) (thm_257 A t_1 s_2).

(; Theorem: |- ((= \lambda t. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t))) \lambda t. ((Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= s) t))) ;)

(; dict ;)

def thm_259 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.ABS_THM (Set_2Eset A) hol.bool (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => thm_258 A t_2 s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t)))) (Data.Bool.! \lambda t. ((Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= s) t)))) ;)

(; dict ;)

def thm_260 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2))) (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)) (thm_218 A) (thm_259 A s_1).

(; Theorem: |- ((= \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t)))) \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= s) t)))) ;)

(; dict ;)

def thm_261 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)))) :=
  A : hol.type => hol.ABS_THM (Set_2Eset A) hol.bool (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => thm_260 A s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t))))) (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= s) t))))) ;)

(; dict ;)

def thm_262 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2))) (thm_218 A) (thm_261 A).

(; Theorem: |- ((= (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= s) t))))) (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t))))) ;)

(; dict ;)

def thm_263 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2))))) :=
  A : hol.type => hol.SYM hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)))) (thm_262 A).

(; Theorem: |- ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set s) x)) ;)

(; dict ;)

def thm_264 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => HOLLight_2Edest__set A s_1 x_2) (x_2 : hol.term A => HOLLight_2Edest__set A s_1 x_2)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => HOLLight_2Edest__set A s_1 x_2).

(; Theorem: |- ((= ((= \lambda x. (t x)) t)) ((= \lambda x. (t x)) t)) ;)

(; dict ;)

def thm_265 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1).

(; Theorem: |- ((= ((= \lambda x. (t x)) t)) ((= \lambda x. (t x)) t)) ;)

(; dict ;)

def thm_266 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (thm_265 B A t_1) (thm_265 B A t_1).

(; Theorem: |- ((= \lambda x. (t x)) t) ;)

(; dict ;)

def thm_267 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => thm_12 B A t_1.

(; Theorem: |- ((= \lambda x. ((HOLLight.dest_set s) x)) (HOLLight.dest_set s)) ;)

(; dict ;)

def thm_268 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => HOLLight_2Edest__set A s_1 x_2) (HOLLight_2Edest__set A s_1)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => (B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (thm_266 B A t_1) (thm_267 B A t_1)) B A t_1) hol.bool A (HOLLight_2Edest__set A s_1).

(; Theorem: |- ((= \lambda x. ((HOLLight.dest_set s) x)) (HOLLight.dest_set s)) ;)

(; dict ;)

def thm_269 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => HOLLight_2Edest__set A s_1 x_2) (HOLLight_2Edest__set A s_1)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => HOLLight_2Edest__set A s_1 x_2) (x_2 : hol.term A => HOLLight_2Edest__set A s_1 x_2) (HOLLight_2Edest__set A s_1) (thm_264 A s_1) (thm_268 A s_1).

(; Theorem: |- ((= (= \lambda x. ((HOLLight.dest_set s) x))) (= (HOLLight.dest_set s))) ;)

(; dict ;)

def thm_270 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => HOLLight_2Edest__set A s_1 x_2)) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) (hol.arr (hol.arr A hol.bool) hol.bool) (hol.eq (hol.arr A hol.bool)) (hol.eq (hol.arr A hol.bool)) (x_2 : hol.term A => HOLLight_2Edest__set A s_1 x_2) (HOLLight_2Edest__set A s_1) (thm_248 A) (thm_269 A s_1).

(; Theorem: |- ((= \lambda x. ((HOLLight.dest_set t) x)) \lambda x. ((HOLLight.dest_set t) x)) ;)

(; dict ;)

def thm_271 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => HOLLight_2Edest__set A t_1 x_2) (x_2 : hol.term A => HOLLight_2Edest__set A t_1 x_2)) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => HOLLight_2Edest__set A t_1 x_2).

(; Theorem: |- ((= \lambda x. ((HOLLight.dest_set t) x)) (HOLLight.dest_set t)) ;)

(; dict ;)

def thm_272 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => HOLLight_2Edest__set A t_1 x_2) (HOLLight_2Edest__set A t_1)) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => (B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => thm_267 B A t_1) hol.bool A (HOLLight_2Edest__set A t_1).

(; Theorem: |- ((= \lambda x. ((HOLLight.dest_set t) x)) (HOLLight.dest_set t)) ;)

(; dict ;)

def thm_273 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => HOLLight_2Edest__set A t_1 x_2) (HOLLight_2Edest__set A t_1)) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => HOLLight_2Edest__set A t_1 x_2) (x_2 : hol.term A => HOLLight_2Edest__set A t_1 x_2) (HOLLight_2Edest__set A t_1) (thm_271 A t_1) (thm_272 A t_1).

(; Theorem: |- ((= ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ;)

(; dict ;)

def thm_274 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3)) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3)) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2)) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3) (HOLLight_2Edest__set A t_1) (thm_270 A s_2) (thm_273 A t_1).

(; Theorem: |- ((= (Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x)))) (Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t)))) ;)

(; dict ;)

def thm_275 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3))) (hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3)) (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) thm_219 (thm_274 A t_1 s_2).

(; Theorem: |- ((= ((Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= s) t))) ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t))) ;)

(; dict ;)

def thm_276 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3)) (hol.eq (Set_2Eset A) s_2 t_1)) (hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) (hol.eq (Set_2Eset A) s_2 t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_2 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_1 x_3))) (hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1))) (hol.eq (Set_2Eset A) s_2 t_1) (hol.eq (Set_2Eset A) s_2 t_1) (thm_275 A t_1 s_2) (thm_257 A t_1 s_2).

(; Theorem: |- ((= \lambda t. ((Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= s) t))) \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t))) ;)

(; dict ;)

def thm_277 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.ABS_THM (Set_2Eset A) hol.bool (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => thm_276 A t_2 s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= s) t)))) (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t)))) ;)

(; dict ;)

def thm_278 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2))) (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)) (thm_218 A) (thm_277 A s_1).

(; Theorem: |- ((= \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= s) t)))) \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t)))) ;)

(; dict ;)

def thm_279 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)))) :=
  A : hol.type => hol.ABS_THM (Set_2Eset A) hol.bool (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => thm_278 A s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= s) t))))) (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t))))) ;)

(; dict ;)

def thm_280 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) (thm_218 A) (thm_279 A).

(; Theorem: |- ((= (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t))))) (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= s) t))))) ;)

(; dict ;)

def thm_281 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2))))) :=
  A : hol.type => hol.SYM hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)))) (thm_280 A).

(; Theorem: |- ((= \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t)))) \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t)))) ;)

(; dict ;)

def thm_282 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))).

(; Theorem: |- ((= \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t)))) \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t)))) ;)

(; dict ;)

def thm_283 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)))) :=
  A : hol.type => hol.TRANS (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) (thm_282 A) (thm_282 A).

(; Theorem: |- ((= (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t))))) (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t))))) ;)

(; dict ;)

def thm_284 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) (thm_218 A) (thm_283 A).

(; Theorem: |- ((= \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t))) \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t))) ;)

(; dict ;)

def thm_285 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.REFL (hol.arr (Set_2Eset A) hol.bool) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)).

(; Theorem: |- ((= \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t))) \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t))) ;)

(; dict ;)

def thm_286 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS (hol.arr (Set_2Eset A) hol.bool) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)) (thm_285 A s_1) (thm_285 A s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t)))) (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t)))) ;)

(; dict ;)

def thm_287 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)) (thm_218 A) (thm_286 A s_1).

(; Theorem: |- ((= (HOLLight.dest_set s)) (HOLLight.dest_set t)) ;)

(; dict ;)

def thm_288 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) -> hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) => hyp_1.

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_289 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool)) (hol.eq (Set_2Eset A)) (hol.eq (Set_2Eset A))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool)) (hol.eq (Set_2Eset A)).

(; Theorem: |- ((= ((= a) (Set.fromPredicate (HOLLight.dest_set a)))) ((= a) (Set.fromPredicate (HOLLight.dest_set a)))) ;)

(; dict ;)

def thm_290 : A : hol.type -> a_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)))) :=
  A : hol.type => a_1 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))).

(; Theorem: |- ((= ((= a) (Set.fromPredicate (HOLLight.dest_set a)))) ((= a) (Set.fromPredicate (HOLLight.dest_set a)))) ;)

(; dict ;)

def thm_291 : A : hol.type -> a_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)))) :=
  A : hol.type => a_1 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) (thm_290 A a_1) (thm_290 A a_1).

(; Theorem: |- ((= a) (Set.fromPredicate (HOLLight.dest_set a))) ;)

(; dict ;)

def thm_292 : A : hol.type -> a_1 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) -> hol.proof (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) :=
  A : hol.type => a_1 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) => hyp_1.

(; Theorem: |- ((= (Set.fromPredicate (HOLLight.dest_set a))) a) ;)

(; dict ;)

def thm_293 : A : hol.type -> a_1 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) :=
  A : hol.type => a_1 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) => hol.SYM (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) (thm_292 A a_1 hyp_1).

(; Theorem: |- ((= (Set.fromPredicate (HOLLight.dest_set a))) a) ;)

(; dict ;)

def thm_294 : A : hol.type -> a_1 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) :=
  A : hol.type => a_1 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) => hyp_1.

(; Theorem: |- ((= a) (Set.fromPredicate (HOLLight.dest_set a))) ;)

(; dict ;)

def thm_295 : A : hol.type -> a_1 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) -> hol.proof (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) :=
  A : hol.type => a_1 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) => hol.SYM (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1 (thm_294 A a_1 hyp_1).

(; Theorem: |- ((= ((= (Set.fromPredicate (HOLLight.dest_set a))) a)) ((= a) (Set.fromPredicate (HOLLight.dest_set a)))) ;)

(; dict ;)

def thm_296 : A : hol.type -> a_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)))) :=
  A : hol.type => a_1 : hol.term (Set_2Eset A) => hol.PROP_EXT (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) (hyp_1 : hol.proof (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) => thm_293 A a_1 hyp_1) (hyp_1 : hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) => thm_295 A a_1 hyp_1).

(; Theorem: |- ((= \lambda a. ((= (Set.fromPredicate (HOLLight.dest_set a))) a)) \lambda a. ((= a) (Set.fromPredicate (HOLLight.dest_set a)))) ;)

(; dict ;)

def thm_297 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)))) :=
  A : hol.type => hol.ABS_THM (Set_2Eset A) hol.bool (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) (a_1 : hol.term (Set_2Eset A) => thm_296 A a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. ((= (Set.fromPredicate (HOLLight.dest_set a))) a))) (Data.Bool.! \lambda a. ((= a) (Set.fromPredicate (HOLLight.dest_set a))))) ;)

(; dict ;)

def thm_298 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))))) :=
  A : hol.type => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) (thm_218 A) (thm_297 A).

(; Theorem: |- (Data.Bool.! \lambda a. ((= a) (Set.fromPredicate (HOLLight.dest_set a)))) ;)

(; dict ;)

def thm_299 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)) a_1)) (hol.forall (Set_2Eset A) (a_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1)))) (thm_298 A) (thm_164 A).

(; Theorem: |- ((= a) (Set.fromPredicate (HOLLight.dest_set a))) ;)

(; dict ;)

def thm_300 : A : hol.type -> a_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) :=
  A : hol.type => a_1 : hol.term (Set_2Eset A) => thm_299 A a_1.

(; Theorem: |- ((= s) (Set.fromPredicate (HOLLight.dest_set s))) ;)

(; dict ;)

def thm_301 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) s_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => (A : hol.type => a_1 : hol.term (Set_2Eset A) => (A : hol.type => a_1 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) (hol.eq (Set_2Eset A) a_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A a_1))) (thm_291 A a_1) (thm_300 A a_1)) A a_1) A s_1.

(; Theorem: |- ((= (= s)) (= (Set.fromPredicate (HOLLight.dest_set s)))) ;)

(; dict ;)

def thm_302 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (hol.eq (Set_2Eset A) s_1) (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool) (hol.eq (Set_2Eset A)) (hol.eq (Set_2Eset A)) s_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A s_1)) (thm_289 A) (thm_301 A s_1).

(; Theorem: |- ((= t) (Set.fromPredicate (HOLLight.dest_set t))) ;)

(; dict ;)

def thm_303 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) t_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => (A : hol.type => a_1 : hol.term (Set_2Eset A) => thm_300 A a_1) A t_1.

(; Theorem: |- ((= ((= s) t)) ((= (Set.fromPredicate (HOLLight.dest_set s))) (Set.fromPredicate (HOLLight.dest_set t)))) ;)

(; dict ;)

def thm_304 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) hol.bool (hol.eq (Set_2Eset A) s_2) (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2))) t_1 (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)) (thm_302 A s_2) (thm_303 A t_1).

(; Theorem: |- ((= ((= (Set.fromPredicate (HOLLight.dest_set s))) (Set.fromPredicate (HOLLight.dest_set t)))) ((= s) t)) ;)

(; dict ;)

def thm_305 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) (hol.eq (Set_2Eset A) s_2 t_1)) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.SYM hol.bool (hol.eq (Set_2Eset A) s_2 t_1) (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) (thm_304 A t_1 s_2).

(; Theorem: |- ((= Set.fromPredicate) Set.fromPredicate) ;)

(; dict ;)

def thm_306 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) (Set_2Eset A)) (Set_2EfromPredicate A) (Set_2EfromPredicate A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) (Set_2Eset A)) (Set_2EfromPredicate A).

(; Theorem: |- ((= (Set.fromPredicate (HOLLight.dest_set s))) (Set.fromPredicate (HOLLight.dest_set t))) ;)

(; dict ;)

def thm_307 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) => hol.APP_THM (hol.arr A hol.bool) (Set_2Eset A) (Set_2EfromPredicate A) (Set_2EfromPredicate A) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1) (thm_306 A) (thm_288 A t_1 s_2 hyp_1).

(; Theorem: |- ((= (= (Set.fromPredicate (HOLLight.dest_set s)))) (= (Set.fromPredicate (HOLLight.dest_set t)))) ;)

(; dict ;)

def thm_308 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2))) (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) => hol.APP_THM (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool) (hol.eq (Set_2Eset A)) (hol.eq (Set_2Eset A)) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)) (thm_289 A) (thm_307 A t_1 s_2 hyp_1).

(; Theorem: |- ((= (Set.fromPredicate (HOLLight.dest_set t))) (Set.fromPredicate (HOLLight.dest_set t))) ;)

(; dict ;)

def thm_309 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)).

(; Theorem: |- ((= ((= (Set.fromPredicate (HOLLight.dest_set s))) (Set.fromPredicate (HOLLight.dest_set t)))) ((= (Set.fromPredicate (HOLLight.dest_set t))) (Set.fromPredicate (HOLLight.dest_set t)))) ;)

(; dict ;)

def thm_310 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) => hol.APP_THM (Set_2Eset A) hol.bool (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2))) (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)) (thm_308 A t_1 s_2 hyp_1) (thm_309 A t_1).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_311 : A : hol.type -> x_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term (Set_2Eset A) => (A : hol.type => x_1 : hol.term A => thm_196 A x_1) (Set_2Eset A) x_1.

(; Theorem: |- ((= ((= (Set.fromPredicate (HOLLight.dest_set t))) (Set.fromPredicate (HOLLight.dest_set t)))) Data.Bool.T) ;)

(; dict ;)

def thm_312 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) hol.true) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => (A : hol.type => x_1 : hol.term (Set_2Eset A) => thm_311 A x_1) A (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)).

(; Theorem: |- ((= ((= (Set.fromPredicate (HOLLight.dest_set s))) (Set.fromPredicate (HOLLight.dest_set t)))) Data.Bool.T) ;)

(; dict ;)

def thm_313 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) hol.true) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) => hol.TRANS hol.bool (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) hol.true (thm_310 A t_1 s_2 hyp_1) (thm_312 A t_1).

(; Theorem: |- ((= Data.Bool.T) ((= (Set.fromPredicate (HOLLight.dest_set s))) (Set.fromPredicate (HOLLight.dest_set t)))) ;)

(; dict ;)

def thm_314 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) -> hol.proof (hol.eq hol.bool hol.true (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) => hol.SYM hol.bool (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) hol.true (thm_313 A t_1 s_2 hyp_1).

(; Theorem: |- ((= s) t) ;)

(; dict ;)

def thm_315 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) -> hol.proof (hol.eq (Set_2Eset A) s_2 t_1) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) => hol.EQ_MP (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) (hol.eq (Set_2Eset A) s_2 t_1) (thm_305 A t_1 s_2) (hol.EQ_MP hol.true (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (HOLLight_2Edest__set A s_2)) (Set_2EfromPredicate A (HOLLight_2Edest__set A t_1))) (thm_314 A t_1 s_2 hyp_1) thm_1).

(; Theorem: |- ((= s) t) ;)

(; dict ;)

def thm_316 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) -> hol.proof (hol.eq (Set_2Eset A) s_2 t_1) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) => hol.PROVE_HYP (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) (hol.eq (Set_2Eset A) s_2 t_1) (thm_288 A t_1 s_2 hyp_1) (hyp_2 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) => thm_315 A t_1 s_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t)) ;)

(; dict ;)

def thm_317 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) (hol.eq (Set_2Eset A) s_2 t_1)) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_2) (HOLLight_2Edest__set A t_1)) => thm_316 A t_1 s_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t))) ;)

(; dict ;)

def thm_318 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => t_2 : hol.term (Set_2Eset A) => thm_317 A t_2 s_1.

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= (HOLLight.dest_set s)) (HOLLight.dest_set t))) ((= s) t)))) ;)

(; dict ;)

def thm_319 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2))) (thm_287 A s_1) (thm_318 A s_1).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> ((= \lambda x. ((HOLLight.dest_set s) x)) \lambda x. ((HOLLight.dest_set t) x))) ((= s) t)))) ;)

(; dict ;)

def thm_320 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)))) (thm_281 A) (hol.EQ_MP (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (HOLLight_2Edest__set A s_1) (HOLLight_2Edest__set A t_2)) (hol.eq (Set_2Eset A) s_1 t_2)))) (thm_284 A) (thm_319 A)).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t)))) ;)

(; dict ;)

def thm_321 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => HOLLight_2Edest__set A s_1 x_3) (x_3 : hol.term A => HOLLight_2Edest__set A t_2 x_3)) (hol.eq (Set_2Eset A) s_1 t_2)))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2)))) (thm_263 A) (thm_320 A).

(; Theorem: |- ((= Set.{}) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.F)))) ;)

(; dict ;)

def thm_322 : A : hol.type -> hol.proof (hol.eq (Set_2Eset A) (Set_2E_7B_7D A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false)))) :=
  A : hol.type => hol.REFL (Set_2Eset A) (Set_2E_7B_7D A).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.F)))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.F)))) ;)

(; dict ;)

def thm_323 : A : hol.type -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false))) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false)))) :=
  A : hol.type => hol.REFL (Set_2Eset A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false))).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.F)))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.F)))) ;)

(; dict ;)

def thm_324 : A : hol.type -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false))) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false)))) :=
  A : hol.type => hol.SYM (Set_2Eset A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false))) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false))) (thm_323 A).

(; Theorem: |- ((= Set.{}) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.F)))) ;)

(; dict ;)

def thm_325 : A : hol.type -> hol.proof (hol.eq (Set_2Eset A) (Set_2E_7B_7D A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false)))) :=
  A : hol.type => hol.TRANS (Set_2Eset A) (Set_2E_7B_7D A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false))) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false))) ((A : hol.type => thm_322 A) A) (thm_324 A).

(; Theorem: |- ((= Set.insert) \lambda _9449. \lambda _9450. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) _9449)) ((Set.member y) _9450)))))) ;)

(; dict ;)

def thm_326 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr (Set_2Eset A) (Set_2Eset A))) (Set_2Einsert A) (__9449_1 : hol.term A => __9450_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 __9449_1) (Set_2Emember A y_4 __9450_2)))))) :=
  A : hol.type => hol.REFL (hol.arr A (hol.arr (Set_2Eset A) (Set_2Eset A))) (Set_2Einsert A).

(; Theorem: |- ((= _9449) _9449) ;)

(; dict ;)

def thm_327 : A : hol.type -> __9449_1 : hol.term A -> hol.proof (hol.eq A __9449_1 __9449_1) :=
  A : hol.type => __9449_1 : hol.term A => hol.REFL A __9449_1.

(; Theorem: |- ((= (Set.insert _9449)) (\lambda _9449. \lambda _9450. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) _9449)) ((Set.member y) _9450))))) _9449)) ;)

(; dict ;)

def thm_328 : A : hol.type -> __9449_1 : hol.term A -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Einsert A __9449_1) ((__9449_2 : hol.term A => __9450_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.or (hol.eq A y_5 __9449_2) (Set_2Emember A y_5 __9450_3))))) __9449_1)) :=
  A : hol.type => __9449_1 : hol.term A => hol.APP_THM A (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Einsert A) (__9449_2 : hol.term A => __9450_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.or (hol.eq A y_5 __9449_2) (Set_2Emember A y_5 __9450_3))))) __9449_1 __9449_1 (thm_326 A) (thm_327 A __9449_1).

(; Theorem: |- ((= (\lambda _9449. \lambda _9450. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) _9449)) ((Set.member y) _9450))))) _9449)) \lambda _9450. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) _9449)) ((Set.member y) _9450)))))) ;)

(; dict ;)

def thm_329 : A : hol.type -> __9449_1 : hol.term A -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) ((__9449_2 : hol.term A => __9450_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.or (hol.eq A y_5 __9449_2) (Set_2Emember A y_5 __9450_3))))) __9449_1) (__9450_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 __9449_1) (Set_2Emember A y_4 __9450_2)))))) :=
  A : hol.type => __9449_1 : hol.term A => hol.BETA_CONV A (hol.arr (Set_2Eset A) (Set_2Eset A)) (__9449_2 : hol.term A => __9450_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.or (hol.eq A y_5 __9449_2) (Set_2Emember A y_5 __9450_3))))) __9449_1.

(; Theorem: |- ((= (Set.insert _9449)) \lambda _9450. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) _9449)) ((Set.member y) _9450)))))) ;)

(; dict ;)

def thm_330 : A : hol.type -> __9449_1 : hol.term A -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Einsert A __9449_1) (__9450_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 __9449_1) (Set_2Emember A y_4 __9450_2)))))) :=
  A : hol.type => __9449_1 : hol.term A => hol.TRANS (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Einsert A __9449_1) ((__9449_2 : hol.term A => __9450_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.or (hol.eq A y_5 __9449_2) (Set_2Emember A y_5 __9450_3))))) __9449_1) (__9450_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 __9449_1) (Set_2Emember A y_4 __9450_2))))) (thm_328 A __9449_1) (thm_329 A __9449_1).

(; Theorem: |- ((= _9450) _9450) ;)

(; dict ;)

def thm_331 : A : hol.type -> __9450_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9450_1 __9450_1) :=
  A : hol.type => __9450_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9450_1.

(; Theorem: |- ((= ((Set.insert _9449) _9450)) (\lambda _9450. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) _9449)) ((Set.member y) _9450))))) _9450)) ;)

(; dict ;)

def thm_332 : A : hol.type -> __9450_1 : hol.term (Set_2Eset A) -> __9449_2 : hol.term A -> hol.proof (hol.eq (Set_2Eset A) (Set_2Einsert A __9449_2 __9450_1) ((__9450_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.or (hol.eq A y_5 __9449_2) (Set_2Emember A y_5 __9450_3))))) __9450_1)) :=
  A : hol.type => __9450_1 : hol.term (Set_2Eset A) => __9449_2 : hol.term A => hol.APP_THM (Set_2Eset A) (Set_2Eset A) (Set_2Einsert A __9449_2) (__9450_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.or (hol.eq A y_5 __9449_2) (Set_2Emember A y_5 __9450_3))))) __9450_1 __9450_1 (thm_330 A __9449_2) (thm_331 A __9450_1).

(; Theorem: |- ((= (\lambda _9450. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) _9449)) ((Set.member y) _9450))))) _9450)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) _9449)) ((Set.member y) _9450)))))) ;)

(; dict ;)

def thm_333 : A : hol.type -> __9450_1 : hol.term (Set_2Eset A) -> __9449_2 : hol.term A -> hol.proof (hol.eq (Set_2Eset A) ((__9450_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.or (hol.eq A y_5 __9449_2) (Set_2Emember A y_5 __9450_3))))) __9450_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 __9449_2) (Set_2Emember A y_4 __9450_1)))))) :=
  A : hol.type => __9450_1 : hol.term (Set_2Eset A) => __9449_2 : hol.term A => hol.BETA_CONV (Set_2Eset A) (Set_2Eset A) (__9450_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.or (hol.eq A y_5 __9449_2) (Set_2Emember A y_5 __9450_3))))) __9450_1.

(; Theorem: |- ((= ((Set.insert _9449) _9450)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) _9449)) ((Set.member y) _9450)))))) ;)

(; dict ;)

def thm_334 : A : hol.type -> __9450_1 : hol.term (Set_2Eset A) -> __9449_2 : hol.term A -> hol.proof (hol.eq (Set_2Eset A) (Set_2Einsert A __9449_2 __9450_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 __9449_2) (Set_2Emember A y_4 __9450_1)))))) :=
  A : hol.type => __9450_1 : hol.term (Set_2Eset A) => __9449_2 : hol.term A => hol.TRANS (Set_2Eset A) (Set_2Einsert A __9449_2 __9450_1) ((__9450_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.or (hol.eq A y_5 __9449_2) (Set_2Emember A y_5 __9450_3))))) __9450_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 __9449_2) (Set_2Emember A y_4 __9450_1))))) (thm_332 A __9450_1 __9449_2) (thm_333 A __9450_1 __9449_2).

(; Theorem: |- (Data.Bool.! \lambda _9450. ((= ((Set.insert _9449) _9450)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) _9449)) ((Set.member y) _9450))))))) ;)

(; dict ;)

def thm_335 : A : hol.type -> __9449_1 : hol.term A -> hol.proof (hol.forall (Set_2Eset A) (__9450_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Einsert A __9449_1 __9450_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 __9449_1) (Set_2Emember A y_4 __9450_2))))))) :=
  A : hol.type => __9449_1 : hol.term A => __9450_2 : hol.term (Set_2Eset A) => thm_334 A __9450_2 __9449_1.

(; Theorem: |- (Data.Bool.! \lambda _9449. (Data.Bool.! \lambda _9450. ((= ((Set.insert _9449) _9450)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) _9449)) ((Set.member y) _9450)))))))) ;)

(; dict ;)

def thm_336 : A : hol.type -> hol.proof (hol.forall A (__9449_1 : hol.term A => hol.forall (Set_2Eset A) (__9450_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Einsert A __9449_1 __9450_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 __9449_1) (Set_2Emember A y_4 __9450_2)))))))) :=
  A : hol.type => __9449_1 : hol.term A => thm_335 A __9449_1.

(; Theorem: |- ((= ((Set.insert x) s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) x)) ((Set.member y) s)))))) ;)

(; dict ;)

def thm_337 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq (Set_2Eset A) (Set_2Einsert A x_2 s_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 x_2) (Set_2Emember A y_4 s_1)))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => (A : hol.type => __9450_1 : hol.term (Set_2Eset A) => __9449_2 : hol.term A => thm_336 A __9449_2 __9450_1) A s_1 x_2.

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) x)) ((Set.member y) s)))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) x)) ((Set.member y) s)))))) ;)

(; dict ;)

def thm_338 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 x_2) (Set_2Emember A y_4 s_1))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 x_2) (Set_2Emember A y_4 s_1)))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => hol.REFL (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 x_2) (Set_2Emember A y_4 s_1))))).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) x)) ((Set.member y) s)))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) x)) ((Set.member y) s)))))) ;)

(; dict ;)

def thm_339 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 x_2) (Set_2Emember A y_4 s_1))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 x_2) (Set_2Emember A y_4 s_1)))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => hol.SYM (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 x_2) (Set_2Emember A y_4 s_1))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 x_2) (Set_2Emember A y_4 s_1))))) (thm_338 A s_1 x_2).

(; Theorem: |- ((= ((Set.insert x) s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) x)) ((Set.member y) s)))))) ;)

(; dict ;)

def thm_340 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq (Set_2Eset A) (Set_2Einsert A x_2 s_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 x_2) (Set_2Emember A y_4 s_1)))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => hol.TRANS (Set_2Eset A) (Set_2Einsert A x_2 s_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 x_2) (Set_2Emember A y_4 s_1))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 x_2) (Set_2Emember A y_4 s_1))))) (thm_337 A s_1 x_2) (thm_339 A s_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda s. ((= ((Set.insert x) s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) x)) ((Set.member y) s))))))) ;)

(; dict ;)

def thm_341 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall (Set_2Eset A) (s_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Einsert A x_1 s_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 x_1) (Set_2Emember A y_4 s_2))))))) :=
  A : hol.type => x_1 : hol.term A => s_2 : hol.term (Set_2Eset A) => thm_340 A s_2 x_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda s. ((= ((Set.insert x) s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) x)) ((Set.member y) s)))))))) ;)

(; dict ;)

def thm_342 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall (Set_2Eset A) (s_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Einsert A x_1 s_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.or (hol.eq A y_4 x_1) (Set_2Emember A y_4 s_2)))))))) :=
  A : hol.type => x_1 : hol.term A => thm_341 A x_1.

(; Theorem: |- ((= Set.universe) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.T)))) ;)

(; dict ;)

def thm_343 : A : hol.type -> hol.proof (hol.eq (Set_2Eset A) (Set_2Euniverse A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.true)))) :=
  A : hol.type => hol.REFL (Set_2Eset A) (Set_2Euniverse A).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.T)))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.T)))) ;)

(; dict ;)

def thm_344 : A : hol.type -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.true))) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.true)))) :=
  A : hol.type => hol.REFL (Set_2Eset A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.true))).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.T)))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.T)))) ;)

(; dict ;)

def thm_345 : A : hol.type -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.true))) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.true)))) :=
  A : hol.type => hol.SYM (Set_2Eset A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.true))) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.true))) (thm_344 A).

(; Theorem: |- ((= Set.universe) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.T)))) ;)

(; dict ;)

def thm_346 : A : hol.type -> hol.proof (hol.eq (Set_2Eset A) (Set_2Euniverse A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.true)))) :=
  A : hol.type => hol.TRANS (Set_2Eset A) (Set_2Euniverse A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.true))) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.true))) ((A : hol.type => thm_343 A) A) (thm_345 A).

(; Theorem: |- ((= Set.union) \lambda _9461. \lambda _9462. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) _9461)) ((Set.member x) _9462)))))) ;)

(; dict ;)

def thm_347 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A))) (Set_2Eunion A) (__9461_1 : hol.term (Set_2Eset A) => __9462_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 __9461_1) (Set_2Emember A x_4 __9462_2)))))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A))) (Set_2Eunion A).

(; Theorem: |- ((= _9461) _9461) ;)

(; dict ;)

def thm_348 : A : hol.type -> __9461_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9461_1 __9461_1) :=
  A : hol.type => __9461_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9461_1.

(; Theorem: |- ((= (Set.union _9461)) (\lambda _9461. \lambda _9462. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) _9461)) ((Set.member x) _9462))))) _9461)) ;)

(; dict ;)

def thm_349 : A : hol.type -> __9461_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Eunion A __9461_1) ((__9461_2 : hol.term (Set_2Eset A) => __9462_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.or (Set_2Emember A x_5 __9461_2) (Set_2Emember A x_5 __9462_3))))) __9461_1)) :=
  A : hol.type => __9461_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Eunion A) (__9461_2 : hol.term (Set_2Eset A) => __9462_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.or (Set_2Emember A x_5 __9461_2) (Set_2Emember A x_5 __9462_3))))) __9461_1 __9461_1 (thm_347 A) (thm_348 A __9461_1).

(; Theorem: |- ((= (\lambda _9461. \lambda _9462. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) _9461)) ((Set.member x) _9462))))) _9461)) \lambda _9462. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) _9461)) ((Set.member x) _9462)))))) ;)

(; dict ;)

def thm_350 : A : hol.type -> __9461_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) ((__9461_2 : hol.term (Set_2Eset A) => __9462_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.or (Set_2Emember A x_5 __9461_2) (Set_2Emember A x_5 __9462_3))))) __9461_1) (__9462_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 __9461_1) (Set_2Emember A x_4 __9462_2)))))) :=
  A : hol.type => __9461_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A)) (__9461_2 : hol.term (Set_2Eset A) => __9462_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.or (Set_2Emember A x_5 __9461_2) (Set_2Emember A x_5 __9462_3))))) __9461_1.

(; Theorem: |- ((= (Set.union _9461)) \lambda _9462. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) _9461)) ((Set.member x) _9462)))))) ;)

(; dict ;)

def thm_351 : A : hol.type -> __9461_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Eunion A __9461_1) (__9462_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 __9461_1) (Set_2Emember A x_4 __9462_2)))))) :=
  A : hol.type => __9461_1 : hol.term (Set_2Eset A) => hol.TRANS (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Eunion A __9461_1) ((__9461_2 : hol.term (Set_2Eset A) => __9462_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.or (Set_2Emember A x_5 __9461_2) (Set_2Emember A x_5 __9462_3))))) __9461_1) (__9462_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 __9461_1) (Set_2Emember A x_4 __9462_2))))) (thm_349 A __9461_1) (thm_350 A __9461_1).

(; Theorem: |- ((= _9462) _9462) ;)

(; dict ;)

def thm_352 : A : hol.type -> __9462_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9462_1 __9462_1) :=
  A : hol.type => __9462_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9462_1.

(; Theorem: |- ((= ((Set.union _9461) _9462)) (\lambda _9462. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) _9461)) ((Set.member x) _9462))))) _9462)) ;)

(; dict ;)

def thm_353 : A : hol.type -> __9462_1 : hol.term (Set_2Eset A) -> __9461_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Eunion A __9461_2 __9462_1) ((__9462_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.or (Set_2Emember A x_5 __9461_2) (Set_2Emember A x_5 __9462_3))))) __9462_1)) :=
  A : hol.type => __9462_1 : hol.term (Set_2Eset A) => __9461_2 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (Set_2Eset A) (Set_2Eunion A __9461_2) (__9462_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.or (Set_2Emember A x_5 __9461_2) (Set_2Emember A x_5 __9462_3))))) __9462_1 __9462_1 (thm_351 A __9461_2) (thm_352 A __9462_1).

(; Theorem: |- ((= (\lambda _9462. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) _9461)) ((Set.member x) _9462))))) _9462)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) _9461)) ((Set.member x) _9462)))))) ;)

(; dict ;)

def thm_354 : A : hol.type -> __9462_1 : hol.term (Set_2Eset A) -> __9461_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) ((__9462_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.or (Set_2Emember A x_5 __9461_2) (Set_2Emember A x_5 __9462_3))))) __9462_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 __9461_2) (Set_2Emember A x_4 __9462_1)))))) :=
  A : hol.type => __9462_1 : hol.term (Set_2Eset A) => __9461_2 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (Set_2Eset A) (__9462_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.or (Set_2Emember A x_5 __9461_2) (Set_2Emember A x_5 __9462_3))))) __9462_1.

(; Theorem: |- ((= ((Set.union _9461) _9462)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) _9461)) ((Set.member x) _9462)))))) ;)

(; dict ;)

def thm_355 : A : hol.type -> __9462_1 : hol.term (Set_2Eset A) -> __9461_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Eunion A __9461_2 __9462_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 __9461_2) (Set_2Emember A x_4 __9462_1)))))) :=
  A : hol.type => __9462_1 : hol.term (Set_2Eset A) => __9461_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset A) (Set_2Eunion A __9461_2 __9462_1) ((__9462_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.or (Set_2Emember A x_5 __9461_2) (Set_2Emember A x_5 __9462_3))))) __9462_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 __9461_2) (Set_2Emember A x_4 __9462_1))))) (thm_353 A __9462_1 __9461_2) (thm_354 A __9462_1 __9461_2).

(; Theorem: |- (Data.Bool.! \lambda _9462. ((= ((Set.union _9461) _9462)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) _9461)) ((Set.member x) _9462))))))) ;)

(; dict ;)

def thm_356 : A : hol.type -> __9461_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (__9462_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eunion A __9461_1 __9462_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 __9461_1) (Set_2Emember A x_4 __9462_2))))))) :=
  A : hol.type => __9461_1 : hol.term (Set_2Eset A) => __9462_2 : hol.term (Set_2Eset A) => thm_355 A __9462_2 __9461_1.

(; Theorem: |- (Data.Bool.! \lambda _9461. (Data.Bool.! \lambda _9462. ((= ((Set.union _9461) _9462)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) _9461)) ((Set.member x) _9462)))))))) ;)

(; dict ;)

def thm_357 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (__9461_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (__9462_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eunion A __9461_1 __9462_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 __9461_1) (Set_2Emember A x_4 __9462_2)))))))) :=
  A : hol.type => __9461_1 : hol.term (Set_2Eset A) => thm_356 A __9461_1.

(; Theorem: |- ((= ((Set.union s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) s)) ((Set.member x) t)))))) ;)

(; dict ;)

def thm_358 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Eunion A s_2 t_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1)))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => (A : hol.type => __9462_1 : hol.term (Set_2Eset A) => __9461_2 : hol.term (Set_2Eset A) => thm_357 A __9461_2 __9462_1) A t_1 s_2.

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) s)) ((Set.member x) t)))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) s)) ((Set.member x) t)))))) ;)

(; dict ;)

def thm_359 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1)))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) s)) ((Set.member x) t)))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) s)) ((Set.member x) t)))))) ;)

(; dict ;)

def thm_360 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1)))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.SYM (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))) (thm_359 A t_1 s_2).

(; Theorem: |- ((= ((Set.union s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) s)) ((Set.member x) t)))))) ;)

(; dict ;)

def thm_361 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Eunion A s_2 t_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1)))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset A) (Set_2Eunion A s_2 t_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))) (thm_358 A t_1 s_2) (thm_360 A t_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Set.union s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) s)) ((Set.member x) t))))))) ;)

(; dict ;)

def thm_362 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eunion A s_1 t_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 s_1) (Set_2Emember A x_4 t_2))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => t_2 : hol.term (Set_2Eset A) => thm_361 A t_2 s_1.

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.union s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) s)) ((Set.member x) t)))))))) ;)

(; dict ;)

def thm_363 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eunion A s_1 t_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.or (Set_2Emember A x_4 s_1) (Set_2Emember A x_4 t_2)))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_362 A s_1.

(; Theorem: |- ((= Set.bigUnion) \lambda _9473. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) _9473)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_364 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset (Set_2Eset A)) (Set_2Eset A)) (Set_2EbigUnion A) (__9473_1 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 __9473_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset (Set_2Eset A)) (Set_2Eset A)) (Set_2EbigUnion A).

(; Theorem: |- ((= _9473) _9473) ;)

(; dict ;)

def thm_365 : A : hol.type -> __9473_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset (Set_2Eset A)) __9473_1 __9473_1) :=
  A : hol.type => __9473_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.REFL (Set_2Eset (Set_2Eset A)) __9473_1.

(; Theorem: |- ((= (Set.bigUnion _9473)) (\lambda _9473. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) _9473)) ((Set.member x) u)))))) _9473)) ;)

(; dict ;)

def thm_366 : A : hol.type -> __9473_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EbigUnion A __9473_1) ((__9473_2 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_5 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_5 __9473_2) (Set_2Emember A x_4 u_5)))))) __9473_1)) :=
  A : hol.type => __9473_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.APP_THM (Set_2Eset (Set_2Eset A)) (Set_2Eset A) (Set_2EbigUnion A) (__9473_2 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_5 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_5 __9473_2) (Set_2Emember A x_4 u_5)))))) __9473_1 __9473_1 (thm_364 A) (thm_365 A __9473_1).

(; Theorem: |- ((= (\lambda _9473. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) _9473)) ((Set.member x) u)))))) _9473)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) _9473)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_367 : A : hol.type -> __9473_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) ((__9473_2 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_5 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_5 __9473_2) (Set_2Emember A x_4 u_5)))))) __9473_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 __9473_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => __9473_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.BETA_CONV (Set_2Eset (Set_2Eset A)) (Set_2Eset A) (__9473_2 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_5 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_5 __9473_2) (Set_2Emember A x_4 u_5)))))) __9473_1.

(; Theorem: |- ((= (Set.bigUnion _9473)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) _9473)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_368 : A : hol.type -> __9473_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EbigUnion A __9473_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 __9473_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => __9473_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.TRANS (Set_2Eset A) (Set_2EbigUnion A __9473_1) ((__9473_2 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_5 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_5 __9473_2) (Set_2Emember A x_4 u_5)))))) __9473_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 __9473_1) (Set_2Emember A x_3 u_4)))))) (thm_366 A __9473_1) (thm_367 A __9473_1).

(; Theorem: |- (Data.Bool.! \lambda _9473. ((= (Set.bigUnion _9473)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) _9473)) ((Set.member x) u)))))))) ;)

(; dict ;)

def thm_369 : A : hol.type -> hol.proof (hol.forall (Set_2Eset (Set_2Eset A)) (__9473_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.eq (Set_2Eset A) (Set_2EbigUnion A __9473_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 __9473_1) (Set_2Emember A x_3 u_4)))))))) :=
  A : hol.type => __9473_1 : hol.term (Set_2Eset (Set_2Eset A)) => thm_368 A __9473_1.

(; Theorem: |- ((= (Set.bigUnion s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) s)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_370 : A : hol.type -> s_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EbigUnion A s_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset (Set_2Eset A)) => (A : hol.type => __9473_1 : hol.term (Set_2Eset (Set_2Eset A)) => thm_369 A __9473_1) A s_1.

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) s)) ((Set.member x) u))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) s)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_371 : A : hol.type -> s_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.REFL (Set_2Eset A) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) s)) ((Set.member x) u))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) s)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_372 : A : hol.type -> s_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.SYM (Set_2Eset A) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))) (thm_371 A s_1).

(; Theorem: |- ((= (Set.bigUnion s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) s)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_373 : A : hol.type -> s_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EbigUnion A s_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.TRANS (Set_2Eset A) (Set_2EbigUnion A s_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))) (thm_370 A s_1) (thm_372 A s_1).

(; Theorem: |- (Data.Bool.! \lambda s. ((= (Set.bigUnion s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) s)) ((Set.member x) u)))))))) ;)

(; dict ;)

def thm_374 : A : hol.type -> hol.proof (hol.forall (Set_2Eset (Set_2Eset A)) (s_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.eq (Set_2Eset A) (Set_2EbigUnion A s_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr (Set_2Eset A) hol.bool) hol.bool) (u_4 : hol.term (Set_2Eset A) => hol.and (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset (Set_2Eset A)) => thm_373 A s_1.

(; Theorem: |- ((= Set.intersect) \lambda _9478. \lambda _9479. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9478)) ((Set.member x) _9479)))))) ;)

(; dict ;)

def thm_375 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A))) (Set_2Eintersect A) (__9478_1 : hol.term (Set_2Eset A) => __9479_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9478_1) (Set_2Emember A x_4 __9479_2)))))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A))) (Set_2Eintersect A).

(; Theorem: |- ((= _9478) _9478) ;)

(; dict ;)

def thm_376 : A : hol.type -> __9478_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9478_1 __9478_1) :=
  A : hol.type => __9478_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9478_1.

(; Theorem: |- ((= (Set.intersect _9478)) (\lambda _9478. \lambda _9479. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9478)) ((Set.member x) _9479))))) _9478)) ;)

(; dict ;)

def thm_377 : A : hol.type -> __9478_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Eintersect A __9478_1) ((__9478_2 : hol.term (Set_2Eset A) => __9479_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9478_2) (Set_2Emember A x_5 __9479_3))))) __9478_1)) :=
  A : hol.type => __9478_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Eintersect A) (__9478_2 : hol.term (Set_2Eset A) => __9479_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9478_2) (Set_2Emember A x_5 __9479_3))))) __9478_1 __9478_1 (thm_375 A) (thm_376 A __9478_1).

(; Theorem: |- ((= (\lambda _9478. \lambda _9479. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9478)) ((Set.member x) _9479))))) _9478)) \lambda _9479. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9478)) ((Set.member x) _9479)))))) ;)

(; dict ;)

def thm_378 : A : hol.type -> __9478_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) ((__9478_2 : hol.term (Set_2Eset A) => __9479_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9478_2) (Set_2Emember A x_5 __9479_3))))) __9478_1) (__9479_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9478_1) (Set_2Emember A x_4 __9479_2)))))) :=
  A : hol.type => __9478_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A)) (__9478_2 : hol.term (Set_2Eset A) => __9479_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9478_2) (Set_2Emember A x_5 __9479_3))))) __9478_1.

(; Theorem: |- ((= (Set.intersect _9478)) \lambda _9479. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9478)) ((Set.member x) _9479)))))) ;)

(; dict ;)

def thm_379 : A : hol.type -> __9478_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Eintersect A __9478_1) (__9479_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9478_1) (Set_2Emember A x_4 __9479_2)))))) :=
  A : hol.type => __9478_1 : hol.term (Set_2Eset A) => hol.TRANS (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Eintersect A __9478_1) ((__9478_2 : hol.term (Set_2Eset A) => __9479_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9478_2) (Set_2Emember A x_5 __9479_3))))) __9478_1) (__9479_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9478_1) (Set_2Emember A x_4 __9479_2))))) (thm_377 A __9478_1) (thm_378 A __9478_1).

(; Theorem: |- ((= _9479) _9479) ;)

(; dict ;)

def thm_380 : A : hol.type -> __9479_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9479_1 __9479_1) :=
  A : hol.type => __9479_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9479_1.

(; Theorem: |- ((= ((Set.intersect _9478) _9479)) (\lambda _9479. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9478)) ((Set.member x) _9479))))) _9479)) ;)

(; dict ;)

def thm_381 : A : hol.type -> __9479_1 : hol.term (Set_2Eset A) -> __9478_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Eintersect A __9478_2 __9479_1) ((__9479_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9478_2) (Set_2Emember A x_5 __9479_3))))) __9479_1)) :=
  A : hol.type => __9479_1 : hol.term (Set_2Eset A) => __9478_2 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (Set_2Eset A) (Set_2Eintersect A __9478_2) (__9479_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9478_2) (Set_2Emember A x_5 __9479_3))))) __9479_1 __9479_1 (thm_379 A __9478_2) (thm_380 A __9479_1).

(; Theorem: |- ((= (\lambda _9479. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9478)) ((Set.member x) _9479))))) _9479)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9478)) ((Set.member x) _9479)))))) ;)

(; dict ;)

def thm_382 : A : hol.type -> __9479_1 : hol.term (Set_2Eset A) -> __9478_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) ((__9479_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9478_2) (Set_2Emember A x_5 __9479_3))))) __9479_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9478_2) (Set_2Emember A x_4 __9479_1)))))) :=
  A : hol.type => __9479_1 : hol.term (Set_2Eset A) => __9478_2 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (Set_2Eset A) (__9479_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9478_2) (Set_2Emember A x_5 __9479_3))))) __9479_1.

(; Theorem: |- ((= ((Set.intersect _9478) _9479)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9478)) ((Set.member x) _9479)))))) ;)

(; dict ;)

def thm_383 : A : hol.type -> __9479_1 : hol.term (Set_2Eset A) -> __9478_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Eintersect A __9478_2 __9479_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9478_2) (Set_2Emember A x_4 __9479_1)))))) :=
  A : hol.type => __9479_1 : hol.term (Set_2Eset A) => __9478_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset A) (Set_2Eintersect A __9478_2 __9479_1) ((__9479_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9478_2) (Set_2Emember A x_5 __9479_3))))) __9479_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9478_2) (Set_2Emember A x_4 __9479_1))))) (thm_381 A __9479_1 __9478_2) (thm_382 A __9479_1 __9478_2).

(; Theorem: |- (Data.Bool.! \lambda _9479. ((= ((Set.intersect _9478) _9479)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9478)) ((Set.member x) _9479))))))) ;)

(; dict ;)

def thm_384 : A : hol.type -> __9478_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (__9479_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9478_1 __9479_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9478_1) (Set_2Emember A x_4 __9479_2))))))) :=
  A : hol.type => __9478_1 : hol.term (Set_2Eset A) => __9479_2 : hol.term (Set_2Eset A) => thm_383 A __9479_2 __9478_1.

(; Theorem: |- (Data.Bool.! \lambda _9478. (Data.Bool.! \lambda _9479. ((= ((Set.intersect _9478) _9479)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9478)) ((Set.member x) _9479)))))))) ;)

(; dict ;)

def thm_385 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (__9478_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (__9479_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9478_1 __9479_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9478_1) (Set_2Emember A x_4 __9479_2)))))))) :=
  A : hol.type => __9478_1 : hol.term (Set_2Eset A) => thm_384 A __9478_1.

(; Theorem: |- ((= ((Set.intersect s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) ((Set.member x) t)))))) ;)

(; dict ;)

def thm_386 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1)))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => (A : hol.type => __9479_1 : hol.term (Set_2Eset A) => __9478_2 : hol.term (Set_2Eset A) => thm_385 A __9478_2 __9479_1) A t_1 s_2.

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) ((Set.member x) t)))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) ((Set.member x) t)))))) ;)

(; dict ;)

def thm_387 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1)))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) ((Set.member x) t)))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) ((Set.member x) t)))))) ;)

(; dict ;)

def thm_388 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1)))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.SYM (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))) (thm_387 A t_1 s_2).

(; Theorem: |- ((= ((Set.intersect s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) ((Set.member x) t)))))) ;)

(; dict ;)

def thm_389 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1)))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (Set_2Emember A x_4 t_1))))) (thm_386 A t_1 s_2) (thm_388 A t_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Set.intersect s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) ((Set.member x) t))))))) ;)

(; dict ;)

def thm_390 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A s_1 t_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_1) (Set_2Emember A x_4 t_2))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => t_2 : hol.term (Set_2Eset A) => thm_389 A t_2 s_1.

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.intersect s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) ((Set.member x) t)))))))) ;)

(; dict ;)

def thm_391 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A s_1 t_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_1) (Set_2Emember A x_4 t_2)))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_390 A s_1.

(; Theorem: |- ((= Set.bigIntersect) \lambda _9490. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) _9490)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_392 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset (Set_2Eset A)) (Set_2Eset A)) (Set_2EbigIntersect A) (__9490_1 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 __9490_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset (Set_2Eset A)) (Set_2Eset A)) (Set_2EbigIntersect A).

(; Theorem: |- ((= _9490) _9490) ;)

(; dict ;)

def thm_393 : A : hol.type -> __9490_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset (Set_2Eset A)) __9490_1 __9490_1) :=
  A : hol.type => __9490_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.REFL (Set_2Eset (Set_2Eset A)) __9490_1.

(; Theorem: |- ((= (Set.bigIntersect _9490)) (\lambda _9490. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) _9490)) ((Set.member x) u)))))) _9490)) ;)

(; dict ;)

def thm_394 : A : hol.type -> __9490_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EbigIntersect A __9490_1) ((__9490_2 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.forall (Set_2Eset A) (u_5 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_5 __9490_2) (Set_2Emember A x_4 u_5)))))) __9490_1)) :=
  A : hol.type => __9490_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.APP_THM (Set_2Eset (Set_2Eset A)) (Set_2Eset A) (Set_2EbigIntersect A) (__9490_2 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.forall (Set_2Eset A) (u_5 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_5 __9490_2) (Set_2Emember A x_4 u_5)))))) __9490_1 __9490_1 (thm_392 A) (thm_393 A __9490_1).

(; Theorem: |- ((= (\lambda _9490. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) _9490)) ((Set.member x) u)))))) _9490)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) _9490)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_395 : A : hol.type -> __9490_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) ((__9490_2 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.forall (Set_2Eset A) (u_5 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_5 __9490_2) (Set_2Emember A x_4 u_5)))))) __9490_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 __9490_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => __9490_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.BETA_CONV (Set_2Eset (Set_2Eset A)) (Set_2Eset A) (__9490_2 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.forall (Set_2Eset A) (u_5 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_5 __9490_2) (Set_2Emember A x_4 u_5)))))) __9490_1.

(; Theorem: |- ((= (Set.bigIntersect _9490)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) _9490)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_396 : A : hol.type -> __9490_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EbigIntersect A __9490_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 __9490_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => __9490_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.TRANS (Set_2Eset A) (Set_2EbigIntersect A __9490_1) ((__9490_2 : hol.term (Set_2Eset (Set_2Eset A)) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.forall (Set_2Eset A) (u_5 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_5 __9490_2) (Set_2Emember A x_4 u_5)))))) __9490_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 __9490_1) (Set_2Emember A x_3 u_4)))))) (thm_394 A __9490_1) (thm_395 A __9490_1).

(; Theorem: |- (Data.Bool.! \lambda _9490. ((= (Set.bigIntersect _9490)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) _9490)) ((Set.member x) u)))))))) ;)

(; dict ;)

def thm_397 : A : hol.type -> hol.proof (hol.forall (Set_2Eset (Set_2Eset A)) (__9490_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.eq (Set_2Eset A) (Set_2EbigIntersect A __9490_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 __9490_1) (Set_2Emember A x_3 u_4)))))))) :=
  A : hol.type => __9490_1 : hol.term (Set_2Eset (Set_2Eset A)) => thm_396 A __9490_1.

(; Theorem: |- ((= (Set.bigIntersect s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) s)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_398 : A : hol.type -> s_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EbigIntersect A s_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset (Set_2Eset A)) => (A : hol.type => __9490_1 : hol.term (Set_2Eset (Set_2Eset A)) => thm_397 A __9490_1) A s_1.

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) s)) ((Set.member x) u))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) s)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_399 : A : hol.type -> s_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.REFL (Set_2Eset A) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) s)) ((Set.member x) u))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) s)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_400 : A : hol.type -> s_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.SYM (Set_2Eset A) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))) (thm_399 A s_1).

(; Theorem: |- ((= (Set.bigIntersect s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) s)) ((Set.member x) u))))))) ;)

(; dict ;)

def thm_401 : A : hol.type -> s_1 : hol.term (Set_2Eset (Set_2Eset A)) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EbigIntersect A s_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.TRANS (Set_2Eset A) (Set_2EbigIntersect A s_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))) (thm_398 A s_1) (thm_400 A s_1).

(; Theorem: |- (Data.Bool.! \lambda s. ((= (Set.bigIntersect s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) s)) ((Set.member x) u)))))))) ;)

(; dict ;)

def thm_402 : A : hol.type -> hol.proof (hol.forall (Set_2Eset (Set_2Eset A)) (s_1 : hol.term (Set_2Eset (Set_2Eset A)) => hol.eq (Set_2Eset A) (Set_2EbigIntersect A s_1) (Set_2EfromPredicate A (v_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (hol.eq A v_2 x_3) (hol.forall (Set_2Eset A) (u_4 : hol.term (Set_2Eset A) => hol.imp (Set_2Emember (Set_2Eset A) u_4 s_1) (Set_2Emember A x_3 u_4)))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset (Set_2Eset A)) => thm_401 A s_1.

(; Theorem: |- ((= Set.difference) \lambda _9495. \lambda _9496. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9495)) (Data.Bool.~ ((Set.member x) _9496))))))) ;)

(; dict ;)

def thm_403 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A))) (Set_2Edifference A) (__9495_1 : hol.term (Set_2Eset A) => __9496_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9495_1) (hol.not (Set_2Emember A x_4 __9496_2))))))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A))) (Set_2Edifference A).

(; Theorem: |- ((= _9495) _9495) ;)

(; dict ;)

def thm_404 : A : hol.type -> __9495_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9495_1 __9495_1) :=
  A : hol.type => __9495_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9495_1.

(; Theorem: |- ((= (Set.difference _9495)) (\lambda _9495. \lambda _9496. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9495)) (Data.Bool.~ ((Set.member x) _9496)))))) _9495)) ;)

(; dict ;)

def thm_405 : A : hol.type -> __9495_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Edifference A __9495_1) ((__9495_2 : hol.term (Set_2Eset A) => __9496_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9495_2) (hol.not (Set_2Emember A x_5 __9496_3)))))) __9495_1)) :=
  A : hol.type => __9495_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Edifference A) (__9495_2 : hol.term (Set_2Eset A) => __9496_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9495_2) (hol.not (Set_2Emember A x_5 __9496_3)))))) __9495_1 __9495_1 (thm_403 A) (thm_404 A __9495_1).

(; Theorem: |- ((= (\lambda _9495. \lambda _9496. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9495)) (Data.Bool.~ ((Set.member x) _9496)))))) _9495)) \lambda _9496. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9495)) (Data.Bool.~ ((Set.member x) _9496))))))) ;)

(; dict ;)

def thm_406 : A : hol.type -> __9495_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) ((__9495_2 : hol.term (Set_2Eset A) => __9496_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9495_2) (hol.not (Set_2Emember A x_5 __9496_3)))))) __9495_1) (__9496_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9495_1) (hol.not (Set_2Emember A x_4 __9496_2))))))) :=
  A : hol.type => __9495_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (hol.arr (Set_2Eset A) (Set_2Eset A)) (__9495_2 : hol.term (Set_2Eset A) => __9496_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9495_2) (hol.not (Set_2Emember A x_5 __9496_3)))))) __9495_1.

(; Theorem: |- ((= (Set.difference _9495)) \lambda _9496. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9495)) (Data.Bool.~ ((Set.member x) _9496))))))) ;)

(; dict ;)

def thm_407 : A : hol.type -> __9495_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Edifference A __9495_1) (__9496_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9495_1) (hol.not (Set_2Emember A x_4 __9496_2))))))) :=
  A : hol.type => __9495_1 : hol.term (Set_2Eset A) => hol.TRANS (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Edifference A __9495_1) ((__9495_2 : hol.term (Set_2Eset A) => __9496_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9495_2) (hol.not (Set_2Emember A x_5 __9496_3)))))) __9495_1) (__9496_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9495_1) (hol.not (Set_2Emember A x_4 __9496_2)))))) (thm_405 A __9495_1) (thm_406 A __9495_1).

(; Theorem: |- ((= _9496) _9496) ;)

(; dict ;)

def thm_408 : A : hol.type -> __9496_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9496_1 __9496_1) :=
  A : hol.type => __9496_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9496_1.

(; Theorem: |- ((= ((Set.difference _9495) _9496)) (\lambda _9496. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9495)) (Data.Bool.~ ((Set.member x) _9496)))))) _9496)) ;)

(; dict ;)

def thm_409 : A : hol.type -> __9496_1 : hol.term (Set_2Eset A) -> __9495_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Edifference A __9495_2 __9496_1) ((__9496_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9495_2) (hol.not (Set_2Emember A x_5 __9496_3)))))) __9496_1)) :=
  A : hol.type => __9496_1 : hol.term (Set_2Eset A) => __9495_2 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (Set_2Eset A) (Set_2Edifference A __9495_2) (__9496_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9495_2) (hol.not (Set_2Emember A x_5 __9496_3)))))) __9496_1 __9496_1 (thm_407 A __9495_2) (thm_408 A __9496_1).

(; Theorem: |- ((= (\lambda _9496. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9495)) (Data.Bool.~ ((Set.member x) _9496)))))) _9496)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9495)) (Data.Bool.~ ((Set.member x) _9496))))))) ;)

(; dict ;)

def thm_410 : A : hol.type -> __9496_1 : hol.term (Set_2Eset A) -> __9495_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) ((__9496_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9495_2) (hol.not (Set_2Emember A x_5 __9496_3)))))) __9496_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9495_2) (hol.not (Set_2Emember A x_4 __9496_1))))))) :=
  A : hol.type => __9496_1 : hol.term (Set_2Eset A) => __9495_2 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (Set_2Eset A) (__9496_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9495_2) (hol.not (Set_2Emember A x_5 __9496_3)))))) __9496_1.

(; Theorem: |- ((= ((Set.difference _9495) _9496)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9495)) (Data.Bool.~ ((Set.member x) _9496))))))) ;)

(; dict ;)

def thm_411 : A : hol.type -> __9496_1 : hol.term (Set_2Eset A) -> __9495_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Edifference A __9495_2 __9496_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9495_2) (hol.not (Set_2Emember A x_4 __9496_1))))))) :=
  A : hol.type => __9496_1 : hol.term (Set_2Eset A) => __9495_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset A) (Set_2Edifference A __9495_2 __9496_1) ((__9496_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (hol.eq A v_4 x_5) (hol.and (Set_2Emember A x_5 __9495_2) (hol.not (Set_2Emember A x_5 __9496_3)))))) __9496_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9495_2) (hol.not (Set_2Emember A x_4 __9496_1)))))) (thm_409 A __9496_1 __9495_2) (thm_410 A __9496_1 __9495_2).

(; Theorem: |- (Data.Bool.! \lambda _9496. ((= ((Set.difference _9495) _9496)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9495)) (Data.Bool.~ ((Set.member x) _9496)))))))) ;)

(; dict ;)

def thm_412 : A : hol.type -> __9495_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (__9496_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Edifference A __9495_1 __9496_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9495_1) (hol.not (Set_2Emember A x_4 __9496_2)))))))) :=
  A : hol.type => __9495_1 : hol.term (Set_2Eset A) => __9496_2 : hol.term (Set_2Eset A) => thm_411 A __9496_2 __9495_1.

(; Theorem: |- (Data.Bool.! \lambda _9495. (Data.Bool.! \lambda _9496. ((= ((Set.difference _9495) _9496)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) _9495)) (Data.Bool.~ ((Set.member x) _9496))))))))) ;)

(; dict ;)

def thm_413 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (__9495_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (__9496_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Edifference A __9495_1 __9496_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 __9495_1) (hol.not (Set_2Emember A x_4 __9496_2))))))))) :=
  A : hol.type => __9495_1 : hol.term (Set_2Eset A) => thm_412 A __9495_1.

(; Theorem: |- ((= ((Set.difference s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) (Data.Bool.~ ((Set.member x) t))))))) ;)

(; dict ;)

def thm_414 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Edifference A s_2 t_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (hol.not (Set_2Emember A x_4 t_1))))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => (A : hol.type => __9496_1 : hol.term (Set_2Eset A) => __9495_2 : hol.term (Set_2Eset A) => thm_413 A __9495_2 __9496_1) A t_1 s_2.

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) (Data.Bool.~ ((Set.member x) t))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) (Data.Bool.~ ((Set.member x) t))))))) ;)

(; dict ;)

def thm_415 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (hol.not (Set_2Emember A x_4 t_1)))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (hol.not (Set_2Emember A x_4 t_1))))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (hol.not (Set_2Emember A x_4 t_1)))))).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) (Data.Bool.~ ((Set.member x) t))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) (Data.Bool.~ ((Set.member x) t))))))) ;)

(; dict ;)

def thm_416 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (hol.not (Set_2Emember A x_4 t_1)))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (hol.not (Set_2Emember A x_4 t_1))))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.SYM (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (hol.not (Set_2Emember A x_4 t_1)))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (hol.not (Set_2Emember A x_4 t_1)))))) (thm_415 A t_1 s_2).

(; Theorem: |- ((= ((Set.difference s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) (Data.Bool.~ ((Set.member x) t))))))) ;)

(; dict ;)

def thm_417 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Edifference A s_2 t_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (hol.not (Set_2Emember A x_4 t_1))))))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset A) (Set_2Edifference A s_2 t_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (hol.not (Set_2Emember A x_4 t_1)))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_2) (hol.not (Set_2Emember A x_4 t_1)))))) (thm_414 A t_1 s_2) (thm_416 A t_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Set.difference s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) (Data.Bool.~ ((Set.member x) t)))))))) ;)

(; dict ;)

def thm_418 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Edifference A s_1 t_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_1) (hol.not (Set_2Emember A x_4 t_2)))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => t_2 : hol.term (Set_2Eset A) => thm_417 A t_2 s_1.

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.difference s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) (Data.Bool.~ ((Set.member x) t))))))))) ;)

(; dict ;)

def thm_419 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Edifference A s_1 t_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (hol.eq A v_3 x_4) (hol.and (Set_2Emember A x_4 s_1) (hol.not (Set_2Emember A x_4 t_2))))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_418 A s_1.

(; Theorem: |- ((= Set.delete) \lambda _9507. \lambda _9508. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) _9507)) (Data.Bool.~ ((= y) _9508))))))) ;)

(; dict ;)

def thm_420 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (hol.arr A (Set_2Eset A))) (Set_2Edelete A) (__9507_1 : hol.term (Set_2Eset A) => __9508_2 : hol.term A => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 __9507_1) (hol.not (hol.eq A y_4 __9508_2))))))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset A) (hol.arr A (Set_2Eset A))) (Set_2Edelete A).

(; Theorem: |- ((= _9507) _9507) ;)

(; dict ;)

def thm_421 : A : hol.type -> __9507_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9507_1 __9507_1) :=
  A : hol.type => __9507_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9507_1.

(; Theorem: |- ((= (Set.delete _9507)) (\lambda _9507. \lambda _9508. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) _9507)) (Data.Bool.~ ((= y) _9508)))))) _9507)) ;)

(; dict ;)

def thm_422 : A : hol.type -> __9507_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A (Set_2Eset A)) (Set_2Edelete A __9507_1) ((__9507_2 : hol.term (Set_2Eset A) => __9508_3 : hol.term A => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.and (Set_2Emember A y_5 __9507_2) (hol.not (hol.eq A y_5 __9508_3)))))) __9507_1)) :=
  A : hol.type => __9507_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (hol.arr A (Set_2Eset A)) (Set_2Edelete A) (__9507_2 : hol.term (Set_2Eset A) => __9508_3 : hol.term A => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.and (Set_2Emember A y_5 __9507_2) (hol.not (hol.eq A y_5 __9508_3)))))) __9507_1 __9507_1 (thm_420 A) (thm_421 A __9507_1).

(; Theorem: |- ((= (\lambda _9507. \lambda _9508. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) _9507)) (Data.Bool.~ ((= y) _9508)))))) _9507)) \lambda _9508. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) _9507)) (Data.Bool.~ ((= y) _9508))))))) ;)

(; dict ;)

def thm_423 : A : hol.type -> __9507_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A (Set_2Eset A)) ((__9507_2 : hol.term (Set_2Eset A) => __9508_3 : hol.term A => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.and (Set_2Emember A y_5 __9507_2) (hol.not (hol.eq A y_5 __9508_3)))))) __9507_1) (__9508_2 : hol.term A => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 __9507_1) (hol.not (hol.eq A y_4 __9508_2))))))) :=
  A : hol.type => __9507_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (hol.arr A (Set_2Eset A)) (__9507_2 : hol.term (Set_2Eset A) => __9508_3 : hol.term A => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.and (Set_2Emember A y_5 __9507_2) (hol.not (hol.eq A y_5 __9508_3)))))) __9507_1.

(; Theorem: |- ((= (Set.delete _9507)) \lambda _9508. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) _9507)) (Data.Bool.~ ((= y) _9508))))))) ;)

(; dict ;)

def thm_424 : A : hol.type -> __9507_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A (Set_2Eset A)) (Set_2Edelete A __9507_1) (__9508_2 : hol.term A => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 __9507_1) (hol.not (hol.eq A y_4 __9508_2))))))) :=
  A : hol.type => __9507_1 : hol.term (Set_2Eset A) => hol.TRANS (hol.arr A (Set_2Eset A)) (Set_2Edelete A __9507_1) ((__9507_2 : hol.term (Set_2Eset A) => __9508_3 : hol.term A => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.and (Set_2Emember A y_5 __9507_2) (hol.not (hol.eq A y_5 __9508_3)))))) __9507_1) (__9508_2 : hol.term A => Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 __9507_1) (hol.not (hol.eq A y_4 __9508_2)))))) (thm_422 A __9507_1) (thm_423 A __9507_1).

(; Theorem: |- ((= _9508) _9508) ;)

(; dict ;)

def thm_425 : A : hol.type -> __9508_1 : hol.term A -> hol.proof (hol.eq A __9508_1 __9508_1) :=
  A : hol.type => __9508_1 : hol.term A => hol.REFL A __9508_1.

(; Theorem: |- ((= ((Set.delete _9507) _9508)) (\lambda _9508. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) _9507)) (Data.Bool.~ ((= y) _9508)))))) _9508)) ;)

(; dict ;)

def thm_426 : A : hol.type -> __9508_1 : hol.term A -> __9507_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Edelete A __9507_2 __9508_1) ((__9508_3 : hol.term A => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.and (Set_2Emember A y_5 __9507_2) (hol.not (hol.eq A y_5 __9508_3)))))) __9508_1)) :=
  A : hol.type => __9508_1 : hol.term A => __9507_2 : hol.term (Set_2Eset A) => hol.APP_THM A (Set_2Eset A) (Set_2Edelete A __9507_2) (__9508_3 : hol.term A => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.and (Set_2Emember A y_5 __9507_2) (hol.not (hol.eq A y_5 __9508_3)))))) __9508_1 __9508_1 (thm_424 A __9507_2) (thm_425 A __9508_1).

(; Theorem: |- ((= (\lambda _9508. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) _9507)) (Data.Bool.~ ((= y) _9508)))))) _9508)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) _9507)) (Data.Bool.~ ((= y) _9508))))))) ;)

(; dict ;)

def thm_427 : A : hol.type -> __9508_1 : hol.term A -> __9507_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) ((__9508_3 : hol.term A => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.and (Set_2Emember A y_5 __9507_2) (hol.not (hol.eq A y_5 __9508_3)))))) __9508_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 __9507_2) (hol.not (hol.eq A y_4 __9508_1))))))) :=
  A : hol.type => __9508_1 : hol.term A => __9507_2 : hol.term (Set_2Eset A) => hol.BETA_CONV A (Set_2Eset A) (__9508_3 : hol.term A => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.and (Set_2Emember A y_5 __9507_2) (hol.not (hol.eq A y_5 __9508_3)))))) __9508_1.

(; Theorem: |- ((= ((Set.delete _9507) _9508)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) _9507)) (Data.Bool.~ ((= y) _9508))))))) ;)

(; dict ;)

def thm_428 : A : hol.type -> __9508_1 : hol.term A -> __9507_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Edelete A __9507_2 __9508_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 __9507_2) (hol.not (hol.eq A y_4 __9508_1))))))) :=
  A : hol.type => __9508_1 : hol.term A => __9507_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset A) (Set_2Edelete A __9507_2 __9508_1) ((__9508_3 : hol.term A => Set_2EfromPredicate A (v_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_5 : hol.term A => hol.and (hol.eq A v_4 y_5) (hol.and (Set_2Emember A y_5 __9507_2) (hol.not (hol.eq A y_5 __9508_3)))))) __9508_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 __9507_2) (hol.not (hol.eq A y_4 __9508_1)))))) (thm_426 A __9508_1 __9507_2) (thm_427 A __9508_1 __9507_2).

(; Theorem: |- (Data.Bool.! \lambda _9508. ((= ((Set.delete _9507) _9508)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) _9507)) (Data.Bool.~ ((= y) _9508)))))))) ;)

(; dict ;)

def thm_429 : A : hol.type -> __9507_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall A (__9508_2 : hol.term A => hol.eq (Set_2Eset A) (Set_2Edelete A __9507_1 __9508_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 __9507_1) (hol.not (hol.eq A y_4 __9508_2)))))))) :=
  A : hol.type => __9507_1 : hol.term (Set_2Eset A) => __9508_2 : hol.term A => thm_428 A __9508_2 __9507_1.

(; Theorem: |- (Data.Bool.! \lambda _9507. (Data.Bool.! \lambda _9508. ((= ((Set.delete _9507) _9508)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) _9507)) (Data.Bool.~ ((= y) _9508))))))))) ;)

(; dict ;)

def thm_430 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (__9507_1 : hol.term (Set_2Eset A) => hol.forall A (__9508_2 : hol.term A => hol.eq (Set_2Eset A) (Set_2Edelete A __9507_1 __9508_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 __9507_1) (hol.not (hol.eq A y_4 __9508_2))))))))) :=
  A : hol.type => __9507_1 : hol.term (Set_2Eset A) => thm_429 A __9507_1.

(; Theorem: |- ((= ((Set.delete s) x)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) s)) (Data.Bool.~ ((= y) x))))))) ;)

(; dict ;)

def thm_431 : A : hol.type -> x_1 : hol.term A -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Edelete A s_2 x_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 s_2) (hol.not (hol.eq A y_4 x_1))))))) :=
  A : hol.type => x_1 : hol.term A => s_2 : hol.term (Set_2Eset A) => (A : hol.type => __9508_1 : hol.term A => __9507_2 : hol.term (Set_2Eset A) => thm_430 A __9507_2 __9508_1) A x_1 s_2.

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) s)) (Data.Bool.~ ((= y) x))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) s)) (Data.Bool.~ ((= y) x))))))) ;)

(; dict ;)

def thm_432 : A : hol.type -> x_1 : hol.term A -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 s_2) (hol.not (hol.eq A y_4 x_1)))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 s_2) (hol.not (hol.eq A y_4 x_1))))))) :=
  A : hol.type => x_1 : hol.term A => s_2 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 s_2) (hol.not (hol.eq A y_4 x_1)))))).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) s)) (Data.Bool.~ ((= y) x))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) s)) (Data.Bool.~ ((= y) x))))))) ;)

(; dict ;)

def thm_433 : A : hol.type -> x_1 : hol.term A -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 s_2) (hol.not (hol.eq A y_4 x_1)))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 s_2) (hol.not (hol.eq A y_4 x_1))))))) :=
  A : hol.type => x_1 : hol.term A => s_2 : hol.term (Set_2Eset A) => hol.SYM (Set_2Eset A) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 s_2) (hol.not (hol.eq A y_4 x_1)))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 s_2) (hol.not (hol.eq A y_4 x_1)))))) (thm_432 A x_1 s_2).

(; Theorem: |- ((= ((Set.delete s) x)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) s)) (Data.Bool.~ ((= y) x))))))) ;)

(; dict ;)

def thm_434 : A : hol.type -> x_1 : hol.term A -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Edelete A s_2 x_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 s_2) (hol.not (hol.eq A y_4 x_1))))))) :=
  A : hol.type => x_1 : hol.term A => s_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset A) (Set_2Edelete A s_2 x_1) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 s_2) (hol.not (hol.eq A y_4 x_1)))))) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 s_2) (hol.not (hol.eq A y_4 x_1)))))) (thm_431 A x_1 s_2) (thm_433 A x_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((Set.delete s) x)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) s)) (Data.Bool.~ ((= y) x)))))))) ;)

(; dict ;)

def thm_435 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.eq (Set_2Eset A) (Set_2Edelete A s_1 x_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 s_1) (hol.not (hol.eq A y_4 x_2)))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => thm_434 A x_2 s_1.

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda x. ((= ((Set.delete s) x)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) s)) (Data.Bool.~ ((= y) x))))))))) ;)

(; dict ;)

def thm_436 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall A (x_2 : hol.term A => hol.eq (Set_2Eset A) (Set_2Edelete A s_1 x_2) (Set_2EfromPredicate A (v_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_4 : hol.term A => hol.and (hol.eq A v_3 y_4) (hol.and (Set_2Emember A y_4 s_1) (hol.not (hol.eq A y_4 x_2))))))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_435 A s_1.

(; Theorem: |- ((= Set.subset) \lambda _9519. \lambda _9520. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9519)) ((Set.member x) _9520)))) ;)

(; dict ;)

def thm_437 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool)) (Set_2Esubset A) (__9519_1 : hol.term (Set_2Eset A) => __9520_2 : hol.term (Set_2Eset A) => hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 __9519_1) (Set_2Emember A x_3 __9520_2)))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool)) (Set_2Esubset A).

(; Theorem: |- ((= _9519) _9519) ;)

(; dict ;)

def thm_438 : A : hol.type -> __9519_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9519_1 __9519_1) :=
  A : hol.type => __9519_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9519_1.

(; Theorem: |- ((= (Set.subset _9519)) (\lambda _9519. \lambda _9520. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9519)) ((Set.member x) _9520))) _9519)) ;)

(; dict ;)

def thm_439 : A : hol.type -> __9519_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (Set_2Esubset A __9519_1) ((__9519_2 : hol.term (Set_2Eset A) => __9520_3 : hol.term (Set_2Eset A) => hol.forall A (x_4 : hol.term A => hol.imp (Set_2Emember A x_4 __9519_2) (Set_2Emember A x_4 __9520_3))) __9519_1)) :=
  A : hol.type => __9519_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool) (Set_2Esubset A) (__9519_2 : hol.term (Set_2Eset A) => __9520_3 : hol.term (Set_2Eset A) => hol.forall A (x_4 : hol.term A => hol.imp (Set_2Emember A x_4 __9519_2) (Set_2Emember A x_4 __9520_3))) __9519_1 __9519_1 (thm_437 A) (thm_438 A __9519_1).

(; Theorem: |- ((= (\lambda _9519. \lambda _9520. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9519)) ((Set.member x) _9520))) _9519)) \lambda _9520. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9519)) ((Set.member x) _9520)))) ;)

(; dict ;)

def thm_440 : A : hol.type -> __9519_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) ((__9519_2 : hol.term (Set_2Eset A) => __9520_3 : hol.term (Set_2Eset A) => hol.forall A (x_4 : hol.term A => hol.imp (Set_2Emember A x_4 __9519_2) (Set_2Emember A x_4 __9520_3))) __9519_1) (__9520_2 : hol.term (Set_2Eset A) => hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 __9519_1) (Set_2Emember A x_3 __9520_2)))) :=
  A : hol.type => __9519_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool) (__9519_2 : hol.term (Set_2Eset A) => __9520_3 : hol.term (Set_2Eset A) => hol.forall A (x_4 : hol.term A => hol.imp (Set_2Emember A x_4 __9519_2) (Set_2Emember A x_4 __9520_3))) __9519_1.

(; Theorem: |- ((= (Set.subset _9519)) \lambda _9520. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9519)) ((Set.member x) _9520)))) ;)

(; dict ;)

def thm_441 : A : hol.type -> __9519_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (Set_2Esubset A __9519_1) (__9520_2 : hol.term (Set_2Eset A) => hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 __9519_1) (Set_2Emember A x_3 __9520_2)))) :=
  A : hol.type => __9519_1 : hol.term (Set_2Eset A) => hol.TRANS (hol.arr (Set_2Eset A) hol.bool) (Set_2Esubset A __9519_1) ((__9519_2 : hol.term (Set_2Eset A) => __9520_3 : hol.term (Set_2Eset A) => hol.forall A (x_4 : hol.term A => hol.imp (Set_2Emember A x_4 __9519_2) (Set_2Emember A x_4 __9520_3))) __9519_1) (__9520_2 : hol.term (Set_2Eset A) => hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 __9519_1) (Set_2Emember A x_3 __9520_2))) (thm_439 A __9519_1) (thm_440 A __9519_1).

(; Theorem: |- ((= _9520) _9520) ;)

(; dict ;)

def thm_442 : A : hol.type -> __9520_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9520_1 __9520_1) :=
  A : hol.type => __9520_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9520_1.

(; Theorem: |- ((= ((Set.subset _9519) _9520)) (\lambda _9520. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9519)) ((Set.member x) _9520))) _9520)) ;)

(; dict ;)

def thm_443 : A : hol.type -> __9520_1 : hol.term (Set_2Eset A) -> __9519_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2Esubset A __9519_2 __9520_1) ((__9520_3 : hol.term (Set_2Eset A) => hol.forall A (x_4 : hol.term A => hol.imp (Set_2Emember A x_4 __9519_2) (Set_2Emember A x_4 __9520_3))) __9520_1)) :=
  A : hol.type => __9520_1 : hol.term (Set_2Eset A) => __9519_2 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) hol.bool (Set_2Esubset A __9519_2) (__9520_3 : hol.term (Set_2Eset A) => hol.forall A (x_4 : hol.term A => hol.imp (Set_2Emember A x_4 __9519_2) (Set_2Emember A x_4 __9520_3))) __9520_1 __9520_1 (thm_441 A __9519_2) (thm_442 A __9520_1).

(; Theorem: |- ((= (\lambda _9520. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9519)) ((Set.member x) _9520))) _9520)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9519)) ((Set.member x) _9520)))) ;)

(; dict ;)

def thm_444 : A : hol.type -> __9520_1 : hol.term (Set_2Eset A) -> __9519_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((__9520_3 : hol.term (Set_2Eset A) => hol.forall A (x_4 : hol.term A => hol.imp (Set_2Emember A x_4 __9519_2) (Set_2Emember A x_4 __9520_3))) __9520_1) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 __9519_2) (Set_2Emember A x_3 __9520_1)))) :=
  A : hol.type => __9520_1 : hol.term (Set_2Eset A) => __9519_2 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) hol.bool (__9520_3 : hol.term (Set_2Eset A) => hol.forall A (x_4 : hol.term A => hol.imp (Set_2Emember A x_4 __9519_2) (Set_2Emember A x_4 __9520_3))) __9520_1.

(; Theorem: |- ((= ((Set.subset _9519) _9520)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9519)) ((Set.member x) _9520)))) ;)

(; dict ;)

def thm_445 : A : hol.type -> __9520_1 : hol.term (Set_2Eset A) -> __9519_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2Esubset A __9519_2 __9520_1) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 __9519_2) (Set_2Emember A x_3 __9520_1)))) :=
  A : hol.type => __9520_1 : hol.term (Set_2Eset A) => __9519_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (Set_2Esubset A __9519_2 __9520_1) ((__9520_3 : hol.term (Set_2Eset A) => hol.forall A (x_4 : hol.term A => hol.imp (Set_2Emember A x_4 __9519_2) (Set_2Emember A x_4 __9520_3))) __9520_1) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 __9519_2) (Set_2Emember A x_3 __9520_1))) (thm_443 A __9520_1 __9519_2) (thm_444 A __9520_1 __9519_2).

(; Theorem: |- (Data.Bool.! \lambda _9520. ((= ((Set.subset _9519) _9520)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9519)) ((Set.member x) _9520))))) ;)

(; dict ;)

def thm_446 : A : hol.type -> __9519_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (__9520_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2Esubset A __9519_1 __9520_2) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 __9519_1) (Set_2Emember A x_3 __9520_2))))) :=
  A : hol.type => __9519_1 : hol.term (Set_2Eset A) => __9520_2 : hol.term (Set_2Eset A) => thm_445 A __9520_2 __9519_1.

(; Theorem: |- (Data.Bool.! \lambda _9519. (Data.Bool.! \lambda _9520. ((= ((Set.subset _9519) _9520)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9519)) ((Set.member x) _9520)))))) ;)

(; dict ;)

def thm_447 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (__9519_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (__9520_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2Esubset A __9519_1 __9520_2) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 __9519_1) (Set_2Emember A x_3 __9520_2)))))) :=
  A : hol.type => __9519_1 : hol.term (Set_2Eset A) => thm_446 A __9519_1.

(; Theorem: |- ((= ((Set.subset s) t)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member x) t)))) ;)

(; dict ;)

def thm_448 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2Esubset A s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => (A : hol.type => __9520_1 : hol.term (Set_2Eset A) => __9519_2 : hol.term (Set_2Eset A) => thm_447 A __9519_2 __9520_1) A t_1 s_2.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member x) t)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member x) t)))) ;)

(; dict ;)

def thm_449 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member x) t)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member x) t)))) ;)

(; dict ;)

def thm_450 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.SYM hol.bool (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (thm_449 A t_1 s_2).

(; Theorem: |- ((= ((Set.subset s) t)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member x) t)))) ;)

(; dict ;)

def thm_451 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2Esubset A s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (Set_2Esubset A s_2 t_1) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (thm_448 A t_1 s_2) (thm_450 A t_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Set.subset s) t)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member x) t))))) ;)

(; dict ;)

def thm_452 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2Esubset A s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => t_2 : hol.term (Set_2Eset A) => thm_451 A t_2 s_1.

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.subset s) t)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member x) t)))))) ;)

(; dict ;)

def thm_453 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2Esubset A s_1 t_2) (hol.forall A (x_3 : hol.term A => hol.imp (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2)))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_452 A s_1.

(; Theorem: |- ((= Set.properSubset) \lambda _9531. \lambda _9532. ((Data.Bool./\ ((Set.subset _9531) _9532)) (Data.Bool.~ ((= _9531) _9532)))) ;)

(; dict ;)

def thm_454 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool)) (Set_2EproperSubset A) (__9531_1 : hol.term (Set_2Eset A) => __9532_2 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_1 __9532_2) (hol.not (hol.eq (Set_2Eset A) __9531_1 __9532_2)))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool)) (Set_2EproperSubset A).

(; Theorem: |- ((= _9531) _9531) ;)

(; dict ;)

def thm_455 : A : hol.type -> __9531_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9531_1 __9531_1) :=
  A : hol.type => __9531_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9531_1.

(; Theorem: |- ((= (Set.properSubset _9531)) (\lambda _9531. \lambda _9532. ((Data.Bool./\ ((Set.subset _9531) _9532)) (Data.Bool.~ ((= _9531) _9532))) _9531)) ;)

(; dict ;)

def thm_456 : A : hol.type -> __9531_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (Set_2EproperSubset A __9531_1) ((__9531_2 : hol.term (Set_2Eset A) => __9532_3 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_2 __9532_3) (hol.not (hol.eq (Set_2Eset A) __9531_2 __9532_3))) __9531_1)) :=
  A : hol.type => __9531_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool) (Set_2EproperSubset A) (__9531_2 : hol.term (Set_2Eset A) => __9532_3 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_2 __9532_3) (hol.not (hol.eq (Set_2Eset A) __9531_2 __9532_3))) __9531_1 __9531_1 (thm_454 A) (thm_455 A __9531_1).

(; Theorem: |- ((= (\lambda _9531. \lambda _9532. ((Data.Bool./\ ((Set.subset _9531) _9532)) (Data.Bool.~ ((= _9531) _9532))) _9531)) \lambda _9532. ((Data.Bool./\ ((Set.subset _9531) _9532)) (Data.Bool.~ ((= _9531) _9532)))) ;)

(; dict ;)

def thm_457 : A : hol.type -> __9531_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) ((__9531_2 : hol.term (Set_2Eset A) => __9532_3 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_2 __9532_3) (hol.not (hol.eq (Set_2Eset A) __9531_2 __9532_3))) __9531_1) (__9532_2 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_1 __9532_2) (hol.not (hol.eq (Set_2Eset A) __9531_1 __9532_2)))) :=
  A : hol.type => __9531_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool) (__9531_2 : hol.term (Set_2Eset A) => __9532_3 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_2 __9532_3) (hol.not (hol.eq (Set_2Eset A) __9531_2 __9532_3))) __9531_1.

(; Theorem: |- ((= (Set.properSubset _9531)) \lambda _9532. ((Data.Bool./\ ((Set.subset _9531) _9532)) (Data.Bool.~ ((= _9531) _9532)))) ;)

(; dict ;)

def thm_458 : A : hol.type -> __9531_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (Set_2EproperSubset A __9531_1) (__9532_2 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_1 __9532_2) (hol.not (hol.eq (Set_2Eset A) __9531_1 __9532_2)))) :=
  A : hol.type => __9531_1 : hol.term (Set_2Eset A) => hol.TRANS (hol.arr (Set_2Eset A) hol.bool) (Set_2EproperSubset A __9531_1) ((__9531_2 : hol.term (Set_2Eset A) => __9532_3 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_2 __9532_3) (hol.not (hol.eq (Set_2Eset A) __9531_2 __9532_3))) __9531_1) (__9532_2 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_1 __9532_2) (hol.not (hol.eq (Set_2Eset A) __9531_1 __9532_2))) (thm_456 A __9531_1) (thm_457 A __9531_1).

(; Theorem: |- ((= _9532) _9532) ;)

(; dict ;)

def thm_459 : A : hol.type -> __9532_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9532_1 __9532_1) :=
  A : hol.type => __9532_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9532_1.

(; Theorem: |- ((= ((Set.properSubset _9531) _9532)) (\lambda _9532. ((Data.Bool./\ ((Set.subset _9531) _9532)) (Data.Bool.~ ((= _9531) _9532))) _9532)) ;)

(; dict ;)

def thm_460 : A : hol.type -> __9532_1 : hol.term (Set_2Eset A) -> __9531_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2EproperSubset A __9531_2 __9532_1) ((__9532_3 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_2 __9532_3) (hol.not (hol.eq (Set_2Eset A) __9531_2 __9532_3))) __9532_1)) :=
  A : hol.type => __9532_1 : hol.term (Set_2Eset A) => __9531_2 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) hol.bool (Set_2EproperSubset A __9531_2) (__9532_3 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_2 __9532_3) (hol.not (hol.eq (Set_2Eset A) __9531_2 __9532_3))) __9532_1 __9532_1 (thm_458 A __9531_2) (thm_459 A __9532_1).

(; Theorem: |- ((= (\lambda _9532. ((Data.Bool./\ ((Set.subset _9531) _9532)) (Data.Bool.~ ((= _9531) _9532))) _9532)) ((Data.Bool./\ ((Set.subset _9531) _9532)) (Data.Bool.~ ((= _9531) _9532)))) ;)

(; dict ;)

def thm_461 : A : hol.type -> __9532_1 : hol.term (Set_2Eset A) -> __9531_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((__9532_3 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_2 __9532_3) (hol.not (hol.eq (Set_2Eset A) __9531_2 __9532_3))) __9532_1) (hol.and (Set_2Esubset A __9531_2 __9532_1) (hol.not (hol.eq (Set_2Eset A) __9531_2 __9532_1)))) :=
  A : hol.type => __9532_1 : hol.term (Set_2Eset A) => __9531_2 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) hol.bool (__9532_3 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_2 __9532_3) (hol.not (hol.eq (Set_2Eset A) __9531_2 __9532_3))) __9532_1.

(; Theorem: |- ((= ((Set.properSubset _9531) _9532)) ((Data.Bool./\ ((Set.subset _9531) _9532)) (Data.Bool.~ ((= _9531) _9532)))) ;)

(; dict ;)

def thm_462 : A : hol.type -> __9532_1 : hol.term (Set_2Eset A) -> __9531_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2EproperSubset A __9531_2 __9532_1) (hol.and (Set_2Esubset A __9531_2 __9532_1) (hol.not (hol.eq (Set_2Eset A) __9531_2 __9532_1)))) :=
  A : hol.type => __9532_1 : hol.term (Set_2Eset A) => __9531_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (Set_2EproperSubset A __9531_2 __9532_1) ((__9532_3 : hol.term (Set_2Eset A) => hol.and (Set_2Esubset A __9531_2 __9532_3) (hol.not (hol.eq (Set_2Eset A) __9531_2 __9532_3))) __9532_1) (hol.and (Set_2Esubset A __9531_2 __9532_1) (hol.not (hol.eq (Set_2Eset A) __9531_2 __9532_1))) (thm_460 A __9532_1 __9531_2) (thm_461 A __9532_1 __9531_2).

(; Theorem: |- (Data.Bool.! \lambda _9532. ((= ((Set.properSubset _9531) _9532)) ((Data.Bool./\ ((Set.subset _9531) _9532)) (Data.Bool.~ ((= _9531) _9532))))) ;)

(; dict ;)

def thm_463 : A : hol.type -> __9531_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (__9532_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2EproperSubset A __9531_1 __9532_2) (hol.and (Set_2Esubset A __9531_1 __9532_2) (hol.not (hol.eq (Set_2Eset A) __9531_1 __9532_2))))) :=
  A : hol.type => __9531_1 : hol.term (Set_2Eset A) => __9532_2 : hol.term (Set_2Eset A) => thm_462 A __9532_2 __9531_1.

(; Theorem: |- (Data.Bool.! \lambda _9531. (Data.Bool.! \lambda _9532. ((= ((Set.properSubset _9531) _9532)) ((Data.Bool./\ ((Set.subset _9531) _9532)) (Data.Bool.~ ((= _9531) _9532)))))) ;)

(; dict ;)

def thm_464 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (__9531_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (__9532_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2EproperSubset A __9531_1 __9532_2) (hol.and (Set_2Esubset A __9531_1 __9532_2) (hol.not (hol.eq (Set_2Eset A) __9531_1 __9532_2)))))) :=
  A : hol.type => __9531_1 : hol.term (Set_2Eset A) => thm_463 A __9531_1.

(; Theorem: |- ((= ((Set.properSubset s) t)) ((Data.Bool./\ ((Set.subset s) t)) (Data.Bool.~ ((= s) t)))) ;)

(; dict ;)

def thm_465 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2EproperSubset A s_2 t_1) (hol.and (Set_2Esubset A s_2 t_1) (hol.not (hol.eq (Set_2Eset A) s_2 t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => (A : hol.type => __9532_1 : hol.term (Set_2Eset A) => __9531_2 : hol.term (Set_2Eset A) => thm_464 A __9531_2 __9532_1) A t_1 s_2.

(; Theorem: |- ((= ((Data.Bool./\ ((Set.subset s) t)) (Data.Bool.~ ((= s) t)))) ((Data.Bool./\ ((Set.subset s) t)) (Data.Bool.~ ((= s) t)))) ;)

(; dict ;)

def thm_466 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.and (Set_2Esubset A s_2 t_1) (hol.not (hol.eq (Set_2Eset A) s_2 t_1))) (hol.and (Set_2Esubset A s_2 t_1) (hol.not (hol.eq (Set_2Eset A) s_2 t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.and (Set_2Esubset A s_2 t_1) (hol.not (hol.eq (Set_2Eset A) s_2 t_1))).

(; Theorem: |- ((= ((Data.Bool./\ ((Set.subset s) t)) (Data.Bool.~ ((= s) t)))) ((Data.Bool./\ ((Set.subset s) t)) (Data.Bool.~ ((= s) t)))) ;)

(; dict ;)

def thm_467 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.and (Set_2Esubset A s_2 t_1) (hol.not (hol.eq (Set_2Eset A) s_2 t_1))) (hol.and (Set_2Esubset A s_2 t_1) (hol.not (hol.eq (Set_2Eset A) s_2 t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.SYM hol.bool (hol.and (Set_2Esubset A s_2 t_1) (hol.not (hol.eq (Set_2Eset A) s_2 t_1))) (hol.and (Set_2Esubset A s_2 t_1) (hol.not (hol.eq (Set_2Eset A) s_2 t_1))) (thm_466 A t_1 s_2).

(; Theorem: |- ((= ((Set.properSubset s) t)) ((Data.Bool./\ ((Set.subset s) t)) (Data.Bool.~ ((= s) t)))) ;)

(; dict ;)

def thm_468 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2EproperSubset A s_2 t_1) (hol.and (Set_2Esubset A s_2 t_1) (hol.not (hol.eq (Set_2Eset A) s_2 t_1)))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (Set_2EproperSubset A s_2 t_1) (hol.and (Set_2Esubset A s_2 t_1) (hol.not (hol.eq (Set_2Eset A) s_2 t_1))) (hol.and (Set_2Esubset A s_2 t_1) (hol.not (hol.eq (Set_2Eset A) s_2 t_1))) (thm_465 A t_1 s_2) (thm_467 A t_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Set.properSubset s) t)) ((Data.Bool./\ ((Set.subset s) t)) (Data.Bool.~ ((= s) t))))) ;)

(; dict ;)

def thm_469 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2EproperSubset A s_1 t_2) (hol.and (Set_2Esubset A s_1 t_2) (hol.not (hol.eq (Set_2Eset A) s_1 t_2))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => t_2 : hol.term (Set_2Eset A) => thm_468 A t_2 s_1.

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.properSubset s) t)) ((Data.Bool./\ ((Set.subset s) t)) (Data.Bool.~ ((= s) t)))))) ;)

(; dict ;)

def thm_470 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2EproperSubset A s_1 t_2) (hol.and (Set_2Esubset A s_1 t_2) (hol.not (hol.eq (Set_2Eset A) s_1 t_2)))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_469 A s_1.

(; Theorem: |- ((= Set.disjoint) \lambda _9543. \lambda _9544. ((= ((Set.intersect _9543) _9544)) Set.{})) ;)

(; dict ;)

def thm_471 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool)) (Set_2Edisjoint A) (__9543_1 : hol.term (Set_2Eset A) => __9544_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_1 __9544_2) (Set_2E_7B_7D A))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool)) (Set_2Edisjoint A).

(; Theorem: |- ((= _9543) _9543) ;)

(; dict ;)

def thm_472 : A : hol.type -> __9543_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9543_1 __9543_1) :=
  A : hol.type => __9543_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9543_1.

(; Theorem: |- ((= (Set.disjoint _9543)) (\lambda _9543. \lambda _9544. ((= ((Set.intersect _9543) _9544)) Set.{}) _9543)) ;)

(; dict ;)

def thm_473 : A : hol.type -> __9543_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (Set_2Edisjoint A __9543_1) ((__9543_2 : hol.term (Set_2Eset A) => __9544_3 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_2 __9544_3) (Set_2E_7B_7D A)) __9543_1)) :=
  A : hol.type => __9543_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool) (Set_2Edisjoint A) (__9543_2 : hol.term (Set_2Eset A) => __9544_3 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_2 __9544_3) (Set_2E_7B_7D A)) __9543_1 __9543_1 (thm_471 A) (thm_472 A __9543_1).

(; Theorem: |- ((= (\lambda _9543. \lambda _9544. ((= ((Set.intersect _9543) _9544)) Set.{}) _9543)) \lambda _9544. ((= ((Set.intersect _9543) _9544)) Set.{})) ;)

(; dict ;)

def thm_474 : A : hol.type -> __9543_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) ((__9543_2 : hol.term (Set_2Eset A) => __9544_3 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_2 __9544_3) (Set_2E_7B_7D A)) __9543_1) (__9544_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_1 __9544_2) (Set_2E_7B_7D A))) :=
  A : hol.type => __9543_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (hol.arr (Set_2Eset A) hol.bool) (__9543_2 : hol.term (Set_2Eset A) => __9544_3 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_2 __9544_3) (Set_2E_7B_7D A)) __9543_1.

(; Theorem: |- ((= (Set.disjoint _9543)) \lambda _9544. ((= ((Set.intersect _9543) _9544)) Set.{})) ;)

(; dict ;)

def thm_475 : A : hol.type -> __9543_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (Set_2Edisjoint A __9543_1) (__9544_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_1 __9544_2) (Set_2E_7B_7D A))) :=
  A : hol.type => __9543_1 : hol.term (Set_2Eset A) => hol.TRANS (hol.arr (Set_2Eset A) hol.bool) (Set_2Edisjoint A __9543_1) ((__9543_2 : hol.term (Set_2Eset A) => __9544_3 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_2 __9544_3) (Set_2E_7B_7D A)) __9543_1) (__9544_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_1 __9544_2) (Set_2E_7B_7D A)) (thm_473 A __9543_1) (thm_474 A __9543_1).

(; Theorem: |- ((= _9544) _9544) ;)

(; dict ;)

def thm_476 : A : hol.type -> __9544_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9544_1 __9544_1) :=
  A : hol.type => __9544_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9544_1.

(; Theorem: |- ((= ((Set.disjoint _9543) _9544)) (\lambda _9544. ((= ((Set.intersect _9543) _9544)) Set.{}) _9544)) ;)

(; dict ;)

def thm_477 : A : hol.type -> __9544_1 : hol.term (Set_2Eset A) -> __9543_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2Edisjoint A __9543_2 __9544_1) ((__9544_3 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_2 __9544_3) (Set_2E_7B_7D A)) __9544_1)) :=
  A : hol.type => __9544_1 : hol.term (Set_2Eset A) => __9543_2 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) hol.bool (Set_2Edisjoint A __9543_2) (__9544_3 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_2 __9544_3) (Set_2E_7B_7D A)) __9544_1 __9544_1 (thm_475 A __9543_2) (thm_476 A __9544_1).

(; Theorem: |- ((= (\lambda _9544. ((= ((Set.intersect _9543) _9544)) Set.{}) _9544)) ((= ((Set.intersect _9543) _9544)) Set.{})) ;)

(; dict ;)

def thm_478 : A : hol.type -> __9544_1 : hol.term (Set_2Eset A) -> __9543_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((__9544_3 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_2 __9544_3) (Set_2E_7B_7D A)) __9544_1) (hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_2 __9544_1) (Set_2E_7B_7D A))) :=
  A : hol.type => __9544_1 : hol.term (Set_2Eset A) => __9543_2 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) hol.bool (__9544_3 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_2 __9544_3) (Set_2E_7B_7D A)) __9544_1.

(; Theorem: |- ((= ((Set.disjoint _9543) _9544)) ((= ((Set.intersect _9543) _9544)) Set.{})) ;)

(; dict ;)

def thm_479 : A : hol.type -> __9544_1 : hol.term (Set_2Eset A) -> __9543_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2Edisjoint A __9543_2 __9544_1) (hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_2 __9544_1) (Set_2E_7B_7D A))) :=
  A : hol.type => __9544_1 : hol.term (Set_2Eset A) => __9543_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (Set_2Edisjoint A __9543_2 __9544_1) ((__9544_3 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_2 __9544_3) (Set_2E_7B_7D A)) __9544_1) (hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_2 __9544_1) (Set_2E_7B_7D A)) (thm_477 A __9544_1 __9543_2) (thm_478 A __9544_1 __9543_2).

(; Theorem: |- (Data.Bool.! \lambda _9544. ((= ((Set.disjoint _9543) _9544)) ((= ((Set.intersect _9543) _9544)) Set.{}))) ;)

(; dict ;)

def thm_480 : A : hol.type -> __9543_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (__9544_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2Edisjoint A __9543_1 __9544_2) (hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_1 __9544_2) (Set_2E_7B_7D A)))) :=
  A : hol.type => __9543_1 : hol.term (Set_2Eset A) => __9544_2 : hol.term (Set_2Eset A) => thm_479 A __9544_2 __9543_1.

(; Theorem: |- (Data.Bool.! \lambda _9543. (Data.Bool.! \lambda _9544. ((= ((Set.disjoint _9543) _9544)) ((= ((Set.intersect _9543) _9544)) Set.{})))) ;)

(; dict ;)

def thm_481 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (__9543_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (__9544_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2Edisjoint A __9543_1 __9544_2) (hol.eq (Set_2Eset A) (Set_2Eintersect A __9543_1 __9544_2) (Set_2E_7B_7D A))))) :=
  A : hol.type => __9543_1 : hol.term (Set_2Eset A) => thm_480 A __9543_1.

(; Theorem: |- ((= ((Set.disjoint s) t)) ((= ((Set.intersect s) t)) Set.{})) ;)

(; dict ;)

def thm_482 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2Edisjoint A s_2 t_1) (hol.eq (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2E_7B_7D A))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => (A : hol.type => __9544_1 : hol.term (Set_2Eset A) => __9543_2 : hol.term (Set_2Eset A) => thm_481 A __9543_2 __9544_1) A t_1 s_2.

(; Theorem: |- ((= ((= ((Set.intersect s) t)) Set.{})) ((= ((Set.intersect s) t)) Set.{})) ;)

(; dict ;)

def thm_483 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2E_7B_7D A)) (hol.eq (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2E_7B_7D A))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.eq (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2E_7B_7D A)).

(; Theorem: |- ((= ((= ((Set.intersect s) t)) Set.{})) ((= ((Set.intersect s) t)) Set.{})) ;)

(; dict ;)

def thm_484 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2E_7B_7D A)) (hol.eq (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2E_7B_7D A))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.SYM hol.bool (hol.eq (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2E_7B_7D A)) (hol.eq (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2E_7B_7D A)) (thm_483 A t_1 s_2).

(; Theorem: |- ((= ((Set.disjoint s) t)) ((= ((Set.intersect s) t)) Set.{})) ;)

(; dict ;)

def thm_485 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2Edisjoint A s_2 t_1) (hol.eq (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2E_7B_7D A))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (Set_2Edisjoint A s_2 t_1) (hol.eq (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2E_7B_7D A)) (hol.eq (Set_2Eset A) (Set_2Eintersect A s_2 t_1) (Set_2E_7B_7D A)) (thm_482 A t_1 s_2) (thm_484 A t_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Set.disjoint s) t)) ((= ((Set.intersect s) t)) Set.{}))) ;)

(; dict ;)

def thm_486 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2Edisjoint A s_1 t_2) (hol.eq (Set_2Eset A) (Set_2Eintersect A s_1 t_2) (Set_2E_7B_7D A)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => t_2 : hol.term (Set_2Eset A) => thm_485 A t_2 s_1.

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.disjoint s) t)) ((= ((Set.intersect s) t)) Set.{})))) ;)

(; dict ;)

def thm_487 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2Edisjoint A s_1 t_2) (hol.eq (Set_2Eset A) (Set_2Eintersect A s_1 t_2) (Set_2E_7B_7D A))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_486 A s_1.

(; Theorem: |- ((= Set.singleton) \lambda _9555. (Data.Bool.? \lambda x. ((= _9555) ((Set.insert x) Set.{})))) ;)

(; dict ;)

def thm_488 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (Set_2Esingleton A) (__9555_1 : hol.term (Set_2Eset A) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) __9555_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A))))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset A) hol.bool) (Set_2Esingleton A).

(; Theorem: |- ((= _9555) _9555) ;)

(; dict ;)

def thm_489 : A : hol.type -> __9555_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9555_1 __9555_1) :=
  A : hol.type => __9555_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9555_1.

(; Theorem: |- ((= (Set.singleton _9555)) (\lambda _9555. (Data.Bool.? \lambda x. ((= _9555) ((Set.insert x) Set.{}))) _9555)) ;)

(; dict ;)

def thm_490 : A : hol.type -> __9555_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2Esingleton A __9555_1) ((__9555_2 : hol.term (Set_2Eset A) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq (Set_2Eset A) __9555_2 (Set_2Einsert A x_3 (Set_2E_7B_7D A)))) __9555_1)) :=
  A : hol.type => __9555_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) hol.bool (Set_2Esingleton A) (__9555_2 : hol.term (Set_2Eset A) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq (Set_2Eset A) __9555_2 (Set_2Einsert A x_3 (Set_2E_7B_7D A)))) __9555_1 __9555_1 (thm_488 A) (thm_489 A __9555_1).

(; Theorem: |- ((= (\lambda _9555. (Data.Bool.? \lambda x. ((= _9555) ((Set.insert x) Set.{}))) _9555)) (Data.Bool.? \lambda x. ((= _9555) ((Set.insert x) Set.{})))) ;)

(; dict ;)

def thm_491 : A : hol.type -> __9555_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((__9555_2 : hol.term (Set_2Eset A) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq (Set_2Eset A) __9555_2 (Set_2Einsert A x_3 (Set_2E_7B_7D A)))) __9555_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) __9555_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A))))) :=
  A : hol.type => __9555_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) hol.bool (__9555_2 : hol.term (Set_2Eset A) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq (Set_2Eset A) __9555_2 (Set_2Einsert A x_3 (Set_2E_7B_7D A)))) __9555_1.

(; Theorem: |- ((= (Set.singleton _9555)) (Data.Bool.? \lambda x. ((= _9555) ((Set.insert x) Set.{})))) ;)

(; dict ;)

def thm_492 : A : hol.type -> __9555_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2Esingleton A __9555_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) __9555_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A))))) :=
  A : hol.type => __9555_1 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (Set_2Esingleton A __9555_1) ((__9555_2 : hol.term (Set_2Eset A) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq (Set_2Eset A) __9555_2 (Set_2Einsert A x_3 (Set_2E_7B_7D A)))) __9555_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) __9555_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A)))) (thm_490 A __9555_1) (thm_491 A __9555_1).

(; Theorem: |- (Data.Bool.! \lambda _9555. ((= (Set.singleton _9555)) (Data.Bool.? \lambda x. ((= _9555) ((Set.insert x) Set.{}))))) ;)

(; dict ;)

def thm_493 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (__9555_1 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2Esingleton A __9555_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) __9555_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A)))))) :=
  A : hol.type => __9555_1 : hol.term (Set_2Eset A) => thm_492 A __9555_1.

(; Theorem: |- ((= (Set.singleton s)) (Data.Bool.? \lambda x. ((= s) ((Set.insert x) Set.{})))) ;)

(; dict ;)

def thm_494 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2Esingleton A s_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) s_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => (A : hol.type => __9555_1 : hol.term (Set_2Eset A) => thm_493 A __9555_1) A s_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((= s) ((Set.insert x) Set.{})))) (Data.Bool.? \lambda x. ((= s) ((Set.insert x) Set.{})))) ;)

(; dict ;)

def thm_495 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) s_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) s_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) s_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A)))).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((= s) ((Set.insert x) Set.{})))) (Data.Bool.? \lambda x. ((= s) ((Set.insert x) Set.{})))) ;)

(; dict ;)

def thm_496 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) s_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) s_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) s_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) s_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A)))) (thm_495 A s_1).

(; Theorem: |- ((= (Set.singleton s)) (Data.Bool.? \lambda x. ((= s) ((Set.insert x) Set.{})))) ;)

(; dict ;)

def thm_497 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2Esingleton A s_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) s_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (Set_2Esingleton A s_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) s_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) s_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A)))) (thm_494 A s_1) (thm_496 A s_1).

(; Theorem: |- (Data.Bool.! \lambda s. ((= (Set.singleton s)) (Data.Bool.? \lambda x. ((= s) ((Set.insert x) Set.{}))))) ;)

(; dict ;)

def thm_498 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.eq hol.bool (Set_2Esingleton A s_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.eq (Set_2Eset A) s_1 (Set_2Einsert A x_2 (Set_2E_7B_7D A)))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_497 A s_1.

(; Theorem: |- ((= Set.image) \lambda _9560. \lambda _9561. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) _9561)) ((= y) (_9560 x)))))))) ;)

(; dict ;)

def thm_499 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr (Set_2Eset A) (Set_2Eset B))) (Set_2Eimage B A) (__9560_1 : hol.term (hol.arr A B) => __9561_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 __9561_2) (hol.eq B y_4 (__9560_1 x_5)))))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A B) (hol.arr (Set_2Eset A) (Set_2Eset B))) (Set_2Eimage B A).

(; Theorem: |- ((= _9560) _9560) ;)

(; dict ;)

def thm_500 : B : hol.type -> A : hol.type -> __9560_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) __9560_1 __9560_1) :=
  B : hol.type => A : hol.type => __9560_1 : hol.term (hol.arr A B) => hol.REFL (hol.arr A B) __9560_1.

(; Theorem: |- ((= (Set.image _9560)) (\lambda _9560. \lambda _9561. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) _9561)) ((= y) (_9560 x))))))) _9560)) ;)

(; dict ;)

def thm_501 : B : hol.type -> A : hol.type -> __9560_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset B)) (Set_2Eimage B A __9560_1) ((__9560_2 : hol.term (hol.arr A B) => __9561_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq B v_4 y_5) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => hol.and (Set_2Emember A x_6 __9561_3) (hol.eq B y_5 (__9560_2 x_6))))))) __9560_1)) :=
  B : hol.type => A : hol.type => __9560_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A B) (hol.arr (Set_2Eset A) (Set_2Eset B)) (Set_2Eimage B A) (__9560_2 : hol.term (hol.arr A B) => __9561_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq B v_4 y_5) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => hol.and (Set_2Emember A x_6 __9561_3) (hol.eq B y_5 (__9560_2 x_6))))))) __9560_1 __9560_1 (thm_499 B A) (thm_500 B A __9560_1).

(; Theorem: |- ((= (\lambda _9560. \lambda _9561. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) _9561)) ((= y) (_9560 x))))))) _9560)) \lambda _9561. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) _9561)) ((= y) (_9560 x)))))))) ;)

(; dict ;)

def thm_502 : B : hol.type -> A : hol.type -> __9560_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset B)) ((__9560_2 : hol.term (hol.arr A B) => __9561_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq B v_4 y_5) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => hol.and (Set_2Emember A x_6 __9561_3) (hol.eq B y_5 (__9560_2 x_6))))))) __9560_1) (__9561_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 __9561_2) (hol.eq B y_4 (__9560_1 x_5)))))))) :=
  B : hol.type => A : hol.type => __9560_1 : hol.term (hol.arr A B) => hol.BETA_CONV (hol.arr A B) (hol.arr (Set_2Eset A) (Set_2Eset B)) (__9560_2 : hol.term (hol.arr A B) => __9561_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq B v_4 y_5) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => hol.and (Set_2Emember A x_6 __9561_3) (hol.eq B y_5 (__9560_2 x_6))))))) __9560_1.

(; Theorem: |- ((= (Set.image _9560)) \lambda _9561. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) _9561)) ((= y) (_9560 x)))))))) ;)

(; dict ;)

def thm_503 : B : hol.type -> A : hol.type -> __9560_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset B)) (Set_2Eimage B A __9560_1) (__9561_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 __9561_2) (hol.eq B y_4 (__9560_1 x_5)))))))) :=
  B : hol.type => A : hol.type => __9560_1 : hol.term (hol.arr A B) => hol.TRANS (hol.arr (Set_2Eset A) (Set_2Eset B)) (Set_2Eimage B A __9560_1) ((__9560_2 : hol.term (hol.arr A B) => __9561_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq B v_4 y_5) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => hol.and (Set_2Emember A x_6 __9561_3) (hol.eq B y_5 (__9560_2 x_6))))))) __9560_1) (__9561_2 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 __9561_2) (hol.eq B y_4 (__9560_1 x_5))))))) (thm_501 B A __9560_1) (thm_502 B A __9560_1).

(; Theorem: |- ((= _9561) _9561) ;)

(; dict ;)

def thm_504 : A : hol.type -> __9561_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9561_1 __9561_1) :=
  A : hol.type => __9561_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9561_1.

(; Theorem: |- ((= ((Set.image _9560) _9561)) (\lambda _9561. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) _9561)) ((= y) (_9560 x))))))) _9561)) ;)

(; dict ;)

def thm_505 : A : hol.type -> B : hol.type -> __9561_1 : hol.term (Set_2Eset A) -> __9560_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (Set_2Eset B) (Set_2Eimage B A __9560_2 __9561_1) ((__9561_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq B v_4 y_5) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => hol.and (Set_2Emember A x_6 __9561_3) (hol.eq B y_5 (__9560_2 x_6))))))) __9561_1)) :=
  A : hol.type => B : hol.type => __9561_1 : hol.term (Set_2Eset A) => __9560_2 : hol.term (hol.arr A B) => hol.APP_THM (Set_2Eset A) (Set_2Eset B) (Set_2Eimage B A __9560_2) (__9561_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq B v_4 y_5) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => hol.and (Set_2Emember A x_6 __9561_3) (hol.eq B y_5 (__9560_2 x_6))))))) __9561_1 __9561_1 (thm_503 B A __9560_2) (thm_504 A __9561_1).

(; Theorem: |- ((= (\lambda _9561. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) _9561)) ((= y) (_9560 x))))))) _9561)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) _9561)) ((= y) (_9560 x)))))))) ;)

(; dict ;)

def thm_506 : A : hol.type -> B : hol.type -> __9561_1 : hol.term (Set_2Eset A) -> __9560_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (Set_2Eset B) ((__9561_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq B v_4 y_5) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => hol.and (Set_2Emember A x_6 __9561_3) (hol.eq B y_5 (__9560_2 x_6))))))) __9561_1) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 __9561_1) (hol.eq B y_4 (__9560_2 x_5)))))))) :=
  A : hol.type => B : hol.type => __9561_1 : hol.term (Set_2Eset A) => __9560_2 : hol.term (hol.arr A B) => hol.BETA_CONV (Set_2Eset A) (Set_2Eset B) (__9561_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq B v_4 y_5) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => hol.and (Set_2Emember A x_6 __9561_3) (hol.eq B y_5 (__9560_2 x_6))))))) __9561_1.

(; Theorem: |- ((= ((Set.image _9560) _9561)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) _9561)) ((= y) (_9560 x)))))))) ;)

(; dict ;)

def thm_507 : A : hol.type -> B : hol.type -> __9561_1 : hol.term (Set_2Eset A) -> __9560_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (Set_2Eset B) (Set_2Eimage B A __9560_2 __9561_1) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 __9561_1) (hol.eq B y_4 (__9560_2 x_5)))))))) :=
  A : hol.type => B : hol.type => __9561_1 : hol.term (Set_2Eset A) => __9560_2 : hol.term (hol.arr A B) => hol.TRANS (Set_2Eset B) (Set_2Eimage B A __9560_2 __9561_1) ((__9561_3 : hol.term (Set_2Eset A) => Set_2EfromPredicate B (v_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.and (hol.eq B v_4 y_5) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_6 : hol.term A => hol.and (Set_2Emember A x_6 __9561_3) (hol.eq B y_5 (__9560_2 x_6))))))) __9561_1) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 __9561_1) (hol.eq B y_4 (__9560_2 x_5))))))) (thm_505 A B __9561_1 __9560_2) (thm_506 A B __9561_1 __9560_2).

(; Theorem: |- (Data.Bool.! \lambda _9561. ((= ((Set.image _9560) _9561)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) _9561)) ((= y) (_9560 x))))))))) ;)

(; dict ;)

def thm_508 : B : hol.type -> A : hol.type -> __9560_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall (Set_2Eset A) (__9561_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset B) (Set_2Eimage B A __9560_1 __9561_2) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 __9561_2) (hol.eq B y_4 (__9560_1 x_5))))))))) :=
  B : hol.type => A : hol.type => __9560_1 : hol.term (hol.arr A B) => __9561_2 : hol.term (Set_2Eset A) => thm_507 A B __9561_2 __9560_1.

(; Theorem: |- (Data.Bool.! \lambda _9560. (Data.Bool.! \lambda _9561. ((= ((Set.image _9560) _9561)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) _9561)) ((= y) (_9560 x)))))))))) ;)

(; dict ;)

def thm_509 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (__9560_1 : hol.term (hol.arr A B) => hol.forall (Set_2Eset A) (__9561_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset B) (Set_2Eimage B A __9560_1 __9561_2) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 __9561_2) (hol.eq B y_4 (__9560_1 x_5)))))))))) :=
  B : hol.type => A : hol.type => __9560_1 : hol.term (hol.arr A B) => thm_508 B A __9560_1.

(; Theorem: |- ((= ((Set.image f) s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) s)) ((= y) (f x)))))))) ;)

(; dict ;)

def thm_510 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (Set_2Eset B) (Set_2Eimage B A f_2 s_1) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 s_1) (hol.eq B y_4 (f_2 x_5)))))))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => f_2 : hol.term (hol.arr A B) => (A : hol.type => B : hol.type => __9561_1 : hol.term (Set_2Eset A) => __9560_2 : hol.term (hol.arr A B) => thm_509 B A __9560_2 __9561_1) A B s_1 f_2.

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) s)) ((= y) (f x)))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) s)) ((= y) (f x)))))))) ;)

(; dict ;)

def thm_511 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset B) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 s_2) (hol.eq B y_4 (f_1 x_5))))))) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 s_2) (hol.eq B y_4 (f_1 x_5)))))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => s_2 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset B) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 s_2) (hol.eq B y_4 (f_1 x_5))))))).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) s)) ((= y) (f x)))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) s)) ((= y) (f x)))))))) ;)

(; dict ;)

def thm_512 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset B) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 s_2) (hol.eq B y_4 (f_1 x_5))))))) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 s_2) (hol.eq B y_4 (f_1 x_5)))))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => s_2 : hol.term (Set_2Eset A) => hol.SYM (Set_2Eset B) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 s_2) (hol.eq B y_4 (f_1 x_5))))))) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 s_2) (hol.eq B y_4 (f_1 x_5))))))) (thm_511 A B f_1 s_2).

(; Theorem: |- ((= ((Set.image f) s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) s)) ((= y) (f x)))))))) ;)

(; dict ;)

def thm_513 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (Set_2Eset B) (Set_2Eimage B A f_2 s_1) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 s_1) (hol.eq B y_4 (f_2 x_5)))))))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => f_2 : hol.term (hol.arr A B) => hol.TRANS (Set_2Eset B) (Set_2Eimage B A f_2 s_1) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 s_1) (hol.eq B y_4 (f_2 x_5))))))) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 s_1) (hol.eq B y_4 (f_2 x_5))))))) (thm_510 A B s_1 f_2) (thm_512 A B f_2 s_1).

(; Theorem: |- (Data.Bool.! \lambda s. ((= ((Set.image f) s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) s)) ((= y) (f x))))))))) ;)

(; dict ;)

def thm_514 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall (Set_2Eset A) (s_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset B) (Set_2Eimage B A f_1 s_2) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 s_2) (hol.eq B y_4 (f_1 x_5))))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => s_2 : hol.term (Set_2Eset A) => thm_513 A B s_2 f_1.

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda s. ((= ((Set.image f) s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) s)) ((= y) (f x)))))))))) ;)

(; dict ;)

def thm_515 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (Set_2Eset A) (s_2 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset B) (Set_2Eimage B A f_1 s_2) (Set_2EfromPredicate B (v_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.and (hol.eq B v_3 y_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.and (Set_2Emember A x_5 s_2) (hol.eq B y_4 (f_1 x_5)))))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_514 B A f_1.

(; Theorem: |- ((= Set.injections) \lambda _9572. \lambda _9573. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9572)) ((Set.member (f x)) _9573)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) _9572)) ((Data.Bool./\ ((Set.member y) _9572)) ((= (f x)) (f y))))) ((= x) y))))))))) ;)

(; dict ;)

def thm_516 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B)))) (Set_2Einjections B A) (__9572_1 : hol.term (Set_2Eset A) => __9573_2 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9572_1) (Set_2Emember B (f_4 x_5) __9573_2))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 __9572_1) (hol.and (Set_2Emember A y_6 __9572_1) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6))))))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B)))) (Set_2Einjections B A).

(; Theorem: |- ((= _9572) _9572) ;)

(; dict ;)

def thm_517 : A : hol.type -> __9572_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9572_1 __9572_1) :=
  A : hol.type => __9572_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9572_1.

(; Theorem: |- ((= (Set.injections _9572)) (\lambda _9572. \lambda _9573. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9572)) ((Set.member (f x)) _9573)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) _9572)) ((Data.Bool./\ ((Set.member y) _9572)) ((= (f x)) (f y))))) ((= x) y)))))))) _9572)) ;)

(; dict ;)

def thm_518 : A : hol.type -> B : hol.type -> __9572_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (Set_2Einjections B A __9572_1) ((__9572_2 : hol.term (Set_2Eset A) => __9573_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9572_2) (Set_2Emember B (f_5 x_6) __9573_3))) (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (Set_2Emember A x_6 __9572_2) (hol.and (Set_2Emember A y_7 __9572_2) (hol.eq B (f_5 x_6) (f_5 y_7)))) (hol.eq A x_6 y_7)))))))) __9572_1)) :=
  A : hol.type => B : hol.type => __9572_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (Set_2Einjections B A) (__9572_2 : hol.term (Set_2Eset A) => __9573_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9572_2) (Set_2Emember B (f_5 x_6) __9573_3))) (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (Set_2Emember A x_6 __9572_2) (hol.and (Set_2Emember A y_7 __9572_2) (hol.eq B (f_5 x_6) (f_5 y_7)))) (hol.eq A x_6 y_7)))))))) __9572_1 __9572_1 (thm_516 B A) (thm_517 A __9572_1).

(; Theorem: |- ((= (\lambda _9572. \lambda _9573. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9572)) ((Set.member (f x)) _9573)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) _9572)) ((Data.Bool./\ ((Set.member y) _9572)) ((= (f x)) (f y))))) ((= x) y)))))))) _9572)) \lambda _9573. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9572)) ((Set.member (f x)) _9573)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) _9572)) ((Data.Bool./\ ((Set.member y) _9572)) ((= (f x)) (f y))))) ((= x) y))))))))) ;)

(; dict ;)

def thm_519 : A : hol.type -> B : hol.type -> __9572_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) ((__9572_2 : hol.term (Set_2Eset A) => __9573_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9572_2) (Set_2Emember B (f_5 x_6) __9573_3))) (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (Set_2Emember A x_6 __9572_2) (hol.and (Set_2Emember A y_7 __9572_2) (hol.eq B (f_5 x_6) (f_5 y_7)))) (hol.eq A x_6 y_7)))))))) __9572_1) (__9573_2 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9572_1) (Set_2Emember B (f_4 x_5) __9573_2))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 __9572_1) (hol.and (Set_2Emember A y_6 __9572_1) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6))))))))) :=
  A : hol.type => B : hol.type => __9572_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (__9572_2 : hol.term (Set_2Eset A) => __9573_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9572_2) (Set_2Emember B (f_5 x_6) __9573_3))) (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (Set_2Emember A x_6 __9572_2) (hol.and (Set_2Emember A y_7 __9572_2) (hol.eq B (f_5 x_6) (f_5 y_7)))) (hol.eq A x_6 y_7)))))))) __9572_1.

(; Theorem: |- ((= (Set.injections _9572)) \lambda _9573. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9572)) ((Set.member (f x)) _9573)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) _9572)) ((Data.Bool./\ ((Set.member y) _9572)) ((= (f x)) (f y))))) ((= x) y))))))))) ;)

(; dict ;)

def thm_520 : A : hol.type -> B : hol.type -> __9572_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (Set_2Einjections B A __9572_1) (__9573_2 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9572_1) (Set_2Emember B (f_4 x_5) __9573_2))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 __9572_1) (hol.and (Set_2Emember A y_6 __9572_1) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6))))))))) :=
  A : hol.type => B : hol.type => __9572_1 : hol.term (Set_2Eset A) => hol.TRANS (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (Set_2Einjections B A __9572_1) ((__9572_2 : hol.term (Set_2Eset A) => __9573_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9572_2) (Set_2Emember B (f_5 x_6) __9573_3))) (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (Set_2Emember A x_6 __9572_2) (hol.and (Set_2Emember A y_7 __9572_2) (hol.eq B (f_5 x_6) (f_5 y_7)))) (hol.eq A x_6 y_7)))))))) __9572_1) (__9573_2 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9572_1) (Set_2Emember B (f_4 x_5) __9573_2))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 __9572_1) (hol.and (Set_2Emember A y_6 __9572_1) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6)))))))) (thm_518 A B __9572_1) (thm_519 A B __9572_1).

(; Theorem: |- ((= _9573) _9573) ;)

(; dict ;)

def thm_521 : B : hol.type -> __9573_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq (Set_2Eset B) __9573_1 __9573_1) :=
  B : hol.type => __9573_1 : hol.term (Set_2Eset B) => hol.REFL (Set_2Eset B) __9573_1.

(; Theorem: |- ((= ((Set.injections _9572) _9573)) (\lambda _9573. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9572)) ((Set.member (f x)) _9573)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) _9572)) ((Data.Bool./\ ((Set.member y) _9572)) ((= (f x)) (f y))))) ((= x) y)))))))) _9573)) ;)

(; dict ;)

def thm_522 : B : hol.type -> A : hol.type -> __9573_1 : hol.term (Set_2Eset B) -> __9572_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Einjections B A __9572_2 __9573_1) ((__9573_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9572_2) (Set_2Emember B (f_5 x_6) __9573_3))) (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (Set_2Emember A x_6 __9572_2) (hol.and (Set_2Emember A y_7 __9572_2) (hol.eq B (f_5 x_6) (f_5 y_7)))) (hol.eq A x_6 y_7)))))))) __9573_1)) :=
  B : hol.type => A : hol.type => __9573_1 : hol.term (Set_2Eset B) => __9572_2 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset B) (Set_2Eset (hol.arr A B)) (Set_2Einjections B A __9572_2) (__9573_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9572_2) (Set_2Emember B (f_5 x_6) __9573_3))) (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (Set_2Emember A x_6 __9572_2) (hol.and (Set_2Emember A y_7 __9572_2) (hol.eq B (f_5 x_6) (f_5 y_7)))) (hol.eq A x_6 y_7)))))))) __9573_1 __9573_1 (thm_520 A B __9572_2) (thm_521 B __9573_1).

(; Theorem: |- ((= (\lambda _9573. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9572)) ((Set.member (f x)) _9573)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) _9572)) ((Data.Bool./\ ((Set.member y) _9572)) ((= (f x)) (f y))))) ((= x) y)))))))) _9573)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9572)) ((Set.member (f x)) _9573)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) _9572)) ((Data.Bool./\ ((Set.member y) _9572)) ((= (f x)) (f y))))) ((= x) y))))))))) ;)

(; dict ;)

def thm_523 : B : hol.type -> A : hol.type -> __9573_1 : hol.term (Set_2Eset B) -> __9572_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) ((__9573_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9572_2) (Set_2Emember B (f_5 x_6) __9573_3))) (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (Set_2Emember A x_6 __9572_2) (hol.and (Set_2Emember A y_7 __9572_2) (hol.eq B (f_5 x_6) (f_5 y_7)))) (hol.eq A x_6 y_7)))))))) __9573_1) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9572_2) (Set_2Emember B (f_4 x_5) __9573_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 __9572_2) (hol.and (Set_2Emember A y_6 __9572_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6))))))))) :=
  B : hol.type => A : hol.type => __9573_1 : hol.term (Set_2Eset B) => __9572_2 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset B) (Set_2Eset (hol.arr A B)) (__9573_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9572_2) (Set_2Emember B (f_5 x_6) __9573_3))) (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (Set_2Emember A x_6 __9572_2) (hol.and (Set_2Emember A y_7 __9572_2) (hol.eq B (f_5 x_6) (f_5 y_7)))) (hol.eq A x_6 y_7)))))))) __9573_1.

(; Theorem: |- ((= ((Set.injections _9572) _9573)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9572)) ((Set.member (f x)) _9573)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) _9572)) ((Data.Bool./\ ((Set.member y) _9572)) ((= (f x)) (f y))))) ((= x) y))))))))) ;)

(; dict ;)

def thm_524 : B : hol.type -> A : hol.type -> __9573_1 : hol.term (Set_2Eset B) -> __9572_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Einjections B A __9572_2 __9573_1) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9572_2) (Set_2Emember B (f_4 x_5) __9573_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 __9572_2) (hol.and (Set_2Emember A y_6 __9572_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6))))))))) :=
  B : hol.type => A : hol.type => __9573_1 : hol.term (Set_2Eset B) => __9572_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset (hol.arr A B)) (Set_2Einjections B A __9572_2 __9573_1) ((__9573_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9572_2) (Set_2Emember B (f_5 x_6) __9573_3))) (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (Set_2Emember A x_6 __9572_2) (hol.and (Set_2Emember A y_7 __9572_2) (hol.eq B (f_5 x_6) (f_5 y_7)))) (hol.eq A x_6 y_7)))))))) __9573_1) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9572_2) (Set_2Emember B (f_4 x_5) __9573_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 __9572_2) (hol.and (Set_2Emember A y_6 __9572_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6)))))))) (thm_522 B A __9573_1 __9572_2) (thm_523 B A __9573_1 __9572_2).

(; Theorem: |- (Data.Bool.! \lambda _9573. ((= ((Set.injections _9572) _9573)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9572)) ((Set.member (f x)) _9573)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) _9572)) ((Data.Bool./\ ((Set.member y) _9572)) ((= (f x)) (f y))))) ((= x) y)))))))))) ;)

(; dict ;)

def thm_525 : A : hol.type -> B : hol.type -> __9572_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset B) (__9573_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (hol.arr A B)) (Set_2Einjections B A __9572_1 __9573_2) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9572_1) (Set_2Emember B (f_4 x_5) __9573_2))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 __9572_1) (hol.and (Set_2Emember A y_6 __9572_1) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6)))))))))) :=
  A : hol.type => B : hol.type => __9572_1 : hol.term (Set_2Eset A) => __9573_2 : hol.term (Set_2Eset B) => thm_524 B A __9573_2 __9572_1.

(; Theorem: |- (Data.Bool.! \lambda _9572. (Data.Bool.! \lambda _9573. ((= ((Set.injections _9572) _9573)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9572)) ((Set.member (f x)) _9573)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) _9572)) ((Data.Bool./\ ((Set.member y) _9572)) ((= (f x)) (f y))))) ((= x) y))))))))))) ;)

(; dict ;)

def thm_526 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (__9572_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (__9573_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (hol.arr A B)) (Set_2Einjections B A __9572_1 __9573_2) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9572_1) (Set_2Emember B (f_4 x_5) __9573_2))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 __9572_1) (hol.and (Set_2Emember A y_6 __9572_1) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6))))))))))) :=
  B : hol.type => A : hol.type => __9572_1 : hol.term (Set_2Eset A) => thm_525 A B __9572_1.

(; Theorem: |- ((= ((Set.injections s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) s)) ((Data.Bool./\ ((Set.member y) s)) ((= (f x)) (f y))))) ((= x) y))))))))) ;)

(; dict ;)

def thm_527 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Einjections B A s_2 t_1) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 s_2) (hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6))))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => (B : hol.type => A : hol.type => __9573_1 : hol.term (Set_2Eset B) => __9572_2 : hol.term (Set_2Eset A) => thm_526 B A __9572_2 __9573_1) B A t_1 s_2.

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) s)) ((Data.Bool./\ ((Set.member y) s)) ((= (f x)) (f y))))) ((= x) y))))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) s)) ((Data.Bool./\ ((Set.member y) s)) ((= (f x)) (f y))))) ((= x) y))))))))) ;)

(; dict ;)

def thm_528 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 s_2) (hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6)))))))) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 s_2) (hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6))))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset (hol.arr A B)) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 s_2) (hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6)))))))).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) s)) ((Data.Bool./\ ((Set.member y) s)) ((= (f x)) (f y))))) ((= x) y))))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) s)) ((Data.Bool./\ ((Set.member y) s)) ((= (f x)) (f y))))) ((= x) y))))))))) ;)

(; dict ;)

def thm_529 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 s_2) (hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6)))))))) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 s_2) (hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6))))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.SYM (Set_2Eset (hol.arr A B)) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 s_2) (hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6)))))))) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 s_2) (hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6)))))))) (thm_528 B A t_1 s_2).

(; Theorem: |- ((= ((Set.injections s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) s)) ((Data.Bool./\ ((Set.member y) s)) ((= (f x)) (f y))))) ((= x) y))))))))) ;)

(; dict ;)

def thm_530 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Einjections B A s_2 t_1) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 s_2) (hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6))))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset (hol.arr A B)) (Set_2Einjections B A s_2 t_1) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 s_2) (hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6)))))))) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 s_2) (hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6)))))))) (thm_527 B A t_1 s_2) (thm_529 B A t_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Set.injections s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) s)) ((Data.Bool./\ ((Set.member y) s)) ((= (f x)) (f y))))) ((= x) y)))))))))) ;)

(; dict ;)

def thm_531 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (hol.arr A B)) (Set_2Einjections B A s_1 t_2) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_1) (Set_2Emember B (f_4 x_5) t_2))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 s_1) (hol.and (Set_2Emember A y_6 s_1) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6)))))))))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => t_2 : hol.term (Set_2Eset B) => thm_530 B A t_2 s_1.

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.injections s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) s)) ((Data.Bool./\ ((Set.member y) s)) ((= (f x)) (f y))))) ((= x) y))))))))))) ;)

(; dict ;)

def thm_532 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (hol.arr A B)) (Set_2Einjections B A s_1 t_2) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_1) (Set_2Emember B (f_4 x_5) t_2))) (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (Set_2Emember A x_5 s_1) (hol.and (Set_2Emember A y_6 s_1) (hol.eq B (f_4 x_5) (f_4 y_6)))) (hol.eq A x_5 y_6))))))))))) :=
  B : hol.type => A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_531 A B s_1.

(; Theorem: |- ((= Set.surjections) \lambda _9584. \lambda _9585. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9584)) ((Set.member (f x)) _9585)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9585)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) _9584)) ((= (f y)) x)))))))))) ;)

(; dict ;)

def thm_533 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B)))) (Set_2Esurjections B A) (__9584_1 : hol.term (Set_2Eset A) => __9585_2 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9584_1) (Set_2Emember B (f_4 x_5) __9585_2))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 __9585_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 __9584_1) (hol.eq B (f_4 y_6) x_5)))))))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B)))) (Set_2Esurjections B A).

(; Theorem: |- ((= _9584) _9584) ;)

(; dict ;)

def thm_534 : A : hol.type -> __9584_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9584_1 __9584_1) :=
  A : hol.type => __9584_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9584_1.

(; Theorem: |- ((= (Set.surjections _9584)) (\lambda _9584. \lambda _9585. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9584)) ((Set.member (f x)) _9585)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9585)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) _9584)) ((= (f y)) x))))))))) _9584)) ;)

(; dict ;)

def thm_535 : A : hol.type -> B : hol.type -> __9584_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (Set_2Esurjections B A __9584_1) ((__9584_2 : hol.term (Set_2Eset A) => __9585_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9584_2) (Set_2Emember B (f_5 x_6) __9585_3))) (hol.forall B (x_6 : hol.term B => hol.imp (Set_2Emember B x_6 __9585_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_7 : hol.term A => hol.and (Set_2Emember A y_7 __9584_2) (hol.eq B (f_5 y_7) x_6))))))))) __9584_1)) :=
  A : hol.type => B : hol.type => __9584_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (Set_2Esurjections B A) (__9584_2 : hol.term (Set_2Eset A) => __9585_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9584_2) (Set_2Emember B (f_5 x_6) __9585_3))) (hol.forall B (x_6 : hol.term B => hol.imp (Set_2Emember B x_6 __9585_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_7 : hol.term A => hol.and (Set_2Emember A y_7 __9584_2) (hol.eq B (f_5 y_7) x_6))))))))) __9584_1 __9584_1 (thm_533 B A) (thm_534 A __9584_1).

(; Theorem: |- ((= (\lambda _9584. \lambda _9585. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9584)) ((Set.member (f x)) _9585)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9585)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) _9584)) ((= (f y)) x))))))))) _9584)) \lambda _9585. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9584)) ((Set.member (f x)) _9585)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9585)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) _9584)) ((= (f y)) x)))))))))) ;)

(; dict ;)

def thm_536 : A : hol.type -> B : hol.type -> __9584_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) ((__9584_2 : hol.term (Set_2Eset A) => __9585_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9584_2) (Set_2Emember B (f_5 x_6) __9585_3))) (hol.forall B (x_6 : hol.term B => hol.imp (Set_2Emember B x_6 __9585_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_7 : hol.term A => hol.and (Set_2Emember A y_7 __9584_2) (hol.eq B (f_5 y_7) x_6))))))))) __9584_1) (__9585_2 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9584_1) (Set_2Emember B (f_4 x_5) __9585_2))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 __9585_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 __9584_1) (hol.eq B (f_4 y_6) x_5)))))))))) :=
  A : hol.type => B : hol.type => __9584_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (__9584_2 : hol.term (Set_2Eset A) => __9585_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9584_2) (Set_2Emember B (f_5 x_6) __9585_3))) (hol.forall B (x_6 : hol.term B => hol.imp (Set_2Emember B x_6 __9585_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_7 : hol.term A => hol.and (Set_2Emember A y_7 __9584_2) (hol.eq B (f_5 y_7) x_6))))))))) __9584_1.

(; Theorem: |- ((= (Set.surjections _9584)) \lambda _9585. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9584)) ((Set.member (f x)) _9585)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9585)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) _9584)) ((= (f y)) x)))))))))) ;)

(; dict ;)

def thm_537 : A : hol.type -> B : hol.type -> __9584_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (Set_2Esurjections B A __9584_1) (__9585_2 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9584_1) (Set_2Emember B (f_4 x_5) __9585_2))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 __9585_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 __9584_1) (hol.eq B (f_4 y_6) x_5)))))))))) :=
  A : hol.type => B : hol.type => __9584_1 : hol.term (Set_2Eset A) => hol.TRANS (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (Set_2Esurjections B A __9584_1) ((__9584_2 : hol.term (Set_2Eset A) => __9585_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9584_2) (Set_2Emember B (f_5 x_6) __9585_3))) (hol.forall B (x_6 : hol.term B => hol.imp (Set_2Emember B x_6 __9585_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_7 : hol.term A => hol.and (Set_2Emember A y_7 __9584_2) (hol.eq B (f_5 y_7) x_6))))))))) __9584_1) (__9585_2 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9584_1) (Set_2Emember B (f_4 x_5) __9585_2))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 __9585_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 __9584_1) (hol.eq B (f_4 y_6) x_5))))))))) (thm_535 A B __9584_1) (thm_536 A B __9584_1).

(; Theorem: |- ((= _9585) _9585) ;)

(; dict ;)

def thm_538 : B : hol.type -> __9585_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq (Set_2Eset B) __9585_1 __9585_1) :=
  B : hol.type => __9585_1 : hol.term (Set_2Eset B) => hol.REFL (Set_2Eset B) __9585_1.

(; Theorem: |- ((= ((Set.surjections _9584) _9585)) (\lambda _9585. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9584)) ((Set.member (f x)) _9585)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9585)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) _9584)) ((= (f y)) x))))))))) _9585)) ;)

(; dict ;)

def thm_539 : B : hol.type -> A : hol.type -> __9585_1 : hol.term (Set_2Eset B) -> __9584_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Esurjections B A __9584_2 __9585_1) ((__9585_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9584_2) (Set_2Emember B (f_5 x_6) __9585_3))) (hol.forall B (x_6 : hol.term B => hol.imp (Set_2Emember B x_6 __9585_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_7 : hol.term A => hol.and (Set_2Emember A y_7 __9584_2) (hol.eq B (f_5 y_7) x_6))))))))) __9585_1)) :=
  B : hol.type => A : hol.type => __9585_1 : hol.term (Set_2Eset B) => __9584_2 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset B) (Set_2Eset (hol.arr A B)) (Set_2Esurjections B A __9584_2) (__9585_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9584_2) (Set_2Emember B (f_5 x_6) __9585_3))) (hol.forall B (x_6 : hol.term B => hol.imp (Set_2Emember B x_6 __9585_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_7 : hol.term A => hol.and (Set_2Emember A y_7 __9584_2) (hol.eq B (f_5 y_7) x_6))))))))) __9585_1 __9585_1 (thm_537 A B __9584_2) (thm_538 B __9585_1).

(; Theorem: |- ((= (\lambda _9585. (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9584)) ((Set.member (f x)) _9585)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9585)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) _9584)) ((= (f y)) x))))))))) _9585)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9584)) ((Set.member (f x)) _9585)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9585)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) _9584)) ((= (f y)) x)))))))))) ;)

(; dict ;)

def thm_540 : B : hol.type -> A : hol.type -> __9585_1 : hol.term (Set_2Eset B) -> __9584_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) ((__9585_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9584_2) (Set_2Emember B (f_5 x_6) __9585_3))) (hol.forall B (x_6 : hol.term B => hol.imp (Set_2Emember B x_6 __9585_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_7 : hol.term A => hol.and (Set_2Emember A y_7 __9584_2) (hol.eq B (f_5 y_7) x_6))))))))) __9585_1) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9584_2) (Set_2Emember B (f_4 x_5) __9585_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 __9585_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 __9584_2) (hol.eq B (f_4 y_6) x_5)))))))))) :=
  B : hol.type => A : hol.type => __9585_1 : hol.term (Set_2Eset B) => __9584_2 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset B) (Set_2Eset (hol.arr A B)) (__9585_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9584_2) (Set_2Emember B (f_5 x_6) __9585_3))) (hol.forall B (x_6 : hol.term B => hol.imp (Set_2Emember B x_6 __9585_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_7 : hol.term A => hol.and (Set_2Emember A y_7 __9584_2) (hol.eq B (f_5 y_7) x_6))))))))) __9585_1.

(; Theorem: |- ((= ((Set.surjections _9584) _9585)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9584)) ((Set.member (f x)) _9585)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9585)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) _9584)) ((= (f y)) x)))))))))) ;)

(; dict ;)

def thm_541 : B : hol.type -> A : hol.type -> __9585_1 : hol.term (Set_2Eset B) -> __9584_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Esurjections B A __9584_2 __9585_1) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9584_2) (Set_2Emember B (f_4 x_5) __9585_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 __9585_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 __9584_2) (hol.eq B (f_4 y_6) x_5)))))))))) :=
  B : hol.type => A : hol.type => __9585_1 : hol.term (Set_2Eset B) => __9584_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset (hol.arr A B)) (Set_2Esurjections B A __9584_2 __9585_1) ((__9585_3 : hol.term (Set_2Eset B) => Set_2EfromPredicate (hol.arr A B) (v_4 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_5 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_4 f_5) (hol.and (hol.forall A (x_6 : hol.term A => hol.imp (Set_2Emember A x_6 __9584_2) (Set_2Emember B (f_5 x_6) __9585_3))) (hol.forall B (x_6 : hol.term B => hol.imp (Set_2Emember B x_6 __9585_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_7 : hol.term A => hol.and (Set_2Emember A y_7 __9584_2) (hol.eq B (f_5 y_7) x_6))))))))) __9585_1) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9584_2) (Set_2Emember B (f_4 x_5) __9585_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 __9585_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 __9584_2) (hol.eq B (f_4 y_6) x_5))))))))) (thm_539 B A __9585_1 __9584_2) (thm_540 B A __9585_1 __9584_2).

(; Theorem: |- (Data.Bool.! \lambda _9585. ((= ((Set.surjections _9584) _9585)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9584)) ((Set.member (f x)) _9585)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9585)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) _9584)) ((= (f y)) x))))))))))) ;)

(; dict ;)

def thm_542 : A : hol.type -> B : hol.type -> __9584_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset B) (__9585_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (hol.arr A B)) (Set_2Esurjections B A __9584_1 __9585_2) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9584_1) (Set_2Emember B (f_4 x_5) __9585_2))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 __9585_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 __9584_1) (hol.eq B (f_4 y_6) x_5))))))))))) :=
  A : hol.type => B : hol.type => __9584_1 : hol.term (Set_2Eset A) => __9585_2 : hol.term (Set_2Eset B) => thm_541 B A __9585_2 __9584_1.

(; Theorem: |- (Data.Bool.! \lambda _9584. (Data.Bool.! \lambda _9585. ((= ((Set.surjections _9584) _9585)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9584)) ((Set.member (f x)) _9585)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) _9585)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) _9584)) ((= (f y)) x)))))))))))) ;)

(; dict ;)

def thm_543 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (__9584_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (__9585_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (hol.arr A B)) (Set_2Esurjections B A __9584_1 __9585_2) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 __9584_1) (Set_2Emember B (f_4 x_5) __9585_2))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 __9585_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 __9584_1) (hol.eq B (f_4 y_6) x_5)))))))))))) :=
  B : hol.type => A : hol.type => __9584_1 : hol.term (Set_2Eset A) => thm_542 A B __9584_1.

(; Theorem: |- ((= ((Set.surjections s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) t)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) s)) ((= (f y)) x)))))))))) ;)

(; dict ;)

def thm_544 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Esurjections B A s_2 t_1) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 y_6) x_5)))))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => (B : hol.type => A : hol.type => __9585_1 : hol.term (Set_2Eset B) => __9584_2 : hol.term (Set_2Eset A) => thm_543 B A __9584_2 __9585_1) B A t_1 s_2.

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) t)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) s)) ((= (f y)) x)))))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) t)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) s)) ((= (f y)) x)))))))))) ;)

(; dict ;)

def thm_545 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 y_6) x_5))))))))) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 y_6) x_5)))))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset (hol.arr A B)) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 y_6) x_5))))))))).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) t)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) s)) ((= (f y)) x)))))))))) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) t)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) s)) ((= (f y)) x)))))))))) ;)

(; dict ;)

def thm_546 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 y_6) x_5))))))))) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 y_6) x_5)))))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.SYM (Set_2Eset (hol.arr A B)) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 y_6) x_5))))))))) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 y_6) x_5))))))))) (thm_545 B A t_1 s_2).

(; Theorem: |- ((= ((Set.surjections s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) t)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) s)) ((= (f y)) x)))))))))) ;)

(; dict ;)

def thm_547 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Esurjections B A s_2 t_1) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 y_6) x_5)))))))))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset (hol.arr A B)) (Set_2Esurjections B A s_2 t_1) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 y_6) x_5))))))))) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_2) (Set_2Emember B (f_4 x_5) t_1))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 s_2) (hol.eq B (f_4 y_6) x_5))))))))) (thm_544 B A t_1 s_2) (thm_546 B A t_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Set.surjections s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) t)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) s)) ((= (f y)) x))))))))))) ;)

(; dict ;)

def thm_548 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (hol.arr A B)) (Set_2Esurjections B A s_1 t_2) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_1) (Set_2Emember B (f_4 x_5) t_2))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 t_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 s_1) (hol.eq B (f_4 y_6) x_5))))))))))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => t_2 : hol.term (Set_2Eset B) => thm_547 B A t_2 s_1.

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.surjections s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) t)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) s)) ((= (f y)) x)))))))))))) ;)

(; dict ;)

def thm_549 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (hol.arr A B)) (Set_2Esurjections B A s_1 t_2) (Set_2EfromPredicate (hol.arr A B) (v_3 : hol.term (hol.arr A B) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_4 : hol.term (hol.arr A B) => hol.and (hol.eq (hol.arr A B) v_3 f_4) (hol.and (hol.forall A (x_5 : hol.term A => hol.imp (Set_2Emember A x_5 s_1) (Set_2Emember B (f_4 x_5) t_2))) (hol.forall B (x_5 : hol.term B => hol.imp (Set_2Emember B x_5 t_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_6 : hol.term A => hol.and (Set_2Emember A y_6 s_1) (hol.eq B (f_4 y_6) x_5)))))))))))) :=
  B : hol.type => A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_548 A B s_1.

(; Theorem: |- ((= Set.bijections) \lambda _9596. \lambda _9597. ((Set.intersect ((Set.injections _9596) _9597)) ((Set.surjections _9596) _9597))) ;)

(; dict ;)

def thm_550 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B)))) (Set_2Ebijections B A) (__9596_1 : hol.term (Set_2Eset A) => __9597_2 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_1 __9597_2) (Set_2Esurjections B A __9596_1 __9597_2))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B)))) (Set_2Ebijections B A).

(; Theorem: |- ((= _9596) _9596) ;)

(; dict ;)

def thm_551 : A : hol.type -> __9596_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9596_1 __9596_1) :=
  A : hol.type => __9596_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9596_1.

(; Theorem: |- ((= (Set.bijections _9596)) (\lambda _9596. \lambda _9597. ((Set.intersect ((Set.injections _9596) _9597)) ((Set.surjections _9596) _9597)) _9596)) ;)

(; dict ;)

def thm_552 : A : hol.type -> B : hol.type -> __9596_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (Set_2Ebijections B A __9596_1) ((__9596_2 : hol.term (Set_2Eset A) => __9597_3 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_2 __9597_3) (Set_2Esurjections B A __9596_2 __9597_3)) __9596_1)) :=
  A : hol.type => B : hol.type => __9596_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (Set_2Ebijections B A) (__9596_2 : hol.term (Set_2Eset A) => __9597_3 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_2 __9597_3) (Set_2Esurjections B A __9596_2 __9597_3)) __9596_1 __9596_1 (thm_550 B A) (thm_551 A __9596_1).

(; Theorem: |- ((= (\lambda _9596. \lambda _9597. ((Set.intersect ((Set.injections _9596) _9597)) ((Set.surjections _9596) _9597)) _9596)) \lambda _9597. ((Set.intersect ((Set.injections _9596) _9597)) ((Set.surjections _9596) _9597))) ;)

(; dict ;)

def thm_553 : A : hol.type -> B : hol.type -> __9596_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) ((__9596_2 : hol.term (Set_2Eset A) => __9597_3 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_2 __9597_3) (Set_2Esurjections B A __9596_2 __9597_3)) __9596_1) (__9597_2 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_1 __9597_2) (Set_2Esurjections B A __9596_1 __9597_2))) :=
  A : hol.type => B : hol.type => __9596_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (__9596_2 : hol.term (Set_2Eset A) => __9597_3 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_2 __9597_3) (Set_2Esurjections B A __9596_2 __9597_3)) __9596_1.

(; Theorem: |- ((= (Set.bijections _9596)) \lambda _9597. ((Set.intersect ((Set.injections _9596) _9597)) ((Set.surjections _9596) _9597))) ;)

(; dict ;)

def thm_554 : A : hol.type -> B : hol.type -> __9596_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (Set_2Ebijections B A __9596_1) (__9597_2 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_1 __9597_2) (Set_2Esurjections B A __9596_1 __9597_2))) :=
  A : hol.type => B : hol.type => __9596_1 : hol.term (Set_2Eset A) => hol.TRANS (hol.arr (Set_2Eset B) (Set_2Eset (hol.arr A B))) (Set_2Ebijections B A __9596_1) ((__9596_2 : hol.term (Set_2Eset A) => __9597_3 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_2 __9597_3) (Set_2Esurjections B A __9596_2 __9597_3)) __9596_1) (__9597_2 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_1 __9597_2) (Set_2Esurjections B A __9596_1 __9597_2)) (thm_552 A B __9596_1) (thm_553 A B __9596_1).

(; Theorem: |- ((= _9597) _9597) ;)

(; dict ;)

def thm_555 : B : hol.type -> __9597_1 : hol.term (Set_2Eset B) -> hol.proof (hol.eq (Set_2Eset B) __9597_1 __9597_1) :=
  B : hol.type => __9597_1 : hol.term (Set_2Eset B) => hol.REFL (Set_2Eset B) __9597_1.

(; Theorem: |- ((= ((Set.bijections _9596) _9597)) (\lambda _9597. ((Set.intersect ((Set.injections _9596) _9597)) ((Set.surjections _9596) _9597)) _9597)) ;)

(; dict ;)

def thm_556 : B : hol.type -> A : hol.type -> __9597_1 : hol.term (Set_2Eset B) -> __9596_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Ebijections B A __9596_2 __9597_1) ((__9597_3 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_2 __9597_3) (Set_2Esurjections B A __9596_2 __9597_3)) __9597_1)) :=
  B : hol.type => A : hol.type => __9597_1 : hol.term (Set_2Eset B) => __9596_2 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset B) (Set_2Eset (hol.arr A B)) (Set_2Ebijections B A __9596_2) (__9597_3 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_2 __9597_3) (Set_2Esurjections B A __9596_2 __9597_3)) __9597_1 __9597_1 (thm_554 A B __9596_2) (thm_555 B __9597_1).

(; Theorem: |- ((= (\lambda _9597. ((Set.intersect ((Set.injections _9596) _9597)) ((Set.surjections _9596) _9597)) _9597)) ((Set.intersect ((Set.injections _9596) _9597)) ((Set.surjections _9596) _9597))) ;)

(; dict ;)

def thm_557 : B : hol.type -> A : hol.type -> __9597_1 : hol.term (Set_2Eset B) -> __9596_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) ((__9597_3 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_2 __9597_3) (Set_2Esurjections B A __9596_2 __9597_3)) __9597_1) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_2 __9597_1) (Set_2Esurjections B A __9596_2 __9597_1))) :=
  B : hol.type => A : hol.type => __9597_1 : hol.term (Set_2Eset B) => __9596_2 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset B) (Set_2Eset (hol.arr A B)) (__9597_3 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_2 __9597_3) (Set_2Esurjections B A __9596_2 __9597_3)) __9597_1.

(; Theorem: |- ((= ((Set.bijections _9596) _9597)) ((Set.intersect ((Set.injections _9596) _9597)) ((Set.surjections _9596) _9597))) ;)

(; dict ;)

def thm_558 : B : hol.type -> A : hol.type -> __9597_1 : hol.term (Set_2Eset B) -> __9596_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Ebijections B A __9596_2 __9597_1) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_2 __9597_1) (Set_2Esurjections B A __9596_2 __9597_1))) :=
  B : hol.type => A : hol.type => __9597_1 : hol.term (Set_2Eset B) => __9596_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset (hol.arr A B)) (Set_2Ebijections B A __9596_2 __9597_1) ((__9597_3 : hol.term (Set_2Eset B) => Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_2 __9597_3) (Set_2Esurjections B A __9596_2 __9597_3)) __9597_1) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_2 __9597_1) (Set_2Esurjections B A __9596_2 __9597_1)) (thm_556 B A __9597_1 __9596_2) (thm_557 B A __9597_1 __9596_2).

(; Theorem: |- (Data.Bool.! \lambda _9597. ((= ((Set.bijections _9596) _9597)) ((Set.intersect ((Set.injections _9596) _9597)) ((Set.surjections _9596) _9597)))) ;)

(; dict ;)

def thm_559 : A : hol.type -> B : hol.type -> __9596_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset B) (__9597_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (hol.arr A B)) (Set_2Ebijections B A __9596_1 __9597_2) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_1 __9597_2) (Set_2Esurjections B A __9596_1 __9597_2)))) :=
  A : hol.type => B : hol.type => __9596_1 : hol.term (Set_2Eset A) => __9597_2 : hol.term (Set_2Eset B) => thm_558 B A __9597_2 __9596_1.

(; Theorem: |- (Data.Bool.! \lambda _9596. (Data.Bool.! \lambda _9597. ((= ((Set.bijections _9596) _9597)) ((Set.intersect ((Set.injections _9596) _9597)) ((Set.surjections _9596) _9597))))) ;)

(; dict ;)

def thm_560 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (__9596_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (__9597_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (hol.arr A B)) (Set_2Ebijections B A __9596_1 __9597_2) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A __9596_1 __9597_2) (Set_2Esurjections B A __9596_1 __9597_2))))) :=
  B : hol.type => A : hol.type => __9596_1 : hol.term (Set_2Eset A) => thm_559 A B __9596_1.

(; Theorem: |- ((= ((Set.bijections s) t)) ((Set.intersect ((Set.injections s) t)) ((Set.surjections s) t))) ;)

(; dict ;)

def thm_561 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Ebijections B A s_2 t_1) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A s_2 t_1) (Set_2Esurjections B A s_2 t_1))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => (B : hol.type => A : hol.type => __9597_1 : hol.term (Set_2Eset B) => __9596_2 : hol.term (Set_2Eset A) => thm_560 B A __9596_2 __9597_1) B A t_1 s_2.

(; Theorem: |- ((= ((Set.intersect ((Set.injections s) t)) ((Set.surjections s) t))) ((Set.intersect ((Set.injections s) t)) ((Set.surjections s) t))) ;)

(; dict ;)

def thm_562 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A s_2 t_1) (Set_2Esurjections B A s_2 t_1)) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A s_2 t_1) (Set_2Esurjections B A s_2 t_1))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset (hol.arr A B)) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A s_2 t_1) (Set_2Esurjections B A s_2 t_1)).

(; Theorem: |- ((= ((Set.intersect ((Set.injections s) t)) ((Set.surjections s) t))) ((Set.intersect ((Set.injections s) t)) ((Set.surjections s) t))) ;)

(; dict ;)

def thm_563 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A s_2 t_1) (Set_2Esurjections B A s_2 t_1)) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A s_2 t_1) (Set_2Esurjections B A s_2 t_1))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.SYM (Set_2Eset (hol.arr A B)) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A s_2 t_1) (Set_2Esurjections B A s_2 t_1)) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A s_2 t_1) (Set_2Esurjections B A s_2 t_1)) (thm_562 B A t_1 s_2).

(; Theorem: |- ((= ((Set.bijections s) t)) ((Set.intersect ((Set.injections s) t)) ((Set.surjections s) t))) ;)

(; dict ;)

def thm_564 : B : hol.type -> A : hol.type -> t_1 : hol.term (Set_2Eset B) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset (hol.arr A B)) (Set_2Ebijections B A s_2 t_1) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A s_2 t_1) (Set_2Esurjections B A s_2 t_1))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (Set_2Eset B) => s_2 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset (hol.arr A B)) (Set_2Ebijections B A s_2 t_1) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A s_2 t_1) (Set_2Esurjections B A s_2 t_1)) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A s_2 t_1) (Set_2Esurjections B A s_2 t_1)) (thm_561 B A t_1 s_2) (thm_563 B A t_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Set.bijections s) t)) ((Set.intersect ((Set.injections s) t)) ((Set.surjections s) t)))) ;)

(; dict ;)

def thm_565 : A : hol.type -> B : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (hol.arr A B)) (Set_2Ebijections B A s_1 t_2) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A s_1 t_2) (Set_2Esurjections B A s_1 t_2)))) :=
  A : hol.type => B : hol.type => s_1 : hol.term (Set_2Eset A) => t_2 : hol.term (Set_2Eset B) => thm_564 B A t_2 s_1.

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.bijections s) t)) ((Set.intersect ((Set.injections s) t)) ((Set.surjections s) t))))) ;)

(; dict ;)

def thm_566 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.forall (Set_2Eset B) (t_2 : hol.term (Set_2Eset B) => hol.eq (Set_2Eset (hol.arr A B)) (Set_2Ebijections B A s_1 t_2) (Set_2Eintersect (hol.arr A B) (Set_2Einjections B A s_1 t_2) (Set_2Esurjections B A s_1 t_2))))) :=
  B : hol.type => A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_565 A B s_1.

(; Theorem: |- ((= Set.choice) \lambda _9608. (select \lambda x. ((Set.member x) _9608))) ;)

(; dict ;)

def thm_567 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) A) (Set_2Echoice A) (__9608_1 : hol.term (Set_2Eset A) => hol.select A (x_2 : hol.term A => Set_2Emember A x_2 __9608_1))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset A) A) (Set_2Echoice A).

(; Theorem: |- ((= \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= s) Set.{}))) ((Set.member (Set.choice s)) s))) \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= s) Set.{}))) ((Set.member (Set.choice s)) s))) ;)

(; dict ;)

def thm_568 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1)) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1)).

(; Theorem: |- ((= \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= s) Set.{}))) ((Set.member (Set.choice s)) s))) \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= s) Set.{}))) ((Set.member (Set.choice s)) s))) ;)

(; dict ;)

def thm_569 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1)) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1))) :=
  A : hol.type => hol.TRANS (hol.arr (Set_2Eset A) hol.bool) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1)) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1)) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1)) (thm_568 A) (thm_568 A).

(; Theorem: |- ((= (Data.Bool.! \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= s) Set.{}))) ((Set.member (Set.choice s)) s)))) (Data.Bool.! \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= s) Set.{}))) ((Set.member (Set.choice s)) s)))) ;)

(; dict ;)

def thm_570 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1)))) :=
  A : hol.type => hol.APP_THM (hol.arr (Set_2Eset A) hol.bool) hol.bool (hol.forall (Set_2Eset A)) (hol.forall (Set_2Eset A)) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1)) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1)) (thm_218 A) (thm_569 A).

(; Theorem: |- ((= ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_571 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))).

(; Theorem: |- ((= ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_572 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) (thm_571 t1_1 t2_2) (thm_571 t1_1 t2_2).

(; Theorem: |- ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_573 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) -> hol.proof (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)) ;)

(; dict ;)

def thm_574 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t2_1 t1_2) (hol.imp (hol.not t1_2) (hol.not t2_1))) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t2_1 t1_2) (hol.imp (hol.not t1_2) (hol.not t2_1))) => hol.SYM hol.bool (hol.imp t2_1 t1_2) (hol.imp (hol.not t1_2) (hol.not t2_1)) (thm_573 t1_2 t2_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)) ;)

(; dict ;)

def thm_575 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_576 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) -> hol.proof (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) => hol.SYM hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1) (thm_575 t2_2 t1_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_577 : t2_1 : hol.term hol.bool -> t1_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp t2_1 t1_2) (hol.imp (hol.not t1_2) (hol.not t2_1)))) :=
  t2_1 : hol.term hol.bool => t1_2 : hol.term hol.bool => hol.PROP_EXT (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) (hol.eq hol.bool (hol.imp t2_1 t1_2) (hol.imp (hol.not t1_2) (hol.not t2_1))) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t2_1 t1_2) (hol.imp (hol.not t1_2) (hol.not t2_1))) => thm_574 t2_1 t1_2 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp (hol.not t1_2) (hol.not t2_1)) (hol.imp t2_1 t1_2)) => thm_576 t1_2 t2_1 hyp_1).

(; Theorem: |- ((= \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))) \lambda t2. ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_578 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => hol.ABS_THM hol.bool hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) (t2_2 : hol.term hol.bool => thm_577 t2_2 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)))) (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_579 : t1_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))))) :=
  t1_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)) (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) thm_97 (thm_578 t1_1).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1)))) \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_580 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))))) :=
  hol.ABS_THM hol.bool hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2)))) (t1_1 : hol.term hol.bool => thm_579 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ((Data.Bool.==> t2) t1))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2)))))) ;)

(; dict ;)

def thm_581 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2)))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1))) (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2)))) thm_97 thm_580.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))))) ;)

(; dict ;)

def thm_582 : hol.proof (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))))) :=
  hol.EQ_MP (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp (hol.not t1_1) (hol.not t2_2)) (hol.imp t2_2 t1_1)))) (hol.forall hol.bool (t1_1 : hol.term hol.bool => hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))))) thm_581 thm_13.

(; Theorem: |- (Data.Bool.! \lambda t2. ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2)))) ;)

(; dict ;)

def thm_583 : t1_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (t2_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2)))) :=
  t1_1 : hol.term hol.bool => thm_582 t1_1.

(; Theorem: |- ((= ((Data.Bool.==> t2) t1)) ((Data.Bool.==> (Data.Bool.~ t1)) (Data.Bool.~ t2))) ;)

(; dict ;)

def thm_584 : t1_1 : hol.term hol.bool -> t2_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) :=
  t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => thm_583 t1_1 t2_2.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((= s) Set.{}))) ((Set.member (Set.choice s)) s))) ((Data.Bool.==> (Data.Bool.~ ((Set.member (Set.choice s)) s))) (Data.Bool.~ (Data.Bool.~ ((= s) Set.{}))))) ;)

(; dict ;)

def thm_585 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1)) (hol.imp (hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1)) (hol.not (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A)))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => (t1_1 : hol.term hol.bool => t2_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) (hol.eq hol.bool (hol.imp t2_2 t1_1) (hol.imp (hol.not t1_1) (hol.not t2_2))) (thm_572 t1_1 t2_2) (thm_584 t1_1 t2_2)) (Set_2Emember A (Set_2Echoice A s_1) s_1) (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((Set.member (Set.choice s)) s))) (Data.Bool.~ (Data.Bool.~ ((= s) Set.{}))))) ((Data.Bool.==> (Data.Bool.~ ((= s) Set.{}))) ((Set.member (Set.choice s)) s))) ;)

(; dict ;)

def thm_586 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1)) (hol.not (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))))) (hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.SYM hol.bool (hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1)) (hol.imp (hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1)) (hol.not (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))))) (thm_585 A s_1).

(; Theorem: |- ((= Data.Bool.~) Data.Bool.~) ;)

(; dict ;)

def thm_587 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not hol.not) :=
  hol.REFL (hol.arr hol.bool hol.bool) hol.not.

(; Theorem: |- ((= Set.member) Set.member) ;)

(; dict ;)

def thm_588 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) (Set_2Emember A) (Set_2Emember A)) :=
  A : hol.type => hol.REFL (hol.arr A (hol.arr (Set_2Eset A) hol.bool)) (Set_2Emember A).

(; Theorem: |- ((= ((= (Set.choice s)) (select \lambda x. ((Set.member x) s)))) ((= (Set.choice s)) (select \lambda x. ((Set.member x) s)))) ;)

(; dict ;)

def thm_589 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (hol.eq A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.eq A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))).

(; Theorem: |- ((= ((= (Set.choice s)) (select \lambda x. ((Set.member x) s)))) ((= (Set.choice s)) (select \lambda x. ((Set.member x) s)))) ;)

(; dict ;)

def thm_590 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (hol.eq A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.eq A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (hol.eq A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (hol.eq A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (thm_589 A s_1) (thm_589 A s_1).

(; Theorem: |- ((= _9608) _9608) ;)

(; dict ;)

def thm_591 : A : hol.type -> __9608_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9608_1 __9608_1) :=
  A : hol.type => __9608_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9608_1.

(; Theorem: |- ((= (Set.choice _9608)) (\lambda _9608. (select \lambda x. ((Set.member x) _9608)) _9608)) ;)

(; dict ;)

def thm_592 : A : hol.type -> __9608_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq A (Set_2Echoice A __9608_1) ((__9608_2 : hol.term (Set_2Eset A) => hol.select A (x_3 : hol.term A => Set_2Emember A x_3 __9608_2)) __9608_1)) :=
  A : hol.type => __9608_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) A (Set_2Echoice A) (__9608_2 : hol.term (Set_2Eset A) => hol.select A (x_3 : hol.term A => Set_2Emember A x_3 __9608_2)) __9608_1 __9608_1 (thm_567 A) (thm_591 A __9608_1).

(; Theorem: |- ((= (\lambda _9608. (select \lambda x. ((Set.member x) _9608)) _9608)) (select \lambda x. ((Set.member x) _9608))) ;)

(; dict ;)

def thm_593 : A : hol.type -> __9608_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq A ((__9608_2 : hol.term (Set_2Eset A) => hol.select A (x_3 : hol.term A => Set_2Emember A x_3 __9608_2)) __9608_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 __9608_1))) :=
  A : hol.type => __9608_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) A (__9608_2 : hol.term (Set_2Eset A) => hol.select A (x_3 : hol.term A => Set_2Emember A x_3 __9608_2)) __9608_1.

(; Theorem: |- ((= (Set.choice _9608)) (select \lambda x. ((Set.member x) _9608))) ;)

(; dict ;)

def thm_594 : A : hol.type -> __9608_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq A (Set_2Echoice A __9608_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 __9608_1))) :=
  A : hol.type => __9608_1 : hol.term (Set_2Eset A) => hol.TRANS A (Set_2Echoice A __9608_1) ((__9608_2 : hol.term (Set_2Eset A) => hol.select A (x_3 : hol.term A => Set_2Emember A x_3 __9608_2)) __9608_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 __9608_1)) (thm_592 A __9608_1) (thm_593 A __9608_1).

(; Theorem: |- (Data.Bool.! \lambda _9608. ((= (Set.choice _9608)) (select \lambda x. ((Set.member x) _9608)))) ;)

(; dict ;)

def thm_595 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (__9608_1 : hol.term (Set_2Eset A) => hol.eq A (Set_2Echoice A __9608_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 __9608_1)))) :=
  A : hol.type => __9608_1 : hol.term (Set_2Eset A) => thm_594 A __9608_1.

(; Theorem: |- ((= (Set.choice s)) (select \lambda x. ((Set.member x) s))) ;)

(; dict ;)

def thm_596 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => (A : hol.type => __9608_1 : hol.term (Set_2Eset A) => thm_595 A __9608_1) A s_1.

(; Theorem: |- ((= (select \lambda x. ((Set.member x) s))) (select \lambda x. ((Set.member x) s))) ;)

(; dict ;)

def thm_597 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.REFL A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)).

(; Theorem: |- ((= (select \lambda x. ((Set.member x) s))) (select \lambda x. ((Set.member x) s))) ;)

(; dict ;)

def thm_598 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.SYM A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (thm_597 A s_1).

(; Theorem: |- ((= (Set.choice s)) (select \lambda x. ((Set.member x) s))) ;)

(; dict ;)

def thm_599 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (thm_596 A s_1) (thm_598 A s_1).

(; Theorem: |- (Data.Bool.! \lambda s. ((= (Set.choice s)) (select \lambda x. ((Set.member x) s)))) ;)

(; dict ;)

def thm_600 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.eq A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_599 A s_1.

(; Theorem: |- ((= (Set.member (Set.choice s))) (Set.member (select \lambda x. ((Set.member x) s)))) ;)

(; dict ;)

def thm_601 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (Set_2Emember A (Set_2Echoice A s_1)) (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM A (hol.arr (Set_2Eset A) hol.bool) (Set_2Emember A) (Set_2Emember A) (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (thm_588 A) ((A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (hol.eq A (Set_2Echoice A s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (thm_590 A s_1) (thm_600 A s_1)) A s_1).

(; Theorem: |- ((= s) s) ;)

(; dict ;)

def thm_602 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) s_1 s_1) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) s_1.

(; Theorem: |- ((= ((Set.member (Set.choice s)) s)) ((Set.member (select \lambda x. ((Set.member x) s))) s)) ;)

(; dict ;)

def thm_603 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Set_2Emember A (Set_2Echoice A s_1) s_1) (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) hol.bool (Set_2Emember A (Set_2Echoice A s_1)) (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) s_1 s_1 (thm_601 A s_1) (thm_602 A s_1).

(; Theorem: |- ((= (Data.Bool.~ ((Set.member (Set.choice s)) s))) (Data.Bool.~ ((Set.member (select \lambda x. ((Set.member x) s))) s))) ;)

(; dict ;)

def thm_604 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1)) (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool hol.not hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1) (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1) thm_587 (thm_603 A s_1).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ ((Set.member (Set.choice s)) s)))) (Data.Bool.==> (Data.Bool.~ ((Set.member (select \lambda x. ((Set.member x) s))) s)))) ;)

(; dict ;)

def thm_605 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1))) (hol.imp (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1)) (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) thm_219 (thm_604 A s_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_606 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_607 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_606 t_1) (thm_606 t_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)))) ;)

(; dict ;)

def thm_608 : hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) :=
  hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_131 p_1 q_2 hyp_1) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)))) ;)

(; dict ;)

def thm_609 : hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) :=
  hol.PROVE_HYP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) thm_14 (hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => thm_608 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_610 : hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_131 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_611 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.PROVE_HYP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) thm_15 (hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => thm_610 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_612 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) thm_611 thm_16.

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_613 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.EQ_MP (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) thm_609 thm_612.

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_614 : hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_156 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_615 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  hol.PROVE_HYP (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) thm_613 (hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) => thm_614 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t))) t) ;)

(; dict ;)

def thm_616 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) :=
  t_1 : hol.term hol.bool => thm_615 t_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ ((= s) Set.{})))) ((= s) Set.{})) ;)

(; dict ;)

def thm_617 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.not (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A)))) (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_607 t_1) (thm_616 t_1)) (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A)).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((Set.member (Set.choice s)) s))) (Data.Bool.~ (Data.Bool.~ ((= s) Set.{}))))) ((Data.Bool.==> (Data.Bool.~ ((Set.member (select \lambda x. ((Set.member x) s))) s))) ((= s) Set.{}))) ;)

(; dict ;)

def thm_618 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1)) (hol.not (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))))) (hol.imp (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1))) (hol.imp (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1))) (hol.not (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A)))) (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A)) (thm_605 A s_1) (thm_617 A s_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ ((Set.member (select \lambda x. ((Set.member x) s))) s))) ((= s) Set.{}))) ((Data.Bool.==> (Data.Bool.~ ((Set.member (Set.choice s)) s))) (Data.Bool.~ (Data.Bool.~ ((= s) Set.{}))))) ;)

(; dict ;)

def thm_619 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.imp (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (hol.imp (hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1)) (hol.not (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A)))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.SYM hol.bool (hol.imp (hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1)) (hol.not (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))))) (hol.imp (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (thm_618 A s_1).

(; Theorem: |- (Data.Bool.~ ((Set.member (select \lambda x. ((Set.member x) s))) s)) ;)

(; dict ;)

def thm_620 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) -> hol.proof (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t))) ;)

(; dict ;)

def thm_621 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1)) (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.REFL hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1)).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t))) ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t))) ;)

(; dict ;)

def thm_622 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1)) (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1))) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1)) (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1)) (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1)) (thm_621 A t_1 s_2) (thm_621 A t_1 s_2).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t))) ;)

(; dict ;)

def thm_623 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.forall (Set_2Eset A) (t_2 : hol.term (Set_2Eset A) => hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_1) (Set_2Emember A x_3 t_2))) (hol.eq (Set_2Eset A) s_1 t_2))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_321 A s_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t)) ;)

(; dict ;)

def thm_624 : A : hol.type -> t_1 : hol.term (Set_2Eset A) -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1)) :=
  A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => thm_623 A s_2 t_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) Set.{})))) ((= s) Set.{})) ;)

(; dict ;)

def thm_625 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 s_1) (Set_2Emember A x_2 (Set_2E_7B_7D A)))) (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => (A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => (A : hol.type => t_1 : hol.term (Set_2Eset A) => s_2 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1)) (hol.imp (hol.forall A (x_3 : hol.term A => hol.eq hol.bool (Set_2Emember A x_3 s_2) (Set_2Emember A x_3 t_1))) (hol.eq (Set_2Eset A) s_2 t_1)) (thm_622 A t_1 s_2) (thm_624 A t_1 s_2)) A t_1 s_2) A (Set_2E_7B_7D A) s_1.

(; Theorem: |- ((= (= ((Set.member x) s))) (= ((Set.member x) s))) ;)

(; dict ;)

def thm_626 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Set_2Emember A x_2 s_1)) (hol.eq hol.bool (Set_2Emember A x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Set_2Emember A x_2 s_1)).

(; Theorem: |- ((= (Set.member x)) (Set.member x)) ;)

(; dict ;)

def thm_627 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr (Set_2Eset A) hol.bool) (Set_2Emember A x_1) (Set_2Emember A x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL (hol.arr (Set_2Eset A) hol.bool) (Set_2Emember A x_1).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_628 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_629 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_630 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_629 t_1) (thm_629 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_631 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_632 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_631 thm_631.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_633 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_97 thm_632.

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_634 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_635 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_634 t_1) (thm_634 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_636 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_17 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_637 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_131 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_638 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_635 t_1) (thm_636 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_637 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_639 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_640 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_639 t_1) (thm_639 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_641 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_18 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_642 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_131 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_643 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_640 t_1) (thm_641 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_642 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_644 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_645 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_644 t_1) (thm_644 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_646 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_19 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_647 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_131 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_648 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_645 t_1) (thm_646 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_647 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_649 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_20 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_650 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_131 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_651 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_629 t_1) (thm_649 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_650 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_652 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_653 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_652 t_1) (thm_652 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_654 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_21 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_655 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_651 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_653 t_1) (thm_654 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_656 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_648 t_1) (thm_655 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_657 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_643 t_1) (thm_656 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_658 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_638 t_1) (thm_657 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_659 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_658 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_660 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_123 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_661 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_633 thm_659 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_660 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_662 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_123 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_663 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_661 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) => thm_662 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_664 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_123 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_665 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_663 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) => thm_664 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_666 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_156 q_1 p_2 hyp_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_667 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_665 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) => thm_666 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= v) x)) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_668 : A : hol.type -> x_1 : hol.term A -> v_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A v_2 x_1) hol.false) hol.false) :=
  A : hol.type => x_1 : hol.term A => v_2 : hol.term A => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_630 t_1) (thm_667 t_1)) (hol.eq A v_2 x_1).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.F)) \lambda x. Data.Bool.F) ;)

(; dict ;)

def thm_669 : A : hol.type -> v_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false) (x_2 : hol.term A => hol.false)) :=
  A : hol.type => v_1 : hol.term A => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false) (x_2 : hol.term A => hol.false) (x_2 : hol.term A => thm_668 A x_2 v_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.F))) (Data.Bool.? \lambda x. Data.Bool.F)) ;)

(; dict ;)

def thm_670 : A : hol.type -> v_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.false))) :=
  A : hol.type => v_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false) (x_2 : hol.term A => hol.false) (thm_628 A) (thm_669 A v_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. t)) t)) ((= (Data.Bool.? \lambda x. t)) t)) ;)

(; dict ;)

def thm_671 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. t)) t)) ((= (Data.Bool.? \lambda x. t)) t)) ;)

(; dict ;)

def thm_672 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (thm_671 A t_1) (thm_671 A t_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. t)) t) ;)

(; dict ;)

def thm_673 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_22 A t_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_674 : A : hol.type -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_1 : hol.term A => hol.false)) hol.false) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => t_1)) t_1) (thm_672 A t_1) (thm_673 A t_1)) A t_1) A hol.false.

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.F))) Data.Bool.F) ;)

(; dict ;)

def thm_675 : A : hol.type -> v_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false)) hol.false) :=
  A : hol.type => v_1 : hol.term A => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.false)) hol.false (thm_670 A v_1) (thm_674 A).

(; Theorem: |- ((= \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.F))) \lambda v. Data.Bool.F) ;)

(; dict ;)

def thm_676 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false)) (v_1 : hol.term A => hol.false)) :=
  A : hol.type => hol.ABS_THM A hol.bool (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false)) (v_1 : hol.term A => hol.false) (v_1 : hol.term A => thm_675 A v_1).

(; Theorem: |- ((= (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.F)))) (Set.fromPredicate \lambda v. Data.Bool.F)) ;)

(; dict ;)

def thm_677 : A : hol.type -> hol.proof (hol.eq (Set_2Eset A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false))) (Set_2EfromPredicate A (v_1 : hol.term A => hol.false))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) (Set_2Eset A) (Set_2EfromPredicate A) (Set_2EfromPredicate A) (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false)) (v_1 : hol.term A => hol.false) (thm_306 A) (thm_676 A).

(; Theorem: |- ((= Set.{}) (Set.fromPredicate \lambda v. Data.Bool.F)) ;)

(; dict ;)

def thm_678 : A : hol.type -> hol.proof (hol.eq (Set_2Eset A) (Set_2E_7B_7D A) (Set_2EfromPredicate A (v_1 : hol.term A => hol.false))) :=
  A : hol.type => hol.TRANS (Set_2Eset A) (Set_2E_7B_7D A) (Set_2EfromPredicate A (v_1 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (hol.eq A v_1 x_2) hol.false))) (Set_2EfromPredicate A (v_1 : hol.term A => hol.false)) (thm_322 A) (thm_677 A).

(; Theorem: |- ((= ((Set.member x) Set.{})) ((Set.member x) (Set.fromPredicate \lambda v. Data.Bool.F))) ;)

(; dict ;)

def thm_679 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember A x_1 (Set_2E_7B_7D A)) (Set_2Emember A x_1 (Set_2EfromPredicate A (v_2 : hol.term A => hol.false)))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM (Set_2Eset A) hol.bool (Set_2Emember A x_1) (Set_2Emember A x_1) (Set_2E_7B_7D A) (Set_2EfromPredicate A (v_2 : hol.term A => hol.false)) (thm_627 A x_1) (thm_678 A).

(; Theorem: |- ((= ((Set.member x) (Set.fromPredicate \lambda v. Data.Bool.F))) (\lambda v. Data.Bool.F x)) ;)

(; dict ;)

def thm_680 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember A x_1 (Set_2EfromPredicate A (v_2 : hol.term A => hol.false))) ((v_2 : hol.term A => hol.false) x_1)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => thm_180 A p_1 x_2) A (v_2 : hol.term A => hol.false) x_1.

(; Theorem: |- ((= (\lambda v. Data.Bool.F v)) Data.Bool.F) ;)

(; dict ;)

def thm_681 : A : hol.type -> v_1 : hol.term A -> hol.proof (hol.eq hol.bool ((v_2 : hol.term A => hol.false) v_1) hol.false) :=
  A : hol.type => v_1 : hol.term A => hol.BETA_CONV A hol.bool (v_2 : hol.term A => hol.false) v_1.

(; Theorem: |- ((= \lambda v. (\lambda v. Data.Bool.F v)) \lambda v. Data.Bool.F) ;)

(; dict ;)

def thm_682 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (v_1 : hol.term A => (v_2 : hol.term A => hol.false) v_1) (v_1 : hol.term A => hol.false)) :=
  A : hol.type => hol.ABS_THM A hol.bool (v_1 : hol.term A => (v_2 : hol.term A => hol.false) v_1) (v_1 : hol.term A => hol.false) (v_1 : hol.term A => thm_681 A v_1).

(; Theorem: |- ((= (\lambda v. (\lambda v. Data.Bool.F v) x)) (\lambda v. Data.Bool.F x)) ;)

(; dict ;)

def thm_683 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool ((v_2 : hol.term A => (v_3 : hol.term A => hol.false) v_2) x_1) ((v_2 : hol.term A => hol.false) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A hol.bool (v_2 : hol.term A => (v_3 : hol.term A => hol.false) v_2) (v_2 : hol.term A => hol.false) x_1 x_1 (thm_682 A) (thm_178 A x_1).

(; Theorem: |- ((= (= (\lambda v. (\lambda v. Data.Bool.F v) x))) (= (\lambda v. Data.Bool.F x))) ;)

(; dict ;)

def thm_684 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((v_2 : hol.term A => (v_3 : hol.term A => hol.false) v_2) x_1)) (hol.eq hol.bool ((v_2 : hol.term A => hol.false) x_1))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((v_2 : hol.term A => (v_3 : hol.term A => hol.false) v_2) x_1) ((v_2 : hol.term A => hol.false) x_1) thm_26 (thm_683 A x_1).

(; Theorem: |- ((= (\lambda v. Data.Bool.F x)) Data.Bool.F) ;)

(; dict ;)

def thm_685 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool ((v_2 : hol.term A => hol.false) x_1) hol.false) :=
  A : hol.type => x_1 : hol.term A => hol.BETA_CONV A hol.bool (v_2 : hol.term A => hol.false) x_1.

(; Theorem: |- ((= ((= (\lambda v. (\lambda v. Data.Bool.F v) x)) (\lambda v. Data.Bool.F x))) ((= (\lambda v. Data.Bool.F x)) Data.Bool.F)) ;)

(; dict ;)

def thm_686 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((v_2 : hol.term A => (v_3 : hol.term A => hol.false) v_2) x_1) ((v_2 : hol.term A => hol.false) x_1)) (hol.eq hol.bool ((v_2 : hol.term A => hol.false) x_1) hol.false)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((v_2 : hol.term A => (v_3 : hol.term A => hol.false) v_2) x_1)) (hol.eq hol.bool ((v_2 : hol.term A => hol.false) x_1)) ((v_2 : hol.term A => hol.false) x_1) hol.false (thm_684 A x_1) (thm_685 A x_1).

(; Theorem: |- ((= ((Set.member x) (Set.fromPredicate \lambda v. Data.Bool.F))) Data.Bool.F) ;)

(; dict ;)

def thm_687 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember A x_1 (Set_2EfromPredicate A (v_2 : hol.term A => hol.false))) hol.false) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (Set_2Emember A x_1 (Set_2EfromPredicate A (v_2 : hol.term A => hol.false))) ((v_2 : hol.term A => hol.false) x_1) hol.false (thm_680 A x_1) (hol.EQ_MP (hol.eq hol.bool ((v_2 : hol.term A => (v_3 : hol.term A => hol.false) v_2) x_1) ((v_2 : hol.term A => hol.false) x_1)) (hol.eq hol.bool ((v_2 : hol.term A => hol.false) x_1) hol.false) (thm_686 A x_1) (thm_683 A x_1)).

(; Theorem: |- ((= ((Set.member x) Set.{})) Data.Bool.F) ;)

(; dict ;)

def thm_688 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Set_2Emember A x_1 (Set_2E_7B_7D A)) hol.false) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (Set_2Emember A x_1 (Set_2E_7B_7D A)) (Set_2Emember A x_1 (Set_2EfromPredicate A (v_2 : hol.term A => hol.false))) hol.false (thm_679 A x_1) (thm_687 A x_1).

(; Theorem: |- ((= ((= ((Set.member x) s)) ((Set.member x) Set.{}))) ((= ((Set.member x) s)) Data.Bool.F)) ;)

(; dict ;)

def thm_689 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember A x_2 s_1) (Set_2Emember A x_2 (Set_2E_7B_7D A))) (hol.eq hol.bool (Set_2Emember A x_2 s_1) hol.false)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Set_2Emember A x_2 s_1)) (hol.eq hol.bool (Set_2Emember A x_2 s_1)) (Set_2Emember A x_2 (Set_2E_7B_7D A)) hol.false (thm_626 A s_1 x_2) (thm_688 A x_2).

(; Theorem: |- ((= ((= ((Set.member x) s)) Data.Bool.F)) (Data.Bool.~ ((Set.member x) s))) ;)

(; dict ;)

def thm_690 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember A x_2 s_1) hol.false) (hol.not (Set_2Emember A x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => (t_1 : hol.term hol.bool => thm_146 t_1) (Set_2Emember A x_2 s_1).

(; Theorem: |- ((= ((= ((Set.member x) s)) ((Set.member x) Set.{}))) (Data.Bool.~ ((Set.member x) s))) ;)

(; dict ;)

def thm_691 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Set_2Emember A x_2 s_1) (Set_2Emember A x_2 (Set_2E_7B_7D A))) (hol.not (Set_2Emember A x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Set_2Emember A x_2 s_1) (Set_2Emember A x_2 (Set_2E_7B_7D A))) (hol.eq hol.bool (Set_2Emember A x_2 s_1) hol.false) (hol.not (Set_2Emember A x_2 s_1)) (thm_689 A s_1 x_2) (thm_690 A s_1 x_2).

(; Theorem: |- ((= \lambda x. ((= ((Set.member x) s)) ((Set.member x) Set.{}))) \lambda x. (Data.Bool.~ ((Set.member x) s))) ;)

(; dict ;)

def thm_692 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 s_1) (Set_2Emember A x_2 (Set_2E_7B_7D A))) (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 s_1) (Set_2Emember A x_2 (Set_2E_7B_7D A))) (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1)) (x_2 : hol.term A => thm_691 A s_1 x_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) Set.{})))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) ;)

(; dict ;)

def thm_693 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 s_1) (Set_2Emember A x_2 (Set_2E_7B_7D A)))) (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 s_1) (Set_2Emember A x_2 (Set_2E_7B_7D A))) (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1)) (thm_25 A) (thm_692 A s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) Set.{})))) ;)

(; dict ;)

def thm_694 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 s_1) (Set_2Emember A x_2 (Set_2E_7B_7D A))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.SYM hol.bool (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 s_1) (Set_2Emember A x_2 (Set_2E_7B_7D A)))) (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) (thm_693 A s_1).

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. ((Set.member x) s) x))) (Data.Bool.~ ((Set.member x) s))) ;)

(; dict ;)

def thm_695 : A : hol.type -> x_1 : hol.term A -> s_2 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.not ((x_3 : hol.term A => Set_2Emember A x_3 s_2) x_1)) (hol.not (Set_2Emember A x_1 s_2))) :=
  A : hol.type => x_1 : hol.term A => s_2 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_3 : hol.term A => Set_2Emember A x_3 s_2) x_1) (Set_2Emember A x_1 s_2) thm_587 (thm_220 A x_1 s_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (\lambda x. ((Set.member x) s) x))) \lambda x. (Data.Bool.~ ((Set.member x) s))) ;)

(; dict ;)

def thm_696 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2)) (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2)) (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1)) (x_2 : hol.term A => thm_695 A x_2 s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((Set.member x) s) x)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) ;)

(; dict ;)

def thm_697 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2))) (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2)) (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1)) (thm_25 A) (thm_696 A s_1).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((Set.member x) s) x))))) (= (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s))))) ;)

(; dict ;)

def thm_698 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2))) (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) thm_26 (thm_697 A s_1).

(; Theorem: |- ((= \lambda x. (\lambda x. ((Set.member x) s) x)) \lambda x. ((Set.member x) s)) ;)

(; dict ;)

def thm_699 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.ABS_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2) (x_2 : hol.term A => Set_2Emember A x_2 s_1) (x_2 : hol.term A => thm_220 A x_2 s_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (\lambda x. ((Set.member x) s) x))) (Data.Bool.? \lambda x. ((Set.member x) s))) ;)

(; dict ;)

def thm_700 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2) (x_2 : hol.term A => Set_2Emember A x_2 s_1) (thm_628 A) (thm_699 A s_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((Set.member x) s) x)))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Set.member x) s)))) ;)

(; dict ;)

def thm_701 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool hol.not hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) thm_587 (thm_700 A s_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((Set.member x) s) x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((Set.member x) s) x))))) ((= (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Set.member x) s))))) ;)

(; dict ;)

def thm_702 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (thm_698 A s_1) (thm_701 A s_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_703 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_704 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (thm_703 A p_1) (thm_703 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_705 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_706 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) => hol.SYM hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (thm_705 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_707 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_708 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) => hol.SYM hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (thm_707 A p_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_709 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) => thm_706 A p_1 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) => thm_708 A p_1 hyp_1).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_710 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => thm_709 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))))) ;)

(; dict ;)

def thm_711 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (thm_24 A) (thm_710 A).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_712 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) (thm_711 A) (thm_23 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_713 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_712 A p_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((Set.member x) s) x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((Set.member x) s) x)))) ;)

(; dict ;)

def thm_714 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (thm_704 A p_1) (thm_713 A p_1)) A p_1) A (x_2 : hol.term A => Set_2Emember A x_2 s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.~ (Data.Bool.? \lambda x. ((Set.member x) s)))) ;)

(; dict ;)

def thm_715 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) (thm_702 A s_1) (thm_714 A s_1).

(; Theorem: |- ((= \lambda x. ((Set.member x) s)) \lambda x. ((Set.member x) s)) ;)

(; dict ;)

def thm_716 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Set.member x) s))) (\lambda p. (p (select p)) \lambda x. ((Set.member x) s))) ;)

(; dict ;)

def thm_717 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1) (x_2 : hol.term A => Set_2Emember A x_2 s_1) (thm_0 A) (thm_716 A s_1).

(; Theorem: |- ((= (\lambda p. (p (select p)) p)) (p (select p))) ;)

(; dict ;)

def thm_718 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1.

(; Theorem: |- ((= \lambda p. (\lambda p. (p (select p)) p)) \lambda p. (p (select p))) ;)

(; dict ;)

def thm_719 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)) (p_1 : hol.term (hol.arr A hol.bool) => thm_718 A p_1).

(; Theorem: |- ((= (\lambda p. (\lambda p. (p (select p)) p) \lambda x. ((Set.member x) s))) (\lambda p. (p (select p)) \lambda x. ((Set.member x) s))) ;)

(; dict ;)

def thm_720 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1) (x_2 : hol.term A => Set_2Emember A x_2 s_1) (thm_719 A) (thm_716 A s_1).

(; Theorem: |- ((= (= (\lambda p. (\lambda p. (p (select p)) p) \lambda x. ((Set.member x) s)))) (= (\lambda p. (p (select p)) \lambda x. ((Set.member x) s)))) ;)

(; dict ;)

def thm_721 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) thm_26 (thm_720 A s_1).

(; Theorem: |- ((= (\lambda p. (p (select p)) \lambda x. ((Set.member x) s))) (\lambda x. ((Set.member x) s) (select \lambda x. ((Set.member x) s)))) ;)

(; dict ;)

def thm_722 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1).

(; Theorem: |- ((= ((= (\lambda p. (\lambda p. (p (select p)) p) \lambda x. ((Set.member x) s))) (\lambda p. (p (select p)) \lambda x. ((Set.member x) s)))) ((= (\lambda p. (p (select p)) \lambda x. ((Set.member x) s))) (\lambda x. ((Set.member x) s) (select \lambda x. ((Set.member x) s))))) ;)

(; dict ;)

def thm_723 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1))) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (thm_721 A s_1) (thm_722 A s_1).

(; Theorem: |- ((= (\lambda x. (\lambda x. ((Set.member x) s) x) (select \lambda x. ((Set.member x) s)))) (\lambda x. ((Set.member x) s) (select \lambda x. ((Set.member x) s)))) ;)

(; dict ;)

def thm_724 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2) (x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (thm_699 A s_1) (thm_597 A s_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. ((Set.member x) s) x) (select \lambda x. ((Set.member x) s))))) (= (\lambda x. ((Set.member x) s) (select \lambda x. ((Set.member x) s))))) ;)

(; dict ;)

def thm_725 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) (hol.eq hol.bool ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) thm_26 (thm_724 A s_1).

(; Theorem: |- ((= (\lambda x. ((Set.member x) s) (select \lambda x. ((Set.member x) s)))) ((Set.member (select \lambda x. ((Set.member x) s))) s)) ;)

(; dict ;)

def thm_726 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.BETA_CONV A hol.bool (x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)).

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. ((Set.member x) s) x) (select \lambda x. ((Set.member x) s)))) (\lambda x. ((Set.member x) s) (select \lambda x. ((Set.member x) s))))) ((= (\lambda x. ((Set.member x) s) (select \lambda x. ((Set.member x) s)))) ((Set.member (select \lambda x. ((Set.member x) s))) s))) ;)

(; dict ;)

def thm_727 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) (hol.eq hol.bool ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) (hol.eq hol.bool ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1) (thm_725 A s_1) (thm_726 A s_1).

(; Theorem: |- ((= (\lambda p. (p (select p)) \lambda x. ((Set.member x) s))) ((Set.member (select \lambda x. ((Set.member x) s))) s)) ;)

(; dict ;)

def thm_728 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1) (hol.EQ_MP (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) (thm_723 A s_1) (thm_720 A s_1)) (hol.EQ_MP (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => Set_2Emember A x_3 s_1) x_2) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)))) (hol.eq hol.bool ((x_2 : hol.term A => Set_2Emember A x_2 s_1) (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) (thm_727 A s_1) (thm_724 A s_1)).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Set.member x) s))) ((Set.member (select \lambda x. ((Set.member x) s))) s)) ;)

(; dict ;)

def thm_729 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1) (thm_717 A s_1) (thm_728 A s_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. ((Set.member x) s)))) (Data.Bool.~ ((Set.member (select \lambda x. ((Set.member x) s))) s))) ;)

(; dict ;)

def thm_730 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.APP_THM hol.bool hol.bool hol.not hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1)) (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1) thm_587 (thm_729 A s_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) (Data.Bool.~ ((Set.member (select \lambda x. ((Set.member x) s))) s))) ;)

(; dict ;)

def thm_731 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS hol.bool (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => Set_2Emember A x_2 s_1))) (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) (thm_715 A s_1) (thm_730 A s_1).

(; Theorem: |- ((= (Data.Bool.~ ((Set.member (select \lambda x. ((Set.member x) s))) s))) (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s)))) ;)

(; dict ;)

def thm_732 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq hol.bool (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.SYM hol.bool (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) (thm_731 A s_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.~ ((Set.member x) s))) ;)

(; dict ;)

def thm_733 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) => hol.EQ_MP (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) (thm_732 A s_1) (thm_620 A s_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) Set.{}))) ;)

(; dict ;)

def thm_734 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 s_1) (Set_2Emember A x_2 (Set_2E_7B_7D A)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) => hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.not (Set_2Emember A x_2 s_1))) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (Set_2Emember A x_2 s_1) (Set_2Emember A x_2 (Set_2E_7B_7D A)))) (thm_694 A s_1) (thm_733 A s_1 hyp_1).

(; Theorem: |- ((= s) Set.{}) ;)

(; dict ;)

def thm_735 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) -> hol.proof (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) => thm_625 A s_1 (thm_734 A s_1 hyp_1).

(; Theorem: |- ((= s) Set.{}) ;)

(; dict ;)

def thm_736 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hyp_1 : hol.proof (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) -> hol.proof (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) => hol.PROVE_HYP (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A)) (thm_620 A s_1 hyp_1) (hyp_2 : hol.proof (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) => thm_735 A s_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((Set.member (select \lambda x. ((Set.member x) s))) s))) ((= s) Set.{})) ;)

(; dict ;)

def thm_737 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.imp (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hyp_1 : hol.proof (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) => thm_736 A s_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((Set.member (Set.choice s)) s))) (Data.Bool.~ (Data.Bool.~ ((= s) Set.{})))) ;)

(; dict ;)

def thm_738 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.imp (hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1)) (hol.not (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.imp (hol.not (Set_2Emember A (hol.select A (x_2 : hol.term A => Set_2Emember A x_2 s_1)) s_1)) (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (hol.imp (hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1)) (hol.not (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))))) (thm_619 A s_1) (thm_737 A s_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((= s) Set.{}))) ((Set.member (Set.choice s)) s)) ;)

(; dict ;)

def thm_739 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1)) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.EQ_MP (hol.imp (hol.not (Set_2Emember A (Set_2Echoice A s_1) s_1)) (hol.not (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))))) (hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1)) (thm_586 A s_1) (thm_738 A s_1).

(; Theorem: |- (Data.Bool.! \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= s) Set.{}))) ((Set.member (Set.choice s)) s))) ;)

(; dict ;)

def thm_740 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_739 A s_1.

(; Theorem: |- (Data.Bool.! \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= s) Set.{}))) ((Set.member (Set.choice s)) s))) ;)

(; thm ;)

def thm_741 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1))) :=
  A : hol.type => hol.EQ_MP (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1))) (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.imp (hol.not (hol.eq (Set_2Eset A) s_1 (Set_2E_7B_7D A))) (Set_2Emember A (Set_2Echoice A s_1) s_1))) (thm_570 A) (thm_740 A).

(; Theorem: |- ((= Set.rest) \lambda _9613. ((Set.delete _9613) (Set.choice _9613))) ;)

(; dict ;)

def thm_742 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Erest A) (__9613_1 : hol.term (Set_2Eset A) => Set_2Edelete A __9613_1 (Set_2Echoice A __9613_1))) :=
  A : hol.type => hol.REFL (hol.arr (Set_2Eset A) (Set_2Eset A)) (Set_2Erest A).

(; Theorem: |- ((= _9613) _9613) ;)

(; dict ;)

def thm_743 : A : hol.type -> __9613_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) __9613_1 __9613_1) :=
  A : hol.type => __9613_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) __9613_1.

(; Theorem: |- ((= (Set.rest _9613)) (\lambda _9613. ((Set.delete _9613) (Set.choice _9613)) _9613)) ;)

(; dict ;)

def thm_744 : A : hol.type -> __9613_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Erest A __9613_1) ((__9613_2 : hol.term (Set_2Eset A) => Set_2Edelete A __9613_2 (Set_2Echoice A __9613_2)) __9613_1)) :=
  A : hol.type => __9613_1 : hol.term (Set_2Eset A) => hol.APP_THM (Set_2Eset A) (Set_2Eset A) (Set_2Erest A) (__9613_2 : hol.term (Set_2Eset A) => Set_2Edelete A __9613_2 (Set_2Echoice A __9613_2)) __9613_1 __9613_1 (thm_742 A) (thm_743 A __9613_1).

(; Theorem: |- ((= (\lambda _9613. ((Set.delete _9613) (Set.choice _9613)) _9613)) ((Set.delete _9613) (Set.choice _9613))) ;)

(; dict ;)

def thm_745 : A : hol.type -> __9613_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) ((__9613_2 : hol.term (Set_2Eset A) => Set_2Edelete A __9613_2 (Set_2Echoice A __9613_2)) __9613_1) (Set_2Edelete A __9613_1 (Set_2Echoice A __9613_1))) :=
  A : hol.type => __9613_1 : hol.term (Set_2Eset A) => hol.BETA_CONV (Set_2Eset A) (Set_2Eset A) (__9613_2 : hol.term (Set_2Eset A) => Set_2Edelete A __9613_2 (Set_2Echoice A __9613_2)) __9613_1.

(; Theorem: |- ((= (Set.rest _9613)) ((Set.delete _9613) (Set.choice _9613))) ;)

(; dict ;)

def thm_746 : A : hol.type -> __9613_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Erest A __9613_1) (Set_2Edelete A __9613_1 (Set_2Echoice A __9613_1))) :=
  A : hol.type => __9613_1 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset A) (Set_2Erest A __9613_1) ((__9613_2 : hol.term (Set_2Eset A) => Set_2Edelete A __9613_2 (Set_2Echoice A __9613_2)) __9613_1) (Set_2Edelete A __9613_1 (Set_2Echoice A __9613_1)) (thm_744 A __9613_1) (thm_745 A __9613_1).

(; Theorem: |- (Data.Bool.! \lambda _9613. ((= (Set.rest _9613)) ((Set.delete _9613) (Set.choice _9613)))) ;)

(; dict ;)

def thm_747 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (__9613_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Erest A __9613_1) (Set_2Edelete A __9613_1 (Set_2Echoice A __9613_1)))) :=
  A : hol.type => __9613_1 : hol.term (Set_2Eset A) => thm_746 A __9613_1.

(; Theorem: |- ((= (Set.rest s)) ((Set.delete s) (Set.choice s))) ;)

(; dict ;)

def thm_748 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Erest A s_1) (Set_2Edelete A s_1 (Set_2Echoice A s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => (A : hol.type => __9613_1 : hol.term (Set_2Eset A) => thm_747 A __9613_1) A s_1.

(; Theorem: |- ((= ((Set.delete s) (Set.choice s))) ((Set.delete s) (Set.choice s))) ;)

(; dict ;)

def thm_749 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Edelete A s_1 (Set_2Echoice A s_1)) (Set_2Edelete A s_1 (Set_2Echoice A s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.REFL (Set_2Eset A) (Set_2Edelete A s_1 (Set_2Echoice A s_1)).

(; Theorem: |- ((= ((Set.delete s) (Set.choice s))) ((Set.delete s) (Set.choice s))) ;)

(; dict ;)

def thm_750 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Edelete A s_1 (Set_2Echoice A s_1)) (Set_2Edelete A s_1 (Set_2Echoice A s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.SYM (Set_2Eset A) (Set_2Edelete A s_1 (Set_2Echoice A s_1)) (Set_2Edelete A s_1 (Set_2Echoice A s_1)) (thm_749 A s_1).

(; Theorem: |- ((= (Set.rest s)) ((Set.delete s) (Set.choice s))) ;)

(; dict ;)

def thm_751 : A : hol.type -> s_1 : hol.term (Set_2Eset A) -> hol.proof (hol.eq (Set_2Eset A) (Set_2Erest A s_1) (Set_2Edelete A s_1 (Set_2Echoice A s_1))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => hol.TRANS (Set_2Eset A) (Set_2Erest A s_1) (Set_2Edelete A s_1 (Set_2Echoice A s_1)) (Set_2Edelete A s_1 (Set_2Echoice A s_1)) (thm_748 A s_1) (thm_750 A s_1).

(; Theorem: |- (Data.Bool.! \lambda s. ((= (Set.rest s)) ((Set.delete s) (Set.choice s)))) ;)

(; dict ;)

def thm_752 : A : hol.type -> hol.proof (hol.forall (Set_2Eset A) (s_1 : hol.term (Set_2Eset A) => hol.eq (Set_2Eset A) (Set_2Erest A s_1) (Set_2Edelete A s_1 (Set_2Echoice A s_1)))) :=
  A : hol.type => s_1 : hol.term (Set_2Eset A) => thm_751 A s_1.
