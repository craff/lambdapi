
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME bool_2Dclass_2Da1.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))).

(; axiom ;)

thm_1 : hol.proof hol.true.

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; axiom ;)

thm_4 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_5 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda x. ((= (select \lambda y. ((= y) x))) x)) \lambda x. ((= (select \lambda y. ((= y) x))) x)) ;)

(; dict ;)

def thm_6 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1).

(; Theorem: |- ((= \lambda x. ((= (select \lambda y. ((= y) x))) x)) \lambda x. ((= (select \lambda y. ((= y) x))) x)) ;)

(; dict ;)

def thm_7 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (thm_6 A) (thm_6 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (select \lambda y. ((= y) x))) x))) (Data.Bool.! \lambda x. ((= (select \lambda y. ((= y) x))) x))) ;)

(; dict ;)

def thm_8 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1)) (hol.forall A (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (thm_5 A) (thm_7 A).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_9 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= (\lambda y. ((= y) x) (select \lambda y. ((= y) x)))) ((= (select \lambda y. ((= y) x))) x)) ;)

(; dict ;)

def thm_10 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool ((y_2 : hol.term A => hol.eq A y_2 x_1) (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1))) (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.BETA_CONV A hol.bool (y_2 : hol.term A => hol.eq A y_2 x_1) (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)).

(; Theorem: |- ((= (= (\lambda y. ((= y) x) (select \lambda y. ((= y) x))))) (= ((= (select \lambda y. ((= y) x))) x))) ;)

(; dict ;)

def thm_11 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((y_2 : hol.term A => hol.eq A y_2 x_1) (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)))) (hol.eq hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((y_2 : hol.term A => hol.eq A y_2 x_1) (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1))) (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) thm_9 (thm_10 A x_1).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((= y) x))) (Data.Bool.? \lambda y. ((= y) x))) ;)

(; dict ;)

def thm_12 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)).

(; Theorem: |- ((= ((= (\lambda y. ((= y) x) (select \lambda y. ((= y) x)))) (Data.Bool.? \lambda y. ((= y) x)))) ((= ((= (select \lambda y. ((= y) x))) x)) (Data.Bool.? \lambda y. ((= y) x)))) ;)

(; dict ;)

def thm_13 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((y_2 : hol.term A => hol.eq A y_2 x_1) (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1))) (hol.eq hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((y_2 : hol.term A => hol.eq A y_2 x_1) (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)))) (hol.eq hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)) (thm_11 A x_1) (thm_12 A x_1).

(; Theorem: |- ((= (= (p (select p)))) (= (p (select p)))) ;)

(; dict ;)

def thm_14 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (p_1 (hol.select A p_1))) (hol.eq hol.bool (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (p_1 (hol.select A p_1))).

(; Theorem: |- ((= ((= Data.Bool.?) \lambda p. (p (select p)))) ((= Data.Bool.?) \lambda p. (p (select p)))) ;)

(; dict ;)

def thm_15 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)))) :=
  A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))).

(; Theorem: |- ((= ((= Data.Bool.?) \lambda p. (p (select p)))) ((= Data.Bool.?) \lambda p. (p (select p)))) ;)

(; dict ;)

def thm_16 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)))) :=
  A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (thm_15 A) (thm_15 A).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_17 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) p_1 p_1) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) p_1.

(; Theorem: |- ((= (Data.Bool.? p)) (\lambda p. (p (select p)) p)) ;)

(; dict ;)

def thm_18 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1 p_1 (hol.EQ_MP (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2))) (thm_16 A) (thm_0 A)) (thm_17 A p_1).

(; Theorem: |- ((= (\lambda p. (p (select p)) p)) (p (select p))) ;)

(; dict ;)

def thm_19 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1.

(; Theorem: |- ((= \lambda p. (\lambda p. (p (select p)) p)) \lambda p. (p (select p))) ;)

(; dict ;)

def thm_20 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)) (p_1 : hol.term (hol.arr A hol.bool) => thm_19 A p_1).

(; Theorem: |- ((= (\lambda p. (\lambda p. (p (select p)) p) p)) (\lambda p. (p (select p)) p)) ;)

(; dict ;)

def thm_21 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1 p_1 (thm_20 A) (thm_17 A p_1).

(; Theorem: |- ((= (= (\lambda p. (\lambda p. (p (select p)) p) p))) (= (\lambda p. (p (select p)) p))) ;)

(; dict ;)

def thm_22 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1)) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) thm_9 (thm_21 A p_1).

(; Theorem: |- ((= ((= (\lambda p. (\lambda p. (p (select p)) p) p)) (\lambda p. (p (select p)) p))) ((= (\lambda p. (p (select p)) p)) (p (select p)))) ;)

(; dict ;)

def thm_23 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1)) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1)) (thm_22 A p_1) (thm_19 A p_1).

(; Theorem: |- ((= (Data.Bool.? p)) (p (select p))) ;)

(; dict ;)

def thm_24 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1)) (thm_18 A p_1) (hol.EQ_MP (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1))) (thm_23 A p_1) (thm_21 A p_1)).

(; Theorem: |- ((= ((= (p (select p))) (Data.Bool.? p))) ((= (p (select p))) (p (select p)))) ;)

(; dict ;)

def thm_25 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) (hol.eq hol.bool (p_1 (hol.select A p_1)) (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1))) (hol.eq hol.bool (p_1 (hol.select A p_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1)) (thm_14 A p_1) (thm_24 A p_1).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_26 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_27 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_26 A x_1) (thm_26 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_28 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_29 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_28 A) (thm_28 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_30 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_5 A) (thm_29 A).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_31 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_32 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_31 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_33 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_32 t_1 hyp_1) thm_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_34 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_35 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_34 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_1).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_36 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_33 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_35 t_1 hyp_1).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_37 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_36 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_38 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_2 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_39 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_37 A x_1) (thm_38 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_40 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_26 A x_1) (thm_39 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_41 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 x_1) hol.true) :=
  x_1 : hol.term hol.bool => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_27 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_30 A) (thm_40 A) x_1)) hol.bool x_1.

(; Theorem: |- ((= ((= (p (select p))) (p (select p)))) Data.Bool.T) ;)

(; dict ;)

def thm_42 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (p_1 (hol.select A p_1))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_41 x_1) (p_1 (hol.select A p_1)).

(; Theorem: |- ((= ((= (p (select p))) (Data.Bool.? p))) Data.Bool.T) ;)

(; dict ;)

def thm_43 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) (hol.eq hol.bool (p_1 (hol.select A p_1)) (p_1 (hol.select A p_1))) hol.true (thm_25 A p_1) (thm_42 A p_1).

(; Theorem: |- ((= Data.Bool.T) ((= (p (select p))) (Data.Bool.? p))) ;)

(; dict ;)

def thm_44 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) hol.true (thm_43 A p_1).

(; Theorem: |- ((= (p (select p))) (Data.Bool.? p)) ;)

(; dict ;)

def thm_45 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP hol.true (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) (thm_44 A p_1) thm_1.

(; Theorem: |- ((= (\lambda y. ((= y) x) (select \lambda y. ((= y) x)))) (Data.Bool.? \lambda y. ((= y) x))) ;)

(; dict ;)

def thm_46 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool ((y_2 : hol.term A => hol.eq A y_2 x_1) (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_45 A p_1) A (y_2 : hol.term A => hol.eq A y_2 x_1).

(; Theorem: |- ((= ((= (select \lambda y. ((= y) x))) x)) (Data.Bool.? \lambda y. ((= y) x))) ;)

(; dict ;)

def thm_47 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool ((y_2 : hol.term A => hol.eq A y_2 x_1) (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1))) (hol.eq hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1))) (thm_13 A x_1) (thm_46 A x_1).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((= y) x))) ((= (select \lambda y. ((= y) x))) x)) ;)

(; dict ;)

def thm_48 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)) (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.SYM hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)) (thm_47 A x_1).

(; Theorem: |- ((= (\lambda y. ((= y) x) x)) ((= x) x)) ;)

(; dict ;)

def thm_49 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool ((y_2 : hol.term A => hol.eq A y_2 x_1) x_1) (hol.eq A x_1 x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.BETA_CONV A hol.bool (y_2 : hol.term A => hol.eq A y_2 x_1) x_1.

(; Theorem: |- ((= ((= x) x)) (\lambda y. ((= y) x) x)) ;)

(; dict ;)

def thm_50 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) ((y_2 : hol.term A => hol.eq A y_2 x_1) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.SYM hol.bool ((y_2 : hol.term A => hol.eq A y_2 x_1) x_1) (hol.eq A x_1 x_1) (thm_49 A x_1).

(; Theorem: |- (\lambda y. ((= y) x) x) ;)

(; dict ;)

def thm_51 : A : hol.type -> x_1 : hol.term A -> hol.proof ((y_2 : hol.term A => hol.eq A y_2 x_1) x_1) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) ((y_2 : hol.term A => hol.eq A y_2 x_1) x_1) (thm_50 A x_1) (thm_38 A x_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_52 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_53 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_54 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_52 A P_1) (thm_53 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_55 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_56 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_3 A) (thm_55 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_57 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_54 A P_1) (thm_56 A P_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_58 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_57 A P_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_59 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_60 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_59 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_61 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_62 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_60 A Q_3 x_1 P_2 hyp_2 (thm_61 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_63 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_62 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_64 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_63 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_65 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_58 A P_2) (thm_64 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda y. ((= y) x)) ;)

(; dict ;)

def thm_66 : A : hol.type -> x_1 : hol.term A -> hyp_1 : hol.proof ((y_2 : hol.term A => hol.eq A y_2 x_1) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => hyp_1 : hol.proof ((y_2 : hol.term A => hol.eq A y_2 x_1) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_65 A x_1 P_2 hyp_1) A x_1 (y_2 : hol.term A => hol.eq A y_2 x_1) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda y. ((= y) x)) ;)

(; dict ;)

def thm_67 : A : hol.type -> x_1 : hol.term A -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.PROVE_HYP ((y_2 : hol.term A => hol.eq A y_2 x_1) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)) (thm_51 A x_1) (hyp_1 : hol.proof ((y_2 : hol.term A => hol.eq A y_2 x_1) x_1) => thm_66 A x_1 hyp_1).

(; Theorem: |- ((= (select \lambda y. ((= y) x))) x) ;)

(; dict ;)

def thm_68 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.eq A y_2 x_1)) (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (thm_48 A x_1) (thm_67 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= (select \lambda y. ((= y) x))) x)) ;)

(; dict ;)

def thm_69 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1)) :=
  A : hol.type => x_1 : hol.term A => thm_68 A x_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((= (select \lambda y. ((= y) x))) x)) ;)

(; thm ;)

def thm_70 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1)) :=
  A : hol.type => hol.EQ_MP (hol.forall A (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1)) (hol.forall A (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1)) (thm_8 A) (thm_69 A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_71 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x)))) \lambda p. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x)))) ;)

(; dict ;)

def thm_72 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x)))) \lambda p. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x)))) ;)

(; dict ;)

def thm_73 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) (thm_72 A) (thm_72 A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))))) ;)

(; dict ;)

def thm_74 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) (thm_71 A) (thm_73 A).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))) \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))) ;)

(; dict ;)

def thm_75 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)) (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))) \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))) ;)

(; dict ;)

def thm_76 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)) (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)) (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)) (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)) (thm_75 A p_1) (thm_75 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x)))) ;)

(; dict ;)

def thm_77 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) (hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)) (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)) (thm_5 A) (thm_76 A p_1).

(; Theorem: |- (Data.Bool.! \lambda y. ((= (p y)) ((= y) x))) ;)

(; dict ;)

def thm_78 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hyp_1.

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_79 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A hol.bool)) (hol.eq A) (hol.eq A)) :=
  A : hol.type => hol.REFL (hol.arr A (hol.arr A hol.bool)) (hol.eq A).

(; Theorem: |- ((= select) select) ;)

(; dict ;)

def thm_80 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) A) (hol.select A) (hol.select A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) A) (hol.select A).

(; Theorem: |- ((= ((= t) \lambda x. (t x))) ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_81 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)).

(; Theorem: |- ((= ((= t) \lambda x. (t x))) ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_82 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (thm_81 B A t_1) (thm_81 B A t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_83 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)).

(; Theorem: |- ((= t) \lambda x. (t x)) ;)

(; dict ;)

def thm_84 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) -> hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) => hyp_1.

(; Theorem: |- ((= \lambda x. (t x)) t) ;)

(; dict ;)

def thm_85 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) => hol.SYM (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2) (thm_84 B A t_1 hyp_1).

(; Theorem: |- ((= \lambda x. (t x)) t) ;)

(; dict ;)

def thm_86 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) => hyp_1.

(; Theorem: |- ((= t) \lambda x. (t x)) ;)

(; dict ;)

def thm_87 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) -> hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) => hol.SYM (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1 (thm_86 B A t_1 hyp_1).

(; Theorem: |- ((= ((= \lambda x. (t x)) t)) ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_88 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.PROP_EXT (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hyp_1 : hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) => thm_85 B A t_1 hyp_1) (hyp_1 : hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) => thm_87 B A t_1 hyp_1).

(; Theorem: |- ((= \lambda t. ((= \lambda x. (t x)) t)) \lambda t. ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_89 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) hol.bool (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (t_1 : hol.term (hol.arr A B) => thm_88 B A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= \lambda x. (t x)) t))) (Data.Bool.! \lambda t. ((= t) \lambda x. (t x)))) ;)

(; dict ;)

def thm_90 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)) (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (thm_83 B A) (thm_89 B A).

(; Theorem: |- (Data.Bool.! \lambda t. ((= t) \lambda x. (t x))) ;)

(; dict ;)

def thm_91 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (x_2 : hol.term A => t_1 x_2) t_1)) (hol.forall (hol.arr A B) (t_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2))) (thm_90 B A) (thm_4 B A).

(; Theorem: |- ((= t) \lambda x. (t x)) ;)

(; dict ;)

def thm_92 : B : hol.type -> A : hol.type -> t_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) :=
  B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => thm_91 B A t_1.

(; Theorem: |- ((= t) \lambda x. (t x)) ;)

(; dict ;)

def thm_93 : A : hol.type -> t_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) t_1 (x_2 : hol.term A => t_1 x_2)) :=
  A : hol.type => t_1 : hol.term (hol.arr A hol.bool) => (B : hol.type => A : hol.type => t_1 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (hol.eq (hol.arr A B) t_1 (x_2 : hol.term A => t_1 x_2)) (thm_82 B A t_1) (thm_92 B A t_1)) hol.bool A t_1.

(; Theorem: |- ((= p) \lambda x. (p x)) ;)

(; dict ;)

def thm_94 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) p_1 (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => t_1 : hol.term (hol.arr A hol.bool) => thm_93 A t_1) A p_1.

(; Theorem: |- ((= (select p)) (select \lambda x. (p x))) ;)

(; dict ;)

def thm_95 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq A (hol.select A p_1) (hol.select A (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) A (hol.select A) (hol.select A) p_1 (x_2 : hol.term A => p_1 x_2) (thm_80 A) (thm_94 A p_1).

(; Theorem: |- ((= (= (select p))) (= (select \lambda x. (p x)))) ;)

(; dict ;)

def thm_96 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (hol.select A p_1)) (hol.eq A (hol.select A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (hol.select A p_1) (hol.select A (x_2 : hol.term A => p_1 x_2)) (thm_79 A) (thm_95 A p_1).

(; Theorem: |- ((= ((= (select p)) x)) ((= (select \lambda x. (p x))) x)) ;)

(; dict ;)

def thm_97 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A p_2) x_1) (hol.eq A (hol.select A (x_3 : hol.term A => p_2 x_3)) x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM A hol.bool (hol.eq A (hol.select A p_2)) (hol.eq A (hol.select A (x_3 : hol.term A => p_2 x_3))) x_1 x_1 (thm_96 A p_2) (thm_38 A x_1).

(; Theorem: |- ((= ((= (select \lambda x. (p x))) x)) ((= (select p)) x)) ;)

(; dict ;)

def thm_98 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (x_3 : hol.term A => p_2 x_3)) x_1) (hol.eq A (hol.select A p_2) x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq A (hol.select A p_2) x_1) (hol.eq A (hol.select A (x_3 : hol.term A => p_2 x_3)) x_1) (thm_97 A x_1 p_2).

(; Theorem: |- ((= ((= \lambda _385. (p _385)) \lambda _385. ((= _385) x))) ((= \lambda _385. (p _385)) \lambda _385. ((= _385) x))) ;)

(; dict ;)

def thm_99 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (__385_3 : hol.term A => p_2 __385_3) (__385_3 : hol.term A => hol.eq A __385_3 x_1)) (hol.eq (hol.arr A hol.bool) (__385_3 : hol.term A => p_2 __385_3) (__385_3 : hol.term A => hol.eq A __385_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq (hol.arr A hol.bool) (__385_3 : hol.term A => p_2 __385_3) (__385_3 : hol.term A => hol.eq A __385_3 x_1)).

(; Theorem: |- ((= ((= \lambda x'. (p x')) \lambda x'. ((= x') x))) ((= \lambda x'. (p x')) \lambda x'. ((= x') x))) ;)

(; dict ;)

def thm_100 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_27_3 x_1)) (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_27_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_27_3 x_1)).

(; Theorem: |- ((= ((= \lambda _385. (p _385)) \lambda _385. ((= _385) x))) ((= \lambda x'. (p x')) \lambda x'. ((= x') x))) ;)

(; dict ;)

def thm_101 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A hol.bool) (__385_3 : hol.term A => p_2 __385_3) (__385_3 : hol.term A => hol.eq A __385_3 x_1)) (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_27_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq (hol.arr A hol.bool) (__385_3 : hol.term A => p_2 __385_3) (__385_3 : hol.term A => hol.eq A __385_3 x_1)) (hol.eq (hol.arr A hol.bool) (__385_3 : hol.term A => p_2 __385_3) (__385_3 : hol.term A => hol.eq A __385_3 x_1)) (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_27_3 x_1)) (thm_99 A x_1 p_2) (thm_100 A x_1 p_2).

(; Theorem: |- ((= ((= (p y)) ((= y) x))) ((= (p y)) ((= y) x))) ;)

(; dict ;)

def thm_102 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 y_2) (hol.eq A y_2 x_1)) (hol.eq hol.bool (p_3 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_3 y_2) (hol.eq A y_2 x_1)).

(; Theorem: |- ((= ((= (p y)) ((= y) x))) ((= (p y)) ((= y) x))) ;)

(; dict ;)

def thm_103 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_3 y_2) (hol.eq A y_2 x_1)) (hol.eq hol.bool (p_3 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_3 y_2) (hol.eq A y_2 x_1)) (hol.eq hol.bool (p_3 y_2) (hol.eq A y_2 x_1)) (hol.eq hol.bool (p_3 y_2) (hol.eq A y_2 x_1)) (thm_102 A x_1 y_2 p_3) (thm_102 A x_1 y_2 p_3).

(; Theorem: |- ((= (p y)) ((= y) x)) ;)

(; dict ;)

def thm_104 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A y_4 x_1))) -> hol.proof (hol.eq hol.bool (p_3 y_2) (hol.eq A y_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A y_4 x_1))) => thm_78 A x_1 p_3 hyp_1 y_2.

(; Theorem: |- ((= (p _385)) ((= _385) x)) ;)

(; dict ;)

def thm_105 : A : hol.type -> x_1 : hol.term A -> __385_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A y_4 x_1))) -> hol.proof (hol.eq hol.bool (p_3 __385_2) (hol.eq A __385_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => __385_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A y_4 x_1))) => (A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A y_4 x_1))) => (A : hol.type => x_1 : hol.term A => y_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.eq hol.bool (p_3 y_4) (hol.eq A y_4 x_1))) => hol.EQ_MP (hol.eq hol.bool (p_3 y_2) (hol.eq A y_2 x_1)) (hol.eq hol.bool (p_3 y_2) (hol.eq A y_2 x_1)) (thm_103 A x_1 y_2 p_3) (thm_104 A x_1 y_2 p_3 hyp_1)) A x_1 y_2 p_3 hyp_1) A x_1 __385_2 p_3 hyp_1.

(; Theorem: |- ((= \lambda _385. (p _385)) \lambda _385. ((= _385) x)) ;)

(; dict ;)

def thm_106 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hol.proof (hol.eq (hol.arr A hol.bool) (__385_3 : hol.term A => p_2 __385_3) (__385_3 : hol.term A => hol.eq A __385_3 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hol.ABS_THM A hol.bool (__385_3 : hol.term A => p_2 __385_3) (__385_3 : hol.term A => hol.eq A __385_3 x_1) (__385_3 : hol.term A => thm_105 A x_1 __385_3 p_2 hyp_1).

(; Theorem: |- ((= \lambda x'. (p x')) \lambda x'. ((= x') x)) ;)

(; dict ;)

def thm_107 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_27_3 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hol.EQ_MP (hol.eq (hol.arr A hol.bool) (__385_3 : hol.term A => p_2 __385_3) (__385_3 : hol.term A => hol.eq A __385_3 x_1)) (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_27_3 x_1)) (thm_101 A x_1 p_2) (thm_106 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (select \lambda x'. (p x'))) (select \lambda x'. ((= x') x))) ;)

(; dict ;)

def thm_108 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hol.proof (hol.eq A (hol.select A (x_27_3 : hol.term A => p_2 x_27_3)) (hol.select A (x_27_3 : hol.term A => hol.eq A x_27_3 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hol.APP_THM (hol.arr A hol.bool) A (hol.select A) (hol.select A) (x_27_3 : hol.term A => p_2 x_27_3) (x_27_3 : hol.term A => hol.eq A x_27_3 x_1) (thm_80 A) (thm_107 A x_1 p_2 hyp_1).

(; Theorem: |- ((= ((= (select \lambda y. ((= y) x))) x)) ((= (select \lambda y. ((= y) x))) x)) ;)

(; dict ;)

def thm_109 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1).

(; Theorem: |- ((= ((= (select \lambda x'. ((= x') x))) x)) ((= (select \lambda x'. ((= x') x))) x)) ;)

(; dict ;)

def thm_110 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1) (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1).

(; Theorem: |- ((= ((= (select \lambda y. ((= y) x))) x)) ((= (select \lambda x'. ((= x') x))) x)) ;)

(; dict ;)

def thm_111 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1) (thm_109 A x_1) (thm_110 A x_1).

(; Theorem: |- ((= (select \lambda x'. ((= x') x))) x) ;)

(; dict ;)

def thm_112 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1) (thm_111 A x_1) (thm_68 A x_1).

(; Theorem: |- ((= (select \lambda x'. (p x'))) x) ;)

(; dict ;)

def thm_113 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hol.proof (hol.eq A (hol.select A (x_27_3 : hol.term A => p_2 x_27_3)) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hol.TRANS A (hol.select A (x_27_3 : hol.term A => p_2 x_27_3)) (hol.select A (x_27_3 : hol.term A => hol.eq A x_27_3 x_1)) x_1 (thm_108 A x_1 p_2 hyp_1) ((A : hol.type => x_1 : hol.term A => thm_112 A x_1) A x_1).

(; Theorem: |- ((= (= (select \lambda x'. (p x')))) (= x)) ;)

(; dict ;)

def thm_114 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (hol.select A (x_27_3 : hol.term A => p_2 x_27_3))) (hol.eq A x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (hol.select A (x_27_3 : hol.term A => p_2 x_27_3)) x_1 (thm_79 A) (thm_113 A x_1 p_2 hyp_1).

(; Theorem: |- ((= ((= (select \lambda x'. (p x'))) x)) ((= x) x)) ;)

(; dict ;)

def thm_115 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (x_27_3 : hol.term A => p_2 x_27_3)) x_1) (hol.eq A x_1 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hol.APP_THM A hol.bool (hol.eq A (hol.select A (x_27_3 : hol.term A => p_2 x_27_3))) (hol.eq A x_1) x_1 x_1 (thm_114 A x_1 p_2 hyp_1) (thm_38 A x_1).

(; Theorem: |- ((= ((= (select \lambda x'. (p x'))) x)) Data.Bool.T) ;)

(; dict ;)

def thm_116 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (x_27_3 : hol.term A => p_2 x_27_3)) x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hol.TRANS hol.bool (hol.eq A (hol.select A (x_27_3 : hol.term A => p_2 x_27_3)) x_1) (hol.eq A x_1 x_1) hol.true (thm_115 A x_1 p_2 hyp_1) (thm_39 A x_1).

(; Theorem: |- ((= Data.Bool.T) ((= (select \lambda x'. (p x'))) x)) ;)

(; dict ;)

def thm_117 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hol.proof (hol.eq hol.bool hol.true (hol.eq A (hol.select A (x_27_3 : hol.term A => p_2 x_27_3)) x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hol.SYM hol.bool (hol.eq A (hol.select A (x_27_3 : hol.term A => p_2 x_27_3)) x_1) hol.true (thm_116 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (select p)) x) ;)

(; dict ;)

def thm_118 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hol.proof (hol.eq A (hol.select A p_2) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hol.EQ_MP (hol.eq A (hol.select A (x_27_3 : hol.term A => p_2 x_27_3)) x_1) (hol.eq A (hol.select A p_2) x_1) (thm_98 A x_1 p_2) (hol.EQ_MP hol.true (hol.eq A (hol.select A (x_27_3 : hol.term A => p_2 x_27_3)) x_1) (thm_117 A x_1 p_2 hyp_1) thm_1).

(; Theorem: |- ((= (select p)) x) ;)

(; dict ;)

def thm_119 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) -> hol.proof (hol.eq A (hol.select A p_2) x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => hol.PROVE_HYP (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1) (thm_78 A x_1 p_2 hyp_1) (hyp_2 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => thm_118 A x_1 p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x)) ;)

(; dict ;)

def thm_120 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) (hol.eq A (hol.select A p_2) x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_2 y_3) (hol.eq A y_3 x_1))) => thm_119 A x_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x))) ;)

(; dict ;)

def thm_121 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => thm_120 A x_2 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x)))) ;)

(; dict ;)

def thm_122 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) (hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2))) (thm_77 A p_1) (thm_121 A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((= (p y)) ((= y) x)))) ((= (select p)) x)))) ;)

(; thm ;)

def thm_123 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall A (x_2 : hol.term A => hol.imp (hol.forall A (y_3 : hol.term A => hol.eq hol.bool (p_1 y_3) (hol.eq A y_3 x_2))) (hol.eq A (hol.select A p_1) x_2)))) (thm_74 A) (thm_122 A).
