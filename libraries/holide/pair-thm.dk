
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME pair_2Dthm.

Data_2EPair_2E_2A : hol.type -> hol.type -> hol.type.

Data_2EPair_2E_2C : A : hol.type -> hol.term A.

Data_2EPair_2Efst : A : hol.type -> hol.term A.

Data_2EPair_2Esnd : A : hol.type -> hol.term A.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2)) a_1))).

(; axiom ;)

thm_2 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2)) b_2))).

(; axiom ;)

thm_3 : hol.proof hol.true.

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_5 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3))))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_7 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool) (hol.forall (Data_2EPair_2E_2A A B)) (hol.forall (Data_2EPair_2E_2A A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool) (hol.forall (Data_2EPair_2E_2A A B)).

(; Theorem: |- ((= \lambda x. ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) \lambda x. ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ;)

(; dict ;)

def thm_8 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1)) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1).

(; Theorem: |- ((= \lambda x. ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) \lambda x. ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ;)

(; dict ;)

def thm_9 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1)) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (thm_8 B A) (thm_8 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x))) (Data.Bool.! \lambda x. ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x))) ;)

(; dict ;)

def thm_10 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1)) (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool (hol.forall (Data_2EPair_2E_2A A B)) (hol.forall (Data_2EPair_2E_2A A B)) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (thm_7 B A) (thm_9 B A).

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_11 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_12 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_13 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) => hol.EQ_MP p_1 q_2 (thm_11 q_2 p_1 hyp_2) (thm_12 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_14 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_2 : hol.proof p_2 => thm_13 p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= p) q)) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_15 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 q_1) (hol.imp p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => thm_14 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_16 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_15 q_1 p_2) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_17 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_18 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_19 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_17 A P_1) (thm_18 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_20 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_21 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_0 A) (thm_20 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_22 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_19 A P_1) (thm_21 A P_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_23 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_16 A P_1 (thm_22 A P_1).

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_24 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)) ;)

(; dict ;)

def thm_25 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_23 A P_1 (thm_24 A P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_26 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_25 A P_2 hyp_1 Q_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_27 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_28 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof Q_2 :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_26 A Q_2 P_1 hyp_2 (thm_27 A Q_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) Q) ;)

(; dict ;)

def thm_29 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_28 A P_2 Q_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) ((Data.Bool.==> (Data.Bool.? P)) Q)) ;)

(; dict ;)

def thm_30 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => thm_29 A Q_1 P_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))) x)) ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)))) ((Data.Bool.==> (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))))) ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x))) ;)

(; dict ;)

def thm_31 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.imp ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) x_2) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_30 A Q_1 P_2) A (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3))).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda b. ((= x) ((Data.Pair., a) b)) x)) ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)))) ((Data.Bool.==> (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))) ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x))) ;)

(; dict ;)

def thm_32 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp (hol.forall B (x_3 : hol.term B => hol.imp ((b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4)) x_3) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2)) x_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2)) x_2))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_30 A Q_1 P_2) B (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2)) x_2) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3)).

(; Theorem: |- ((= (= (\lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231) x))) (= (\lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231) x))) ;)

(; dict ;)

def thm_33 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__1231_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_2)) __1231_2) x_1)) (hol.eq hol.bool ((__1231_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_2)) __1231_2) x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__1231_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_2)) __1231_2) x_1)).

(; Theorem: |- ((= (\lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231) ((Data.Pair., a) b))) ((= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_34 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool ((__1231_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_3)) __1231_3) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.BETA_CONV (Data_2EPair_2E_2A A B) hol.bool (__1231_3 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_3)) __1231_3) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1).

(; Theorem: |- ((= ((= (\lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231) x)) (\lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231) ((Data.Pair., a) b)))) ((= (\lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231) x)) ((= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((Data.Pair., a) b)))) ;)

(; dict ;)

def thm_35 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) x_3) ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (hol.eq hol.bool ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) x_3) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) x_3)) (hol.eq hol.bool ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) x_3)) ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (thm_33 B A x_3) (thm_34 B A b_1 a_2).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_36 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= (\lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231) x)) ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ;)

(; dict ;)

def thm_37 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool ((__1231_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_2)) __1231_2) x_1) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.BETA_CONV (Data_2EPair_2E_2A A B) hol.bool (__1231_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_2)) __1231_2) x_1.

(; Theorem: |- ((= (= (\lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231) x))) (= ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x))) ;)

(; dict ;)

def thm_38 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__1231_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_2)) __1231_2) x_1)) (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__1231_2 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_2)) __1231_2) x_1) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) thm_36 (thm_37 B A x_1).

(; Theorem: |- ((= ((= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((Data.Pair., a) b))) ((= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_39 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.REFL hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)).

(; Theorem: |- ((= ((= (\lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231) x)) ((= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((Data.Pair., a) b)))) ((= ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ((= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((Data.Pair., a) b)))) ;)

(; dict ;)

def thm_40 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) x_3) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_3) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) x_3)) (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_3)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (thm_38 B A x_3) (thm_39 B A b_1 a_2).

(; Theorem: |- ((= ((= (\lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231) x)) (\lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231) ((Data.Pair., a) b)))) ((= ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ((= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((Data.Pair., a) b)))) ;)

(; dict ;)

def thm_41 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) x_3) ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_3) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.TRANS hol.bool (hol.eq hol.bool ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) x_3) ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (hol.eq hol.bool ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) x_3) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_3) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (thm_35 B A b_1 a_2 x_3) (thm_40 B A b_1 a_2 x_3).

(; Theorem: |- ((= \lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231)) \lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231)) ;)

(; dict ;)

def thm_42 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (__1231_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_1)) __1231_1) (__1231_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_1)) __1231_1)) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (__1231_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_1)) __1231_1).

(; Theorem: |- ((= x) ((Data.Pair., a) b)) ;)

(; dict ;)

def thm_43 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) => hyp_1.

(; Theorem: |- ((= (\lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231) x)) (\lambda _1231. ((= ((Data.Pair., (Data.Pair.fst _1231)) (Data.Pair.snd _1231))) _1231) ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_44 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) -> hol.proof (hol.eq hol.bool ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) x_3) ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) => hol.APP_THM (Data_2EPair_2E_2A A B) hol.bool (__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) (__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (thm_42 B A) (thm_43 B A b_1 a_2 x_3 hyp_1).

(; Theorem: |- ((= ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ((= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_45 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_3) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) => hol.EQ_MP (hol.eq hol.bool ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) x_3) ((__1231_4 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) __1231_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) __1231_4)) __1231_4) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_3) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (thm_41 B A b_1 a_2 x_3) (thm_44 B A b_1 a_2 x_3 hyp_1).

(; Theorem: |- ((= ((= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((Data.Pair., a) b))) ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ;)

(; dict ;)

def thm_46 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> b_2 : hol.term B -> a_3 : hol.term A -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2)) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => b_2 : hol.term B => a_3 : hol.term A => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2)) => hol.SYM hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_2)) (thm_45 B A b_2 a_3 x_1 hyp_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_47 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Data_2EPair_2E_2A A B) hol.bool)) (hol.eq (Data_2EPair_2E_2A A B)) (hol.eq (Data_2EPair_2E_2A A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (Data_2EPair_2E_2A A B) (hol.arr (Data_2EPair_2E_2A A B) hol.bool)) (hol.eq (Data_2EPair_2E_2A A B)).

(; Theorem: |- ((= Data.Pair.,) Data.Pair.,) ;)

(; dict ;)

def thm_48 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B)))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B)))).

(; Theorem: |- ((= ((= (Data.Pair.fst ((Data.Pair., a) b))) a)) ((= (Data.Pair.fst ((Data.Pair., a) b))) a)) ;)

(; dict ;)

def thm_49 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) a_2) (hol.eq A (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) a_2)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.REFL hol.bool (hol.eq A (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) a_2).

(; Theorem: |- ((= ((= (Data.Pair.fst ((Data.Pair., a) b))) a)) ((= (Data.Pair.fst ((Data.Pair., a) b))) a)) ;)

(; dict ;)

def thm_50 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) a_2) (hol.eq A (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) a_2)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) a_2) (hol.eq A (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) a_2) (hol.eq A (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) a_2) (thm_49 B A b_1 a_2) (thm_49 B A b_1 a_2).

(; Theorem: |- (Data.Bool.! \lambda b. ((= (Data.Pair.fst ((Data.Pair., a) b))) a)) ;)

(; dict ;)

def thm_51 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.forall B (b_2 : hol.term B => hol.eq A (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2)) a_1)) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => thm_1 B A a_1.

(; Theorem: |- ((= (Data.Pair.fst ((Data.Pair., a) b))) a) ;)

(; dict ;)

def thm_52 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq A (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) a_2) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => thm_51 A B a_2 b_1.

(; Theorem: |- ((= (Data.Pair., (Data.Pair.fst ((Data.Pair., a) b)))) (Data.Pair., a)) ;)

(; dict ;)

def thm_53 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr B (Data_2EPair_2E_2A A B)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2)) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM A (hol.arr B (Data_2EPair_2E_2A A B)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B)))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B)))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) a_2 (thm_48 B A) ((B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.EQ_MP (hol.eq A (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) a_2) (hol.eq A (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) a_2) (thm_50 B A b_1 a_2) (thm_52 B A b_1 a_2)) B A b_1 a_2).

(; Theorem: |- ((= ((= (Data.Pair.snd ((Data.Pair., a) b))) b)) ((= (Data.Pair.snd ((Data.Pair., a) b))) b)) ;)

(; dict ;)

def thm_54 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq B (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) b_1) (hol.eq B (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) b_1)) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.REFL hol.bool (hol.eq B (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) b_1).

(; Theorem: |- ((= ((= (Data.Pair.snd ((Data.Pair., a) b))) b)) ((= (Data.Pair.snd ((Data.Pair., a) b))) b)) ;)

(; dict ;)

def thm_55 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq B (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) b_1) (hol.eq B (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) b_1)) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.TRANS hol.bool (hol.eq B (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) b_1) (hol.eq B (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) b_1) (hol.eq B (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) b_1) (thm_54 A B b_1 a_2) (thm_54 A B b_1 a_2).

(; Theorem: |- (Data.Bool.! \lambda b. ((= (Data.Pair.snd ((Data.Pair., a) b))) b)) ;)

(; dict ;)

def thm_56 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> hol.proof (hol.forall B (b_2 : hol.term B => hol.eq B (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_2)) b_2)) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => thm_2 B A a_1.

(; Theorem: |- ((= (Data.Pair.snd ((Data.Pair., a) b))) b) ;)

(; dict ;)

def thm_57 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq B (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) b_1) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => thm_56 A B a_2 b_1.

(; Theorem: |- ((= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((Data.Pair., a) b)) ;)

(; dict ;)

def thm_58 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM B (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) b_1 (thm_53 A B b_1 a_2) ((A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.EQ_MP (hol.eq B (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) b_1) (hol.eq B (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) b_1) (thm_55 A B b_1 a_2) (thm_57 A B b_1 a_2)) A B b_1 a_2).

(; Theorem: |- ((= (= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b))))) (= ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_59 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM (Data_2EPair_2E_2A A B) (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (hol.eq (Data_2EPair_2E_2A A B)) (hol.eq (Data_2EPair_2E_2A A B)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (thm_47 B A) (thm_58 B A b_1 a_2).

(; Theorem: |- ((= ((Data.Pair., a) b)) ((Data.Pair., a) b)) ;)

(; dict ;)

def thm_60 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.REFL (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1).

(; Theorem: |- ((= ((= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((Data.Pair., a) b))) ((= ((Data.Pair., a) b)) ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_61 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.APP_THM (Data_2EPair_2E_2A A B) hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (thm_59 B A b_1 a_2) (thm_60 B A b_1 a_2).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_62 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_63 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_62 A x_1) (thm_62 A x_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_64 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_65 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_66 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_65 A) (thm_65 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_67 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_64 A) (thm_66 A).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_68 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_69 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_68 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_70 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_69 t_1 hyp_1) thm_3.

(; Theorem: |- t ;)

(; dict ;)

def thm_71 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_72 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_71 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_3).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_73 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_70 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_72 t_1 hyp_1).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_74 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_73 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_75 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_4 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_76 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_74 A x_1) (thm_75 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_77 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_62 A x_1) (thm_76 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_78 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) x_1 x_1) hol.true) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_63 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_67 A) (thm_77 A) x_1)) (Data_2EPair_2E_2A A B) x_1.

(; Theorem: |- ((= ((= ((Data.Pair., a) b)) ((Data.Pair., a) b))) Data.Bool.T) ;)

(; dict ;)

def thm_79 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) hol.true) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => (B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_78 B A x_1) B A (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1).

(; Theorem: |- ((= ((= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((Data.Pair., a) b))) Data.Bool.T) ;)

(; dict ;)

def thm_80 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) hol.true) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.TRANS hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) hol.true (thm_61 B A b_1 a_2) (thm_79 B A b_1 a_2).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Pair., (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_81 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool hol.true (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => hol.SYM hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) hol.true (thm_80 B A b_1 a_2).

(; Theorem: |- ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x) ;)

(; dict ;)

def thm_82 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_3) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) => hol.EQ_MP (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_3) (thm_46 B A x_3 b_1 a_2 hyp_1) (hol.EQ_MP hol.true (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (thm_81 B A b_1 a_2) thm_3).

(; Theorem: |- ((Data.Bool.==> ((= x) ((Data.Pair., a) b))) ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ;)

(; dict ;)

def thm_83 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_3)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) => thm_82 B A b_1 a_2 x_3 hyp_1.

(; Theorem: |- ((= (\lambda b. ((= x) ((Data.Pair., a) b)) b)) ((= x) ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_84 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool ((b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_4)) b_1) (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hol.BETA_CONV B hol.bool (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_4)) b_1.

(; Theorem: |- (\lambda b. ((= x) ((Data.Pair., a) b)) b) ;)

(; dict ;)

def thm_85 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_4)) b_1) -> hol.proof ((b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_4)) b_1) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_4)) b_1) => hyp_1.

(; Theorem: |- ((= x) ((Data.Pair., a) b)) ;)

(; dict ;)

def thm_86 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_4)) b_1) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_4)) b_1) => hol.EQ_MP ((b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_4)) b_1) (hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (thm_84 A B b_1 a_2 x_3) (thm_85 A B b_1 a_2 x_3 hyp_1).

(; Theorem: |- ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x) ;)

(; dict ;)

def thm_87 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_4)) b_1) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_3) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_4)) b_1) => thm_83 B A b_1 a_2 x_3 (thm_86 B A b_1 a_2 x_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda b. ((= x) ((Data.Pair., a) b)) b)) ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ;)

(; dict ;)

def thm_88 : A : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> x_3 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp ((b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_4)) b_1) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_3)) :=
  A : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => x_3 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_4)) b_1) => thm_87 B A b_1 a_2 x_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda b. ((Data.Bool.==> (\lambda b. ((= x) ((Data.Pair., a) b)) b)) ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x))) ;)

(; dict ;)

def thm_89 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.forall B (b_3 : hol.term B => hol.imp ((b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_4)) b_3) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2)) x_2))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => b_3 : hol.term B => thm_88 A B b_3 a_1 x_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))) ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ;)

(; dict ;)

def thm_90 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2)) x_2)) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => thm_32 A B a_1 x_2 (thm_89 A B a_1 x_2).

(; Theorem: |- (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_91 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3))) => hyp_1.

(; Theorem: |- ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x) ;)

(; dict ;)

def thm_92 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3))) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2)) x_2) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3))) => thm_90 A B a_1 x_2 (thm_91 A B a_1 x_2 hyp_1).

(; Theorem: |- ((= (\lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))) a)) (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))) ;)

(; dict ;)

def thm_93 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3)))) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hol.BETA_CONV A hol.bool (a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) a_1.

(; Theorem: |- (\lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))) a) ;)

(; dict ;)

def thm_94 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) a_1) -> hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) a_1) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) a_1) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_95 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) a_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) a_1) => hol.EQ_MP ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) a_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3))) (thm_93 B A a_1 x_2) (thm_94 B A a_1 x_2 hyp_1).

(; Theorem: |- ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x) ;)

(; dict ;)

def thm_96 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) a_1) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2)) x_2) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) a_1) => (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3))) => thm_92 B A a_1 x_2 hyp_2) (thm_95 A B a_1 x_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))) a)) ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ;)

(; dict ;)

def thm_97 : B : hol.type -> A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) a_1) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2)) x_2)) :=
  B : hol.type => A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) a_1) => thm_96 B A a_1 x_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda a. ((Data.Bool.==> (\lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))) a)) ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x))) ;)

(; dict ;)

def thm_98 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.forall A (a_2 : hol.term A => hol.imp ((a_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_4 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4))) a_2) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => a_2 : hol.term A => thm_97 B A a_2 x_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b))))) ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ;)

(; dict ;)

def thm_99 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_31 B A x_1 (thm_98 B A x_1).

(; Theorem: |- (Data.Bool.? \lambda a. (Data.Bool.? \lambda b. ((= x) ((Data.Pair., a) b)))) ;)

(; dict ;)

def thm_100 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (b_3 : hol.term B => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_5 B A x_1.

(; Theorem: |- ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x) ;)

(; dict ;)

def thm_101 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_99 B A x_1 (thm_100 B A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ;)

(; dict ;)

def thm_102 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_101 B A x_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ;)

(; thm ;)

def thm_103 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1)) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1)) (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1)) (thm_10 B A) (thm_102 B A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_104 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr (Data_2EPair_2E_2A A B) hol.bool)) (hol.forall (hol.arr (Data_2EPair_2E_2A A B) hol.bool))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr (Data_2EPair_2E_2A A B) hol.bool)).

(; Theorem: |- ((= \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b))))) (Data.Bool.! \lambda x. (p x)))) \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b))))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_105 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2))) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2))).

(; Theorem: |- ((= \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b))))) (Data.Bool.! \lambda x. (p x)))) \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b))))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_106 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2))) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2))) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2))) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2))) (thm_105 B A) (thm_105 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b))))) (Data.Bool.! \lambda x. (p x))))) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b))))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_107 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)))) (hol.forall (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool) hol.bool (hol.forall (hol.arr (Data_2EPair_2E_2A A B) hol.bool)) (hol.forall (hol.arr (Data_2EPair_2E_2A A B) hol.bool)) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2))) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2))) (thm_104 B A) (thm_106 B A).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b)))) ;)

(; dict ;)

def thm_108 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hyp_1 : hol.proof (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) -> hol.proof (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hyp_1 : hol.proof (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) => hyp_1.

(; Theorem: |- ((= \lambda x. (p x)) \lambda x. (p x)) ;)

(; dict ;)

def thm_109 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.REFL (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2).

(; Theorem: |- ((= \lambda x. (p x)) \lambda x. (p x)) ;)

(; dict ;)

def thm_110 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.TRANS (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2) (thm_109 B A p_1) (thm_109 B A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (p x))) ;)

(; dict ;)

def thm_111 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.APP_THM (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool (hol.forall (Data_2EPair_2E_2A A B)) (hol.forall (Data_2EPair_2E_2A A B)) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2) (thm_7 B A) (thm_110 B A p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_112 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) p_1 p_1) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.REFL (hol.arr (Data_2EPair_2E_2A A B) hol.bool) p_1.

(; Theorem: |- ((= ((= x) ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x)))) ((= x) ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x)))) ;)

(; dict ;)

def thm_113 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.REFL hol.bool (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))).

(; Theorem: |- ((= ((= x) ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x)))) ((= x) ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x)))) ;)

(; dict ;)

def thm_114 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.TRANS hol.bool (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) (thm_113 B A x_1) (thm_113 B A x_1).

(; Theorem: |- ((= x) ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) ;)

(; dict ;)

def thm_115 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) => hyp_1.

(; Theorem: |- ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x) ;)

(; dict ;)

def thm_116 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) => hol.SYM (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) (thm_115 B A x_1 hyp_1).

(; Theorem: |- ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x) ;)

(; dict ;)

def thm_117 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) => hyp_1.

(; Theorem: |- ((= x) ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) ;)

(; dict ;)

def thm_118 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) => hol.SYM (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1 (thm_117 B A x_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) ((= x) ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x)))) ;)

(; dict ;)

def thm_119 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.PROP_EXT (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) (hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) => thm_116 B A x_1 hyp_1) (hyp_1 : hol.proof (hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) => thm_118 B A x_1 hyp_1).

(; Theorem: |- ((= \lambda x. ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x)) \lambda x. ((= x) ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x)))) ;)

(; dict ;)

def thm_120 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (Data_2EPair_2E_2A A B) hol.bool (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) (x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_119 B A x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) x))) (Data.Bool.! \lambda x. ((= x) ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))))) ;)

(; dict ;)

def thm_121 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1)) (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (Data_2EPair_2E_2A A B) hol.bool) hol.bool (hol.forall (Data_2EPair_2E_2A A B)) (hol.forall (Data_2EPair_2E_2A A B)) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) (thm_7 B A) (thm_120 B A).

(; Theorem: |- (Data.Bool.! \lambda x. ((= x) ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x)))) ;)

(; dict ;)

def thm_122 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) x_1)) (hol.forall (Data_2EPair_2E_2A A B) (x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)))) (thm_121 B A) (thm_102 B A).

(; Theorem: |- ((= x) ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) ;)

(; dict ;)

def thm_123 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> hol.proof (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => thm_122 B A x_1.

(; Theorem: |- ((= (p x)) (p ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x)))) ;)

(; dict ;)

def thm_124 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> p_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hol.proof (hol.eq hol.bool (p_2 x_1) (p_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => p_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.APP_THM (Data_2EPair_2E_2A A B) hol.bool p_2 p_2 x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1)) (thm_112 B A p_2) ((B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => hol.EQ_MP (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) (hol.eq (Data_2EPair_2E_2A A B) x_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) (thm_114 B A x_1) (thm_123 B A x_1)) B A x_1).

(; Theorem: |- ((= (p ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x)))) (p x)) ;)

(; dict ;)

def thm_125 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> p_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hol.proof (hol.eq hol.bool (p_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) (p_2 x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => p_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.SYM hol.bool (p_2 x_1) (p_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) (thm_124 B A x_1 p_2).

(; Theorem: |- ((= (p ((Data.Pair., a) b))) (p ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_126 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> p_3 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hol.proof (hol.eq hol.bool (p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => p_3 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.REFL hol.bool (p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)).

(; Theorem: |- ((= (p ((Data.Pair., a) b))) (p ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_127 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> p_3 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hol.proof (hol.eq hol.bool (p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => p_3 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.TRANS hol.bool (p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (thm_126 B A b_1 a_2 p_3) (thm_126 B A b_1 a_2 p_3).

(; Theorem: |- (Data.Bool.! \lambda b. (p ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_128 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> p_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hyp_1 : hol.proof (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => p_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)))) -> hol.proof (hol.forall B (b_3 : hol.term B => p_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => p_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hyp_1 : hol.proof (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => p_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)))) => thm_108 B A p_2 hyp_1 a_1.

(; Theorem: |- (p ((Data.Pair., a) b)) ;)

(; dict ;)

def thm_129 : B : hol.type -> A : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> p_3 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hyp_1 : hol.proof (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_5)))) -> hol.proof (p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) :=
  B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => p_3 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hyp_1 : hol.proof (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_5)))) => thm_128 A B a_2 p_3 hyp_1 b_1.

(; Theorem: |- (p ((Data.Pair., (Data.Pair.fst x)) (Data.Pair.snd x))) ;)

(; dict ;)

def thm_130 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> p_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hyp_1 : hol.proof (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => p_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)))) -> hol.proof (p_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => p_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hyp_1 : hol.proof (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => p_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)))) => (B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => p_3 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hyp_1 : hol.proof (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_5)))) => (B : hol.type => A : hol.type => b_1 : hol.term B => a_2 : hol.term A => p_3 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hyp_1 : hol.proof (hol.forall A (a_4 : hol.term A => hol.forall B (b_5 : hol.term B => p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_4 b_5)))) => hol.EQ_MP (p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (p_3 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (thm_127 B A b_1 a_2 p_3) (thm_129 B A b_1 a_2 p_3 hyp_1)) B A b_1 a_2 p_3 hyp_1) B A (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) p_2 hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_131 : B : hol.type -> A : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> p_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hyp_1 : hol.proof (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => p_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)))) -> hol.proof (p_2 x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => p_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hyp_1 : hol.proof (hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => p_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)))) => hol.EQ_MP (p_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) (p_2 x_1) (thm_125 B A x_1 p_2) (thm_130 B A x_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_132 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hyp_1 : hol.proof (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) -> hol.proof (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hyp_1 : hol.proof (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) => x_2 : hol.term (Data_2EPair_2E_2A A B) => thm_131 B A x_2 p_1 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_133 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hyp_1 : hol.proof (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) -> hol.proof (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hyp_1 : hol.proof (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) => hol.PROVE_HYP (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (thm_108 B A p_1 hyp_1) (hyp_2 : hol.proof (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) => hol.EQ_MP (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)) (thm_111 B A p_1) (thm_132 B A p_1 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b))))) (Data.Bool.! \lambda x. (p x))) ;)

(; dict ;)

def thm_134 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) -> hol.proof (hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hyp_1 : hol.proof (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) => thm_133 B A p_1 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b))))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_135 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => thm_134 B A p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (p ((Data.Pair., a) b))))) (Data.Bool.! \lambda x. (p x)))) ;)

(; thm ;)

def thm_136 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)))) (hol.forall (hol.arr (Data_2EPair_2E_2A A B) hol.bool) (p_1 : hol.term (hol.arr (Data_2EPair_2E_2A A B) hol.bool) => hol.imp (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => p_1 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)))) (hol.forall (Data_2EPair_2E_2A A B) (x_2 : hol.term (Data_2EPair_2E_2A A B) => p_1 x_2)))) (thm_107 B A) (thm_135 B A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_137 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B C)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr B C))) (hol.forall (hol.arr A (hol.arr B C)))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A (hol.arr B C)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr B C))).

(; Theorem: |- ((= \lambda f. (Data.Bool.? \lambda fn. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (fn ((Data.Pair., a) b))) ((f a) b)))))) \lambda f. (Data.Bool.? \lambda fn. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (fn ((Data.Pair., a) b))) ((f a) b)))))) ;)

(; dict ;)

def thm_138 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B C)) hol.bool) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4))))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr B C)) hol.bool) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4))))).

(; Theorem: |- ((= \lambda f. (Data.Bool.? \lambda fn. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (fn ((Data.Pair., a) b))) ((f a) b)))))) \lambda f. (Data.Bool.? \lambda fn. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (fn ((Data.Pair., a) b))) ((f a) b)))))) ;)

(; dict ;)

def thm_139 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B C)) hol.bool) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4))))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A (hol.arr B C)) hol.bool) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4))))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4))))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4))))) (thm_138 C B A) (thm_138 C B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.? \lambda fn. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (fn ((Data.Pair., a) b))) ((f a) b))))))) (Data.Bool.! \lambda f. (Data.Bool.? \lambda fn. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (fn ((Data.Pair., a) b))) ((f a) b))))))) ;)

(; dict ;)

def thm_140 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))))) (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4))))))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B C)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B C))) (hol.forall (hol.arr A (hol.arr B C))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4))))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4))))) (thm_137 C B A) (thm_139 C B A).

(; Theorem: |- ((= (\lambda fn. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (fn ((Data.Pair., a) b))) ((f a) b)))) \lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f a) b))))) ;)

(; dict ;)

def thm_141 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool ((fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))) (x_2 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.BETA_CONV (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))) (x_2 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2)).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f a) b))))) (\lambda fn. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (fn ((Data.Pair., a) b))) ((f a) b)))) \lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)))) ;)

(; dict ;)

def thm_142 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3)))) ((fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))) (x_2 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.SYM hol.bool ((fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))) (x_2 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2))) (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3)))) (thm_141 C B A f_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_143 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B) (hol.forall B)) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_144 : C : hol.type -> hol.proof (hol.eq (hol.arr C (hol.arr C hol.bool)) (hol.eq C) (hol.eq C)) :=
  C : hol.type => hol.REFL (hol.arr C (hol.arr C hol.bool)) (hol.eq C).

(; Theorem: |- ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) x)) ((f (Data.Pair.fst x)) (Data.Pair.snd x))) ;)

(; dict ;)

def thm_145 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EPair_2E_2A A B) -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C ((x_3 : hol.term (Data_2EPair_2E_2A A B) => f_2 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_1) (f_2 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_1) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_1))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term (Data_2EPair_2E_2A A B) => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.BETA_CONV (Data_2EPair_2E_2A A B) C (x_3 : hol.term (Data_2EPair_2E_2A A B) => f_2 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) x)) \lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x))) ;)

(; dict ;)

def thm_146 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr (Data_2EPair_2E_2A A B) C) (x_2 : hol.term (Data_2EPair_2E_2A A B) => (x_3 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_2) (x_2 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.ABS_THM (Data_2EPair_2E_2A A B) C (x_2 : hol.term (Data_2EPair_2E_2A A B) => (x_3 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_3) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_3)) x_2) (x_2 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2)) (x_2 : hol.term (Data_2EPair_2E_2A A B) => thm_145 B A C x_2 f_1).

(; Theorem: |- ((= (\lambda x. (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) x) ((Data.Pair., a) b))) (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ;)

(; dict ;)

def thm_147 : B : hol.type -> A : hol.type -> C : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => (x_5 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_5) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_5)) x_4) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) :=
  B : hol.type => A : hol.type => C : hol.type => b_1 : hol.term B => a_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (Data_2EPair_2E_2A A B) C (x_4 : hol.term (Data_2EPair_2E_2A A B) => (x_5 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_5) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_5)) x_4) (x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1) (thm_146 C B A f_3) (thm_60 B A b_1 a_2).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) x) ((Data.Pair., a) b)))) (= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b)))) ;)

(; dict ;)

def thm_148 : B : hol.type -> A : hol.type -> C : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr C hol.bool) (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => (x_5 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_5) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_5)) x_4) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)))) :=
  B : hol.type => A : hol.type => C : hol.type => b_1 : hol.term B => a_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C (hol.arr C hol.bool) (hol.eq C) (hol.eq C) ((x_4 : hol.term (Data_2EPair_2E_2A A B) => (x_5 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_5) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_5)) x_4) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (thm_144 C) (thm_147 B A C b_1 a_2 f_3).

(; Theorem: |- ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ;)

(; dict ;)

def thm_149 : B : hol.type -> A : hol.type -> C : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)))) :=
  B : hol.type => A : hol.type => C : hol.type => b_1 : hol.term B => a_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.BETA_CONV (Data_2EPair_2E_2A A B) C (x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1).

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) x) ((Data.Pair., a) b))) (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b)))) ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b))))) ;)

(; dict ;)

def thm_150 : B : hol.type -> A : hol.type -> C : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => (x_5 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_5) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_5)) x_4) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))))) :=
  B : hol.type => A : hol.type => C : hol.type => b_1 : hol.term B => a_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C hol.bool (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => (x_5 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_5) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_5)) x_4) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (thm_148 B A C b_1 a_2 f_3) (thm_149 B A C b_1 a_2 f_3).

(; Theorem: |- ((= f) f) ;)

(; dict ;)

def thm_151 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A (hol.arr B C)) f_1 f_1) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.REFL (hol.arr A (hol.arr B C)) f_1.

(; Theorem: |- ((= (f (Data.Pair.fst ((Data.Pair., a) b)))) (f a)) ;)

(; dict ;)

def thm_152 : A : hol.type -> C : hol.type -> B : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr B C) (f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (f_3 a_2)) :=
  A : hol.type => C : hol.type => B : hol.type => b_1 : hol.term B => a_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM A (hol.arr B C) f_3 f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) a_2 (thm_151 C B A f_3) (thm_52 B A b_1 a_2).

(; Theorem: |- ((= ((f (Data.Pair.fst ((Data.Pair., a) b))) (Data.Pair.snd ((Data.Pair., a) b)))) ((f a) b)) ;)

(; dict ;)

def thm_153 : B : hol.type -> A : hol.type -> C : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C (f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (f_3 a_2 b_1)) :=
  B : hol.type => A : hol.type => C : hol.type => b_1 : hol.term B => a_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM B C (f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (f_3 a_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) b_1 (thm_152 A C B b_1 a_2 f_3) (thm_57 A B b_1 a_2).

(; Theorem: |- ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f a) b)) ;)

(; dict ;)

def thm_154 : B : hol.type -> A : hol.type -> C : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (f_3 a_2 b_1)) :=
  B : hol.type => A : hol.type => C : hol.type => b_1 : hol.term B => a_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (f_3 a_2 b_1) (hol.EQ_MP (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => (x_5 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_5) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_5)) x_4) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)))) (thm_150 B A C b_1 a_2 f_3) (thm_147 B A C b_1 a_2 f_3)) (thm_153 B A C b_1 a_2 f_3).

(; Theorem: |- ((= (= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b)))) (= ((f a) b))) ;)

(; dict ;)

def thm_155 : B : hol.type -> A : hol.type -> C : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr C hol.bool) (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (hol.eq C (f_3 a_2 b_1))) :=
  B : hol.type => A : hol.type => C : hol.type => b_1 : hol.term B => a_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C (hol.arr C hol.bool) (hol.eq C) (hol.eq C) ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (f_3 a_2 b_1) (thm_144 C) (thm_154 B A C b_1 a_2 f_3).

(; Theorem: |- ((= ((f a) b)) ((f a) b)) ;)

(; dict ;)

def thm_156 : B : hol.type -> A : hol.type -> C : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C (f_3 a_2 b_1) (f_3 a_2 b_1)) :=
  B : hol.type => A : hol.type => C : hol.type => b_1 : hol.term B => a_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.REFL C (f_3 a_2 b_1).

(; Theorem: |- ((= ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f a) b))) ((= ((f a) b)) ((f a) b))) ;)

(; dict ;)

def thm_157 : B : hol.type -> A : hol.type -> C : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (f_3 a_2 b_1)) (hol.eq C (f_3 a_2 b_1) (f_3 a_2 b_1))) :=
  B : hol.type => A : hol.type => C : hol.type => b_1 : hol.term B => a_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C hol.bool (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1))) (hol.eq C (f_3 a_2 b_1)) (f_3 a_2 b_1) (f_3 a_2 b_1) (thm_155 B A C b_1 a_2 f_3) (thm_156 B A C b_1 a_2 f_3).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_158 : C : hol.type -> x_1 : hol.term C -> hol.proof (hol.eq hol.bool (hol.eq C x_1 x_1) hol.true) :=
  C : hol.type => x_1 : hol.term C => (A : hol.type => x_1 : hol.term A => thm_76 A x_1) C x_1.

(; Theorem: |- ((= ((= ((f a) b)) ((f a) b))) Data.Bool.T) ;)

(; dict ;)

def thm_159 : B : hol.type -> A : hol.type -> C : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C (f_3 a_2 b_1) (f_3 a_2 b_1)) hol.true) :=
  B : hol.type => A : hol.type => C : hol.type => b_1 : hol.term B => a_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => (C : hol.type => x_1 : hol.term C => thm_158 C x_1) C (f_3 a_2 b_1).

(; Theorem: |- ((= ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f a) b))) Data.Bool.T) ;)

(; dict ;)

def thm_160 : B : hol.type -> A : hol.type -> C : hol.type -> b_1 : hol.term B -> a_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (f_3 a_2 b_1)) hol.true) :=
  B : hol.type => A : hol.type => C : hol.type => b_1 : hol.term B => a_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_3 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_1)) (f_3 a_2 b_1)) (hol.eq C (f_3 a_2 b_1) (f_3 a_2 b_1)) hol.true (thm_157 B A C b_1 a_2 f_3) (thm_159 B A C b_1 a_2 f_3).

(; Theorem: |- ((= \lambda b. ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f a) b))) \lambda b. Data.Bool.T) ;)

(; dict ;)

def thm_161 : A : hol.type -> C : hol.type -> B : hol.type -> a_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr B hol.bool) (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_2 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3)) (f_2 a_1 b_3)) (b_3 : hol.term B => hol.true)) :=
  A : hol.type => C : hol.type => B : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.ABS_THM B hol.bool (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_2 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3)) (f_2 a_1 b_3)) (b_3 : hol.term B => hol.true) (b_3 : hol.term B => thm_160 B A C b_3 a_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f a) b)))) (Data.Bool.! \lambda b. Data.Bool.T)) ;)

(; dict ;)

def thm_162 : A : hol.type -> C : hol.type -> B : hol.type -> a_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_2 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3)) (f_2 a_1 b_3))) (hol.forall B (b_3 : hol.term B => hol.true))) :=
  A : hol.type => C : hol.type => B : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_2 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3)) (f_2 a_1 b_3)) (b_3 : hol.term B => hol.true) (thm_143 B) (thm_161 A C B a_1 f_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_163 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda b. t)) t)) ((= (Data.Bool.! \lambda b. t)) t)) ;)

(; dict ;)

def thm_164 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda b. t)) t)) ;)

(; dict ;)

def thm_165 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1) (thm_163 A t_1) (thm_164 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_166 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_6 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda b. t)) t) ;)

(; dict ;)

def thm_167 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => t_1)) t_1) (thm_165 A t_1) (thm_166 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. t)) t) ;)

(; dict ;)

def thm_168 : B : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall B (b_2 : hol.term B => t_1)) t_1) :=
  B : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_167 A t_1) B t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda b. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_169 : B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (b_1 : hol.term B => hol.true)) hol.true) :=
  B : hol.type => (B : hol.type => t_1 : hol.term hol.bool => thm_168 B t_1) B hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda b. ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f a) b)))) Data.Bool.T) ;)

(; dict ;)

def thm_170 : A : hol.type -> C : hol.type -> B : hol.type -> a_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_2 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3)) (f_2 a_1 b_3))) hol.true) :=
  A : hol.type => C : hol.type => B : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_2 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_1 b_3)) (f_2 a_1 b_3))) (hol.forall B (b_3 : hol.term B => hol.true)) hol.true (thm_162 A C B a_1 f_2) (thm_169 B).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f a) b)))) \lambda a. Data.Bool.T) ;)

(; dict ;)

def thm_171 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A hol.bool) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3))) (a_2 : hol.term A => hol.true)) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.ABS_THM A hol.bool (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3))) (a_2 : hol.term A => hol.true) (a_2 : hol.term A => thm_170 A C B a_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f a) b))))) (Data.Bool.! \lambda a. Data.Bool.T)) ;)

(; dict ;)

def thm_172 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3)))) (hol.forall A (a_2 : hol.term A => hol.true))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3))) (a_2 : hol.term A => hol.true) (thm_64 A) (thm_171 C B A f_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda a. t)) t)) ((= (Data.Bool.! \lambda a. t)) t)) ;)

(; dict ;)

def thm_173 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda a. t)) t)) ;)

(; dict ;)

def thm_174 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1) (thm_163 A t_1) (thm_173 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. t)) t) ;)

(; dict ;)

def thm_175 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => t_1)) t_1) (thm_174 A t_1) (thm_166 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda a. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_176 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_175 A t_1) A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f a) b))))) Data.Bool.T) ;)

(; dict ;)

def thm_177 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3)))) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3)))) (hol.forall A (a_2 : hol.term A => hol.true)) hol.true (thm_172 C B A f_1) (thm_176 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f a) b))))) ;)

(; dict ;)

def thm_178 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool hol.true (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.SYM hol.bool (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3)))) hol.true (thm_177 C B A f_1).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (\lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x)) ((Data.Pair., a) b))) ((f a) b)))) ;)

(; dict ;)

def thm_179 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.EQ_MP hol.true (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3)))) (thm_178 C B A f_1) thm_3.

(; Theorem: |- (\lambda fn. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (fn ((Data.Pair., a) b))) ((f a) b)))) \lambda x. ((f (Data.Pair.fst x)) (Data.Pair.snd x))) ;)

(; dict ;)

def thm_180 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof ((fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))) (x_2 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.EQ_MP (hol.forall A (a_2 : hol.term A => hol.forall B (b_3 : hol.term B => hol.eq C ((x_4 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_4) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_4)) (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_2 b_3)) (f_1 a_2 b_3)))) ((fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))) (x_2 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2))) (thm_142 C B A f_1) (thm_179 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_181 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_22 A P_1).

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_182 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_27 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_183 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_184 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_182 A Q_3 x_1 P_2 hyp_2 (thm_183 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_185 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_184 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_186 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_185 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_187 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_181 A P_2) (thm_186 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda fn. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (fn ((Data.Pair., a) b))) ((f a) b))))) ;)

(; dict ;)

def thm_188 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hyp_1 : hol.proof ((fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))) (x_2 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hyp_1 : hol.proof ((fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))) (x_2 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2))) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_187 A x_1 P_2 hyp_1) (hol.arr (Data_2EPair_2E_2A A B) C) (x_2 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2)) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda fn. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (fn ((Data.Pair., a) b))) ((f a) b))))) ;)

(; dict ;)

def thm_189 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.PROVE_HYP ((fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))) (x_2 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4))))) (thm_180 C B A f_1) (hyp_1 : hol.proof ((fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))) (x_2 : hol.term (Data_2EPair_2E_2A A B) => f_1 (Data_2EPair_2Efst (hol.arr (Data_2EPair_2E_2A A B) A) x_2) (Data_2EPair_2Esnd (hol.arr (Data_2EPair_2E_2A A B) B) x_2))) => thm_188 C B A f_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.? \lambda fn. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (fn ((Data.Pair., a) b))) ((f a) b)))))) ;)

(; dict ;)

def thm_190 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => thm_189 C B A f_1.

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.? \lambda fn. (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= (fn ((Data.Pair., a) b))) ((f a) b)))))) ;)

(; thm ;)

def thm_191 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))))) (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr (Data_2EPair_2E_2A A B) C) hol.bool) hol.bool) (fn_2 : hol.term (hol.arr (Data_2EPair_2E_2A A B) C) => hol.forall A (a_3 : hol.term A => hol.forall B (b_4 : hol.term B => hol.eq C (fn_2 (Data_2EPair_2E_2C (hol.arr A (hol.arr B (Data_2EPair_2E_2A A B))) a_3 b_4)) (f_1 a_3 b_4)))))) (thm_140 C B A) (thm_190 C B A).
