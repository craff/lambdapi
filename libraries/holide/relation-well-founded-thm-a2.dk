
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME relation_2Dwell_2Dfounded_2Dthm_2Da2.

Relation_2EwellFounded : A : hol.type -> hol.term A.

Relation_2Eirreflexive : A : hol.type -> hol.term A.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

Relation_2Eempty : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2))))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))).

(; axiom ;)

thm_3 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; axiom ;)

thm_5 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not (p_1 : hol.term hol.bool => hol.imp p_1 hol.false)).

(; axiom ;)

thm_6 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)).

(; axiom ;)

thm_7 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)).

(; axiom ;)

thm_8 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)).

(; axiom ;)

thm_9 : hol.proof hol.true.

(; axiom ;)

thm_10 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)).

(; axiom ;)

thm_11 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_12 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false).

(; axiom ;)

thm_13 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true).

(; axiom ;)

thm_14 : hol.proof (hol.eq hol.bool hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1))).

(; axiom ;)

thm_15 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.not (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_1 y_2)))).

(; axiom ;)

thm_16 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; axiom ;)

thm_17 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_18 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_19 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_20 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_21 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_22 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr A hol.bool))) (hol.forall (hol.arr A (hol.arr A hol.bool)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr A hol.bool))).

(; Theorem: |- ((= (Data.Bool.==> (Relation.wellFounded r))) (Data.Bool.==> (Relation.wellFounded r))) ;)

(; dict ;)

def thm_23 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL (hol.arr hol.bool hol.bool) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)).

(; Theorem: |- ((= ((= (Relation.irreflexive r)) (Data.Bool.! \lambda x. (Data.Bool.~ ((r x) x))))) ((= (Relation.irreflexive r)) (Data.Bool.! \lambda x. (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_24 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) (hol.eq hol.bool (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))).

(; Theorem: |- ((= ((= (Relation.irreflexive r)) (Data.Bool.! \lambda x. (Data.Bool.~ ((r x) x))))) ((= (Relation.irreflexive r)) (Data.Bool.! \lambda x. (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_25 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) (hol.eq hol.bool (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) (hol.eq hol.bool (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) (hol.eq hol.bool (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) (thm_24 A r_1) (thm_24 A r_1).

(; Theorem: |- ((= (Relation.irreflexive r)) (Data.Bool.! \lambda x. (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_26 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => thm_0 A r_1.

(; Theorem: |- ((= ((Data.Bool.==> (Relation.wellFounded r)) (Relation.irreflexive r))) ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.! \lambda x. (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_27 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2))) (thm_23 A r_1) ((A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.eq hol.bool (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) (hol.eq hol.bool (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) (thm_25 A r_1) (thm_26 A r_1)) A r_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_28 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_29 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= (\lambda x. (Data.Bool.~ ((r x) x)) x)) (Data.Bool.~ ((r x) x))) ;)

(; dict ;)

def thm_30 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => hol.not (r_2 x_3 x_3)) x_1) (hol.not (r_2 x_1 x_1))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => hol.not (r_2 x_3 x_3)) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. (Data.Bool.~ ((r x) x)) x)) \lambda x. (Data.Bool.~ ((r x) x))) ;)

(; dict ;)

def thm_31 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2) (x_2 : hol.term A => hol.not (r_1 x_2 x_2))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2) (x_2 : hol.term A => hol.not (r_1 x_2 x_2)) (x_2 : hol.term A => thm_30 A x_2 r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ ((r x) x)) x))) (Data.Bool.! \lambda x. (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_32 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2)) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => (x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2) (x_2 : hol.term A => hol.not (r_1 x_2 x_2)) (thm_29 A) (thm_31 A r_1).

(; Theorem: |- ((= ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ ((r x) x)) x)))) ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.! \lambda x. (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_33 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2))) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2)) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2))) (thm_23 A r_1) (thm_32 A r_1).

(; Theorem: |- ((= (= ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ ((r x) x)) x))))) (= ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.! \lambda x. (Data.Bool.~ ((r x) x)))))) ;)

(; dict ;)

def thm_34 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2)))) (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2))) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) thm_28 (thm_33 A r_1).

(; Theorem: |- ((= ((Data.Bool.==> (Relation.wellFounded r)) (\lambda x. (Data.Bool.~ ((r x) x)) x))) ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_35 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_2) ((x_3 : hol.term A => hol.not (r_2 x_3 x_3)) x_1)) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_2) (hol.not (r_2 x_1 x_1)))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_2)) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_2)) ((x_3 : hol.term A => hol.not (r_2 x_3 x_3)) x_1) (hol.not (r_2 x_1 x_1)) (thm_23 A r_2) (thm_30 A x_1 r_2).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (\lambda x. (Data.Bool.~ ((r x) x)) x))) \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_36 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) ((x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2)) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) ((x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2)) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))) (x_2 : hol.term A => thm_35 A x_2 r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (\lambda x. (Data.Bool.~ ((r x) x)) x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_37 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) ((x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2))) (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) ((x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2)) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))) (thm_29 A) (thm_36 A r_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ ((r x) x)) x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (\lambda x. (Data.Bool.~ ((r x) x)) x))))) ((= ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.! \lambda x. (Data.Bool.~ ((r x) x))))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))))) ;)

(; dict ;)

def thm_38 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2))) (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) ((x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2)))) (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2)))) (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2))))) (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) ((x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2))) (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (thm_34 A r_1) (thm_37 A r_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_39 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_40 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (thm_39 A q_1 p_2) (thm_39 A q_1 p_2).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_41 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_42 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)).

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_43 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_44 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) => hol.SYM hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (thm_43 A q_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) ;)

(; dict ;)

def thm_45 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_46 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) => hol.SYM hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (thm_45 A q_1 p_2 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x))))) ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_47 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.PROP_EXT (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) => thm_44 A q_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))) (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3)))) => thm_46 A q_1 p_2 hyp_1).

(; Theorem: |- ((= \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x))))) \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_48 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.ABS_THM (hol.arr A hol.bool) hol.bool (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => thm_47 A q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))))) (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_49 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) :=
  A : hol.type => p_1 : hol.term hol.bool => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))) (thm_42 A) (thm_48 A p_1).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))))) \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_50 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.ABS_THM hol.bool hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) (p_1 : hol.term hol.bool => thm_49 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))))) ;)

(; dict ;)

def thm_51 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))))) :=
  A : hol.type => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))))) (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) thm_41 (thm_50 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))))) ;)

(; dict ;)

def thm_52 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) :=
  A : hol.type => hol.EQ_MP (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))) (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3)))))) (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))) (thm_51 A) (thm_1 A).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_53 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (hol.forall A (x_3 : hol.term A => q_2 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => thm_52 A p_1.

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.! \lambda x. (q x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_54 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_53 A p_2 q_1.

(; Theorem: |- ((= ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.~ ((r x) x)) x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (\lambda x. (Data.Bool.~ ((r x) x)) x)))) ;)

(; dict ;)

def thm_55 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2))) (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) ((x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (hol.forall A (x_3 : hol.term A => q_1 x_3))) (hol.forall A (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (thm_40 A q_1 p_2) (thm_54 A q_1 p_2)) A q_1 p_2) A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)) (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1).

(; Theorem: |- ((= ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.! \lambda x. (Data.Bool.~ ((r x) x))))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_56 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2))) (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) ((x_3 : hol.term A => hol.not (r_1 x_3 x_3)) x_2)))) (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) (thm_38 A r_1) (thm_55 A r_1).

(; Theorem: |- ((= ((Data.Bool.==> (Relation.wellFounded r)) (Relation.irreflexive r))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_57 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall A (x_2 : hol.term A => hol.not (r_1 x_2 x_2)))) (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (thm_27 A r_1) (thm_56 A r_1).

(; Theorem: |- ((= \lambda r. ((Data.Bool.==> (Relation.wellFounded r)) (Relation.irreflexive r))) \lambda r. (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_58 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => hol.ABS_THM (hol.arr A (hol.arr A hol.bool)) hol.bool (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => thm_57 A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((Data.Bool.==> (Relation.wellFounded r)) (Relation.irreflexive r)))) (Data.Bool.! \lambda r. (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))))) ;)

(; dict ;)

def thm_59 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool))) (hol.forall (hol.arr A (hol.arr A hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (thm_22 A) (thm_58 A).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))))) (Data.Bool.! \lambda r. ((Data.Bool.==> (Relation.wellFounded r)) (Relation.irreflexive r)))) ;)

(; dict ;)

def thm_60 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)))) :=
  A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) (thm_59 A).

(; Theorem: |- ((= \lambda r. (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x))))) \lambda r. (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_61 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))).

(; Theorem: |- ((= \lambda r. (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x))))) \lambda r. (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_62 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => hol.TRANS (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (thm_61 A) (thm_61 A).

(; Theorem: |- ((= (Data.Bool.! \lambda r. (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))))) (Data.Bool.! \lambda r. (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))))) ;)

(; dict ;)

def thm_63 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr A hol.bool))) (hol.forall (hol.arr A (hol.arr A hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (thm_22 A) (thm_62 A).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))) \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_64 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))) \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_65 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))) (thm_64 A r_1) (thm_64 A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x))))) (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_66 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))) (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))) (thm_29 A) (thm_65 A r_1).

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_67 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

(; dict ;)

def thm_68 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))).

(; Theorem: |- ((= ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

(; dict ;)

def thm_69 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (thm_68 A r_1) (thm_68 A r_1).

(; Theorem: |- ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_70 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => thm_2 A r_1.

(; Theorem: |- ((= (Data.Bool.==> (Relation.wellFounded r))) (Data.Bool.==> (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

(; dict ;)

def thm_71 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1)) (hol.imp (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) thm_67 ((A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4))))))))) (thm_69 A r_1) (thm_70 A r_1)) A r_1).

(; Theorem: |- ((= (Data.Bool.~ ((r x) x))) (Data.Bool.~ ((r x) x))) ;)

(; dict ;)

def thm_72 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.not (r_2 x_1 x_1)) (hol.not (r_2 x_1 x_1))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.not (r_2 x_1 x_1)).

(; Theorem: |- ((= ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))) ((Data.Bool.==> (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_73 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_2) (hol.not (r_2 x_1 x_1))) (hol.imp (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))))) (hol.not (r_2 x_1 x_1)))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_2)) (hol.imp (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5))))))))) (hol.not (r_2 x_1 x_1)) (hol.not (r_2 x_1 x_1)) (thm_71 A r_2) (thm_72 A x_1 r_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.~ ((r x) x)))) ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_74 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))))) (hol.not (r_2 x_1 x_1))) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_2) (hol.not (r_2 x_1 x_1)))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.SYM hol.bool (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_2) (hol.not (r_2 x_1 x_1))) (hol.imp (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))))) (hol.not (r_2 x_1 x_1))) (thm_73 A x_1 r_2).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_75 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)).

(; Theorem: |- ((= (\lambda y. ((= y) x) y)) ((= y) x)) ;)

(; dict ;)

def thm_76 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool ((y_3 : hol.term A => hol.eq A y_3 x_2) y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.BETA_CONV A hol.bool (y_3 : hol.term A => hol.eq A y_3 x_2) y_1.

(; Theorem: |- ((= \lambda y. (\lambda y. ((= y) x) y)) \lambda y. ((= y) x)) ;)

(; dict ;)

def thm_77 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) y_2) (y_2 : hol.term A => hol.eq A y_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.ABS_THM A hol.bool (y_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) y_2) (y_2 : hol.term A => hol.eq A y_2 x_1) (y_2 : hol.term A => thm_76 A y_2 x_1).

(; Theorem: |- ((= x') x') ;)

(; dict ;)

def thm_78 : A : hol.type -> x_27_1 : hol.term A -> hol.proof (hol.eq A x_27_1 x_27_1) :=
  A : hol.type => x_27_1 : hol.term A => hol.REFL A x_27_1.

(; Theorem: |- ((= (\lambda y. (\lambda y. ((= y) x) y) x')) (\lambda y. ((= y) x) x')) ;)

(; dict ;)

def thm_79 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool ((y_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) y_3) x_27_1) ((y_3 : hol.term A => hol.eq A y_3 x_2) x_27_1)) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => hol.APP_THM A hol.bool (y_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) y_3) (y_3 : hol.term A => hol.eq A y_3 x_2) x_27_1 x_27_1 (thm_77 A x_2) (thm_78 A x_27_1).

(; Theorem: |- ((= (= (\lambda y. (\lambda y. ((= y) x) y) x'))) (= (\lambda y. ((= y) x) x'))) ;)

(; dict ;)

def thm_80 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((y_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) y_3) x_27_1)) (hol.eq hol.bool ((y_3 : hol.term A => hol.eq A y_3 x_2) x_27_1))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((y_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) y_3) x_27_1) ((y_3 : hol.term A => hol.eq A y_3 x_2) x_27_1) thm_28 (thm_79 A x_27_1 x_2).

(; Theorem: |- ((= (\lambda y. ((= y) x) x')) ((= x') x)) ;)

(; dict ;)

def thm_81 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool ((y_3 : hol.term A => hol.eq A y_3 x_2) x_27_1) (hol.eq A x_27_1 x_2)) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => hol.BETA_CONV A hol.bool (y_3 : hol.term A => hol.eq A y_3 x_2) x_27_1.

(; Theorem: |- ((= ((= (\lambda y. (\lambda y. ((= y) x) y) x')) (\lambda y. ((= y) x) x'))) ((= (\lambda y. ((= y) x) x')) ((= x') x))) ;)

(; dict ;)

def thm_82 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((y_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) y_3) x_27_1) ((y_3 : hol.term A => hol.eq A y_3 x_2) x_27_1)) (hol.eq hol.bool ((y_3 : hol.term A => hol.eq A y_3 x_2) x_27_1) (hol.eq A x_27_1 x_2))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((y_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) y_3) x_27_1)) (hol.eq hol.bool ((y_3 : hol.term A => hol.eq A y_3 x_2) x_27_1)) ((y_3 : hol.term A => hol.eq A y_3 x_2) x_27_1) (hol.eq A x_27_1 x_2) (thm_80 A x_27_1 x_2) (thm_81 A x_27_1 x_2).

(; Theorem: |- ((= \lambda x'. (\lambda y. ((= y) x) x')) \lambda x'. ((= x') x)) ;)

(; dict ;)

def thm_83 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) x_27_2) (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.ABS_THM A hol.bool (x_27_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) x_27_2) (x_27_2 : hol.term A => hol.eq A x_27_2 x_1) (x_27_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool ((y_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_1) y_3) x_27_2) ((y_3 : hol.term A => hol.eq A y_3 x_1) x_27_2)) (hol.eq hol.bool ((y_3 : hol.term A => hol.eq A y_3 x_1) x_27_2) (hol.eq A x_27_2 x_1)) (thm_82 A x_27_2 x_1) (thm_79 A x_27_2 x_1)).

(; Theorem: |- ((= (Data.Bool.? \lambda x'. (\lambda y. ((= y) x) x'))) (Data.Bool.? \lambda x'. ((= x') x))) ;)

(; dict ;)

def thm_84 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) x_27_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A x_27_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_27_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) x_27_2) (x_27_2 : hol.term A => hol.eq A x_27_2 x_1) (thm_75 A) (thm_83 A x_1).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.? \lambda x'. (\lambda y. ((= y) x) x')))) (Data.Bool.==> (Data.Bool.? \lambda x'. ((= x') x)))) ;)

(; dict ;)

def thm_85 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) x_27_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => (y_3 : hol.term A => hol.eq A y_3 x_1) x_27_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) thm_67 (thm_84 A x_1).

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_86 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= (Data.Bool./\ (\lambda y. ((= y) x) x'))) (Data.Bool./\ ((= x') x))) ;)

(; dict ;)

def thm_87 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((y_3 : hol.term A => hol.eq A y_3 x_2) x_27_1)) (hol.and (hol.eq A x_27_1 x_2))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((y_3 : hol.term A => hol.eq A y_3 x_2) x_27_1) (hol.eq A x_27_1 x_2) thm_86 (thm_81 A x_27_1 x_2).

(; Theorem: |- ((= (Data.Bool.==> ((r y) x'))) (Data.Bool.==> ((r y) x'))) ;)

(; dict ;)

def thm_88 : A : hol.type -> x_27_1 : hol.term A -> y_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (r_3 y_2 x_27_1)) (hol.imp (r_3 y_2 x_27_1))) :=
  A : hol.type => x_27_1 : hol.term A => y_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL (hol.arr hol.bool hol.bool) (hol.imp (r_3 y_2 x_27_1)).

(; Theorem: |- ((= Data.Bool.~) Data.Bool.~) ;)

(; dict ;)

def thm_89 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not hol.not) :=
  hol.REFL (hol.arr hol.bool hol.bool) hol.not.

(; Theorem: |- ((= (Data.Bool.~ (\lambda y. ((= y) x) y))) (Data.Bool.~ ((= y) x))) ;)

(; dict ;)

def thm_90 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not ((y_3 : hol.term A => hol.eq A y_3 x_2) y_1)) (hol.not (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool hol.not hol.not ((y_3 : hol.term A => hol.eq A y_3 x_2) y_1) (hol.eq A y_1 x_2) thm_89 (thm_76 A y_1 x_2).

(; Theorem: |- ((= ((Data.Bool.==> ((r y) x')) (Data.Bool.~ (\lambda y. ((= y) x) y)))) ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))) ;)

(; dict ;)

def thm_91 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> y_3 : hol.term A -> r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (r_4 y_3 x_27_2) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_1) y_3))) (hol.imp (r_4 y_3 x_27_2) (hol.not (hol.eq A y_3 x_1)))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => y_3 : hol.term A => r_4 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.imp (r_4 y_3 x_27_2)) (hol.imp (r_4 y_3 x_27_2)) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_1) y_3)) (hol.not (hol.eq A y_3 x_1)) (thm_88 A x_27_2 y_3 r_4) (thm_90 A y_3 x_1).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ (\lambda y. ((= y) x) y)))) \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))) ;)

(; dict ;)

def thm_92 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_1) y_4))) (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.ABS_THM A hol.bool (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_1) y_4))) (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1))) (y_4 : hol.term A => thm_91 A x_1 x_27_2 y_4 r_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ (\lambda y. ((= y) x) y))))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))) ;)

(; dict ;)

def thm_93 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_1) y_4)))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1))))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_1) y_4))) (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1))) (thm_29 A) (thm_92 A x_1 x_27_2 r_3).

(; Theorem: |- ((= ((Data.Bool./\ (\lambda y. ((= y) x) x')) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ (\lambda y. ((= y) x) y)))))) ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))))) ;)

(; dict ;)

def thm_94 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_27_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and ((y_4 : hol.term A => hol.eq A y_4 x_3) x_27_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_2) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_3) y_4))))) (hol.and (hol.eq A x_27_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_2) (hol.not (hol.eq A y_4 x_3)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_27_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and ((y_4 : hol.term A => hol.eq A y_4 x_3) x_27_2)) (hol.and (hol.eq A x_27_2 x_3)) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_2) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_3) y_4)))) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_2) (hol.not (hol.eq A y_4 x_3)))) (thm_87 A x_27_2 x_3) (thm_93 A x_3 x_27_2 r_1).

(; Theorem: |- ((= \lambda x'. ((Data.Bool./\ (\lambda y. ((= y) x) x')) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ (\lambda y. ((= y) x) y)))))) \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))))) ;)

(; dict ;)

def thm_95 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4))))) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => hol.ABS_THM A hol.bool (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4))))) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) (x_27_3 : hol.term A => thm_94 A r_1 x_27_3 x_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x'. ((Data.Bool./\ (\lambda y. ((= y) x) x')) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ (\lambda y. ((= y) x) y))))))) (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))))) ;)

(; dict ;)

def thm_96 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4))))) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) (thm_75 A) (thm_95 A r_1 x_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x'. (\lambda y. ((= y) x) x'))) (Data.Bool.? \lambda x'. ((Data.Bool./\ (\lambda y. ((= y) x) x')) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ (\lambda y. ((= y) x) y)))))))) ((Data.Bool.==> (Data.Bool.? \lambda x'. ((= x') x))) (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))))))) ;)

(; dict ;)

def thm_97 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (thm_85 A x_2) (thm_96 A r_1 x_2).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x'. (\lambda y. ((= y) x) x'))) (Data.Bool.? \lambda x'. ((Data.Bool./\ (\lambda y. ((= y) x) x')) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ (\lambda y. ((= y) x) y))))))))) (Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x'. ((= x') x))) (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))))))) ;)

(; dict ;)

def thm_98 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4)))))))) (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))))) thm_67 (thm_97 A r_1 x_2).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x'. (\lambda y. ((= y) x) x'))) (Data.Bool.? \lambda x'. ((Data.Bool./\ (\lambda y. ((= y) x) x')) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ (\lambda y. ((= y) x) y)))))))) (Data.Bool.~ ((r x) x)))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x'. ((= x') x))) (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))))))) (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_99 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4))))))) (hol.not (r_1 x_2 x_2))) (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))))) (hol.not (r_1 x_2 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4)))))))) (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))))) (hol.not (r_1 x_2 x_2)) (hol.not (r_1 x_2 x_2)) (thm_98 A r_1 x_2) (thm_72 A x_2 r_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x'. ((= x') x))) (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))))))) (Data.Bool.~ ((r x) x)))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x'. (\lambda y. ((= y) x) x'))) (Data.Bool.? \lambda x'. ((Data.Bool./\ (\lambda y. ((= y) x) x')) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ (\lambda y. ((= y) x) y)))))))) (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_100 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))))) (hol.not (r_1 x_2 x_2))) (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4))))))) (hol.not (r_1 x_2 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => hol.SYM hol.bool (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4))))))) (hol.not (r_1 x_2 x_2))) (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))))) (hol.not (r_1 x_2 x_2))) (thm_99 A r_1 x_2).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool.==> p) q)) r))) ((Data.Bool.==> ((Data.Bool./\ p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool.==> p) q)) r))) ;)

(; dict ;)

def thm_101 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool.==> p) q)) r))) ((Data.Bool.==> ((Data.Bool./\ p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool.==> p) q)) r))) ;)

(; dict ;)

def thm_102 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) (thm_101 r_1 q_2 p_3) (thm_101 r_1 q_2 p_3).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool.==> p) q)) r)) ;)

(; dict ;)

def thm_103 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) -> hol.proof (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) => hyp_1.

(; Theorem: |- ((Data.Bool./\ p) ((Data.Bool.==> q) r)) ;)

(; dict ;)

def thm_104 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) -> hol.proof (hol.and p_3 (hol.imp q_2 r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) q)) r) ;)

(; dict ;)

def thm_105 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) -> hyp_2 : hol.proof (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) -> hol.proof (hol.imp (hol.imp p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) => hyp_2 : hol.proof (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) => thm_103 r_1 q_2 p_3 hyp_2 (thm_104 r_1 q_2 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool.==> p) q)) r))) ((Data.Bool.==> ((Data.Bool.==> p) q)) r)) ;)

(; dict ;)

def thm_106 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) -> hol.proof (hol.imp (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) => hyp_2 : hol.proof (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) => thm_105 r_1 q_2 p_3 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool.==> p) q)) r))) ((Data.Bool.==> ((Data.Bool./\ p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool.==> p) q)) r))) ;)

(; dict ;)

def thm_107 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1))) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) => hyp_2 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) => thm_106 r_1 q_2 p_3 hyp_2 (thm_103 r_1 q_2 p_3 hyp_1).

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_108 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_109 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_110 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_108 q_1 p_2) (thm_109 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_111 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_112 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_113 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_111 p_1) (thm_112 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_114 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_115 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_3 (thm_114 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_116 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_113 p_1) (thm_115 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_117 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_118 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_116 p_2) (thm_117 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_119 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_110 q_1 p_2) (thm_118 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_120 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_121 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_119 q_1 p_2) (thm_120 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_122 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_121 q_1 p_2 hyp_1 q_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_123 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_124 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_125 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.PROP_EXT q_2 p_1 (hyp_3 : hol.proof p_1 => thm_123 q_2 hyp_2) (hyp_3 : hol.proof q_2 => thm_124 p_1 hyp_1).

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_126 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.SYM hol.bool q_1 p_2 (thm_125 p_2 q_1 hyp_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_127 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_126 q_2 p_1 hyp_1 hyp_2) (thm_124 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_128 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_127 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_129 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_128 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_130 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_122 q_2 p_1 hyp_1 (thm_129 q_2 p_1).

(; Theorem: |- ((Data.Bool.==> q) r) ;)

(; dict ;)

def thm_131 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 (hol.imp q_3 r_2)) -> hol.proof (hol.imp q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 (hol.imp q_3 r_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_130 p_1 q_2 hyp_1) p_1 (hol.imp q_3 r_2) hyp_1.

(; Theorem: |- ((Data.Bool.==> q) r) ;)

(; dict ;)

def thm_132 : p_1 : hol.term hol.bool -> r_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 (hol.imp q_3 r_2)) -> hol.proof (hol.imp q_3 r_2) :=
  p_1 : hol.term hol.bool => r_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 (hol.imp q_3 r_2)) => hol.PROVE_HYP (hol.and p_1 (hol.imp q_3 r_2)) (hol.imp q_3 r_2) (thm_104 r_2 q_3 p_1 hyp_1) (hyp_2 : hol.proof (hol.and p_1 (hol.imp q_3 r_2)) => thm_131 p_1 r_2 q_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_133 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_2 q_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_134 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_121 q_1 p_2 hyp_1 p_2.

(; Theorem: |- p ;)

(; dict ;)

def thm_135 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_125 p_2 q_1 hyp_1 hyp_2) (thm_123 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_136 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_135 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_137 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_136 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_138 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_134 q_1 p_2 hyp_1 (thm_137 q_1 p_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_139 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) -> hol.proof p_3 :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_138 q_1 p_2 hyp_1) (hol.imp q_2 r_1) p_3 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_140 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) -> hol.proof p_3 :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) => hol.PROVE_HYP (hol.and p_3 (hol.imp q_2 r_1)) p_3 (thm_104 r_1 q_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) => thm_139 r_1 q_2 p_3 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_141 : r_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (hol.imp q_3 r_1)) -> hyp_2 : hol.proof (hol.imp p_2 q_3) -> hol.proof q_3 :=
  r_1 : hol.term hol.bool => p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (hol.imp q_3 r_1)) => hyp_2 : hol.proof (hol.imp p_2 q_3) => thm_133 q_3 p_2 hyp_2 (thm_140 r_1 q_3 p_2 hyp_1).

(; Theorem: |- r ;)

(; dict ;)

def thm_142 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> r_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 (hol.imp q_1 r_3)) -> hyp_2 : hol.proof (hol.imp p_2 q_1) -> hol.proof r_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => r_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 (hol.imp q_1 r_3)) => hyp_2 : hol.proof (hol.imp p_2 q_1) => thm_132 p_2 r_3 q_1 hyp_1 (thm_141 r_3 p_2 q_1 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) q)) r) ;)

(; dict ;)

def thm_143 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) -> hol.proof (hol.imp (hol.imp p_3 q_2) r_1) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) => hyp_2 : hol.proof (hol.imp p_3 q_2) => thm_142 q_2 p_3 r_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ p) ((Data.Bool.==> q) r))) ((Data.Bool.==> ((Data.Bool.==> p) q)) r)) ;)

(; dict ;)

def thm_144 : r_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) :=
  r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_3 (hol.imp q_2 r_1)) => thm_143 r_1 q_2 p_3 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (Data.Bool.? \lambda x'. ((= x') x))) ((Data.Bool.==> (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))))) (Data.Bool.~ ((r x) x))))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x'. ((= x') x))) (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))))))) (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_145 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.imp (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (hol.not (r_1 x_2 x_2)))) (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))))) (hol.not (r_1 x_2 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => (r_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hol.EQ_MP (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) (hol.imp (hol.and p_3 (hol.imp q_2 r_1)) (hol.imp (hol.imp p_3 q_2) r_1)) (thm_102 r_1 q_2 p_3) (thm_107 r_1 q_2 p_3 (thm_144 r_1 q_2 p_3))) (hol.not (r_1 x_2 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)).

(; Theorem: |- ((= (\lambda x'. ((= x') x) x)) ((= x) x)) ;)

(; dict ;)

def thm_146 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool ((x_27_2 : hol.term A => hol.eq A x_27_2 x_1) x_1) (hol.eq A x_1 x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.BETA_CONV A hol.bool (x_27_2 : hol.term A => hol.eq A x_27_2 x_1) x_1.

(; Theorem: |- ((= ((= x) x)) (\lambda x'. ((= x') x) x)) ;)

(; dict ;)

def thm_147 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) ((x_27_2 : hol.term A => hol.eq A x_27_2 x_1) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.SYM hol.bool ((x_27_2 : hol.term A => hol.eq A x_27_2 x_1) x_1) (hol.eq A x_1 x_1) (thm_146 A x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_148 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => hol.REFL A x_1.

(; Theorem: |- (\lambda x'. ((= x') x) x) ;)

(; dict ;)

def thm_149 : A : hol.type -> x_1 : hol.term A -> hol.proof ((x_27_2 : hol.term A => hol.eq A x_27_2 x_1) x_1) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) ((x_27_2 : hol.term A => hol.eq A x_27_2 x_1) x_1) (thm_147 A x_1) (thm_148 A x_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_150 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_151 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_152 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_150 A P_1) (thm_151 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_153 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_154 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_4 A) (thm_153 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_155 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_152 A P_1) (thm_154 A P_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_156 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_155 A P_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_157 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_158 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_157 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_159 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_160 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_158 A Q_3 x_1 P_2 hyp_2 (thm_159 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_161 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_160 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_162 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_161 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_163 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_156 A P_2) (thm_162 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x'. ((= x') x)) ;)

(; dict ;)

def thm_164 : A : hol.type -> x_1 : hol.term A -> hyp_1 : hol.proof ((x_27_2 : hol.term A => hol.eq A x_27_2 x_1) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => hyp_1 : hol.proof ((x_27_2 : hol.term A => hol.eq A x_27_2 x_1) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_163 A x_1 P_2 hyp_1) A x_1 (x_27_2 : hol.term A => hol.eq A x_27_2 x_1) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x'. ((= x') x)) ;)

(; dict ;)

def thm_165 : A : hol.type -> x_1 : hol.term A -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.PROVE_HYP ((x_27_2 : hol.term A => hol.eq A x_27_2 x_1) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) (thm_149 A x_1) (hyp_1 : hol.proof ((x_27_2 : hol.term A => hol.eq A x_27_2 x_1) x_1) => thm_164 A x_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_166 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_119 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_167 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_168 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_167 x_2 q_3 p_1 hyp_2 (thm_124 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_169 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_168 p_2 x_3 q_1 hyp_1 hyp_3 (thm_123 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_170 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_169 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_171 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_170 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_172 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_166 q_1 p_2) (thm_171 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_173 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_130 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_172 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))))) (Data.Bool.~ ((r x) x)))) ((Data.Bool./\ (Data.Bool.? \lambda x'. ((= x') x))) ((Data.Bool.==> (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))))) (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_174 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (hol.not (r_1 x_2 x_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_173 p_1 q_2 hyp_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (hol.not (r_1 x_2 x_2))) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))))) (Data.Bool.~ ((r x) x)))) ((Data.Bool./\ (Data.Bool.? \lambda x'. ((= x') x))) ((Data.Bool.==> (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))))) (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_175 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (hol.not (r_1 x_2 x_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => hol.PROVE_HYP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (hol.not (r_1 x_2 x_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (hol.not (r_1 x_2 x_2))))) (thm_165 A x_2) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) => thm_174 A r_1 x_2 hyp_1).

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_176 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_177 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) => hol.EQ_MP p_1 q_2 (thm_176 q_2 p_1 hyp_2) (thm_124 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_178 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_2 : hol.proof p_2 => thm_177 p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= p) q)) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_179 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 q_1) (hol.imp p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => thm_178 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_180 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_179 q_1 p_2) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_181 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_180 A P_1 (thm_155 A P_1).

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_182 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)) ;)

(; dict ;)

def thm_183 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_181 A P_1 (thm_182 A P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_184 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_183 A P_2 hyp_1 Q_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_185 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof Q_2 :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_184 A Q_2 P_1 hyp_2 (thm_157 A Q_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) Q) ;)

(; dict ;)

def thm_186 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_185 A P_2 Q_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) ((Data.Bool.==> (Data.Bool.? P)) Q)) ;)

(; dict ;)

def thm_187 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => thm_186 A Q_1 P_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x_1. ((Data.Bool.==> (\lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))) x_1)) (Data.Bool.~ ((r x) x))))) ((Data.Bool.==> (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))))) (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_188 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.imp (hol.forall A (x__1_3 : hol.term A => hol.imp ((x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_2) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_27_4) (hol.not (hol.eq A y_5 x_2))))) x__1_3) (hol.not (r_1 x_2 x_2)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (hol.not (r_1 x_2 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_187 A Q_1 P_2) A (hol.not (r_1 x_2 x_2)) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))).

(; Theorem: |- ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))) ;)

(; dict ;)

def thm_189 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> x_27_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) -> hol.proof (hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => x_27_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) => hyp_1.

(; Theorem: |- ((= x') x) ;)

(; dict ;)

def thm_190 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> x_27_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) -> hol.proof (hol.eq A x_27_3 x_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => x_27_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_138 q_1 p_2 hyp_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))) (hol.eq A x_27_3 x_2) hyp_1.

(; Theorem: |- ((= x') x) ;)

(; dict ;)

def thm_191 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> x_27_3 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) -> hol.proof (hol.eq A x_27_3 x_2) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => x_27_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) => hol.PROVE_HYP (hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) (hol.eq A x_27_3 x_2) (thm_189 A r_1 x_2 x_27_3 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) => thm_190 A r_1 x_2 x_27_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))) ;)

(; dict ;)

def thm_192 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.eq A x_27_2 x_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1))))) -> hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.eq A x_27_2 x_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_130 p_1 q_2 hyp_1) (hol.eq A x_27_2 x_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))) ;)

(; dict ;)

def thm_193 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.eq A x_27_2 x_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1))))) -> hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.eq A x_27_2 x_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1))))) => hol.PROVE_HYP (hol.and (hol.eq A x_27_2 x_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1))))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) (thm_189 A r_3 x_1 x_27_2 hyp_1) (hyp_2 : hol.proof (hol.and (hol.eq A x_27_2 x_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1))))) => thm_192 A x_1 x_27_2 r_3 hyp_2).

(; Theorem: |- ((= x') x) ;)

(; dict ;)

def thm_194 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_27_2 x_1) -> hol.proof (hol.eq A x_27_2 x_1) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_27_2 x_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))) ;)

(; dict ;)

def thm_195 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) -> hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) => hyp_1.

(; Theorem: |- ((= (= (Data.Bool.~ P))) (= (Data.Bool.~ P))) ;)

(; dict ;)

def thm_196 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not P_1)).

(; Theorem: |- ((= (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_197 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1.

(; Theorem: |- ((= ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P))) ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F))) ;)

(; dict ;)

def thm_198 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false))) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not P_1)) (hol.eq hol.bool (hol.not P_1)) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1) (hol.imp P_1 hol.false) (thm_196 P_1) (thm_197 P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_199 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool P_1 P_1) :=
  P_1 : hol.term hol.bool => hol.REFL hol.bool P_1.

(; Theorem: |- ((= (Data.Bool.~ P)) (\lambda p. ((Data.Bool.==> p) Data.Bool.F) P)) ;)

(; dict ;)

def thm_200 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not (p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1 P_1 thm_5 (thm_199 P_1).

(; Theorem: |- ((= (Data.Bool.~ P)) ((Data.Bool.==> P) Data.Bool.F)) ;)

(; dict ;)

def thm_201 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not P_1) ((p_2 : hol.term hol.bool => hol.imp p_2 hol.false) P_1)) (hol.eq hol.bool (hol.not P_1) (hol.imp P_1 hol.false)) (thm_198 P_1) (thm_200 P_1).

(; Theorem: |- ((= ((Data.Bool.==> P) Data.Bool.F)) (Data.Bool.~ P)) ;)

(; dict ;)

def thm_202 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp P_1 hol.false) (hol.not P_1)) :=
  P_1 : hol.term hol.bool => hol.SYM hol.bool (hol.not P_1) (hol.imp P_1 hol.false) (thm_201 P_1).

(; Theorem: |- ((= ((Data.Bool.==> ((r x) x)) Data.Bool.F)) (Data.Bool.~ ((r x) x))) ;)

(; dict ;)

def thm_203 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (r_2 x_1 x_1) hol.false) (hol.not (r_2 x_1 x_1))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => (P_1 : hol.term hol.bool => thm_202 P_1) (r_2 x_1 x_1).

(; Theorem: |- ((r x) x) ;)

(; dict ;)

def thm_204 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (r_2 x_1 x_1) -> hol.proof (r_2 x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (r_2 x_1 x_1) => hyp_1.

(; Theorem: |- ((= Data.Bool.F) Data.Bool.F) ;)

(; dict ;)

def thm_205 : hol.proof (hol.eq hol.bool hol.false hol.false) :=
  hol.REFL hol.bool hol.false.

(; Theorem: |- ((= Data.Bool.F) Data.Bool.F) ;)

(; dict ;)

def thm_206 : hol.proof (hol.eq hol.bool hol.false hol.false) :=
  hol.SYM hol.bool hol.false hol.false thm_205.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_207 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_208 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_207 t_1) (thm_207 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_209 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_210 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_209 thm_209.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) ;)

(; dict ;)

def thm_211 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_41 thm_210.

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_212 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_213 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_212 t_1) (thm_212 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_214 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_6 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_215 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_173 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_216 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_213 t_1) (thm_214 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => thm_215 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_217 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_218 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_217 t_1) (thm_217 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_219 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_7 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_220 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_173 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_221 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_218 t_1) (thm_219 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => thm_220 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_222 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_223 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_222 t_1) (thm_222 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_224 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_8 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_225 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_173 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_226 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_223 t_1) (thm_224 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => thm_225 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_227 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_228 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_227 t_1) (thm_227 t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_229 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_230 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_229 thm_229.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_231 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_41 thm_230.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_232 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_233 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_232 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_234 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_233 t_1 hyp_1) thm_9.

(; Theorem: |- t ;)

(; dict ;)

def thm_235 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_236 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_235 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_9).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_237 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_234 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_236 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) t)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_238 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_237 t_1) (hol.imp t_1 t_1).

(; Theorem: |- ((Data.Bool.==> t) t) ;)

(; dict ;)

def thm_239 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 t_1) :=
  t_1 : hol.term hol.bool => thm_10 t_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_240 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_238 t_1) (thm_239 t_1).

(; Theorem: |- ((= (= ((Data.Bool.==> t) t))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_241 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp t_1 t_1) hol.true thm_28 (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_227 t_1) (thm_240 t_1)).

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_242 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_243 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true) hol.true hol.true (thm_241 t_1) thm_242.

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_244 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true) (thm_243 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_245 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_244 t_1) thm_242.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_246 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_173 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_247 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_228 t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) thm_231 thm_245 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => thm_246 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_248 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_11 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_249 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_247 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_207 t_1) (thm_248 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_250 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_226 t_1) (thm_249 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_251 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (thm_221 t_1) (thm_250 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_252 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (thm_216 t_1) (thm_251 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_253 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => thm_252 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_254 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_130 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_255 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) thm_211 thm_253 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => thm_254 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_256 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_130 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_257 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_255 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => thm_256 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_258 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_130 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_259 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_257 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => thm_258 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_260 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_130 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_261 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_259 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) => thm_260 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((r x) x)) (Data.Bool.~ ((= x) x)))) Data.Bool.F)) (Data.Bool.~ ((Data.Bool.==> ((r x) x)) (Data.Bool.~ ((= x) x))))) ;)

(; dict ;)

def thm_262 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1))) hol.false) (hol.not (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1))))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_208 t_1) (thm_261 t_1)) (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1))).

(; Theorem: |- ((= ((= ((r x) x)) Data.Bool.T)) ((= ((r x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_263 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (r_2 x_1 x_1) hol.true) (hol.eq hol.bool (r_2 x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (r_2 x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((r x) x)) Data.Bool.T)) ((= ((r x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_264 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (r_2 x_1 x_1) hol.true) (hol.eq hol.bool (r_2 x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (r_2 x_1 x_1) hol.true) (hol.eq hol.bool (r_2 x_1 x_1) hol.true) (hol.eq hol.bool (r_2 x_1 x_1) hol.true) (thm_263 A x_1 r_2) (thm_263 A x_1 r_2).

(; Theorem: |- ((= ((r x) x)) ((= ((r x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_265 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (r_2 x_1 x_1) (hol.eq hol.bool (r_2 x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => (t_1 : hol.term hol.bool => thm_237 t_1) (r_2 x_1 x_1).

(; Theorem: |- ((= ((r x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_266 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (r_2 x_1 x_1) -> hol.proof (hol.eq hol.bool (r_2 x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (r_2 x_1 x_1) => hol.EQ_MP (r_2 x_1 x_1) (hol.eq hol.bool (r_2 x_1 x_1) hol.true) (thm_265 A x_1 r_2) (thm_204 A x_1 r_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.==> ((r x) x))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_267 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (r_2 x_1 x_1) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (r_2 x_1 x_1)) (hol.imp hol.true)) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (r_2 x_1 x_1) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (r_2 x_1 x_1) hol.true thm_67 (hol.EQ_MP (hol.eq hol.bool (r_2 x_1 x_1) hol.true) (hol.eq hol.bool (r_2 x_1 x_1) hol.true) (thm_264 A x_1 r_2) (thm_266 A x_1 r_2 hyp_1)).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_268 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_269 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_268 A x_1) (thm_268 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_270 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_271 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_270 A) (thm_270 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_272 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_29 A) (thm_271 A).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_273 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_237 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_274 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_273 A x_1) (thm_148 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_275 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_268 A x_1) (thm_274 A x_1)) A x_1.

(; Theorem: |- ((= (Data.Bool.~ ((= x) x))) (Data.Bool.~ Data.Bool.T)) ;)

(; dict ;)

def thm_276 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq A x_1 x_1)) (hol.not hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.eq A x_1 x_1) hol.true thm_89 ((A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_269 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_272 A) (thm_275 A) x_1)) A x_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_277 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_278 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_277 thm_277.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_279 : hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_173 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_280 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.PROVE_HYP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_277 thm_12) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => thm_279 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_281 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_282 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_281 thm_281.

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_283 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) thm_280 (hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_282 thm_13).

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F) ;)

(; dict ;)

def thm_284 : hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) -> hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) :=
  hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_138 q_1 p_2 hyp_1) (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.true) hol.false) hyp_1.

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F) ;)

(; dict ;)

def thm_285 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) :=
  hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_283 (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => thm_284 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ ((= x) x))) Data.Bool.F) ;)

(; dict ;)

def thm_286 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.not (hol.eq A x_1 x_1)) hol.false) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.not (hol.eq A x_1 x_1)) (hol.not hol.true) hol.false (thm_276 A x_1) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_278 thm_285).

(; Theorem: |- ((= ((Data.Bool.==> ((r x) x)) (Data.Bool.~ ((= x) x)))) ((Data.Bool.==> Data.Bool.T) Data.Bool.F)) ;)

(; dict ;)

def thm_287 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (r_2 x_1 x_1) -> hol.proof (hol.eq hol.bool (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1))) (hol.imp hol.true hol.false)) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (r_2 x_1 x_1) => hol.APP_THM hol.bool hol.bool (hol.imp (r_2 x_1 x_1)) (hol.imp hol.true) (hol.not (hol.eq A x_1 x_1)) hol.false (thm_267 A x_1 r_2 hyp_1) (thm_286 A x_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_288 : hol.proof (hol.eq hol.bool (hol.imp hol.true hol.false) hol.false) :=
  (t_1 : hol.term hol.bool => thm_214 t_1) hol.false.

(; Theorem: |- ((= ((Data.Bool.==> ((r x) x)) (Data.Bool.~ ((= x) x)))) Data.Bool.F) ;)

(; dict ;)

def thm_289 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (r_2 x_1 x_1) -> hol.proof (hol.eq hol.bool (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1))) hol.false) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (r_2 x_1 x_1) => hol.TRANS hol.bool (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1))) (hol.imp hol.true hol.false) hol.false (thm_287 A x_1 r_2 hyp_1) thm_288.

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> ((r x) x)) (Data.Bool.~ ((= x) x))))) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_290 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (r_2 x_1 x_1) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1)))) (hol.not hol.false)) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (r_2 x_1 x_1) => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1))) hol.false thm_89 (thm_289 A x_1 r_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool.==> ((r x) x)) (Data.Bool.~ ((= x) x))))) Data.Bool.T) ;)

(; dict ;)

def thm_291 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (r_2 x_1 x_1) -> hol.proof (hol.eq hol.bool (hol.not (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1)))) hol.true) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (r_2 x_1 x_1) => hol.TRANS hol.bool (hol.not (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1)))) (hol.not hol.false) hol.true (thm_290 A x_1 r_2 hyp_1) thm_13.

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((r x) x)) (Data.Bool.~ ((= x) x)))) Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_292 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (r_2 x_1 x_1) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1))) hol.false) hol.true) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (r_2 x_1 x_1) => hol.TRANS hol.bool (hol.imp (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1))) hol.false) (hol.not (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1)))) hol.true (thm_262 A x_1 r_2) (thm_291 A x_1 r_2 hyp_1).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> ((Data.Bool.==> ((r x) x)) (Data.Bool.~ ((= x) x)))) Data.Bool.F)) ;)

(; dict ;)

def thm_293 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (r_2 x_1 x_1) -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1))) hol.false)) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (r_2 x_1 x_1) => hol.SYM hol.bool (hol.imp (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1))) hol.false) hol.true (thm_292 A x_1 r_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((r x) x)) (Data.Bool.~ ((= x) x)))) Data.Bool.F) ;)

(; dict ;)

def thm_294 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (r_2 x_1 x_1) -> hol.proof (hol.imp (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1))) hol.false) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (r_2 x_1 x_1) => hol.EQ_MP hol.true (hol.imp (hol.imp (r_2 x_1 x_1) (hol.not (hol.eq A x_1 x_1))) hol.false) (thm_293 A x_1 r_2 hyp_1) thm_9.

(; Theorem: |- ((= (= (\lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x)))) x'))) (= (\lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x)))) x'))) ;)

(; dict ;)

def thm_295 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1)) (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1)).

(; Theorem: |- ((= (\lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x)))) x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ ((= y) x))))) ;)

(; dict ;)

def thm_296 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool ((__12210_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __12210_3) (hol.not (hol.eq A y_4 x_1)))) x_1) (hol.forall A (y_3 : hol.term A => hol.imp (r_2 y_3 x_1) (hol.not (hol.eq A y_3 x_1))))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.BETA_CONV A hol.bool (__12210_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __12210_3) (hol.not (hol.eq A y_4 x_1)))) x_1.

(; Theorem: |- ((= ((= (\lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x)))) x')) (\lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x)))) x))) ((= (\lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x)))) x')) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ ((= y) x)))))) ;)

(; dict ;)

def thm_297 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1) ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_2)) (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (hol.eq A y_4 x_2)))))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1)) (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1)) ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (hol.eq A y_4 x_2)))) (thm_295 A x_27_1 x_2 r_3) (thm_296 A x_2 r_3).

(; Theorem: |- ((= (\lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x)))) x')) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))) ;)

(; dict ;)

def thm_298 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2))))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.BETA_CONV A hol.bool (__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1.

(; Theorem: |- ((= (= (\lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x)))) x'))) (= (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))))) ;)

(; dict ;)

def thm_299 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1)) (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) thm_28 (thm_298 A x_27_1 x_2 r_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ ((= y) x))))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ ((= y) x))))) ;)

(; dict ;)

def thm_300 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (r_2 y_3 x_1) (hol.not (hol.eq A y_3 x_1)))) (hol.forall A (y_3 : hol.term A => hol.imp (r_2 y_3 x_1) (hol.not (hol.eq A y_3 x_1))))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (r_2 y_3 x_1) (hol.not (hol.eq A y_3 x_1)))).

(; Theorem: |- ((= ((= (\lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x)))) x')) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ ((= y) x)))))) ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ ((= y) x)))))) ;)

(; dict ;)

def thm_301 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (hol.eq A y_4 x_2))))) (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (hol.eq A y_4 x_2)))))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1)) (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2))))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (hol.eq A y_4 x_2)))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (hol.eq A y_4 x_2)))) (thm_299 A x_27_1 x_2 r_3) (thm_300 A x_2 r_3).

(; Theorem: |- ((= ((= (\lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x)))) x')) (\lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x)))) x))) ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ ((= y) x)))))) ;)

(; dict ;)

def thm_302 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1) ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_2)) (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (hol.eq A y_4 x_2)))))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1) ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_2)) (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (hol.eq A y_4 x_2))))) (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (hol.eq A y_4 x_2))))) (thm_297 A x_27_1 x_2 r_3) (thm_301 A x_27_1 x_2 r_3).

(; Theorem: |- ((= \lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x))))) \lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x))))) ;)

(; dict ;)

def thm_303 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq (hol.arr A hol.bool) (__12210_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __12210_3) (hol.not (hol.eq A y_4 x_1)))) (__12210_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __12210_3) (hol.not (hol.eq A y_4 x_1))))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL (hol.arr A hol.bool) (__12210_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 __12210_3) (hol.not (hol.eq A y_4 x_1)))).

(; Theorem: |- ((= (\lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x)))) x')) (\lambda _12210. (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) _12210)) (Data.Bool.~ ((= y) x)))) x)) ;)

(; dict ;)

def thm_304 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.eq A x_27_1 x_2) -> hol.proof (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1) ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_2)) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.eq A x_27_1 x_2) => hol.APP_THM A hol.bool (__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) (__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_2)))) x_27_1 x_2 (thm_303 A x_2 r_3) (thm_194 A x_2 x_27_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ ((= y) x))))) ;)

(; dict ;)

def thm_305 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.eq A x_27_2 x_1) -> hol.proof (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (hol.not (hol.eq A y_4 x_1))))) :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.eq A x_27_2 x_1) => hol.EQ_MP (hol.eq hol.bool ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_1)))) x_27_2) ((__12210_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 __12210_4) (hol.not (hol.eq A y_5 x_1)))) x_1)) (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_1) (hol.not (hol.eq A y_4 x_1))))) (thm_302 A x_27_2 x_1 r_3) (thm_304 A x_27_2 x_1 r_3 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ ((= y) x)))) ;)

(; dict ;)

def thm_306 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) -> hyp_2 : hol.proof (hol.eq A x_27_1 x_2) -> hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (hol.eq A y_4 x_2)))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) => hyp_2 : hol.proof (hol.eq A x_27_1 x_2) => hol.EQ_MP (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_2) (hol.not (hol.eq A y_4 x_2)))) (thm_305 A x_2 x_27_1 r_3 hyp_2) (thm_195 A x_2 x_27_1 r_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((r x) x)) (Data.Bool.~ ((= x) x))) ;)

(; dict ;)

def thm_307 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) -> hyp_2 : hol.proof (hol.eq A x_27_1 x_2) -> hol.proof (hol.imp (r_3 x_2 x_2) (hol.not (hol.eq A x_2 x_2))) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) => hyp_2 : hol.proof (hol.eq A x_27_1 x_2) => thm_306 A x_27_1 x_2 r_3 hyp_1 hyp_2 x_2.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_308 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) -> hyp_2 : hol.proof (r_3 x_1 x_1) -> hyp_3 : hol.proof (hol.eq A x_27_2 x_1) -> hol.proof hol.false :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) => hyp_2 : hol.proof (r_3 x_1 x_1) => hyp_3 : hol.proof (hol.eq A x_27_2 x_1) => thm_294 A x_1 r_3 hyp_2 (thm_307 A x_27_2 x_1 r_3 hyp_1 hyp_3).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_309 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) -> hyp_2 : hol.proof (r_3 x_1 x_1) -> hyp_3 : hol.proof (hol.eq A x_27_2 x_1) -> hol.proof hol.false :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) => hyp_2 : hol.proof (r_3 x_1 x_1) => hyp_3 : hol.proof (hol.eq A x_27_2 x_1) => hol.PROVE_HYP (r_3 x_1 x_1) hol.false (thm_204 A x_1 r_3 hyp_2) (hyp_4 : hol.proof (r_3 x_1 x_1) => thm_308 A x_1 x_27_2 r_3 hyp_1 hyp_4 hyp_3).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_310 : A : hol.type -> x_1 : hol.term A -> x_27_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) -> hyp_2 : hol.proof (r_3 x_1 x_1) -> hyp_3 : hol.proof (hol.eq A x_27_2 x_1) -> hol.proof hol.false :=
  A : hol.type => x_1 : hol.term A => x_27_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_2) (hol.not (hol.eq A y_4 x_1)))) => hyp_2 : hol.proof (r_3 x_1 x_1) => hyp_3 : hol.proof (hol.eq A x_27_2 x_1) => hol.PROVE_HYP (r_3 x_1 x_1) hol.false (thm_204 A x_1 r_3 hyp_2) (hyp_4 : hol.proof (r_3 x_1 x_1) => hol.EQ_MP hol.false hol.false thm_206 (thm_309 A x_1 x_27_2 r_3 hyp_1 hyp_4 hyp_3)).

(; Theorem: |- ((Data.Bool.==> ((r x) x)) Data.Bool.F) ;)

(; dict ;)

def thm_311 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) -> hyp_2 : hol.proof (hol.eq A x_27_1 x_2) -> hol.proof (hol.imp (r_3 x_2 x_2) hol.false) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) => hyp_2 : hol.proof (hol.eq A x_27_1 x_2) => hyp_3 : hol.proof (r_3 x_2 x_2) => thm_310 A x_2 x_27_1 r_3 hyp_1 hyp_3 hyp_2.

(; Theorem: |- (Data.Bool.~ ((r x) x)) ;)

(; dict ;)

def thm_312 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) -> hyp_2 : hol.proof (hol.eq A x_27_1 x_2) -> hol.proof (hol.not (r_3 x_2 x_2)) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) => hyp_2 : hol.proof (hol.eq A x_27_1 x_2) => hol.EQ_MP (hol.imp (r_3 x_2 x_2) hol.false) (hol.not (r_3 x_2 x_2)) (thm_203 A x_2 r_3) (thm_311 A x_27_1 x_2 r_3 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.~ ((r x) x)) ;)

(; dict ;)

def thm_313 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) -> hyp_2 : hol.proof (hol.eq A x_27_1 x_2) -> hol.proof (hol.not (r_3 x_2 x_2)) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) => hyp_2 : hol.proof (hol.eq A x_27_1 x_2) => hol.PROVE_HYP (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) (hol.not (r_3 x_2 x_2)) (thm_195 A x_2 x_27_1 r_3 hyp_1) (hyp_3 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) => thm_312 A x_27_1 x_2 r_3 hyp_3 hyp_2).

(; Theorem: |- (Data.Bool.~ ((r x) x)) ;)

(; dict ;)

def thm_314 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) -> hyp_2 : hol.proof (hol.eq A x_27_1 x_2) -> hol.proof (hol.not (r_3 x_2 x_2)) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) => hyp_2 : hol.proof (hol.eq A x_27_1 x_2) => hol.PROVE_HYP (hol.eq A x_27_1 x_2) (hol.not (r_3 x_2 x_2)) (thm_194 A x_2 x_27_1 hyp_2) (hyp_3 : hol.proof (hol.eq A x_27_1 x_2) => thm_313 A x_27_1 x_2 r_3 hyp_1 hyp_3).

(; Theorem: |- (Data.Bool.~ ((r x) x)) ;)

(; dict ;)

def thm_315 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.eq A x_27_1 x_2) -> hyp_2 : hol.proof (hol.and (hol.eq A x_27_1 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2))))) -> hol.proof (hol.not (r_3 x_2 x_2)) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.eq A x_27_1 x_2) => hyp_2 : hol.proof (hol.and (hol.eq A x_27_1 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2))))) => hol.PROVE_HYP (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) (hol.not (r_3 x_2 x_2)) (thm_193 A x_2 x_27_1 r_3 hyp_2) (hyp_3 : hol.proof (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2)))) => thm_314 A x_27_1 x_2 r_3 hyp_3 hyp_1).

(; Theorem: |- (Data.Bool.~ ((r x) x)) ;)

(; dict ;)

def thm_316 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.and (hol.eq A x_27_1 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2))))) -> hol.proof (hol.not (r_3 x_2 x_2)) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.and (hol.eq A x_27_1 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_3 y_4 x_27_1) (hol.not (hol.eq A y_4 x_2))))) => hol.PROVE_HYP (hol.eq A x_27_1 x_2) (hol.not (r_3 x_2 x_2)) (thm_191 A r_3 x_2 x_27_1 hyp_1) (hyp_2 : hol.proof (hol.eq A x_27_1 x_2) => thm_315 A x_27_1 x_2 r_3 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))))) (Data.Bool.~ ((r x) x))) ;)

(; dict ;)

def thm_317 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> x_27_3 : hol.term A -> hol.proof (hol.imp (hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) (hol.not (r_1 x_2 x_2))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => x_27_3 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) => thm_316 A x_27_3 x_2 r_1 hyp_1.

(; Theorem: |- ((= (\lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))) x')) ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))))) ;)

(; dict ;)

def thm_318 : A : hol.type -> x_27_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool ((x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_3) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_27_4) (hol.not (hol.eq A y_5 x_3))))) x_27_1) (hol.and (hol.eq A x_27_1 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_27_1) (hol.not (hol.eq A y_4 x_3)))))) :=
  A : hol.type => x_27_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_3 : hol.term A => hol.BETA_CONV A hol.bool (x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_3) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_27_4) (hol.not (hol.eq A y_5 x_3))))) x_27_1.

(; Theorem: |- (\lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))) x') ;)

(; dict ;)

def thm_319 : A : hol.type -> x_27_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_3 : hol.term A -> hyp_1 : hol.proof ((x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_3) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_27_4) (hol.not (hol.eq A y_5 x_3))))) x_27_1) -> hol.proof ((x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_3) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_27_4) (hol.not (hol.eq A y_5 x_3))))) x_27_1) :=
  A : hol.type => x_27_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_3 : hol.term A => hyp_1 : hol.proof ((x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_3) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_27_4) (hol.not (hol.eq A y_5 x_3))))) x_27_1) => hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))) ;)

(; dict ;)

def thm_320 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> x_27_3 : hol.term A -> hyp_1 : hol.proof ((x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_2) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_27_4) (hol.not (hol.eq A y_5 x_2))))) x_27_3) -> hol.proof (hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => x_27_3 : hol.term A => hyp_1 : hol.proof ((x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_2) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_27_4) (hol.not (hol.eq A y_5 x_2))))) x_27_3) => hol.EQ_MP ((x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_2) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_27_4) (hol.not (hol.eq A y_5 x_2))))) x_27_3) (hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))) (thm_318 A x_27_3 r_1 x_2) (thm_319 A x_27_3 r_1 x_2 hyp_1).

(; Theorem: |- (Data.Bool.~ ((r x) x)) ;)

(; dict ;)

def thm_321 : A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof ((x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_2) (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_27_4) (hol.not (hol.eq A y_5 x_2))))) x_27_1) -> hol.proof (hol.not (r_3 x_2 x_2)) :=
  A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => r_3 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof ((x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_2) (hol.forall A (y_5 : hol.term A => hol.imp (r_3 y_5 x_27_4) (hol.not (hol.eq A y_5 x_2))))) x_27_1) => thm_317 A r_3 x_2 x_27_1 (thm_320 A r_3 x_2 x_27_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))) x')) (Data.Bool.~ ((r x) x))) ;)

(; dict ;)

def thm_322 : A : hol.type -> x_27_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_3 : hol.term A -> hol.proof (hol.imp ((x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_3) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_27_4) (hol.not (hol.eq A y_5 x_3))))) x_27_1) (hol.not (r_2 x_3 x_3))) :=
  A : hol.type => x_27_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_3 : hol.term A => hyp_1 : hol.proof ((x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_3) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_27_4) (hol.not (hol.eq A y_5 x_3))))) x_27_1) => thm_321 A x_27_1 x_3 r_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x'. ((Data.Bool.==> (\lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))) x')) (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_323 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.forall A (x_27_3 : hol.term A => hol.imp ((x_27_4 : hol.term A => hol.and (hol.eq A x_27_4 x_2) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_27_4) (hol.not (hol.eq A y_5 x_2))))) x_27_3) (hol.not (r_1 x_2 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => x_27_3 : hol.term A => thm_322 A x_27_3 r_1 x_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))))) (Data.Bool.~ ((r x) x))) ;)

(; dict ;)

def thm_324 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (hol.not (r_1 x_2 x_2))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => thm_188 A r_1 x_2 (thm_323 A r_1 x_2).

(; Theorem: |- (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))))) ;)

(; dict ;)

def thm_325 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) => hyp_1.

(; Theorem: |- (Data.Bool.~ ((r x) x)) ;)

(; dict ;)

def thm_326 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_27_3) (hol.not (hol.eq A y_4 x_1)))))) -> hol.proof (hol.not (r_2 x_1 x_1)) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_1) (hol.forall A (y_4 : hol.term A => hol.imp (r_2 y_4 x_27_3) (hol.not (hol.eq A y_4 x_1)))))) => thm_324 A r_2 x_1 (thm_325 A r_2 x_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.? \lambda x'. ((= x') x))) ((Data.Bool.==> (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x))))))) (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_327 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (hol.not (r_1 x_2 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => hol.EQ_MP (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (hol.not (r_1 x_2 x_2))) (hol.and (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) (hol.not (r_1 x_2 x_2)))) (thm_175 A r_1 x_2) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2)))))) => thm_326 A x_2 r_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x'. ((= x') x))) (Data.Bool.? \lambda x'. ((Data.Bool./\ ((= x') x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ ((= y) x)))))))) (Data.Bool.~ ((r x) x))) ;)

(; dict ;)

def thm_328 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))))) (hol.not (r_1 x_2 x_2))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => thm_145 A r_1 x_2 (thm_327 A r_1 x_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.? \lambda x'. (\lambda y. ((= y) x) x'))) (Data.Bool.? \lambda x'. ((Data.Bool./\ (\lambda y. ((= y) x) x')) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x')) (Data.Bool.~ (\lambda y. ((= y) x) y)))))))) (Data.Bool.~ ((r x) x))) ;)

(; dict ;)

def thm_329 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hol.proof (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4))))))) (hol.not (r_1 x_2 x_2))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => hol.EQ_MP (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq A x_27_3 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and (hol.eq A x_27_3 x_2) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not (hol.eq A y_4 x_2))))))) (hol.not (r_1 x_2 x_2))) (hol.imp (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x_27_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_27_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4))))))) (hol.not (r_1 x_2 x_2))) (thm_100 A r_1 x_2) (thm_328 A r_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))) ;)

(; dict ;)

def thm_330 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) -> hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.and (p_2 x_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (hol.not (p_2 y_4)))))))) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x_1. (\lambda y. ((= y) x) x_1))) (Data.Bool.? \lambda x_1. ((Data.Bool./\ (\lambda y. ((= y) x) x_1)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x_1)) (Data.Bool.~ (\lambda y. ((= y) x) y))))))) ;)

(; dict ;)

def thm_331 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_3 y_5)))))))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => (y_4 : hol.term A => hol.eq A y_4 x_2) x__1_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.and ((y_4 : hol.term A => hol.eq A y_4 x_2) x__1_3) (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x__1_3) (hol.not ((y_5 : hol.term A => hol.eq A y_5 x_2) y_4))))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_1 y_5 x_4) (hol.not (p_3 y_5)))))))) => thm_330 A r_1 hyp_1 (y_3 : hol.term A => hol.eq A y_3 x_2).

(; Theorem: |- (Data.Bool.~ ((r x) x)) ;)

(; dict ;)

def thm_332 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))))) -> hol.proof (hol.not (r_2 x_1 x_1)) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))))) => thm_329 A r_2 x_1 (thm_331 A r_2 x_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.~ ((r x) x))) ;)

(; dict ;)

def thm_333 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.imp (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))))) (hol.not (r_2 x_1 x_1))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hyp_1 : hol.proof (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))))) => thm_332 A x_1 r_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x))) ;)

(; dict ;)

def thm_334 : A : hol.type -> x_1 : hol.term A -> r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_2) (hol.not (r_2 x_1 x_1))) :=
  A : hol.type => x_1 : hol.term A => r_2 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.imp (hol.forall (hol.arr A hol.bool) (p_3 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 x_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.and (p_3 x_4) (hol.forall A (y_5 : hol.term A => hol.imp (r_2 y_5 x_4) (hol.not (p_3 y_5)))))))) (hol.not (r_2 x_1 x_1))) (hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_2) (hol.not (r_2 x_1 x_1))) (thm_74 A x_1 r_2) (thm_333 A x_1 r_2).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x)))) ;)

(; dict ;)

def thm_335 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => x_2 : hol.term A => thm_334 A x_2 r_1.

(; Theorem: |- (Data.Bool.! \lambda r. (Data.Bool.! \lambda x. ((Data.Bool.==> (Relation.wellFounded r)) (Data.Bool.~ ((r x) x))))) ;)

(; dict ;)

def thm_336 : A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2)))) (thm_66 A r_1) (thm_335 A r_1).

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool.==> (Relation.wellFounded r)) (Relation.irreflexive r))) ;)

(; dict ;)

def thm_337 : A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (Relation_2Eirreflexive (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1))) (thm_60 A) (hol.EQ_MP (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.forall A (x_2 : hol.term A => hol.imp (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.not (r_1 x_2 x_2))))) (thm_63 A) (thm_336 A)).

(; Theorem: |- ((= (Relation.wellFounded Relation.empty)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y))))))))) ;)

(; dict ;)

def thm_338 : A : hol.type -> hol.proof (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))))))))) :=
  A : hol.type => (A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => thm_70 A r_1) A (Relation_2Eempty (hol.arr A (hol.arr A hol.bool))).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.? \lambda x. (p x)))) (Data.Bool.==> (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_339 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))).

(; Theorem: |- ((= (Data.Bool./\ (p x))) (Data.Bool./\ (p x))) ;)

(; dict ;)

def thm_340 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (p_2 x_1)) (hol.and (p_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.and (p_2 x_1)).

(; Theorem: |- ((= ((= ((Relation.empty x) y)) Data.Bool.F)) ((= ((Relation.empty x) y)) Data.Bool.F)) ;)

(; dict ;)

def thm_341 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1) hol.false) (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1) hol.false)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1) hol.false).

(; Theorem: |- ((= ((= ((Relation.empty x) y)) Data.Bool.F)) ((= ((Relation.empty x) y)) Data.Bool.F)) ;)

(; dict ;)

def thm_342 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1) hol.false) (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1) hol.false)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1) hol.false) (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1) hol.false) (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1) hol.false) (thm_341 B A y_1 x_2) (thm_341 B A y_1 x_2).

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_343 : hyp_1 : hol.proof hol.false -> hol.proof hol.false :=
  hyp_1 : hol.proof hol.false => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda p. p) ;)

(; dict ;)

def thm_344 : hyp_1 : hol.proof hol.false -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) :=
  hyp_1 : hol.proof hol.false => hol.EQ_MP hol.false (hol.forall hol.bool (p_1 : hol.term hol.bool => p_1)) thm_14 (thm_343 hyp_1).

(; Theorem: |- P ;)

(; dict ;)

def thm_345 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof hol.false -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_344 hyp_1 P_1.

(; Theorem: |- ((Data.Bool.==> Data.Bool.F) P) ;)

(; dict ;)

def thm_346 : P_1 : hol.term hol.bool -> hol.proof (hol.imp hol.false P_1) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof hol.false => thm_345 P_1 hyp_1.

(; Theorem: |- (Data.Bool.~ P) ;)

(; dict ;)

def thm_347 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.not P_1) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> P) Data.Bool.F) ;)

(; dict ;)

def thm_348 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.imp P_1 hol.false) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hol.EQ_MP (hol.not P_1) (hol.imp P_1 hol.false) (thm_201 P_1) (thm_347 P_1 hyp_1).

(; Theorem: |- P ;)

(; dict ;)

def thm_349 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hol.proof P_1 :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_1.

(; Theorem: |- Data.Bool.F ;)

(; dict ;)

def thm_350 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof P_1 -> hyp_2 : hol.proof (hol.not P_1) -> hol.proof hol.false :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof P_1 => hyp_2 : hol.proof (hol.not P_1) => thm_348 P_1 hyp_2 (thm_349 P_1 hyp_1).

(; Theorem: |- ((= P) Data.Bool.F) ;)

(; dict ;)

def thm_351 : P_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.not P_1) -> hol.proof (hol.eq hol.bool P_1 hol.false) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => hol.PROP_EXT P_1 hol.false (hyp_2 : hol.proof hol.false => thm_346 P_1 (thm_343 hyp_2)) (hyp_2 : hol.proof P_1 => thm_350 P_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ P)) ((= P) Data.Bool.F)) ;)

(; dict ;)

def thm_352 : P_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.not P_1) (hol.eq hol.bool P_1 hol.false)) :=
  P_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.not P_1) => thm_351 P_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.~ ((Relation.empty x) y))) ((= ((Relation.empty x) y)) Data.Bool.F)) ;)

(; dict ;)

def thm_353 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.imp (hol.not (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1)) (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1) hol.false)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => (P_1 : hol.term hol.bool => thm_352 P_1) (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1).

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.~ ((Relation.empty x) y))) ;)

(; dict ;)

def thm_354 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall B (y_2 : hol.term B => hol.not (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_1 y_2))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => thm_15 B A x_1.

(; Theorem: |- (Data.Bool.~ ((Relation.empty x) y)) ;)

(; dict ;)

def thm_355 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.not (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => thm_354 A B x_2 y_1.

(; Theorem: |- ((= ((Relation.empty x) y)) Data.Bool.F) ;)

(; dict ;)

def thm_356 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1) hol.false) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => thm_353 B A y_1 x_2 (thm_355 B A y_1 x_2).

(; Theorem: |- ((= ((Relation.empty x) y)) Data.Bool.F) ;)

(; dict ;)

def thm_357 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) x_2 y_1) hol.false) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => (B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1) hol.false) (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr B hol.bool)) x_2 y_1) hol.false) (thm_342 B A y_1 x_2) (thm_356 B A y_1 x_2)) A A y_1 x_2.

(; Theorem: |- ((= ((Relation.empty y) x)) Data.Bool.F) ;)

(; dict ;)

def thm_358 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hol.proof (hol.eq hol.bool (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_2 x_1) hol.false) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_357 A y_1 x_2) A x_1 y_2.

(; Theorem: |- ((= (Data.Bool.==> ((Relation.empty y) x))) (Data.Bool.==> Data.Bool.F)) ;)

(; dict ;)

def thm_359 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_2 x_1)) (hol.imp hol.false)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_2 x_1) hol.false thm_67 (thm_358 A x_1 y_2).

(; Theorem: |- ((= (Data.Bool.~ (p y))) (Data.Bool.~ (p y))) ;)

(; dict ;)

def thm_360 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.not (p_2 y_1)) (hol.not (p_2 y_1))) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.not (p_2 y_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y)))) ((Data.Bool.==> Data.Bool.F) (Data.Bool.~ (p y)))) ;)

(; dict ;)

def thm_361 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> y_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))) (hol.imp hol.false (hol.not (p_1 y_3)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => y_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2)) (hol.imp hol.false) (hol.not (p_1 y_3)) (hol.not (p_1 y_3)) (thm_359 A x_2 y_3) (thm_360 A y_3 p_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) (Data.Bool.~ (p y)))) Data.Bool.T) ;)

(; dict ;)

def thm_362 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp hol.false (hol.not (p_2 y_1))) hol.true) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_224 t_1) (hol.not (p_2 y_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y)))) Data.Bool.T) ;)

(; dict ;)

def thm_363 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> y_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => y_3 : hol.term A => hol.TRANS hol.bool (hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))) (hol.imp hol.false (hol.not (p_1 y_3))) hol.true (thm_361 A p_1 x_2 y_3) (thm_362 A y_3 p_1).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y)))) \lambda y. Data.Bool.T) ;)

(; dict ;)

def thm_364 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))) (y_3 : hol.term A => hol.true)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.ABS_THM A hol.bool (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))) (y_3 : hol.term A => hol.true) (y_3 : hol.term A => thm_363 A p_1 x_2 y_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y))))) (Data.Bool.! \lambda y. Data.Bool.T)) ;)

(; dict ;)

def thm_365 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3)))) (hol.forall A (y_3 : hol.term A => hol.true))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))) (y_3 : hol.term A => hol.true) (thm_29 A) (thm_364 A p_1 x_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_366 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. t)) t)) ((= (Data.Bool.! \lambda y. t)) t)) ;)

(; dict ;)

def thm_367 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda y. t)) t)) ;)

(; dict ;)

def thm_368 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1) (thm_366 A t_1) (thm_367 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_369 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_16 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda y. t)) t) ;)

(; dict ;)

def thm_370 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1) (thm_368 A t_1) (thm_369 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_371 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (y_1 : hol.term A => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_370 A t_1) A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y))))) Data.Bool.T) ;)

(; dict ;)

def thm_372 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3)))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => hol.TRANS hol.bool (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3)))) (hol.forall A (y_3 : hol.term A => hol.true)) hol.true (thm_365 A p_1 x_2) (thm_371 A).

(; Theorem: |- ((= ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y)))))) ((Data.Bool./\ (p x)) Data.Bool.T)) ;)

(; dict ;)

def thm_373 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_1) (hol.not (p_2 y_3))))) (hol.and (p_2 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and (p_2 x_1)) (hol.and (p_2 x_1)) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_1) (hol.not (p_2 y_3)))) hol.true (thm_340 A x_1 p_2) (thm_372 A p_2 x_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_374 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_375 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_374 t_1) (thm_374 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_376 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_377 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_376 thm_376.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_378 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_41 thm_377.

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_379 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_380 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_379 t_1) (thm_379 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_381 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_17 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_382 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_173 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_383 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_380 t_1) (thm_381 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_382 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_384 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_18 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_385 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_173 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_386 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_374 t_1) (thm_384 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_385 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_387 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_388 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_387 t_1) (thm_387 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_389 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_19 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_390 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_173 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_391 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_388 t_1) (thm_389 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_390 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_392 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_393 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_392 t_1) (thm_392 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_394 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_20 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_395 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_173 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_396 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_393 t_1) (thm_394 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_395 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_397 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_398 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_397 t_1) (thm_397 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_399 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_21 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_400 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_396 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_398 t_1) (thm_399 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_401 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_391 t_1) (thm_400 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_402 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_386 t_1) (thm_401 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_403 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_383 t_1) (thm_402 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_404 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_403 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_405 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_130 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_406 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_378 thm_404 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_405 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_407 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_138 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_408 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_406 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) => thm_407 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ (p x)) Data.Bool.T)) (p x)) ;)

(; dict ;)

def thm_409 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (p_2 x_1) hol.true) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_375 t_1) (thm_408 t_1)) (p_2 x_1).

(; Theorem: |- ((= ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y)))))) (p x)) ;)

(; dict ;)

def thm_410 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_1) (hol.not (p_2 y_3))))) (p_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.and (p_2 x_1) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_1) (hol.not (p_2 y_3))))) (hol.and (p_2 x_1) hol.true) (p_2 x_1) (thm_373 A x_1 p_2) (thm_409 A x_1 p_2).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y)))))) \lambda x. (p x)) ;)

(; dict ;)

def thm_411 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))))) (x_2 : hol.term A => p_1 x_2)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))))) (x_2 : hol.term A => p_1 x_2) (x_2 : hol.term A => thm_410 A x_2 p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y))))))) (Data.Bool.? \lambda x. (p x))) ;)

(; dict ;)

def thm_412 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))))) (x_2 : hol.term A => p_1 x_2) (thm_75 A) (thm_411 A p_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y)))))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_413 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (thm_339 A p_1) (thm_412 A p_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. (p x)))) Data.Bool.T) ;)

(; dict ;)

def thm_414 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_240 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y)))))))) Data.Bool.T) ;)

(; dict ;)

def thm_415 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))))))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) hol.true (thm_413 A p_1) (thm_414 A p_1).

(; Theorem: |- ((= \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y)))))))) \lambda p. Data.Bool.T) ;)

(; dict ;)

def thm_416 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.true)) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.true) (p_1 : hol.term (hol.arr A hol.bool) => thm_415 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y))))))))) (Data.Bool.! \lambda p. Data.Bool.T)) ;)

(; dict ;)

def thm_417 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3)))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.true) (thm_42 A) (thm_416 A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda p. t)) t)) ((= (Data.Bool.! \lambda p. t)) t)) ;)

(; dict ;)

def thm_418 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda p. t)) t)) ;)

(; dict ;)

def thm_419 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (thm_366 A t_1) (thm_418 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. t)) t) ;)

(; dict ;)

def thm_420 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (thm_419 A t_1) (thm_369 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. t)) t) ;)

(; dict ;)

def thm_421 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_420 A t_1) (hol.arr A hol.bool) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda p. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_422 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => thm_421 A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Relation.empty y) x)) (Data.Bool.~ (p y))))))))) Data.Bool.T) ;)

(; dict ;)

def thm_423 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3)))))))) hol.true) :=
  A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3)))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.true)) hol.true (thm_417 A) (thm_422 A).

(; Theorem: |- ((= (Relation.wellFounded Relation.empty)) Data.Bool.T) ;)

(; dict ;)

def thm_424 : A : hol.type -> hol.proof (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)))) hol.true) :=
  A : hol.type => hol.TRANS hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.and (p_1 x_2) (hol.forall A (y_3 : hol.term A => hol.imp (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)) y_3 x_2) (hol.not (p_1 y_3)))))))) hol.true (thm_338 A) (thm_423 A).

(; Theorem: |- ((= Data.Bool.T) (Relation.wellFounded Relation.empty)) ;)

(; dict ;)

def thm_425 : A : hol.type -> hol.proof (hol.eq hol.bool hol.true (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (Relation_2Eempty (hol.arr A (hol.arr A hol.bool))))) :=
  A : hol.type => hol.SYM hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)))) hol.true (thm_424 A).

(; Theorem: |- (Relation.wellFounded Relation.empty) ;)

(; dict ;)

def thm_426 : A : hol.type -> hol.proof (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)))) :=
  A : hol.type => hol.EQ_MP hol.true (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) (Relation_2Eempty (hol.arr A (hol.arr A hol.bool)))) (thm_425 A) thm_9.
