
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME bool_2Dclass_2Da4.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3))))).

(; axiom ;)

thm_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)).

(; axiom ;)

thm_2 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_3 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)).

(; axiom ;)

thm_4 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))).

(; axiom ;)

thm_5 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_6 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)).

(; axiom ;)

thm_7 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)).

(; axiom ;)

thm_8 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)).

(; axiom ;)

thm_9 : hol.proof hol.true.

(; axiom ;)

thm_10 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)).

(; axiom ;)

thm_11 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_12 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false).

(; axiom ;)

thm_13 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true).

(; axiom ;)

thm_14 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_15 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_16 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_17 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_18 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; axiom ;)

thm_19 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1)).

(; axiom ;)

thm_20 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_21 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_22 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_23 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A hol.bool)) (hol.eq A) (hol.eq A)) :=
  A : hol.type => hol.REFL (hol.arr A (hol.arr A hol.bool)) (hol.eq A).

(; Theorem: |- ((= ((= Data.Bool.cond) \lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1))) ((Data.Bool.==> ((= t) Data.Bool.F)) ((= x) t2)))))) ((= Data.Bool.cond) \lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1))) ((Data.Bool.==> ((= t) Data.Bool.F)) ((= x) t2)))))) ;)

(; dict ;)

def thm_24 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3))))) (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3)))))) :=
  A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3))))).

(; Theorem: |- ((= ((= Data.Bool.cond) \lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1))) ((Data.Bool.==> ((= t) Data.Bool.F)) ((= x) t2)))))) ((= Data.Bool.cond) \lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1))) ((Data.Bool.==> ((= t) Data.Bool.F)) ((= x) t2)))))) ;)

(; dict ;)

def thm_25 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3))))) (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3)))))) :=
  A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3))))) (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3))))) (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3))))) (thm_24 A) (thm_24 A).

(; Theorem: |- ((= select) select) ;)

(; dict ;)

def thm_26 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) A) (hol.select A) (hol.select A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) A) (hol.select A).

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_27 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_28 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_29 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_30 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_29 t_1) (thm_29 t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_31 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_32 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_33 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_32 thm_32.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_34 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_31 thm_33.

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_35 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_36 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_35 t_1) (thm_35 t_1).

(; Theorem: |- ((= ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_37 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_1 t_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_38 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_39 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_40 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_38 q_1 p_2) (thm_39 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_41 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_42 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_43 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_41 p_1) (thm_42 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_44 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_45 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_2 (thm_44 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_46 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_43 p_1) (thm_45 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_47 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_48 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_46 p_2) (thm_47 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_49 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_40 q_1 p_2) (thm_48 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_50 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_51 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_49 q_1 p_2) (thm_50 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_52 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_51 q_1 p_2 hyp_1 q_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_53 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_54 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_55 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_53 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_54 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_56 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_55 q_2 p_1 hyp_1 hyp_2) (thm_53 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_57 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_56 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_58 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_57 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_59 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_52 q_2 p_1 hyp_1 (thm_58 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_60 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_49 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_61 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_62 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_61 x_2 q_3 p_1 hyp_2 (thm_53 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_63 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_62 p_2 x_3 q_1 hyp_1 hyp_3 (thm_54 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_64 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_63 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_65 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_64 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_66 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_60 q_1 p_2) (thm_65 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_67 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_59 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_66 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_68 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_67 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_69 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_36 t_1) (thm_37 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => thm_68 t_1 hyp_1).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_70 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_3 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_71 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_67 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_72 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_29 t_1) (thm_70 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => thm_71 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_73 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_74 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_73 t_1) (thm_73 t_1).

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_75 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_4 t_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_76 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_67 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_77 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_74 t_1) (thm_75 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => thm_76 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_78 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_79 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_78 t_1) (thm_78 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_80 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_5 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_81 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_77 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_79 t_1) (thm_80 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_82 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (thm_72 t_1) (thm_81 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_83 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (thm_69 t_1) (thm_82 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_84 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => thm_83 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_85 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_59 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_86 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) thm_34 thm_84 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => thm_85 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_87 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_51 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_88 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_55 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_89 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_88 p_2 q_1 hyp_1 hyp_2) (thm_54 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_90 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_89 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_91 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_90 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_92 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_87 q_1 p_2 hyp_1 (thm_91 q_1 p_2).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_93 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_92 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) hyp_1.

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_94 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_86 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => thm_93 t_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.==> ((= t) Data.Bool.T))) (Data.Bool.==> t)) ;)

(; dict ;)

def thm_95 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq hol.bool t_1 hol.true)) (hol.imp t_1)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq hol.bool t_1 hol.true) t_1 thm_28 (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_30 t_1) (thm_94 t_1)).

(; Theorem: |- ((= ((= x) t1)) ((= x) t1)) ;)

(; dict ;)

def thm_96 : A : hol.type -> t1_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 t1_1) (hol.eq A x_2 t1_1)) :=
  A : hol.type => t1_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq A x_2 t1_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1))) ((Data.Bool.==> t) ((= x) t1))) ;)

(; dict ;)

def thm_97 : A : hol.type -> t1_1 : hol.term A -> x_2 : hol.term A -> t_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool t_3 hol.true) (hol.eq A x_2 t1_1)) (hol.imp t_3 (hol.eq A x_2 t1_1))) :=
  A : hol.type => t1_1 : hol.term A => x_2 : hol.term A => t_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq hol.bool t_3 hol.true)) (hol.imp t_3) (hol.eq A x_2 t1_1) (hol.eq A x_2 t1_1) (thm_95 t_3) (thm_96 A t1_1 x_2).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1)))) (Data.Bool./\ ((Data.Bool.==> t) ((= x) t1)))) ;)

(; dict ;)

def thm_98 : A : hol.type -> t1_1 : hol.term A -> x_2 : hol.term A -> t_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.imp (hol.eq hol.bool t_3 hol.true) (hol.eq A x_2 t1_1))) (hol.and (hol.imp t_3 (hol.eq A x_2 t1_1)))) :=
  A : hol.type => t1_1 : hol.term A => x_2 : hol.term A => t_3 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.imp (hol.eq hol.bool t_3 hol.true) (hol.eq A x_2 t1_1)) (hol.imp t_3 (hol.eq A x_2 t1_1)) thm_27 (thm_97 A t1_1 x_2 t_3).

(; Theorem: |- ((= (Data.Bool.==> ((= t) Data.Bool.F))) (Data.Bool.==> (Data.Bool.~ t))) ;)

(; dict ;)

def thm_99 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq hol.bool t_1 hol.false)) (hol.imp (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq hol.bool t_1 hol.false) (hol.not t_1) thm_28 (thm_80 t_1).

(; Theorem: |- ((= ((= x) t2)) ((= x) t2)) ;)

(; dict ;)

def thm_100 : A : hol.type -> t2_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 t2_1) (hol.eq A x_2 t2_1)) :=
  A : hol.type => t2_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq A x_2 t2_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= t) Data.Bool.F)) ((= x) t2))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2))) ;)

(; dict ;)

def thm_101 : A : hol.type -> t2_1 : hol.term A -> x_2 : hol.term A -> t_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool t_3 hol.false) (hol.eq A x_2 t2_1)) (hol.imp (hol.not t_3) (hol.eq A x_2 t2_1))) :=
  A : hol.type => t2_1 : hol.term A => x_2 : hol.term A => t_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq hol.bool t_3 hol.false)) (hol.imp (hol.not t_3)) (hol.eq A x_2 t2_1) (hol.eq A x_2 t2_1) (thm_99 t_3) (thm_100 A t2_1 x_2).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1))) ((Data.Bool.==> ((= t) Data.Bool.F)) ((= x) t2)))) ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) ;)

(; dict ;)

def thm_102 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> x_3 : hol.term A -> t_4 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.imp (hol.eq hol.bool t_4 hol.true) (hol.eq A x_3 t1_2)) (hol.imp (hol.eq hol.bool t_4 hol.false) (hol.eq A x_3 t2_1))) (hol.and (hol.imp t_4 (hol.eq A x_3 t1_2)) (hol.imp (hol.not t_4) (hol.eq A x_3 t2_1)))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => x_3 : hol.term A => t_4 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.imp (hol.eq hol.bool t_4 hol.true) (hol.eq A x_3 t1_2))) (hol.and (hol.imp t_4 (hol.eq A x_3 t1_2))) (hol.imp (hol.eq hol.bool t_4 hol.false) (hol.eq A x_3 t2_1)) (hol.imp (hol.not t_4) (hol.eq A x_3 t2_1)) (thm_98 A t1_2 x_3 t_4) (thm_101 A t2_1 x_3 t_4).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1))) ((Data.Bool.==> ((= t) Data.Bool.F)) ((= x) t2)))) \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) ;)

(; dict ;)

def thm_103 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> t_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A hol.bool) (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_3 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_3 hol.false) (hol.eq A x_4 t2_1))) (x_4 : hol.term A => hol.and (hol.imp t_3 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_3) (hol.eq A x_4 t2_1)))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => t_3 : hol.term hol.bool => hol.ABS_THM A hol.bool (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_3 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_3 hol.false) (hol.eq A x_4 t2_1))) (x_4 : hol.term A => hol.and (hol.imp t_3 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_3) (hol.eq A x_4 t2_1))) (x_4 : hol.term A => thm_102 A t2_1 t1_2 x_4 t_3).

(; Theorem: |- ((= (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1))) ((Data.Bool.==> ((= t) Data.Bool.F)) ((= x) t2))))) (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2))))) ;)

(; dict ;)

def thm_104 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> t_3 : hol.term hol.bool -> hol.proof (hol.eq A (hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_3 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_3 hol.false) (hol.eq A x_4 t2_1)))) (hol.select A (x_4 : hol.term A => hol.and (hol.imp t_3 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_3) (hol.eq A x_4 t2_1))))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => t_3 : hol.term hol.bool => hol.APP_THM (hol.arr A hol.bool) A (hol.select A) (hol.select A) (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_3 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_3 hol.false) (hol.eq A x_4 t2_1))) (x_4 : hol.term A => hol.and (hol.imp t_3 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_3) (hol.eq A x_4 t2_1))) (thm_26 A) (thm_103 A t2_1 t1_2 t_3).

(; Theorem: |- ((= \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1))) ((Data.Bool.==> ((= t) Data.Bool.F)) ((= x) t2))))) \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2))))) ;)

(; dict ;)

def thm_105 : A : hol.type -> t1_1 : hol.term A -> t_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A A) (t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_2 hol.true) (hol.eq A x_4 t1_1)) (hol.imp (hol.eq hol.bool t_2 hol.false) (hol.eq A x_4 t2_3)))) (t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_4 t1_1)) (hol.imp (hol.not t_2) (hol.eq A x_4 t2_3))))) :=
  A : hol.type => t1_1 : hol.term A => t_2 : hol.term hol.bool => hol.ABS_THM A A (t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_2 hol.true) (hol.eq A x_4 t1_1)) (hol.imp (hol.eq hol.bool t_2 hol.false) (hol.eq A x_4 t2_3)))) (t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_4 t1_1)) (hol.imp (hol.not t_2) (hol.eq A x_4 t2_3)))) (t2_3 : hol.term A => thm_104 A t2_3 t1_1 t_2).

(; Theorem: |- ((= \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1))) ((Data.Bool.==> ((= t) Data.Bool.F)) ((= x) t2))))) \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2))))) ;)

(; dict ;)

def thm_106 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) (t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3)))) (t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3))))) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.ABS_THM A (hol.arr A A) (t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3)))) (t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) (t1_2 : hol.term A => thm_105 A t1_2 t_1).

(; Theorem: |- ((= \lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1))) ((Data.Bool.==> ((= t) Data.Bool.F)) ((= x) t2))))) \lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2))))) ;)

(; dict ;)

def thm_107 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3)))) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3))))) :=
  A : hol.type => hol.ABS_THM hol.bool (hol.arr A (hol.arr A A)) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3)))) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) (t_1 : hol.term hol.bool => thm_106 A t_1).

(; Theorem: |- ((= Data.Bool.cond) \lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2))))) ;)

(; dict ;)

def thm_108 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3))))) :=
  A : hol.type => hol.TRANS (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3)))) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) (hol.EQ_MP (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3))))) (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp (hol.eq hol.bool t_1 hol.true) (hol.eq A x_4 t1_2)) (hol.imp (hol.eq hol.bool t_1 hol.false) (hol.eq A x_4 t2_3))))) (thm_25 A) (thm_0 A)) (thm_107 A).

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_109 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= (Data.Bool.cond Data.Bool.T)) (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.T)) ;)

(; dict ;)

def thm_110 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) (hol.cond A hol.true) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true)) :=
  A : hol.type => hol.APP_THM hol.bool (hol.arr A (hol.arr A A)) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true hol.true (thm_108 A) thm_109.

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_111 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A A)) (hol.arr (hol.arr A (hol.arr A A)) hol.bool)) (hol.eq (hol.arr A (hol.arr A A))) (hol.eq (hol.arr A (hol.arr A A)))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A (hol.arr A A)) (hol.arr (hol.arr A (hol.arr A A)) hol.bool)) (hol.eq (hol.arr A (hol.arr A A))).

(; Theorem: |- ((= (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) t)) \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2))))) ;)

(; dict ;)

def thm_112 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) ((t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) (t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3))))) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr A (hol.arr A A)) (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1.

(; Theorem: |- ((= \lambda t. (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) t)) \lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2))))) ;)

(; dict ;)

def thm_113 : A : hol.type -> hol.proof (hol.eq (hol.arr hol.bool (hol.arr A (hol.arr A A))) (t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3))))) :=
  A : hol.type => hol.ABS_THM hol.bool (hol.arr A (hol.arr A A)) (t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) (t_1 : hol.term hol.bool => thm_112 A t_1).

(; Theorem: |- ((= (\lambda t. (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) t) Data.Bool.T)) (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.T)) ;)

(; dict ;)

def thm_114 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) hol.true) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true)) :=
  A : hol.type => hol.APP_THM hol.bool (hol.arr A (hol.arr A A)) (t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true hol.true (thm_113 A) thm_109.

(; Theorem: |- ((= (= (\lambda t. (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) t) Data.Bool.T))) (= (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.T))) ;)

(; dict ;)

def thm_115 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A A)) hol.bool) (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) hol.true)) (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A (hol.arr A A)) (hol.arr (hol.arr A (hol.arr A A)) hol.bool) (hol.eq (hol.arr A (hol.arr A A))) (hol.eq (hol.arr A (hol.arr A A))) ((t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) hol.true) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true) (thm_111 A) (thm_114 A).

(; Theorem: |- ((= (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.T)) \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) ((= x) t2))))) ;)

(; dict ;)

def thm_116 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_2))))) :=
  A : hol.type => hol.BETA_CONV hol.bool (hol.arr A (hol.arr A A)) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true.

(; Theorem: |- ((= ((= (\lambda t. (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) t) Data.Bool.T)) (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.T))) ((= (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.T)) \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) ((= x) t2)))))) ;)

(; dict ;)

def thm_117 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) hol.true) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true)) (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr A (hol.arr A A)) hol.bool (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) hol.true)) (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_2)))) (thm_115 A) (thm_116 A).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_118 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_119 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_118 t_1) (thm_118 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_120 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_121 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_120 thm_120.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) ;)

(; dict ;)

def thm_122 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_31 thm_121.

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_123 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_6 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_124 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_67 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_125 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_118 t_1) (thm_123 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => thm_124 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_126 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_127 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_126 t_1) (thm_126 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_128 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_7 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_129 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_67 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_130 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_127 t_1) (thm_128 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => thm_129 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_131 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_132 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_131 t_1) (thm_131 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_133 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_8 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_134 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_67 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_135 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_132 t_1) (thm_133 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => thm_134 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_136 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_137 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_136 t_1) (thm_136 t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_138 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_139 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_138 thm_138.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_140 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_31 thm_139.

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_141 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_142 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_143 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_142 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_144 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_143 t_1 hyp_1) thm_9.

(; Theorem: |- t ;)

(; dict ;)

def thm_145 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_146 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_145 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_9).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_147 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_144 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_146 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) t)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_148 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_147 t_1) (hol.imp t_1 t_1).

(; Theorem: |- ((Data.Bool.==> t) t) ;)

(; dict ;)

def thm_149 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 t_1) :=
  t_1 : hol.term hol.bool => thm_10 t_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_150 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_148 t_1) (thm_149 t_1).

(; Theorem: |- ((= (= ((Data.Bool.==> t) t))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_151 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp t_1 t_1) hol.true thm_141 (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_136 t_1) (thm_150 t_1)).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_152 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true) hol.true hol.true (thm_151 t_1) thm_109.

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_153 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true) (thm_152 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_154 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_153 t_1) thm_109.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_155 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_67 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_156 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_137 t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) thm_140 thm_154 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => thm_155 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_157 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_158 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_157 t_1) (thm_157 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_159 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_11 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_160 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_156 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_158 t_1) (thm_159 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_161 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_135 t_1) (thm_160 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_162 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (thm_130 t_1) (thm_161 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_163 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (thm_125 t_1) (thm_162 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_164 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => thm_163 t_1.

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_165 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_92 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_166 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) thm_122 thm_164 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => thm_165 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) ((= x) t1))) ((= x) t1)) ;)

(; dict ;)

def thm_167 : A : hol.type -> t1_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp hol.true (hol.eq A x_2 t1_1)) (hol.eq A x_2 t1_1)) :=
  A : hol.type => t1_1 : hol.term A => x_2 : hol.term A => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_119 t_1) (thm_166 t_1)) (hol.eq A x_2 t1_1).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.==> Data.Bool.T) ((= x) t1)))) (Data.Bool./\ ((= x) t1))) ;)

(; dict ;)

def thm_168 : A : hol.type -> t1_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.imp hol.true (hol.eq A x_2 t1_1))) (hol.and (hol.eq A x_2 t1_1))) :=
  A : hol.type => t1_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.imp hol.true (hol.eq A x_2 t1_1)) (hol.eq A x_2 t1_1) thm_27 (thm_167 A t1_1 x_2).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_169 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_170 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_169 thm_169.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_171 : hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_67 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_172 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.PROVE_HYP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_169 thm_12) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => thm_171 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_173 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_174 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_173 thm_173.

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_175 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) thm_172 (hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_174 thm_13).

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F) ;)

(; dict ;)

def thm_176 : hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) -> hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) :=
  hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_92 q_1 p_2 hyp_1) (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.true) hol.false) hyp_1.

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F) ;)

(; dict ;)

def thm_177 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) :=
  hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_175 (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => thm_176 hyp_1).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ Data.Bool.T))) (Data.Bool.==> Data.Bool.F)) ;)

(; dict ;)

def thm_178 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not hol.true)) (hol.imp hol.false)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.not hol.true) hol.false thm_28 (hol.EQ_MP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_170 thm_177).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) ((= x) t2))) ((Data.Bool.==> Data.Bool.F) ((= x) t2))) ;)

(; dict ;)

def thm_179 : A : hol.type -> t2_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.eq A x_2 t2_1)) (hol.imp hol.false (hol.eq A x_2 t2_1))) :=
  A : hol.type => t2_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not hol.true)) (hol.imp hol.false) (hol.eq A x_2 t2_1) (hol.eq A x_2 t2_1) thm_178 (thm_100 A t2_1 x_2).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) ((= x) t2))) Data.Bool.T) ;)

(; dict ;)

def thm_180 : A : hol.type -> t2_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp hol.false (hol.eq A x_2 t2_1)) hol.true) :=
  A : hol.type => t2_1 : hol.term A => x_2 : hol.term A => (t_1 : hol.term hol.bool => thm_133 t_1) (hol.eq A x_2 t2_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) ((= x) t2))) Data.Bool.T) ;)

(; dict ;)

def thm_181 : A : hol.type -> t2_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.true) (hol.eq A x_2 t2_1)) hol.true) :=
  A : hol.type => t2_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.not hol.true) (hol.eq A x_2 t2_1)) (hol.imp hol.false (hol.eq A x_2 t2_1)) hol.true (thm_179 A t2_1 x_2) (thm_180 A t2_1 x_2).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) ((= x) t2)))) ((Data.Bool./\ ((= x) t1)) Data.Bool.T)) ;)

(; dict ;)

def thm_182 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.imp hol.true (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_1))) (hol.and (hol.eq A x_3 t1_2) hol.true)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.imp hol.true (hol.eq A x_3 t1_2))) (hol.and (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_1)) hol.true (thm_168 A t1_2 x_3) (thm_181 A t2_1 x_3).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_183 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_184 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_183 t_1) (thm_183 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_185 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_186 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_185 thm_185.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_187 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_31 thm_186.

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_188 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_189 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_188 t_1) (thm_188 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_190 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_14 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_191 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_67 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_192 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_189 t_1) (thm_190 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_191 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_193 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_15 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_194 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_67 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_195 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_183 t_1) (thm_193 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_194 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_196 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_197 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_196 t_1) (thm_196 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_198 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_16 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_199 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_67 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_200 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_197 t_1) (thm_198 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_199 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_201 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_202 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_201 t_1) (thm_201 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_203 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_17 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_204 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_67 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_205 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_202 t_1) (thm_203 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_204 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_206 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_207 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_206 t_1) (thm_206 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_208 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_18 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_209 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_205 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_207 t_1) (thm_208 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_210 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_200 t_1) (thm_209 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_211 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_195 t_1) (thm_210 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_212 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_192 t_1) (thm_211 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_213 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_212 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_214 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_59 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_215 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_187 thm_213 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_214 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_216 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_92 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_217 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_215 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) => thm_216 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= x) t1)) Data.Bool.T)) ((= x) t1)) ;)

(; dict ;)

def thm_218 : A : hol.type -> t1_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A x_2 t1_1) hol.true) (hol.eq A x_2 t1_1)) :=
  A : hol.type => t1_1 : hol.term A => x_2 : hol.term A => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_184 t_1) (thm_217 t_1)) (hol.eq A x_2 t1_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) ((= x) t2)))) ((= x) t1)) ;)

(; dict ;)

def thm_219 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.imp hol.true (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_1))) (hol.eq A x_3 t1_2)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => x_3 : hol.term A => hol.TRANS hol.bool (hol.and (hol.imp hol.true (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_1))) (hol.and (hol.eq A x_3 t1_2) hol.true) (hol.eq A x_3 t1_2) (thm_182 A t2_1 t1_2 x_3) (thm_218 A t1_2 x_3).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) ((= x) t2)))) \lambda x. ((= x) t1)) ;)

(; dict ;)

def thm_220 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_1))) (x_3 : hol.term A => hol.eq A x_3 t1_2)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_1))) (x_3 : hol.term A => hol.eq A x_3 t1_2) (x_3 : hol.term A => thm_219 A t2_1 t1_2 x_3).

(; Theorem: |- ((= (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) ((= x) t2))))) (select \lambda x. ((= x) t1))) ;)

(; dict ;)

def thm_221 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_1)))) (hol.select A (x_3 : hol.term A => hol.eq A x_3 t1_2))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) A (hol.select A) (hol.select A) (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_1))) (x_3 : hol.term A => hol.eq A x_3 t1_2) (thm_26 A) (thm_220 A t2_1 t1_2).

(; Theorem: |- ((= (= (\lambda _446. ((= _446) t1) (select \lambda x'. ((= x') t1))))) (= (\lambda _446. ((= _446) t1) (select \lambda x'. ((= x') t1))))) ;)

(; dict ;)

def thm_222 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)))) (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1))))) :=
  A : hol.type => t1_1 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)))).

(; Theorem: |- ((= (\lambda _446. ((= _446) t1) (select \lambda x. ((= x) t1)))) ((= (select \lambda x. ((= x) t1))) t1)) ;)

(; dict ;)

def thm_223 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1))) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1)) :=
  A : hol.type => t1_1 : hol.term A => hol.BETA_CONV A hol.bool (__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)).

(; Theorem: |- ((= ((= (\lambda _446. ((= _446) t1) (select \lambda x'. ((= x') t1)))) (\lambda _446. ((= _446) t1) (select \lambda x. ((= x) t1))))) ((= (\lambda _446. ((= _446) t1) (select \lambda x'. ((= x') t1)))) ((= (select \lambda x. ((= x) t1))) t1))) ;)

(; dict ;)

def thm_224 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1))) ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)))) (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1))) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)))) (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)))) ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1))) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1) (thm_222 A t1_1) (thm_223 A t1_1).

(; Theorem: |- ((= (\lambda _446. ((= _446) t1) (select \lambda x'. ((= x') t1)))) ((= (select \lambda x'. ((= x') t1))) t1)) ;)

(; dict ;)

def thm_225 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1))) (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) t1_1)) :=
  A : hol.type => t1_1 : hol.term A => hol.BETA_CONV A hol.bool (__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)).

(; Theorem: |- ((= (= (\lambda _446. ((= _446) t1) (select \lambda x'. ((= x') t1))))) (= ((= (select \lambda x'. ((= x') t1))) t1))) ;)

(; dict ;)

def thm_226 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)))) (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) t1_1))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1))) (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) t1_1) thm_141 (thm_225 A t1_1).

(; Theorem: |- ((= ((= (select \lambda x. ((= x) t1))) t1)) ((= (select \lambda x. ((= x) t1))) t1)) ;)

(; dict ;)

def thm_227 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1)) :=
  A : hol.type => t1_1 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1).

(; Theorem: |- ((= ((= (\lambda _446. ((= _446) t1) (select \lambda x'. ((= x') t1)))) ((= (select \lambda x. ((= x) t1))) t1))) ((= ((= (select \lambda x'. ((= x') t1))) t1)) ((= (select \lambda x. ((= x) t1))) t1))) ;)

(; dict ;)

def thm_228 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1))) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1)) (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) t1_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)))) (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) t1_1)) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1) (thm_226 A t1_1) (thm_227 A t1_1).

(; Theorem: |- ((= ((= (\lambda _446. ((= _446) t1) (select \lambda x'. ((= x') t1)))) (\lambda _446. ((= _446) t1) (select \lambda x. ((= x) t1))))) ((= ((= (select \lambda x'. ((= x') t1))) t1)) ((= (select \lambda x. ((= x) t1))) t1))) ;)

(; dict ;)

def thm_229 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1))) ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)))) (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) t1_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1))) :=
  A : hol.type => t1_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1))) ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)))) (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1))) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1)) (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) t1_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1)) (thm_224 A t1_1) (thm_228 A t1_1).

(; Theorem: |- ((= \lambda _446. ((= _446) t1)) \lambda _446. ((= _446) t1)) ;)

(; dict ;)

def thm_230 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (__446_2 : hol.term A => hol.eq A __446_2 t1_1) (__446_2 : hol.term A => hol.eq A __446_2 t1_1)) :=
  A : hol.type => t1_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (__446_2 : hol.term A => hol.eq A __446_2 t1_1).

(; Theorem: |- ((= (select \lambda x'. ((= x') t1))) (select \lambda x'. ((= x') t1))) ;)

(; dict ;)

def thm_231 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1))) :=
  A : hol.type => t1_1 : hol.term A => hol.REFL A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)).

(; Theorem: |- ((= (select \lambda x. ((= x) t1))) (select \lambda x. ((= x) t1))) ;)

(; dict ;)

def thm_232 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1))) :=
  A : hol.type => t1_1 : hol.term A => hol.REFL A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)).

(; Theorem: |- ((= (select \lambda x'. ((= x') t1))) (select \lambda x. ((= x) t1))) ;)

(; dict ;)

def thm_233 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1))) :=
  A : hol.type => t1_1 : hol.term A => hol.TRANS A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) (thm_231 A t1_1) (thm_232 A t1_1).

(; Theorem: |- ((= (\lambda _446. ((= _446) t1) (select \lambda x'. ((= x') t1)))) (\lambda _446. ((= _446) t1) (select \lambda x. ((= x) t1)))) ;)

(; dict ;)

def thm_234 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1))) ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM A hol.bool (__446_2 : hol.term A => hol.eq A __446_2 t1_1) (__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) (thm_230 A t1_1) (thm_233 A t1_1).

(; Theorem: |- ((= ((= (select \lambda x'. ((= x') t1))) t1)) ((= (select \lambda x. ((= x) t1))) t1)) ;)

(; dict ;)

def thm_235 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) t1_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1)) :=
  A : hol.type => t1_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1))) ((__446_2 : hol.term A => hol.eq A __446_2 t1_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)))) (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) t1_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1)) (thm_229 A t1_1) (thm_234 A t1_1).

(; Theorem: |- ((= ((= (select \lambda y. ((= y) x))) x)) ((= (select \lambda y. ((= y) x))) x)) ;)

(; dict ;)

def thm_236 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1).

(; Theorem: |- ((= ((= (select \lambda x'. ((= x') x))) x)) ((= (select \lambda x'. ((= x') x))) x)) ;)

(; dict ;)

def thm_237 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1) (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1).

(; Theorem: |- ((= ((= (select \lambda y. ((= y) x))) x)) ((= (select \lambda x'. ((= x') x))) x)) ;)

(; dict ;)

def thm_238 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1) (thm_236 A x_1) (thm_237 A x_1).

(; Theorem: |- ((= (select \lambda y. ((= y) x))) x) ;)

(; dict ;)

def thm_239 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) :=
  A : hol.type => x_1 : hol.term A => thm_19 A x_1.

(; Theorem: |- ((= (select \lambda x'. ((= x') x))) x) ;)

(; dict ;)

def thm_240 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A (hol.select A (y_2 : hol.term A => hol.eq A y_2 x_1)) x_1) (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 x_1)) x_1) (thm_238 A x_1) (thm_239 A x_1).

(; Theorem: |- ((= (select \lambda x'. ((= x') t1))) t1) ;)

(; dict ;)

def thm_241 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) t1_1) :=
  A : hol.type => t1_1 : hol.term A => (A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => thm_240 A x_1) A x_1) A t1_1.

(; Theorem: |- ((= (select \lambda x. ((= x) t1))) t1) ;)

(; dict ;)

def thm_242 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1) :=
  A : hol.type => t1_1 : hol.term A => hol.EQ_MP (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t1_1)) t1_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t1_1)) t1_1) (thm_235 A t1_1) (thm_241 A t1_1).

(; Theorem: |- ((= (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) ((= x) t2))))) t1) ;)

(; dict ;)

def thm_243 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_1)))) t1_2) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS A (hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_1)))) (hol.select A (x_3 : hol.term A => hol.eq A x_3 t1_2)) t1_2 (thm_221 A t2_1 t1_2) (thm_242 A t1_2).

(; Theorem: |- ((= \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) ((= x) t2))))) \lambda t2. t1) ;)

(; dict ;)

def thm_244 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) (t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_2)))) (t2_2 : hol.term A => t1_1)) :=
  A : hol.type => t1_1 : hol.term A => hol.ABS_THM A A (t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_2)))) (t2_2 : hol.term A => t1_1) (t2_2 : hol.term A => thm_243 A t2_2 t1_1).

(; Theorem: |- ((= \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.T)) ((= x) t2))))) \lambda t1. \lambda t2. t1) ;)

(; dict ;)

def thm_245 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_2)))) (t1_1 : hol.term A => t2_2 : hol.term A => t1_1)) :=
  A : hol.type => hol.ABS_THM A (hol.arr A A) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_2)))) (t1_1 : hol.term A => t2_2 : hol.term A => t1_1) (t1_1 : hol.term A => thm_244 A t1_1).

(; Theorem: |- ((= (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.T)) \lambda t1. \lambda t2. t1) ;)

(; dict ;)

def thm_246 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true) (t1_1 : hol.term A => t2_2 : hol.term A => t1_1)) :=
  A : hol.type => hol.TRANS (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_2)))) (t1_1 : hol.term A => t2_2 : hol.term A => t1_1) (hol.EQ_MP (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) hol.true) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true)) (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.true (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.true) (hol.eq A x_3 t2_2))))) (thm_117 A) (thm_114 A)) (thm_245 A).

(; Theorem: |- ((= (Data.Bool.cond Data.Bool.T)) \lambda t1. \lambda t2. t1) ;)

(; dict ;)

def thm_247 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) (hol.cond A hol.true) (t1_1 : hol.term A => t2_2 : hol.term A => t1_1)) :=
  A : hol.type => hol.TRANS (hol.arr A (hol.arr A A)) (hol.cond A hol.true) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.true) (t1_1 : hol.term A => t2_2 : hol.term A => t1_1) (thm_110 A) (thm_246 A).

(; Theorem: |- ((= t1) t1) ;)

(; dict ;)

def thm_248 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq A t1_1 t1_1) :=
  A : hol.type => t1_1 : hol.term A => hol.REFL A t1_1.

(; Theorem: |- ((= ((Data.Bool.cond Data.Bool.T) t1)) (\lambda t1. \lambda t2. t1 t1)) ;)

(; dict ;)

def thm_249 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) (hol.cond A hol.true t1_1) ((t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1)) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM A (hol.arr A A) (hol.cond A hol.true) (t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1 t1_1 (thm_247 A) (thm_248 A t1_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_250 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A A) (hol.arr (hol.arr A A) hol.bool)) (hol.eq (hol.arr A A)) (hol.eq (hol.arr A A))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A A) (hol.arr (hol.arr A A) hol.bool)) (hol.eq (hol.arr A A)).

(; Theorem: |- ((= (\lambda t1. \lambda t2. t1 t1)) \lambda t2. t1) ;)

(; dict ;)

def thm_251 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) ((t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1) (t2_2 : hol.term A => t1_1)) :=
  A : hol.type => t1_1 : hol.term A => hol.BETA_CONV A (hol.arr A A) (t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1.

(; Theorem: |- ((= \lambda t1. (\lambda t1. \lambda t2. t1 t1)) \lambda t1. \lambda t2. t1) ;)

(; dict ;)

def thm_252 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) (t1_1 : hol.term A => (t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1) (t1_1 : hol.term A => t2_2 : hol.term A => t1_1)) :=
  A : hol.type => hol.ABS_THM A (hol.arr A A) (t1_1 : hol.term A => (t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1) (t1_1 : hol.term A => t2_2 : hol.term A => t1_1) (t1_1 : hol.term A => thm_251 A t1_1).

(; Theorem: |- ((= (\lambda t1. (\lambda t1. \lambda t2. t1 t1) t1)) (\lambda t1. \lambda t2. t1 t1)) ;)

(; dict ;)

def thm_253 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) ((t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t1_3) t1_2) t1_1) ((t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1)) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM A (hol.arr A A) (t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t1_3) t1_2) (t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1 t1_1 (thm_252 A) (thm_248 A t1_1).

(; Theorem: |- ((= (= (\lambda t1. (\lambda t1. \lambda t2. t1 t1) t1))) (= (\lambda t1. \lambda t2. t1 t1))) ;)

(; dict ;)

def thm_254 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr (hol.arr A A) hol.bool) (hol.eq (hol.arr A A) ((t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t1_3) t1_2) t1_1)) (hol.eq (hol.arr A A) ((t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM (hol.arr A A) (hol.arr (hol.arr A A) hol.bool) (hol.eq (hol.arr A A)) (hol.eq (hol.arr A A)) ((t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t1_3) t1_2) t1_1) ((t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1) (thm_250 A) (thm_253 A t1_1).

(; Theorem: |- ((= ((= (\lambda t1. (\lambda t1. \lambda t2. t1 t1) t1)) (\lambda t1. \lambda t2. t1 t1))) ((= (\lambda t1. \lambda t2. t1 t1)) \lambda t2. t1)) ;)

(; dict ;)

def thm_255 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A A) ((t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t1_3) t1_2) t1_1) ((t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1)) (hol.eq (hol.arr A A) ((t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1) (t2_2 : hol.term A => t1_1))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM (hol.arr A A) hol.bool (hol.eq (hol.arr A A) ((t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t1_3) t1_2) t1_1)) (hol.eq (hol.arr A A) ((t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1)) ((t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1) (t2_2 : hol.term A => t1_1) (thm_254 A t1_1) (thm_251 A t1_1).

(; Theorem: |- ((= ((Data.Bool.cond Data.Bool.T) t1)) \lambda t2. t1) ;)

(; dict ;)

def thm_256 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) (hol.cond A hol.true t1_1) (t2_2 : hol.term A => t1_1)) :=
  A : hol.type => t1_1 : hol.term A => hol.TRANS (hol.arr A A) (hol.cond A hol.true t1_1) ((t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1) (t2_2 : hol.term A => t1_1) (thm_249 A t1_1) (hol.EQ_MP (hol.eq (hol.arr A A) ((t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t1_3) t1_2) t1_1) ((t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1)) (hol.eq (hol.arr A A) ((t1_2 : hol.term A => t2_3 : hol.term A => t1_2) t1_1) (t2_2 : hol.term A => t1_1)) (thm_255 A t1_1) (thm_253 A t1_1)).

(; Theorem: |- ((= t2) t2) ;)

(; dict ;)

def thm_257 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq A t2_1 t2_1) :=
  A : hol.type => t2_1 : hol.term A => hol.REFL A t2_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) (\lambda t2. t1 t2)) ;)

(; dict ;)

def thm_258 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) ((t2_3 : hol.term A => t1_2) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.APP_THM A A (hol.cond A hol.true t1_2) (t2_3 : hol.term A => t1_2) t2_1 t2_1 (thm_256 A t1_2) (thm_257 A t2_1).

(; Theorem: |- ((= (\lambda t2. t1 t2)) t1) ;)

(; dict ;)

def thm_259 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A ((t2_3 : hol.term A => t1_2) t2_1) t1_2) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.BETA_CONV A A (t2_3 : hol.term A => t1_2) t2_1.

(; Theorem: |- ((= \lambda t2. (\lambda t2. t1 t2)) \lambda t2. t1) ;)

(; dict ;)

def thm_260 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) (t2_2 : hol.term A => (t2_3 : hol.term A => t1_1) t2_2) (t2_2 : hol.term A => t1_1)) :=
  A : hol.type => t1_1 : hol.term A => hol.ABS_THM A A (t2_2 : hol.term A => (t2_3 : hol.term A => t1_1) t2_2) (t2_2 : hol.term A => t1_1) (t2_2 : hol.term A => thm_259 A t2_2 t1_1).

(; Theorem: |- ((= (\lambda t2. (\lambda t2. t1 t2) t2)) (\lambda t2. t1 t2)) ;)

(; dict ;)

def thm_261 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A ((t2_3 : hol.term A => (t2_4 : hol.term A => t1_2) t2_3) t2_1) ((t2_3 : hol.term A => t1_2) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.APP_THM A A (t2_3 : hol.term A => (t2_4 : hol.term A => t1_2) t2_3) (t2_3 : hol.term A => t1_2) t2_1 t2_1 (thm_260 A t1_2) (thm_257 A t2_1).

(; Theorem: |- ((= (= (\lambda t2. (\lambda t2. t1 t2) t2))) (= (\lambda t2. t1 t2))) ;)

(; dict ;)

def thm_262 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A ((t2_3 : hol.term A => (t2_4 : hol.term A => t1_2) t2_3) t2_1)) (hol.eq A ((t2_3 : hol.term A => t1_2) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) ((t2_3 : hol.term A => (t2_4 : hol.term A => t1_2) t2_3) t2_1) ((t2_3 : hol.term A => t1_2) t2_1) (thm_23 A) (thm_261 A t2_1 t1_2).

(; Theorem: |- ((= ((= (\lambda t2. (\lambda t2. t1 t2) t2)) (\lambda t2. t1 t2))) ((= (\lambda t2. t1 t2)) t1)) ;)

(; dict ;)

def thm_263 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((t2_3 : hol.term A => (t2_4 : hol.term A => t1_2) t2_3) t2_1) ((t2_3 : hol.term A => t1_2) t2_1)) (hol.eq A ((t2_3 : hol.term A => t1_2) t2_1) t1_2)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A ((t2_3 : hol.term A => (t2_4 : hol.term A => t1_2) t2_3) t2_1)) (hol.eq A ((t2_3 : hol.term A => t1_2) t2_1)) ((t2_3 : hol.term A => t1_2) t2_1) t1_2 (thm_262 A t2_1 t1_2) (thm_259 A t2_1 t1_2).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1) ;)

(; dict ;)

def thm_264 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS A (hol.cond A hol.true t1_2 t2_1) ((t2_3 : hol.term A => t1_2) t2_1) t1_2 (thm_258 A t2_1 t1_2) (hol.EQ_MP (hol.eq A ((t2_3 : hol.term A => (t2_4 : hol.term A => t1_2) t2_3) t2_1) ((t2_3 : hol.term A => t1_2) t2_1)) (hol.eq A ((t2_3 : hol.term A => t1_2) t2_1) t1_2) (thm_263 A t2_1 t1_2) (thm_261 A t2_1 t1_2)).

(; Theorem: |- ((= (= (((Data.Bool.cond Data.Bool.T) t1) t2))) (= t1)) ;)

(; dict ;)

def thm_265 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (hol.cond A hol.true t1_2 t2_1)) (hol.eq A t1_2)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (hol.cond A hol.true t1_2 t2_1) t1_2 (thm_23 A) (thm_264 A t2_1 t1_2).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= t1) t1)) ;)

(; dict ;)

def thm_266 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A t1_2 t1_2)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1)) (hol.eq A t1_2) t1_2 t1_2 (thm_265 A t2_1 t1_2) (thm_248 A t1_2).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_267 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_268 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_267 A x_1) (thm_267 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_269 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_270 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_269 A) (thm_269 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_271 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_22 A) (thm_270 A).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_272 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_147 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_273 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_20 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_274 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_272 A x_1) (thm_273 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_275 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_267 A x_1) (thm_274 A x_1)) A x_1.

(; Theorem: |- ((= ((= t1) t1)) Data.Bool.T) ;)

(; dict ;)

def thm_276 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A t1_1 t1_1) hol.true) :=
  A : hol.type => t1_1 : hol.term A => (A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_268 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_271 A) (thm_275 A) x_1)) A x_1) A t1_1.

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) Data.Bool.T) ;)

(; dict ;)

def thm_277 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) hol.true) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A t1_2 t1_2) hol.true (thm_266 A t2_1 t1_2) (thm_276 A t1_2).

(; Theorem: |- ((= \lambda t2. ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) \lambda t2. Data.Bool.T) ;)

(; dict ;)

def thm_278 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (t2_2 : hol.term A => hol.true)) :=
  A : hol.type => t1_1 : hol.term A => hol.ABS_THM A hol.bool (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (t2_2 : hol.term A => hol.true) (t2_2 : hol.term A => thm_277 A t2_2 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1))) (Data.Bool.! \lambda t2. Data.Bool.T)) ;)

(; dict ;)

def thm_279 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1)) (hol.forall A (t2_2 : hol.term A => hol.true))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (t2_2 : hol.term A => hol.true) (thm_22 A) (thm_278 A t1_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_280 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda t2. t)) t)) ((= (Data.Bool.! \lambda t2. t)) t)) ;)

(; dict ;)

def thm_281 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda t2. t)) t)) ;)

(; dict ;)

def thm_282 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => t_1)) t_1) (thm_280 A t_1) (thm_281 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_283 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_21 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda t2. t)) t) ;)

(; dict ;)

def thm_284 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => t_1)) t_1) (thm_282 A t_1) (thm_283 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_285 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (t2_1 : hol.term A => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_284 A t_1) A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1))) Data.Bool.T) ;)

(; dict ;)

def thm_286 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1)) hol.true) :=
  A : hol.type => t1_1 : hol.term A => hol.TRANS hol.bool (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1)) (hol.forall A (t2_2 : hol.term A => hol.true)) hol.true (thm_279 A t1_1) (thm_285 A).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1))) \lambda t1. Data.Bool.T) ;)

(; dict ;)

def thm_287 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1)) (t1_1 : hol.term A => hol.true)) :=
  A : hol.type => hol.ABS_THM A hol.bool (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1)) (t1_1 : hol.term A => hol.true) (t1_1 : hol.term A => thm_286 A t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)))) (Data.Bool.! \lambda t1. Data.Bool.T)) ;)

(; dict ;)

def thm_288 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1))) (hol.forall A (t1_1 : hol.term A => hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1)) (t1_1 : hol.term A => hol.true) (thm_22 A) (thm_287 A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda t1. t)) t)) ((= (Data.Bool.! \lambda t1. t)) t)) ;)

(; dict ;)

def thm_289 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (t1_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t1_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (t1_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda t1. t)) t)) ;)

(; dict ;)

def thm_290 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t1_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t1_2 : hol.term A => t_1)) t_1) (thm_280 A t_1) (thm_289 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. t)) t) ;)

(; dict ;)

def thm_291 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (t1_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (t1_2 : hol.term A => t_1)) t_1) (thm_290 A t_1) (thm_283 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_292 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (t1_1 : hol.term A => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_291 A t_1) A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)))) Data.Bool.T) ;)

(; dict ;)

def thm_293 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1))) hol.true) :=
  A : hol.type => hol.TRANS hol.bool (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1))) (hol.forall A (t1_1 : hol.term A => hol.true)) hol.true (thm_288 A) (thm_292 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)))) ;)

(; dict ;)

def thm_294 : A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1)))) :=
  A : hol.type => hol.SYM hol.bool (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1))) hol.true (thm_293 A).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1))) ;)

(; dict ;)

def thm_295 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1))) :=
  A : hol.type => hol.EQ_MP hol.true (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1))) (thm_294 A) thm_9.

(; Theorem: |- ((= Data.Bool.F) Data.Bool.F) ;)

(; dict ;)

def thm_296 : hol.proof (hol.eq hol.bool hol.false hol.false) :=
  hol.REFL hol.bool hol.false.

(; Theorem: |- ((= (Data.Bool.cond Data.Bool.F)) (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.F)) ;)

(; dict ;)

def thm_297 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) (hol.cond A hol.false) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false)) :=
  A : hol.type => hol.APP_THM hol.bool (hol.arr A (hol.arr A A)) (hol.cond A) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false hol.false (thm_108 A) thm_296.

(; Theorem: |- ((= (\lambda t. (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) t) Data.Bool.F)) (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.F)) ;)

(; dict ;)

def thm_298 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) hol.false) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false)) :=
  A : hol.type => hol.APP_THM hol.bool (hol.arr A (hol.arr A A)) (t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false hol.false (thm_113 A) thm_296.

(; Theorem: |- ((= (= (\lambda t. (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) t) Data.Bool.F))) (= (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.F))) ;)

(; dict ;)

def thm_299 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A A)) hol.bool) (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) hol.false)) (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false))) :=
  A : hol.type => hol.APP_THM (hol.arr A (hol.arr A A)) (hol.arr (hol.arr A (hol.arr A A)) hol.bool) (hol.eq (hol.arr A (hol.arr A A))) (hol.eq (hol.arr A (hol.arr A A))) ((t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) hol.false) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false) (thm_111 A) (thm_298 A).

(; Theorem: |- ((= (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.F)) \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) ((= x) t2))))) ;)

(; dict ;)

def thm_300 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_2))))) :=
  A : hol.type => hol.BETA_CONV hol.bool (hol.arr A (hol.arr A A)) (t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false.

(; Theorem: |- ((= ((= (\lambda t. (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) t) Data.Bool.F)) (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.F))) ((= (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.F)) \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) ((= x) t2)))))) ;)

(; dict ;)

def thm_301 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) hol.false) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false)) (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr A (hol.arr A A)) hol.bool (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) hol.false)) (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_2)))) (thm_299 A) (thm_300 A).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) ((= x) t1))) Data.Bool.T) ;)

(; dict ;)

def thm_302 : A : hol.type -> t1_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp hol.false (hol.eq A x_2 t1_1)) hol.true) :=
  A : hol.type => t1_1 : hol.term A => x_2 : hol.term A => (t_1 : hol.term hol.bool => thm_133 t_1) (hol.eq A x_2 t1_1).

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.==> Data.Bool.F) ((= x) t1)))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_303 : A : hol.type -> t1_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.imp hol.false (hol.eq A x_2 t1_1))) (hol.and hol.true)) :=
  A : hol.type => t1_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.imp hol.false (hol.eq A x_2 t1_1)) hol.true thm_27 (thm_302 A t1_1 x_2).

(; Theorem: |- ((= (Data.Bool.==> (Data.Bool.~ Data.Bool.F))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_304 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.not hol.false)) (hol.imp hol.true)) :=
  hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.not hol.false) hol.true thm_28 thm_13.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) ((= x) t2))) ((Data.Bool.==> Data.Bool.T) ((= x) t2))) ;)

(; dict ;)

def thm_305 : A : hol.type -> t2_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.eq A x_2 t2_1)) (hol.imp hol.true (hol.eq A x_2 t2_1))) :=
  A : hol.type => t2_1 : hol.term A => x_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.not hol.false)) (hol.imp hol.true) (hol.eq A x_2 t2_1) (hol.eq A x_2 t2_1) thm_304 (thm_100 A t2_1 x_2).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) ((= x) t2))) ((= x) t2)) ;)

(; dict ;)

def thm_306 : A : hol.type -> t2_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp hol.true (hol.eq A x_2 t2_1)) (hol.eq A x_2 t2_1)) :=
  A : hol.type => t2_1 : hol.term A => x_2 : hol.term A => (t_1 : hol.term hol.bool => thm_123 t_1) (hol.eq A x_2 t2_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) ((= x) t2))) ((= x) t2)) ;)

(; dict ;)

def thm_307 : A : hol.type -> t2_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.not hol.false) (hol.eq A x_2 t2_1)) (hol.eq A x_2 t2_1)) :=
  A : hol.type => t2_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.not hol.false) (hol.eq A x_2 t2_1)) (hol.imp hol.true (hol.eq A x_2 t2_1)) (hol.eq A x_2 t2_1) (thm_305 A t2_1 x_2) (thm_306 A t2_1 x_2).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) ((= x) t2)))) ((Data.Bool./\ Data.Bool.T) ((= x) t2))) ;)

(; dict ;)

def thm_308 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.imp hol.false (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_1))) (hol.and hol.true (hol.eq A x_3 t2_1))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.imp hol.false (hol.eq A x_3 t1_2))) (hol.and hol.true) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_1)) (hol.eq A x_3 t2_1) (thm_303 A t1_2 x_3) (thm_307 A t2_1 x_3).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) ((= x) t2))) ((= x) t2)) ;)

(; dict ;)

def thm_309 : A : hol.type -> t2_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and hol.true (hol.eq A x_2 t2_1)) (hol.eq A x_2 t2_1)) :=
  A : hol.type => t2_1 : hol.term A => x_2 : hol.term A => (t_1 : hol.term hol.bool => thm_190 t_1) (hol.eq A x_2 t2_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) ((= x) t2)))) ((= x) t2)) ;)

(; dict ;)

def thm_310 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.imp hol.false (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_1))) (hol.eq A x_3 t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => x_3 : hol.term A => hol.TRANS hol.bool (hol.and (hol.imp hol.false (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_1))) (hol.and hol.true (hol.eq A x_3 t2_1)) (hol.eq A x_3 t2_1) (thm_308 A t2_1 t1_2 x_3) (thm_309 A t2_1 x_3).

(; Theorem: |- ((= \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) ((= x) t2)))) \lambda x. ((= x) t2)) ;)

(; dict ;)

def thm_311 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_1))) (x_3 : hol.term A => hol.eq A x_3 t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_1))) (x_3 : hol.term A => hol.eq A x_3 t2_1) (x_3 : hol.term A => thm_310 A t2_1 t1_2 x_3).

(; Theorem: |- ((= (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) ((= x) t2))))) (select \lambda x. ((= x) t2))) ;)

(; dict ;)

def thm_312 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_1)))) (hol.select A (x_3 : hol.term A => hol.eq A x_3 t2_1))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.APP_THM (hol.arr A hol.bool) A (hol.select A) (hol.select A) (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_1))) (x_3 : hol.term A => hol.eq A x_3 t2_1) (thm_26 A) (thm_311 A t2_1 t1_2).

(; Theorem: |- ((= (= (\lambda _448. ((= _448) t2) (select \lambda x'. ((= x') t2))))) (= (\lambda _448. ((= _448) t2) (select \lambda x'. ((= x') t2))))) ;)

(; dict ;)

def thm_313 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)))) (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1))))) :=
  A : hol.type => t2_1 : hol.term A => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)))).

(; Theorem: |- ((= (\lambda _448. ((= _448) t2) (select \lambda x. ((= x) t2)))) ((= (select \lambda x. ((= x) t2))) t2)) ;)

(; dict ;)

def thm_314 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1))) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => hol.BETA_CONV A hol.bool (__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)).

(; Theorem: |- ((= ((= (\lambda _448. ((= _448) t2) (select \lambda x'. ((= x') t2)))) (\lambda _448. ((= _448) t2) (select \lambda x. ((= x) t2))))) ((= (\lambda _448. ((= _448) t2) (select \lambda x'. ((= x') t2)))) ((= (select \lambda x. ((= x) t2))) t2))) ;)

(; dict ;)

def thm_315 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1))) ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)))) (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1))) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)))) (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)))) ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1))) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1) (thm_313 A t2_1) (thm_314 A t2_1).

(; Theorem: |- ((= (\lambda _448. ((= _448) t2) (select \lambda x'. ((= x') t2)))) ((= (select \lambda x'. ((= x') t2))) t2)) ;)

(; dict ;)

def thm_316 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1))) (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => hol.BETA_CONV A hol.bool (__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)).

(; Theorem: |- ((= (= (\lambda _448. ((= _448) t2) (select \lambda x'. ((= x') t2))))) (= ((= (select \lambda x'. ((= x') t2))) t2))) ;)

(; dict ;)

def thm_317 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)))) (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1))) (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) t2_1) thm_141 (thm_316 A t2_1).

(; Theorem: |- ((= ((= (select \lambda x. ((= x) t2))) t2)) ((= (select \lambda x. ((= x) t2))) t2)) ;)

(; dict ;)

def thm_318 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1).

(; Theorem: |- ((= ((= (\lambda _448. ((= _448) t2) (select \lambda x'. ((= x') t2)))) ((= (select \lambda x. ((= x) t2))) t2))) ((= ((= (select \lambda x'. ((= x') t2))) t2)) ((= (select \lambda x. ((= x) t2))) t2))) ;)

(; dict ;)

def thm_319 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1))) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1)) (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) t2_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)))) (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) t2_1)) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1) (thm_317 A t2_1) (thm_318 A t2_1).

(; Theorem: |- ((= ((= (\lambda _448. ((= _448) t2) (select \lambda x'. ((= x') t2)))) (\lambda _448. ((= _448) t2) (select \lambda x. ((= x) t2))))) ((= ((= (select \lambda x'. ((= x') t2))) t2)) ((= (select \lambda x. ((= x) t2))) t2))) ;)

(; dict ;)

def thm_320 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1))) ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)))) (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) t2_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1))) ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)))) (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1))) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1)) (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) t2_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1)) (thm_315 A t2_1) (thm_319 A t2_1).

(; Theorem: |- ((= \lambda _448. ((= _448) t2)) \lambda _448. ((= _448) t2)) ;)

(; dict ;)

def thm_321 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (__448_2 : hol.term A => hol.eq A __448_2 t2_1) (__448_2 : hol.term A => hol.eq A __448_2 t2_1)) :=
  A : hol.type => t2_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (__448_2 : hol.term A => hol.eq A __448_2 t2_1).

(; Theorem: |- ((= (select \lambda x'. ((= x') t2))) (select \lambda x'. ((= x') t2))) ;)

(; dict ;)

def thm_322 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1))) :=
  A : hol.type => t2_1 : hol.term A => hol.REFL A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)).

(; Theorem: |- ((= (select \lambda x. ((= x) t2))) (select \lambda x. ((= x) t2))) ;)

(; dict ;)

def thm_323 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1))) :=
  A : hol.type => t2_1 : hol.term A => hol.REFL A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)).

(; Theorem: |- ((= (select \lambda x'. ((= x') t2))) (select \lambda x. ((= x) t2))) ;)

(; dict ;)

def thm_324 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1))) :=
  A : hol.type => t2_1 : hol.term A => hol.TRANS A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) (thm_322 A t2_1) (thm_323 A t2_1).

(; Theorem: |- ((= (\lambda _448. ((= _448) t2) (select \lambda x'. ((= x') t2)))) (\lambda _448. ((= _448) t2) (select \lambda x. ((= x) t2)))) ;)

(; dict ;)

def thm_325 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1))) ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)))) :=
  A : hol.type => t2_1 : hol.term A => hol.APP_THM A hol.bool (__448_2 : hol.term A => hol.eq A __448_2 t2_1) (__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) (thm_321 A t2_1) (thm_324 A t2_1).

(; Theorem: |- ((= ((= (select \lambda x'. ((= x') t2))) t2)) ((= (select \lambda x. ((= x) t2))) t2)) ;)

(; dict ;)

def thm_326 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) t2_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1))) ((__448_2 : hol.term A => hol.eq A __448_2 t2_1) (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)))) (hol.eq hol.bool (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) t2_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1)) (thm_320 A t2_1) (thm_325 A t2_1).

(; Theorem: |- ((= (select \lambda x'. ((= x') t2))) t2) ;)

(; dict ;)

def thm_327 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) t2_1) :=
  A : hol.type => t2_1 : hol.term A => (A : hol.type => x_1 : hol.term A => thm_240 A x_1) A t2_1.

(; Theorem: |- ((= (select \lambda x. ((= x) t2))) t2) ;)

(; dict ;)

def thm_328 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1) :=
  A : hol.type => t2_1 : hol.term A => hol.EQ_MP (hol.eq A (hol.select A (x_27_2 : hol.term A => hol.eq A x_27_2 t2_1)) t2_1) (hol.eq A (hol.select A (x_2 : hol.term A => hol.eq A x_2 t2_1)) t2_1) (thm_326 A t2_1) (thm_327 A t2_1).

(; Theorem: |- ((= (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) ((= x) t2))))) t2) ;)

(; dict ;)

def thm_329 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_1)))) t2_1) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS A (hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_2)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_1)))) (hol.select A (x_3 : hol.term A => hol.eq A x_3 t2_1)) t2_1 (thm_312 A t2_1 t1_2) (thm_328 A t2_1).

(; Theorem: |- ((= \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) ((= x) t2))))) \lambda t2. t2) ;)

(; dict ;)

def thm_330 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) (t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_2)))) (t2_2 : hol.term A => t2_2)) :=
  A : hol.type => t1_1 : hol.term A => hol.ABS_THM A A (t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_2)))) (t2_2 : hol.term A => t2_2) (t2_2 : hol.term A => thm_329 A t2_2 t1_1).

(; Theorem: |- ((= \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ Data.Bool.F)) ((= x) t2))))) \lambda t1. \lambda t2. t2) ;)

(; dict ;)

def thm_331 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_2)))) (t1_1 : hol.term A => t2_2 : hol.term A => t2_2)) :=
  A : hol.type => hol.ABS_THM A (hol.arr A A) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_2)))) (t1_1 : hol.term A => t2_2 : hol.term A => t2_2) (t1_1 : hol.term A => thm_330 A t1_1).

(; Theorem: |- ((= (\lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> t) ((= x) t1))) ((Data.Bool.==> (Data.Bool.~ t)) ((= x) t2)))) Data.Bool.F)) \lambda t1. \lambda t2. t2) ;)

(; dict ;)

def thm_332 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false) (t1_1 : hol.term A => t2_2 : hol.term A => t2_2)) :=
  A : hol.type => hol.TRANS (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_2)))) (t1_1 : hol.term A => t2_2 : hol.term A => t2_2) (hol.EQ_MP (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => (t_2 : hol.term hol.bool => t1_3 : hol.term A => t2_4 : hol.term A => hol.select A (x_5 : hol.term A => hol.and (hol.imp t_2 (hol.eq A x_5 t1_3)) (hol.imp (hol.not t_2) (hol.eq A x_5 t2_4)))) t_1) hol.false) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false)) (hol.eq (hol.arr A (hol.arr A A)) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false) (t1_1 : hol.term A => t2_2 : hol.term A => hol.select A (x_3 : hol.term A => hol.and (hol.imp hol.false (hol.eq A x_3 t1_1)) (hol.imp (hol.not hol.false) (hol.eq A x_3 t2_2))))) (thm_301 A) (thm_298 A)) (thm_331 A).

(; Theorem: |- ((= (Data.Bool.cond Data.Bool.F)) \lambda t1. \lambda t2. t2) ;)

(; dict ;)

def thm_333 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) (hol.cond A hol.false) (t1_1 : hol.term A => t2_2 : hol.term A => t2_2)) :=
  A : hol.type => hol.TRANS (hol.arr A (hol.arr A A)) (hol.cond A hol.false) ((t_1 : hol.term hol.bool => t1_2 : hol.term A => t2_3 : hol.term A => hol.select A (x_4 : hol.term A => hol.and (hol.imp t_1 (hol.eq A x_4 t1_2)) (hol.imp (hol.not t_1) (hol.eq A x_4 t2_3)))) hol.false) (t1_1 : hol.term A => t2_2 : hol.term A => t2_2) (thm_297 A) (thm_332 A).

(; Theorem: |- ((= ((Data.Bool.cond Data.Bool.F) t1)) (\lambda t1. \lambda t2. t2 t1)) ;)

(; dict ;)

def thm_334 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) (hol.cond A hol.false t1_1) ((t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1)) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM A (hol.arr A A) (hol.cond A hol.false) (t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1 t1_1 (thm_333 A) (thm_248 A t1_1).

(; Theorem: |- ((= (\lambda t1. \lambda t2. t2 t1)) \lambda t2. t2) ;)

(; dict ;)

def thm_335 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) ((t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1) (t2_2 : hol.term A => t2_2)) :=
  A : hol.type => t1_1 : hol.term A => hol.BETA_CONV A (hol.arr A A) (t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1.

(; Theorem: |- ((= \lambda t1. (\lambda t1. \lambda t2. t2 t1)) \lambda t1. \lambda t2. t2) ;)

(; dict ;)

def thm_336 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A A)) (t1_1 : hol.term A => (t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1) (t1_1 : hol.term A => t2_2 : hol.term A => t2_2)) :=
  A : hol.type => hol.ABS_THM A (hol.arr A A) (t1_1 : hol.term A => (t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1) (t1_1 : hol.term A => t2_2 : hol.term A => t2_2) (t1_1 : hol.term A => thm_335 A t1_1).

(; Theorem: |- ((= (\lambda t1. (\lambda t1. \lambda t2. t2 t1) t1)) (\lambda t1. \lambda t2. t2 t1)) ;)

(; dict ;)

def thm_337 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) ((t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t2_4) t1_2) t1_1) ((t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1)) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM A (hol.arr A A) (t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t2_4) t1_2) (t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1 t1_1 (thm_336 A) (thm_248 A t1_1).

(; Theorem: |- ((= (= (\lambda t1. (\lambda t1. \lambda t2. t2 t1) t1))) (= (\lambda t1. \lambda t2. t2 t1))) ;)

(; dict ;)

def thm_338 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr (hol.arr A A) hol.bool) (hol.eq (hol.arr A A) ((t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t2_4) t1_2) t1_1)) (hol.eq (hol.arr A A) ((t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM (hol.arr A A) (hol.arr (hol.arr A A) hol.bool) (hol.eq (hol.arr A A)) (hol.eq (hol.arr A A)) ((t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t2_4) t1_2) t1_1) ((t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1) (thm_250 A) (thm_337 A t1_1).

(; Theorem: |- ((= ((= (\lambda t1. (\lambda t1. \lambda t2. t2 t1) t1)) (\lambda t1. \lambda t2. t2 t1))) ((= (\lambda t1. \lambda t2. t2 t1)) \lambda t2. t2)) ;)

(; dict ;)

def thm_339 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A A) ((t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t2_4) t1_2) t1_1) ((t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1)) (hol.eq (hol.arr A A) ((t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1) (t2_2 : hol.term A => t2_2))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM (hol.arr A A) hol.bool (hol.eq (hol.arr A A) ((t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t2_4) t1_2) t1_1)) (hol.eq (hol.arr A A) ((t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1)) ((t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1) (t2_2 : hol.term A => t2_2) (thm_338 A t1_1) (thm_335 A t1_1).

(; Theorem: |- ((= ((Data.Bool.cond Data.Bool.F) t1)) \lambda t2. t2) ;)

(; dict ;)

def thm_340 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A A) (hol.cond A hol.false t1_1) (t2_2 : hol.term A => t2_2)) :=
  A : hol.type => t1_1 : hol.term A => hol.TRANS (hol.arr A A) (hol.cond A hol.false t1_1) ((t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1) (t2_2 : hol.term A => t2_2) (thm_334 A t1_1) (hol.EQ_MP (hol.eq (hol.arr A A) ((t1_2 : hol.term A => (t1_3 : hol.term A => t2_4 : hol.term A => t2_4) t1_2) t1_1) ((t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1)) (hol.eq (hol.arr A A) ((t1_2 : hol.term A => t2_3 : hol.term A => t2_3) t1_1) (t2_2 : hol.term A => t2_2)) (thm_339 A t1_1) (thm_337 A t1_1)).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) (\lambda t2. t2 t2)) ;)

(; dict ;)

def thm_341 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.false t1_2 t2_1) ((t2_3 : hol.term A => t2_3) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.APP_THM A A (hol.cond A hol.false t1_2) (t2_3 : hol.term A => t2_3) t2_1 t2_1 (thm_340 A t1_2) (thm_257 A t2_1).

(; Theorem: |- ((= (\lambda t2. t2 t2)) t2) ;)

(; dict ;)

def thm_342 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq A ((t2_2 : hol.term A => t2_2) t2_1) t2_1) :=
  A : hol.type => t2_1 : hol.term A => hol.BETA_CONV A A (t2_2 : hol.term A => t2_2) t2_1.

(; Theorem: |- ((= \lambda t2. (\lambda t2. t2 t2)) \lambda t2. t2) ;)

(; dict ;)

def thm_343 : A : hol.type -> hol.proof (hol.eq (hol.arr A A) (t2_1 : hol.term A => (t2_2 : hol.term A => t2_2) t2_1) (t2_1 : hol.term A => t2_1)) :=
  A : hol.type => hol.ABS_THM A A (t2_1 : hol.term A => (t2_2 : hol.term A => t2_2) t2_1) (t2_1 : hol.term A => t2_1) (t2_1 : hol.term A => thm_342 A t2_1).

(; Theorem: |- ((= (\lambda t2. (\lambda t2. t2 t2) t2)) (\lambda t2. t2 t2)) ;)

(; dict ;)

def thm_344 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq A ((t2_2 : hol.term A => (t2_3 : hol.term A => t2_3) t2_2) t2_1) ((t2_2 : hol.term A => t2_2) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => hol.APP_THM A A (t2_2 : hol.term A => (t2_3 : hol.term A => t2_3) t2_2) (t2_2 : hol.term A => t2_2) t2_1 t2_1 (thm_343 A) (thm_257 A t2_1).

(; Theorem: |- ((= (= (\lambda t2. (\lambda t2. t2 t2) t2))) (= (\lambda t2. t2 t2))) ;)

(; dict ;)

def thm_345 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A ((t2_2 : hol.term A => (t2_3 : hol.term A => t2_3) t2_2) t2_1)) (hol.eq A ((t2_2 : hol.term A => t2_2) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) ((t2_2 : hol.term A => (t2_3 : hol.term A => t2_3) t2_2) t2_1) ((t2_2 : hol.term A => t2_2) t2_1) (thm_23 A) (thm_344 A t2_1).

(; Theorem: |- ((= ((= (\lambda t2. (\lambda t2. t2 t2) t2)) (\lambda t2. t2 t2))) ((= (\lambda t2. t2 t2)) t2)) ;)

(; dict ;)

def thm_346 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((t2_2 : hol.term A => (t2_3 : hol.term A => t2_3) t2_2) t2_1) ((t2_2 : hol.term A => t2_2) t2_1)) (hol.eq A ((t2_2 : hol.term A => t2_2) t2_1) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => hol.APP_THM A hol.bool (hol.eq A ((t2_2 : hol.term A => (t2_3 : hol.term A => t2_3) t2_2) t2_1)) (hol.eq A ((t2_2 : hol.term A => t2_2) t2_1)) ((t2_2 : hol.term A => t2_2) t2_1) t2_1 (thm_345 A t2_1) (thm_342 A t2_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2) ;)

(; dict ;)

def thm_347 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS A (hol.cond A hol.false t1_2 t2_1) ((t2_3 : hol.term A => t2_3) t2_1) t2_1 (thm_341 A t2_1 t1_2) (hol.EQ_MP (hol.eq A ((t2_3 : hol.term A => (t2_4 : hol.term A => t2_4) t2_3) t2_1) ((t2_3 : hol.term A => t2_3) t2_1)) (hol.eq A ((t2_3 : hol.term A => t2_3) t2_1) t2_1) (thm_346 A t2_1) (thm_344 A t2_1)).

(; Theorem: |- ((= (= (((Data.Bool.cond Data.Bool.F) t1) t2))) (= t2)) ;)

(; dict ;)

def thm_348 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (hol.cond A hol.false t1_2 t2_1)) (hol.eq A t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (hol.cond A hol.false t1_2 t2_1) t2_1 (thm_23 A) (thm_347 A t2_1 t1_2).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((= t2) t2)) ;)

(; dict ;)

def thm_349 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A t2_1 t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1)) (hol.eq A t2_1) t2_1 t2_1 (thm_348 A t2_1 t1_2) (thm_257 A t2_1).

(; Theorem: |- ((= ((= t2) t2)) Data.Bool.T) ;)

(; dict ;)

def thm_350 : A : hol.type -> t2_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A t2_1 t2_1) hol.true) :=
  A : hol.type => t2_1 : hol.term A => (A : hol.type => x_1 : hol.term A => thm_274 A x_1) A t2_1.

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) Data.Bool.T) ;)

(; dict ;)

def thm_351 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) hol.true) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A t2_1 t2_1) hol.true (thm_349 A t2_1 t1_2) (thm_350 A t2_1).

(; Theorem: |- ((= \lambda t2. ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) \lambda t2. Data.Bool.T) ;)

(; dict ;)

def thm_352 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2) (t2_2 : hol.term A => hol.true)) :=
  A : hol.type => t1_1 : hol.term A => hol.ABS_THM A hol.bool (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2) (t2_2 : hol.term A => hol.true) (t2_2 : hol.term A => thm_351 A t2_2 t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) (Data.Bool.! \lambda t2. Data.Bool.T)) ;)

(; dict ;)

def thm_353 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (hol.forall A (t2_2 : hol.term A => hol.true))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2) (t2_2 : hol.term A => hol.true) (thm_22 A) (thm_352 A t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) Data.Bool.T) ;)

(; dict ;)

def thm_354 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) hol.true) :=
  A : hol.type => t1_1 : hol.term A => hol.TRANS hol.bool (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (hol.forall A (t2_2 : hol.term A => hol.true)) hol.true (thm_353 A t1_1) (thm_285 A).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) \lambda t1. Data.Bool.T) ;)

(; dict ;)

def thm_355 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t1_1 : hol.term A => hol.true)) :=
  A : hol.type => hol.ABS_THM A hol.bool (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t1_1 : hol.term A => hol.true) (t1_1 : hol.term A => thm_354 A t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) (Data.Bool.! \lambda t1. Data.Bool.T)) ;)

(; dict ;)

def thm_356 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (hol.forall A (t1_1 : hol.term A => hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t1_1 : hol.term A => hol.true) (thm_22 A) (thm_355 A).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) Data.Bool.T) ;)

(; dict ;)

def thm_357 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) hol.true) :=
  A : hol.type => hol.TRANS hol.bool (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (hol.forall A (t1_1 : hol.term A => hol.true)) hol.true (thm_356 A) (thm_292 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_358 : A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => hol.SYM hol.bool (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) hol.true (thm_357 A).

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_359 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) :=
  A : hol.type => hol.EQ_MP hol.true (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (thm_358 A) thm_9.
