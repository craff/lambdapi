
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME function_2Dthm_2Da1.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

Function_2Eo : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))).

(; axiom ;)

thm_1 : hol.proof hol.true.

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_3 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_4 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_5 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_6 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_7 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_8 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; axiom ;)

thm_9 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))))).

(; axiom ;)

thm_10 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; axiom ;)

thm_11 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)).

(; axiom ;)

thm_12 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)).

(; axiom ;)

thm_13 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)).

(; axiom ;)

thm_14 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)).

(; axiom ;)

thm_15 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_16 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))).

(; axiom ;)

thm_17 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))).

(; axiom ;)

thm_18 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))).

(; axiom ;)

thm_19 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3)))))).

(; axiom ;)

thm_20 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; axiom ;)

thm_21 : A : hol.type -> hol.proof (hol.forall hol.bool (p_1 : hol.term hol.bool => hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3)))))).

(; axiom ;)

thm_22 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))).

(; axiom ;)

thm_23 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))).

(; axiom ;)

thm_24 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)).

(; axiom ;)

thm_25 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)).

(; axiom ;)

thm_26 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))).

(; axiom ;)

thm_27 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_28 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false).

(; axiom ;)

thm_29 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true).

(; axiom ;)

thm_30 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)).

(; axiom ;)

thm_31 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))).

(; axiom ;)

thm_32 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp p_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_33 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr A hol.bool)).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))))) \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))))) ;)

(; dict ;)

def thm_34 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))))) \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))))) ;)

(; dict ;)

def thm_35 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))) (thm_34 B C A) (thm_34 B C A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))))))))) ;)

(; dict ;)

def thm_36 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))) (thm_33 A) (thm_35 B C A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_37 : C : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A C) hol.bool) hol.bool) (hol.forall (hol.arr A C)) (hol.forall (hol.arr A C))) :=
  C : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A C) hol.bool) hol.bool) (hol.forall (hol.arr A C)).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))))))) ;)

(; dict ;)

def thm_38 : B : hol.type -> C : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr (hol.arr A C) hol.bool) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))))))) ;)

(; dict ;)

def thm_39 : B : hol.type -> C : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr (hol.arr A C) hol.bool) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))) (thm_38 B C A p_1) (thm_38 B C A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))))) ;)

(; dict ;)

def thm_40 : B : hol.type -> C : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))) (hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr A C) hol.bool) hol.bool (hol.forall (hol.arr A C)) (hol.forall (hol.arr A C)) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))) (thm_37 C A) (thm_39 B C A p_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_41 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)).

(; Theorem: |- ((= \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))) \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))) ;)

(; dict ;)

def thm_42 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_2 x_4) (hol.and (p_2 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (h_4 (g_3 x_5))))))) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_2 x_4) (hol.and (p_2 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (h_4 (g_3 x_5)))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr (hol.arr A B) hol.bool) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_2 x_4) (hol.and (p_2 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (h_4 (g_3 x_5))))))).

(; Theorem: |- ((= \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))) \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))) ;)

(; dict ;)

def thm_43 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_2 x_4) (hol.and (p_2 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (h_4 (g_3 x_5))))))) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_2 x_4) (hol.and (p_2 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (h_4 (g_3 x_5)))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_2 x_4) (hol.and (p_2 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (h_4 (g_3 x_5))))))) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_2 x_4) (hol.and (p_2 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (h_4 (g_3 x_5))))))) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_2 x_4) (hol.and (p_2 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (h_4 (g_3 x_5))))))) (thm_42 C B A f_1 p_2) (thm_42 C B A f_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))))))) (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))))))) ;)

(; dict ;)

def thm_44 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_2 x_4) (hol.and (p_2 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (h_4 (g_3 x_5)))))))) (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_2 x_4) (hol.and (p_2 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (h_4 (g_3 x_5))))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_2 x_4) (hol.and (p_2 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (h_4 (g_3 x_5))))))) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_2 x_4) (hol.and (p_2 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (h_4 (g_3 x_5))))))) (thm_41 B A) (thm_43 C B A f_1 p_2).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_45 : C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C))) :=
  C : hol.type => B : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (hol.forall (hol.arr B C)).

(; Theorem: |- ((= \lambda h. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) \lambda h. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) ;)

(; dict ;)

def thm_46 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6)))))) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr (hol.arr B C) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6)))))).

(; Theorem: |- ((= \lambda h. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) \lambda h. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) ;)

(; dict ;)

def thm_47 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6)))))) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr (hol.arr B C) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6)))))) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6)))))) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6)))))) (thm_46 A C B g_1 f_2 p_3) (thm_46 A C B g_1 f_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda h. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))))) (Data.Bool.! \lambda h. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))))) ;)

(; dict ;)

def thm_48 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))))) (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6)))))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C)) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6)))))) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6)))))) (thm_45 C B) (thm_47 A C B g_1 f_2 p_3).

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))) ;)

(; dict ;)

def thm_49 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6))))) -> hol.proof (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6))))) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6))))) => hyp_1.

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_50 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))) \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))) ;)

(; dict ;)

def thm_51 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5)))) (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5)))).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))) \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))) ;)

(; dict ;)

def thm_52 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5)))) (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5)))) (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5)))) (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5)))) (thm_51 B C A g_1 h_2 f_3 p_4) (thm_51 B C A g_1 h_2 f_3 p_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) ;)

(; dict ;)

def thm_53 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5)))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5)))) (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5)))) (thm_50 A) (thm_52 B C A g_1 h_2 f_3 p_4).

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_54 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (p_2 x_1) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> ((= x) y)) ((= y) x))) ((Data.Bool.==> ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_55 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)).

(; Theorem: |- ((= ((Data.Bool.==> ((= x) y)) ((= y) x))) ((Data.Bool.==> ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_56 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_55 A y_1 x_2) (thm_55 A y_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_57 : A : hol.type -> hyp_1 : hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) :=
  A : hol.type => hyp_1 : hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_58 : A : hol.type -> x_1 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A x_2 y_3) (hol.eq A y_3 x_2)))) -> hol.proof (hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A x_2 y_3) (hol.eq A y_3 x_2)))) => thm_57 A hyp_1 x_1.

(; Theorem: |- ((Data.Bool.==> ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_59 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq A x_3 y_4) (hol.eq A y_4 x_3)))) -> hol.proof (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq A x_3 y_4) (hol.eq A y_4 x_3)))) => thm_58 A x_2 hyp_1 y_1.

(; Theorem: |- ((= x) y) ;)

(; dict ;)

def thm_60 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_2 y_1) -> hol.proof (hol.eq A x_2 y_1) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_2 y_1) => hyp_1.

(; Theorem: |- ((= y) x) ;)

(; dict ;)

def thm_61 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq A x_3 y_4) (hol.eq A y_4 x_3)))) -> hyp_2 : hol.proof (hol.eq A x_1 y_2) -> hol.proof (hol.eq A y_2 x_1) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq A x_3 y_4) (hol.eq A y_4 x_3)))) => hyp_2 : hol.proof (hol.eq A x_1 y_2) => thm_59 A y_2 x_1 hyp_1 (thm_60 A y_2 x_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x))))) ((= y) x)) ;)

(; dict ;)

def thm_62 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_1 y_2) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq A x_3 y_4) (hol.eq A y_4 x_3)))) (hol.eq A y_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_1 y_2) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq A x_3 y_4) (hol.eq A y_4 x_3)))) => thm_61 A x_1 y_2 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_63 : A : hol.type -> y_1 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A x_2 y_3) (hol.eq A y_3 x_2)))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A x_2 y_3) (hol.eq A y_3 x_2)))) => x_2 : hol.term A => hyp_2 : hol.proof (hol.eq A x_2 y_1) => thm_62 A x_2 y_1 hyp_2 (thm_57 A hyp_1).

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_64 : A : hol.type -> hyp_1 : hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) -> hol.proof (hol.forall A (y_1 : hol.term A => hol.forall A (x_2 : hol.term A => hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)))) :=
  A : hol.type => hyp_1 : hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) => y_1 : hol.term A => thm_63 A y_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) y)) ((= y) x))))) ;)

(; dict ;)

def thm_65 : A : hol.type -> hol.proof (hol.imp (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) (hol.forall A (y_1 : hol.term A => hol.forall A (x_2 : hol.term A => hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))))) :=
  A : hol.type => hyp_1 : hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) => thm_64 A hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_66 : A : hol.type -> hol.proof (hol.forall A (y_1 : hol.term A => hol.forall A (x_2 : hol.term A => hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)))) :=
  A : hol.type => thm_65 A (thm_0 A).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_67 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => thm_66 A y_1.

(; Theorem: |- ((Data.Bool.==> ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_68 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_67 A y_1 x_2.

(; Theorem: |- ((Data.Bool.==> ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_69 : C : hol.type -> y_1 : hol.term C -> x_2 : hol.term C -> hol.proof (hol.imp (hol.eq C x_2 y_1) (hol.eq C y_1 x_2)) :=
  C : hol.type => y_1 : hol.term C => x_2 : hol.term C => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_56 A y_1 x_2) (thm_68 A y_1 x_2)) C y_1 x_2.

(; Theorem: |- ((Data.Bool.==> ((= (h (g x))) (f x))) ((= (f x)) (h (g x)))) ;)

(; dict ;)

def thm_70 : A : hol.type -> B : hol.type -> C : hol.type -> f_1 : hol.term (hol.arr A C) -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> h_4 : hol.term (hol.arr B C) -> hol.proof (hol.imp (hol.eq C (h_4 (g_3 x_2)) (f_1 x_2)) (hol.eq C (f_1 x_2) (h_4 (g_3 x_2)))) :=
  A : hol.type => B : hol.type => C : hol.type => f_1 : hol.term (hol.arr A C) => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => h_4 : hol.term (hol.arr B C) => (C : hol.type => y_1 : hol.term C => x_2 : hol.term C => thm_69 C y_1 x_2) C (f_1 x_2) (h_4 (g_3 x_2)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))) ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))) ;)

(; dict ;)

def thm_71 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> y_4 : hol.term B -> x_5 : hol.term A -> p_6 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (p_6 x_5) (hol.eq B y_4 (g_3 x_5))) (hol.eq C (h_2 y_4) (f_1 x_5))) (hol.imp (hol.and (p_6 x_5) (hol.eq B y_4 (g_3 x_5))) (hol.eq C (h_2 y_4) (f_1 x_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => x_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.imp (hol.and (p_6 x_5) (hol.eq B y_4 (g_3 x_5))) (hol.eq C (h_2 y_4) (f_1 x_5))).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))) ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))) ;)

(; dict ;)

def thm_72 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> y_4 : hol.term B -> x_5 : hol.term A -> p_6 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (p_6 x_5) (hol.eq B y_4 (g_3 x_5))) (hol.eq C (h_2 y_4) (f_1 x_5))) (hol.imp (hol.and (p_6 x_5) (hol.eq B y_4 (g_3 x_5))) (hol.eq C (h_2 y_4) (f_1 x_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => x_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.imp (hol.and (p_6 x_5) (hol.eq B y_4 (g_3 x_5))) (hol.eq C (h_2 y_4) (f_1 x_5))) (hol.imp (hol.and (p_6 x_5) (hol.eq B y_4 (g_3 x_5))) (hol.eq C (h_2 y_4) (f_1 x_5))) (hol.imp (hol.and (p_6 x_5) (hol.eq B y_4 (g_3 x_5))) (hol.eq C (h_2 y_4) (f_1 x_5))) (thm_71 C B A f_1 h_2 g_3 y_4 x_5 p_6) (thm_71 C B A f_1 h_2 g_3 y_4 x_5 p_6).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))) ;)

(; dict ;)

def thm_73 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> y_4 : hol.term B -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_6 : hol.term B => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_5 x_7) (hol.eq B y_6 (g_3 x_7))) (hol.eq C (h_2 y_6) (f_1 x_7))))) -> hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_6 : hol.term B => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_5 x_7) (hol.eq B y_6 (g_3 x_7))) (hol.eq C (h_2 y_6) (f_1 x_7))))) => thm_49 C A B f_1 h_2 g_3 p_5 hyp_1 y_4.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))) ;)

(; dict ;)

def thm_74 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> y_4 : hol.term B -> x_5 : hol.term A -> p_6 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_7 : hol.term B => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_6 x_8) (hol.eq B y_7 (g_3 x_8))) (hol.eq C (h_2 y_7) (f_1 x_8))))) -> hol.proof (hol.imp (hol.and (p_6 x_5) (hol.eq B y_4 (g_3 x_5))) (hol.eq C (h_2 y_4) (f_1 x_5))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => x_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_7 : hol.term B => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_6 x_8) (hol.eq B y_7 (g_3 x_8))) (hol.eq C (h_2 y_7) (f_1 x_8))))) => thm_73 C B A f_1 h_2 g_3 y_4 p_6 hyp_1 x_5.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) ((= (h (g x))) (f x))) ;)

(; dict ;)

def thm_75 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_6 : hol.term B => hol.forall A (x__1_7 : hol.term A => hol.imp (hol.and (p_5 x__1_7) (hol.eq B y_6 (g_3 x__1_7))) (hol.eq C (h_2 y_6) (f_1 x__1_7))))) -> hol.proof (hol.imp (hol.and (p_5 x_4) (hol.eq B (g_3 x_4) (g_3 x_4))) (hol.eq C (h_2 (g_3 x_4)) (f_1 x_4))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_6 : hol.term B => hol.forall A (x__1_7 : hol.term A => hol.imp (hol.and (p_5 x__1_7) (hol.eq B y_6 (g_3 x__1_7))) (hol.eq C (h_2 y_6) (f_1 x__1_7))))) => (C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => x_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_7 : hol.term B => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_6 x_8) (hol.eq B y_7 (g_3 x_8))) (hol.eq C (h_2 y_7) (f_1 x_8))))) => (C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => x_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_7 : hol.term B => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_6 x_8) (hol.eq B y_7 (g_3 x_8))) (hol.eq C (h_2 y_7) (f_1 x_8))))) => hol.EQ_MP (hol.imp (hol.and (p_6 x_5) (hol.eq B y_4 (g_3 x_5))) (hol.eq C (h_2 y_4) (f_1 x_5))) (hol.imp (hol.and (p_6 x_5) (hol.eq B y_4 (g_3 x_5))) (hol.eq C (h_2 y_4) (f_1 x_5))) (thm_72 C B A f_1 h_2 g_3 y_4 x_5 p_6) (thm_74 C B A f_1 h_2 g_3 y_4 x_5 p_6 hyp_1)) C B A f_1 h_2 g_3 y_4 x_5 p_6 hyp_1) C B A f_1 h_2 g_3 (g_3 x_4) x_4 p_5 hyp_1.

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_76 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= ((= (p x)) Data.Bool.T)) ((= (p x)) Data.Bool.T)) ;)

(; dict ;)

def thm_77 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_2 x_1) hol.true).

(; Theorem: |- ((= ((= (p x)) Data.Bool.T)) ((= (p x)) Data.Bool.T)) ;)

(; dict ;)

def thm_78 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true) (thm_77 A x_1 p_2) (thm_77 A x_1 p_2).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_79 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_80 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_79 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_81 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_80 t_1 hyp_1) thm_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_82 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_83 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_82 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_1).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_84 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_81 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_83 t_1 hyp_1).

(; Theorem: |- ((= (p x)) ((= (p x)) Data.Bool.T)) ;)

(; dict ;)

def thm_85 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 x_1) (hol.eq hol.bool (p_2 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_84 t_1) (p_2 x_1).

(; Theorem: |- ((= (p x)) Data.Bool.T) ;)

(; dict ;)

def thm_86 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq hol.bool (p_2 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.EQ_MP (p_2 x_1) (hol.eq hol.bool (p_2 x_1) hol.true) (thm_85 A x_1 p_2) (thm_54 A x_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool./\ (p x))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_87 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 x_1) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (p_2 x_1)) (hol.and hol.true)) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 x_1) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (p_2 x_1) hol.true thm_76 (hol.EQ_MP (hol.eq hol.bool (p_2 x_1) hol.true) (hol.eq hol.bool (p_2 x_1) hol.true) (thm_78 A x_1 p_2) (thm_86 A x_1 p_2 hyp_1)).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_88 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_89 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_88 A x_1) (thm_88 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_90 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_91 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_90 A) (thm_90 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_92 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_50 A) (thm_91 A).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_93 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_84 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_94 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_2 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_95 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_93 A x_1) (thm_94 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_96 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_88 A x_1) (thm_95 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_97 : B : hol.type -> x_1 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B x_1 x_1) hol.true) :=
  B : hol.type => x_1 : hol.term B => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_89 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_92 A) (thm_96 A) x_1)) B x_1.

(; Theorem: |- ((= ((= (g x)) (g x))) Data.Bool.T) ;)

(; dict ;)

def thm_98 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (g_2 x_1) (g_2 x_1)) hol.true) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => (B : hol.type => x_1 : hol.term B => thm_97 B x_1) B (g_2 x_1).

(; Theorem: |- ((= ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_99 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hol.proof (hol.eq hol.bool (hol.and (p_3 x_2) (hol.eq B (g_1 x_2) (g_1 x_2))) (hol.and hol.true hol.true)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hol.APP_THM hol.bool hol.bool (hol.and (p_3 x_2)) (hol.and hol.true) (hol.eq B (g_1 x_2) (g_1 x_2)) hol.true (thm_87 A x_2 p_3 hyp_1) (thm_98 A B x_2 g_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_100 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_101 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_100 t_1) (thm_100 t_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_102 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_103 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_104 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_103 thm_103.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_105 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_102 thm_104.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_106 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_3 t_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_107 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_108 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_109 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_107 q_1 p_2) (thm_108 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_110 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_111 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_112 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_110 p_1) (thm_111 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_113 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_114 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_4 (thm_113 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_115 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_112 p_1) (thm_114 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_116 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_117 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_115 p_2) (thm_116 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_118 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_109 q_1 p_2) (thm_117 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_119 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_120 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_118 q_1 p_2) (thm_119 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_121 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_120 q_1 p_2 hyp_1 q_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_122 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_123 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_124 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_122 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_123 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_125 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_124 q_2 p_1 hyp_1 hyp_2) (thm_122 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_126 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_125 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_127 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_126 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_128 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_121 q_2 p_1 hyp_1 (thm_127 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_129 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_118 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_130 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_131 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_130 x_2 q_3 p_1 hyp_2 (thm_122 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_132 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_131 p_2 x_3 q_1 hyp_1 hyp_3 (thm_123 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_133 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_132 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_134 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_133 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_135 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_129 q_1 p_2) (thm_134 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_136 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_128 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_135 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_137 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_136 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_138 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_100 t_1) (thm_106 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_137 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_139 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_140 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_139 t_1) (thm_139 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_141 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_5 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_142 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_136 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_143 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_140 t_1) (thm_141 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_142 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_144 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_145 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_144 t_1) (thm_144 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_146 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_6 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_147 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_136 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_148 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_145 t_1) (thm_146 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_147 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_149 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_150 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_149 t_1) (thm_149 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_151 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_7 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_152 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_136 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_153 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_150 t_1) (thm_151 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_152 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_154 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_155 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_154 t_1) (thm_154 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_156 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_8 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_157 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_153 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_155 t_1) (thm_156 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_158 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_148 t_1) (thm_157 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_159 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_143 t_1) (thm_158 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_160 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_138 t_1) (thm_159 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_161 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_160 t_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_162 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_120 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_163 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_124 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_164 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_163 p_2 q_1 hyp_1 hyp_2) (thm_123 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_165 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_164 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_166 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_165 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_167 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_162 q_1 p_2 hyp_1 (thm_166 q_1 p_2).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_168 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_167 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_169 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_105 thm_161 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_168 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_170 : hol.proof (hol.eq hol.bool (hol.and hol.true hol.true) hol.true) :=
  (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_101 t_1) (thm_169 t_1)) hol.true.

(; Theorem: |- ((= ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) Data.Bool.T) ;)

(; dict ;)

def thm_171 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hol.proof (hol.eq hol.bool (hol.and (p_3 x_2) (hol.eq B (g_1 x_2) (g_1 x_2))) hol.true) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hol.TRANS hol.bool (hol.and (p_3 x_2) (hol.eq B (g_1 x_2) (g_1 x_2))) (hol.and hol.true hol.true) hol.true (thm_99 B A g_1 x_2 p_3 hyp_1) thm_170.

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) ;)

(; dict ;)

def thm_172 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hol.proof (hol.eq hol.bool hol.true (hol.and (p_3 x_2) (hol.eq B (g_1 x_2) (g_1 x_2)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hol.SYM hol.bool (hol.and (p_3 x_2) (hol.eq B (g_1 x_2) (g_1 x_2))) hol.true (thm_171 B A g_1 x_2 p_3 hyp_1).

(; Theorem: |- ((Data.Bool./\ (p x)) ((= (g x)) (g x))) ;)

(; dict ;)

def thm_173 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hol.proof (hol.and (p_3 x_2) (hol.eq B (g_1 x_2) (g_1 x_2))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hol.EQ_MP hol.true (hol.and (p_3 x_2) (hol.eq B (g_1 x_2) (g_1 x_2))) (thm_172 B A g_1 x_2 p_3 hyp_1) thm_1.

(; Theorem: |- ((= (h (g x))) (f x)) ;)

(; dict ;)

def thm_174 : A : hol.type -> B : hol.type -> C : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> f_2 : hol.term (hol.arr A C) -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> h_5 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (p_1 x_3) -> hyp_2 : hol.proof (hol.forall B (y_6 : hol.term B => hol.forall A (x__1_7 : hol.term A => hol.imp (hol.and (p_1 x__1_7) (hol.eq B y_6 (g_4 x__1_7))) (hol.eq C (h_5 y_6) (f_2 x__1_7))))) -> hol.proof (hol.eq C (h_5 (g_4 x_3)) (f_2 x_3)) :=
  A : hol.type => B : hol.type => C : hol.type => p_1 : hol.term (hol.arr A hol.bool) => f_2 : hol.term (hol.arr A C) => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => h_5 : hol.term (hol.arr B C) => hyp_1 : hol.proof (p_1 x_3) => hyp_2 : hol.proof (hol.forall B (y_6 : hol.term B => hol.forall A (x__1_7 : hol.term A => hol.imp (hol.and (p_1 x__1_7) (hol.eq B y_6 (g_4 x__1_7))) (hol.eq C (h_5 y_6) (f_2 x__1_7))))) => thm_75 C B A f_2 h_5 g_4 x_3 p_1 hyp_2 (thm_173 B A g_4 x_3 p_1 hyp_1).

(; Theorem: |- ((= (f x)) (h (g x))) ;)

(; dict ;)

def thm_175 : B : hol.type -> A : hol.type -> C : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> g_2 : hol.term (hol.arr A B) -> h_3 : hol.term (hol.arr B C) -> x_4 : hol.term A -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_1 x_4) -> hyp_2 : hol.proof (hol.forall B (y_6 : hol.term B => hol.forall A (x__1_7 : hol.term A => hol.imp (hol.and (p_1 x__1_7) (hol.eq B y_6 (g_2 x__1_7))) (hol.eq C (h_3 y_6) (f_5 x__1_7))))) -> hol.proof (hol.eq C (f_5 x_4) (h_3 (g_2 x_4))) :=
  B : hol.type => A : hol.type => C : hol.type => p_1 : hol.term (hol.arr A hol.bool) => g_2 : hol.term (hol.arr A B) => h_3 : hol.term (hol.arr B C) => x_4 : hol.term A => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_1 x_4) => hyp_2 : hol.proof (hol.forall B (y_6 : hol.term B => hol.forall A (x__1_7 : hol.term A => hol.imp (hol.and (p_1 x__1_7) (hol.eq B y_6 (g_2 x__1_7))) (hol.eq C (h_3 y_6) (f_5 x__1_7))))) => thm_70 A B C f_5 x_4 g_2 h_3 (thm_174 A B C p_1 f_5 x_4 g_2 h_3 hyp_1 hyp_2).

(; Theorem: |- ((= (f x)) (h (g x))) ;)

(; dict ;)

def thm_176 : B : hol.type -> A : hol.type -> C : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> g_2 : hol.term (hol.arr A B) -> h_3 : hol.term (hol.arr B C) -> x_4 : hol.term A -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_1 x_4) -> hyp_2 : hol.proof (hol.forall B (y_6 : hol.term B => hol.forall A (x__1_7 : hol.term A => hol.imp (hol.and (p_1 x__1_7) (hol.eq B y_6 (g_2 x__1_7))) (hol.eq C (h_3 y_6) (f_5 x__1_7))))) -> hol.proof (hol.eq C (f_5 x_4) (h_3 (g_2 x_4))) :=
  B : hol.type => A : hol.type => C : hol.type => p_1 : hol.term (hol.arr A hol.bool) => g_2 : hol.term (hol.arr A B) => h_3 : hol.term (hol.arr B C) => x_4 : hol.term A => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_1 x_4) => hyp_2 : hol.proof (hol.forall B (y_6 : hol.term B => hol.forall A (x__1_7 : hol.term A => hol.imp (hol.and (p_1 x__1_7) (hol.eq B y_6 (g_2 x__1_7))) (hol.eq C (h_3 y_6) (f_5 x__1_7))))) => hol.PROVE_HYP (p_1 x_4) (hol.eq C (f_5 x_4) (h_3 (g_2 x_4))) (thm_54 A x_4 p_1 hyp_1) (hyp_3 : hol.proof (p_1 x_4) => thm_175 B A C p_1 g_2 h_3 x_4 f_5 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))) ;)

(; dict ;)

def thm_177 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_6 : hol.term B => hol.forall A (x__1_7 : hol.term A => hol.imp (hol.and (p_5 x__1_7) (hol.eq B y_6 (g_1 x__1_7))) (hol.eq C (h_2 y_6) (f_3 x__1_7))))) -> hol.proof (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_6 : hol.term B => hol.forall A (x__1_7 : hol.term A => hol.imp (hol.and (p_5 x__1_7) (hol.eq B y_6 (g_1 x__1_7))) (hol.eq C (h_2 y_6) (f_3 x__1_7))))) => hyp_2 : hol.proof (p_5 x_4) => thm_176 B A C p_5 g_1 h_2 x_4 f_3 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))) ;)

(; dict ;)

def thm_178 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_5 : hol.term B => hol.forall A (x__1_6 : hol.term A => hol.imp (hol.and (p_4 x__1_6) (hol.eq B y_5 (g_1 x__1_6))) (hol.eq C (h_2 y_5) (f_3 x__1_6))))) -> hol.proof (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_5 : hol.term B => hol.forall A (x__1_6 : hol.term A => hol.imp (hol.and (p_4 x__1_6) (hol.eq B y_5 (g_1 x__1_6))) (hol.eq C (h_2 y_5) (f_3 x__1_6))))) => x_5 : hol.term A => thm_177 B C A g_1 h_2 f_3 x_5 p_4 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))) ;)

(; dict ;)

def thm_179 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6))))) -> hol.proof (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6))))) => hol.PROVE_HYP (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6))))) (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (thm_49 C A B f_3 h_2 g_1 p_4 hyp_1) (hyp_2 : hol.proof (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6))))) => hol.EQ_MP (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (thm_53 B C A g_1 h_2 f_3 p_4) (thm_178 B C A g_1 h_2 f_3 p_4 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) ;)

(; dict ;)

def thm_180 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6))))) (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_1 x_5) (h_2 (g_3 x_5)))))) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6))))) => thm_179 B C A g_3 h_2 f_1 p_4 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))) ;)

(; dict ;)

def thm_181 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) -> hol.proof (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) => hyp_1.

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_182 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B) (hol.forall B)) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B).

(; Theorem: |- ((= \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))) \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))) ;)

(; dict ;)

def thm_183 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6)))) (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6))))) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr B hol.bool) (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6)))).

(; Theorem: |- ((= \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))) \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))) ;)

(; dict ;)

def thm_184 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6)))) (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6))))) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr B hol.bool) (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6)))) (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6)))) (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6)))) (thm_183 C A B f_1 h_2 g_3 p_4) (thm_183 C A B f_1 h_2 g_3 p_4).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))) ;)

(; dict ;)

def thm_185 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6)))))) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6)))) (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6)))) (thm_182 B) (thm_184 C A B f_1 h_2 g_3 p_4).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))) \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))) ;)

(; dict ;)

def thm_186 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> y_4 : hol.term B -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6))) (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => p_5 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6))).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))) \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))) ;)

(; dict ;)

def thm_187 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> y_4 : hol.term B -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6))) (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => p_5 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6))) (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6))) (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6))) (thm_186 C B A f_1 h_2 g_3 y_4 p_5) (thm_186 C B A f_1 h_2 g_3 y_4 p_5).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))) ;)

(; dict ;)

def thm_188 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> y_4 : hol.term B -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6)))) (hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => p_5 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6))) (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6))) (thm_50 A) (thm_187 C B A f_1 h_2 g_3 y_4 p_5).

(; Theorem: |- ((Data.Bool./\ (p x)) ((= y) (g x))) ;)

(; dict ;)

def thm_189 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> y_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_4 x_3) (hol.eq B y_2 (g_1 x_3))) -> hol.proof (hol.and (p_4 x_3) (hol.eq B y_2 (g_1 x_3))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => y_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_4 x_3) (hol.eq B y_2 (g_1 x_3))) => hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_190 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> y_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_4 x_3) (hol.eq B y_2 (g_1 x_3))) -> hol.proof (p_4 x_3) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => y_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_4 x_3) (hol.eq B y_2 (g_1 x_3))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_167 q_1 p_2 hyp_1) (hol.eq B y_2 (g_1 x_3)) (p_4 x_3) hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_191 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> y_2 : hol.term B -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_4 x_3) (hol.eq B y_2 (g_1 x_3))) -> hol.proof (p_4 x_3) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => y_2 : hol.term B => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_4 x_3) (hol.eq B y_2 (g_1 x_3))) => hol.PROVE_HYP (hol.and (p_4 x_3) (hol.eq B y_2 (g_1 x_3))) (p_4 x_3) (thm_189 B A g_1 y_2 x_3 p_4 hyp_1) (hyp_2 : hol.proof (hol.and (p_4 x_3) (hol.eq B y_2 (g_1 x_3))) => thm_190 B A g_1 y_2 x_3 p_4 hyp_2).

(; Theorem: |- ((= y) (g x)) ;)

(; dict ;)

def thm_192 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> y_4 : hol.term B -> hyp_1 : hol.proof (hol.and (p_1 x_2) (hol.eq B y_4 (g_3 x_2))) -> hol.proof (hol.eq B y_4 (g_3 x_2)) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => hyp_1 : hol.proof (hol.and (p_1 x_2) (hol.eq B y_4 (g_3 x_2))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_128 p_1 q_2 hyp_1) (p_1 x_2) (hol.eq B y_4 (g_3 x_2)) hyp_1.

(; Theorem: |- ((= y) (g x)) ;)

(; dict ;)

def thm_193 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> y_4 : hol.term B -> hyp_1 : hol.proof (hol.and (p_1 x_2) (hol.eq B y_4 (g_3 x_2))) -> hol.proof (hol.eq B y_4 (g_3 x_2)) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A hol.bool) => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => hyp_1 : hol.proof (hol.and (p_1 x_2) (hol.eq B y_4 (g_3 x_2))) => hol.PROVE_HYP (hol.and (p_1 x_2) (hol.eq B y_4 (g_3 x_2))) (hol.eq B y_4 (g_3 x_2)) (thm_189 B A g_3 y_4 x_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (p_1 x_2) (hol.eq B y_4 (g_3 x_2))) => thm_192 A B p_1 x_2 g_3 y_4 hyp_2).

(; Theorem: |- ((= y) (g x)) ;)

(; dict ;)

def thm_194 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> hyp_1 : hol.proof (hol.eq B y_3 (g_2 x_1)) -> hol.proof (hol.eq B y_3 (g_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => hyp_1 : hol.proof (hol.eq B y_3 (g_2 x_1)) => hyp_1.

(; Theorem: |- ((= (= (\lambda _11028. ((= (h _11028)) (f x)) y))) (= (\lambda _11028. ((= (h _11028)) (f x)) y))) ;)

(; dict ;)

def thm_195 : A : hol.type -> C : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> h_4 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11028_5 : hol.term B => hol.eq C (h_4 __11028_5) (f_3 x_2)) y_1)) (hol.eq hol.bool ((__11028_5 : hol.term B => hol.eq C (h_4 __11028_5) (f_3 x_2)) y_1))) :=
  A : hol.type => C : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A C) => h_4 : hol.term (hol.arr B C) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11028_5 : hol.term B => hol.eq C (h_4 __11028_5) (f_3 x_2)) y_1)).

(; Theorem: |- ((= (\lambda _11028. ((= (h _11028)) (f x)) (g x))) ((= (h (g x))) (f x))) ;)

(; dict ;)

def thm_196 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> h_4 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool ((__11028_5 : hol.term B => hol.eq C (h_4 __11028_5) (f_3 x_2)) (g_1 x_2)) (hol.eq C (h_4 (g_1 x_2)) (f_3 x_2))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => f_3 : hol.term (hol.arr A C) => h_4 : hol.term (hol.arr B C) => hol.BETA_CONV B hol.bool (__11028_5 : hol.term B => hol.eq C (h_4 __11028_5) (f_3 x_2)) (g_1 x_2).

(; Theorem: |- ((= ((= (\lambda _11028. ((= (h _11028)) (f x)) y)) (\lambda _11028. ((= (h _11028)) (f x)) (g x)))) ((= (\lambda _11028. ((= (h _11028)) (f x)) y)) ((= (h (g x))) (f x)))) ;)

(; dict ;)

def thm_197 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> y_2 : hol.term B -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> h_5 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) y_2) ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) (g_1 x_3))) (hol.eq hol.bool ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) y_2) (hol.eq C (h_5 (g_1 x_3)) (f_4 x_3)))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => y_2 : hol.term B => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => h_5 : hol.term (hol.arr B C) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) y_2)) (hol.eq hol.bool ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) y_2)) ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) (g_1 x_3)) (hol.eq C (h_5 (g_1 x_3)) (f_4 x_3)) (thm_195 A C B y_2 x_3 f_4 h_5) (thm_196 A C B g_1 x_3 f_4 h_5).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_198 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= (\lambda _11028. ((= (h _11028)) (f x)) y)) ((= (h y)) (f x))) ;)

(; dict ;)

def thm_199 : A : hol.type -> C : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> h_4 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool ((__11028_5 : hol.term B => hol.eq C (h_4 __11028_5) (f_3 x_2)) y_1) (hol.eq C (h_4 y_1) (f_3 x_2))) :=
  A : hol.type => C : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A C) => h_4 : hol.term (hol.arr B C) => hol.BETA_CONV B hol.bool (__11028_5 : hol.term B => hol.eq C (h_4 __11028_5) (f_3 x_2)) y_1.

(; Theorem: |- ((= (= (\lambda _11028. ((= (h _11028)) (f x)) y))) (= ((= (h y)) (f x)))) ;)

(; dict ;)

def thm_200 : A : hol.type -> C : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> h_4 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11028_5 : hol.term B => hol.eq C (h_4 __11028_5) (f_3 x_2)) y_1)) (hol.eq hol.bool (hol.eq C (h_4 y_1) (f_3 x_2)))) :=
  A : hol.type => C : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A C) => h_4 : hol.term (hol.arr B C) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__11028_5 : hol.term B => hol.eq C (h_4 __11028_5) (f_3 x_2)) y_1) (hol.eq C (h_4 y_1) (f_3 x_2)) thm_198 (thm_199 A C B y_1 x_2 f_3 h_4).

(; Theorem: |- ((= ((= (h (g x))) (f x))) ((= (h (g x))) (f x))) ;)

(; dict ;)

def thm_201 : A : hol.type -> B : hol.type -> C : hol.type -> f_1 : hol.term (hol.arr A C) -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> h_4 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq C (h_4 (g_3 x_2)) (f_1 x_2)) (hol.eq C (h_4 (g_3 x_2)) (f_1 x_2))) :=
  A : hol.type => B : hol.type => C : hol.type => f_1 : hol.term (hol.arr A C) => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => h_4 : hol.term (hol.arr B C) => hol.REFL hol.bool (hol.eq C (h_4 (g_3 x_2)) (f_1 x_2)).

(; Theorem: |- ((= ((= (\lambda _11028. ((= (h _11028)) (f x)) y)) ((= (h (g x))) (f x)))) ((= ((= (h y)) (f x))) ((= (h (g x))) (f x)))) ;)

(; dict ;)

def thm_202 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> y_2 : hol.term B -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> h_5 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) y_2) (hol.eq C (h_5 (g_1 x_3)) (f_4 x_3))) (hol.eq hol.bool (hol.eq C (h_5 y_2) (f_4 x_3)) (hol.eq C (h_5 (g_1 x_3)) (f_4 x_3)))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => y_2 : hol.term B => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => h_5 : hol.term (hol.arr B C) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) y_2)) (hol.eq hol.bool (hol.eq C (h_5 y_2) (f_4 x_3))) (hol.eq C (h_5 (g_1 x_3)) (f_4 x_3)) (hol.eq C (h_5 (g_1 x_3)) (f_4 x_3)) (thm_200 A C B y_2 x_3 f_4 h_5) (thm_201 A B C f_4 x_3 g_1 h_5).

(; Theorem: |- ((= ((= (\lambda _11028. ((= (h _11028)) (f x)) y)) (\lambda _11028. ((= (h _11028)) (f x)) (g x)))) ((= ((= (h y)) (f x))) ((= (h (g x))) (f x)))) ;)

(; dict ;)

def thm_203 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> y_2 : hol.term B -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> h_5 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) y_2) ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) (g_1 x_3))) (hol.eq hol.bool (hol.eq C (h_5 y_2) (f_4 x_3)) (hol.eq C (h_5 (g_1 x_3)) (f_4 x_3)))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => y_2 : hol.term B => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => h_5 : hol.term (hol.arr B C) => hol.TRANS hol.bool (hol.eq hol.bool ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) y_2) ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) (g_1 x_3))) (hol.eq hol.bool ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) y_2) (hol.eq C (h_5 (g_1 x_3)) (f_4 x_3))) (hol.eq hol.bool (hol.eq C (h_5 y_2) (f_4 x_3)) (hol.eq C (h_5 (g_1 x_3)) (f_4 x_3))) (thm_197 A C B g_1 y_2 x_3 f_4 h_5) (thm_202 A C B g_1 y_2 x_3 f_4 h_5).

(; Theorem: |- ((= \lambda _11028. ((= (h _11028)) (f x))) \lambda _11028. ((= (h _11028)) (f x))) ;)

(; dict ;)

def thm_204 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> h_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr B hol.bool) (__11028_4 : hol.term B => hol.eq C (h_3 __11028_4) (f_2 x_1)) (__11028_4 : hol.term B => hol.eq C (h_3 __11028_4) (f_2 x_1))) :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A C) => h_3 : hol.term (hol.arr B C) => hol.REFL (hol.arr B hol.bool) (__11028_4 : hol.term B => hol.eq C (h_3 __11028_4) (f_2 x_1)).

(; Theorem: |- ((= (\lambda _11028. ((= (h _11028)) (f x)) y)) (\lambda _11028. ((= (h _11028)) (f x)) (g x))) ;)

(; dict ;)

def thm_205 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> y_2 : hol.term B -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> h_5 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq B y_2 (g_1 x_3)) -> hol.proof (hol.eq hol.bool ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) y_2) ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) (g_1 x_3))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => y_2 : hol.term B => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => h_5 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq B y_2 (g_1 x_3)) => hol.APP_THM B hol.bool (__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) (__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_4 x_3)) y_2 (g_1 x_3) (thm_204 A C B x_3 f_4 h_5) (thm_194 A B x_3 g_1 y_2 hyp_1).

(; Theorem: |- ((= ((= (h y)) (f x))) ((= (h (g x))) (f x))) ;)

(; dict ;)

def thm_206 : A : hol.type -> B : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> y_4 : hol.term B -> h_5 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq B y_4 (g_1 x_2)) -> hol.proof (hol.eq hol.bool (hol.eq C (h_5 y_4) (f_3 x_2)) (hol.eq C (h_5 (g_1 x_2)) (f_3 x_2))) :=
  A : hol.type => B : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => f_3 : hol.term (hol.arr A C) => y_4 : hol.term B => h_5 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq B y_4 (g_1 x_2)) => hol.EQ_MP (hol.eq hol.bool ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_3 x_2)) y_4) ((__11028_6 : hol.term B => hol.eq C (h_5 __11028_6) (f_3 x_2)) (g_1 x_2))) (hol.eq hol.bool (hol.eq C (h_5 y_4) (f_3 x_2)) (hol.eq C (h_5 (g_1 x_2)) (f_3 x_2))) (thm_203 A C B g_1 y_4 x_2 f_3 h_5) (thm_205 A C B g_1 y_4 x_2 f_3 h_5 hyp_1).

(; Theorem: |- ((= ((= (h (g x))) (f x))) ((= (h y)) (f x))) ;)

(; dict ;)

def thm_207 : A : hol.type -> B : hol.type -> C : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A C) -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> h_5 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq B y_1 (g_4 x_3)) -> hol.proof (hol.eq hol.bool (hol.eq C (h_5 (g_4 x_3)) (f_2 x_3)) (hol.eq C (h_5 y_1) (f_2 x_3))) :=
  A : hol.type => B : hol.type => C : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A C) => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => h_5 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq B y_1 (g_4 x_3)) => hol.SYM hol.bool (hol.eq C (h_5 y_1) (f_2 x_3)) (hol.eq C (h_5 (g_4 x_3)) (f_2 x_3)) (thm_206 A B C g_4 x_3 f_2 y_1 h_5 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= (f x)) (h (g x)))) ((= (h (g x))) (f x))) ;)

(; dict ;)

def thm_208 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.imp (hol.eq C (f_4 x_3) (h_2 (g_1 x_3))) (hol.eq C (h_2 (g_1 x_3)) (f_4 x_3))) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => (C : hol.type => y_1 : hol.term C => x_2 : hol.term C => thm_69 C y_1 x_2) C (h_2 (g_1 x_3)) (f_4 x_3).

(; Theorem: |- ((= ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))) ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))) ;)

(; dict ;)

def thm_209 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))).

(; Theorem: |- ((= ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))) ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))) ;)

(; dict ;)

def thm_210 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (thm_209 B C A g_1 h_2 f_3 x_4 p_5) (thm_209 B C A g_1 h_2 f_3 x_4 p_5).

(; Theorem: |- ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))) ;)

(; dict ;)

def thm_211 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_5 x_6) (hol.eq C (f_3 x_6) (h_2 (g_1 x_6))))) -> hol.proof (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_5 x_6) (hol.eq C (f_3 x_6) (h_2 (g_1 x_6))))) => thm_181 B C A g_1 h_2 f_3 p_5 hyp_1 x_4.

(; Theorem: |- ((= (f x)) (h (g x))) ;)

(; dict ;)

def thm_212 : B : hol.type -> A : hol.type -> C : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> g_2 : hol.term (hol.arr A B) -> h_3 : hol.term (hol.arr B C) -> x_4 : hol.term A -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_1 x_4) -> hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_1 x_6) (hol.eq C (f_5 x_6) (h_3 (g_2 x_6))))) -> hol.proof (hol.eq C (f_5 x_4) (h_3 (g_2 x_4))) :=
  B : hol.type => A : hol.type => C : hol.type => p_1 : hol.term (hol.arr A hol.bool) => g_2 : hol.term (hol.arr A B) => h_3 : hol.term (hol.arr B C) => x_4 : hol.term A => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_1 x_4) => hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_1 x_6) (hol.eq C (f_5 x_6) (h_3 (g_2 x_6))))) => (B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_5 x_6) (hol.eq C (f_3 x_6) (h_2 (g_1 x_6))))) => hol.EQ_MP (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (thm_210 B C A g_1 h_2 f_3 x_4 p_5) (thm_211 B C A g_1 h_2 f_3 x_4 p_5 hyp_1)) B C A g_2 h_3 f_5 x_4 p_1 hyp_2 (thm_54 A x_4 p_1 hyp_1).

(; Theorem: |- ((= (h (g x))) (f x)) ;)

(; dict ;)

def thm_213 : A : hol.type -> B : hol.type -> C : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> f_2 : hol.term (hol.arr A C) -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> h_5 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (p_1 x_3) -> hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_1 x_6) (hol.eq C (f_2 x_6) (h_5 (g_4 x_6))))) -> hol.proof (hol.eq C (h_5 (g_4 x_3)) (f_2 x_3)) :=
  A : hol.type => B : hol.type => C : hol.type => p_1 : hol.term (hol.arr A hol.bool) => f_2 : hol.term (hol.arr A C) => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => h_5 : hol.term (hol.arr B C) => hyp_1 : hol.proof (p_1 x_3) => hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_1 x_6) (hol.eq C (f_2 x_6) (h_5 (g_4 x_6))))) => thm_208 B A C g_4 h_5 x_3 f_2 (thm_212 B A C p_1 g_4 h_5 x_3 f_2 hyp_1 hyp_2).

(; Theorem: |- ((= (h (g x))) (f x)) ;)

(; dict ;)

def thm_214 : A : hol.type -> B : hol.type -> C : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> f_2 : hol.term (hol.arr A C) -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> h_5 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (p_1 x_3) -> hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_1 x_6) (hol.eq C (f_2 x_6) (h_5 (g_4 x_6))))) -> hol.proof (hol.eq C (h_5 (g_4 x_3)) (f_2 x_3)) :=
  A : hol.type => B : hol.type => C : hol.type => p_1 : hol.term (hol.arr A hol.bool) => f_2 : hol.term (hol.arr A C) => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => h_5 : hol.term (hol.arr B C) => hyp_1 : hol.proof (p_1 x_3) => hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_1 x_6) (hol.eq C (f_2 x_6) (h_5 (g_4 x_6))))) => hol.PROVE_HYP (p_1 x_3) (hol.eq C (h_5 (g_4 x_3)) (f_2 x_3)) (thm_54 A x_3 p_1 hyp_1) (hyp_3 : hol.proof (p_1 x_3) => thm_213 A B C p_1 f_2 x_3 g_4 h_5 hyp_3 hyp_2).

(; Theorem: |- ((= (h (g x))) (f x)) ;)

(; dict ;)

def thm_215 : A : hol.type -> B : hol.type -> C : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> f_2 : hol.term (hol.arr A C) -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> h_5 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (p_1 x_3) -> hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_1 x_6) (hol.eq C (f_2 x_6) (h_5 (g_4 x_6))))) -> hol.proof (hol.eq C (h_5 (g_4 x_3)) (f_2 x_3)) :=
  A : hol.type => B : hol.type => C : hol.type => p_1 : hol.term (hol.arr A hol.bool) => f_2 : hol.term (hol.arr A C) => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => h_5 : hol.term (hol.arr B C) => hyp_1 : hol.proof (p_1 x_3) => hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_1 x_6) (hol.eq C (f_2 x_6) (h_5 (g_4 x_6))))) => hol.PROVE_HYP (hol.forall A (x_6 : hol.term A => hol.imp (p_1 x_6) (hol.eq C (f_2 x_6) (h_5 (g_4 x_6))))) (hol.eq C (h_5 (g_4 x_3)) (f_2 x_3)) (thm_181 B C A g_4 h_5 f_2 p_1 hyp_2) (hyp_3 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_1 x_6) (hol.eq C (f_2 x_6) (h_5 (g_4 x_6))))) => thm_214 A B C p_1 f_2 x_3 g_4 h_5 hyp_1 hyp_3).

(; Theorem: |- ((= (h y)) (f x)) ;)

(; dict ;)

def thm_216 : A : hol.type -> B : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> y_5 : hol.term B -> h_6 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (p_2 x_3) -> hyp_2 : hol.proof (hol.forall A (x_7 : hol.term A => hol.imp (p_2 x_7) (hol.eq C (f_4 x_7) (h_6 (g_1 x_7))))) -> hyp_3 : hol.proof (hol.eq B y_5 (g_1 x_3)) -> hol.proof (hol.eq C (h_6 y_5) (f_4 x_3)) :=
  A : hol.type => B : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => y_5 : hol.term B => h_6 : hol.term (hol.arr B C) => hyp_1 : hol.proof (p_2 x_3) => hyp_2 : hol.proof (hol.forall A (x_7 : hol.term A => hol.imp (p_2 x_7) (hol.eq C (f_4 x_7) (h_6 (g_1 x_7))))) => hyp_3 : hol.proof (hol.eq B y_5 (g_1 x_3)) => hol.EQ_MP (hol.eq C (h_6 (g_1 x_3)) (f_4 x_3)) (hol.eq C (h_6 y_5) (f_4 x_3)) (thm_207 A B C y_5 f_4 x_3 g_1 h_6 hyp_3) (thm_215 A B C p_2 f_4 x_3 g_1 h_6 hyp_1 hyp_2).

(; Theorem: |- ((= (h y)) (f x)) ;)

(; dict ;)

def thm_217 : A : hol.type -> B : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> y_5 : hol.term B -> h_6 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (p_2 x_3) -> hyp_2 : hol.proof (hol.forall A (x_7 : hol.term A => hol.imp (p_2 x_7) (hol.eq C (f_4 x_7) (h_6 (g_1 x_7))))) -> hyp_3 : hol.proof (hol.eq B y_5 (g_1 x_3)) -> hol.proof (hol.eq C (h_6 y_5) (f_4 x_3)) :=
  A : hol.type => B : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => y_5 : hol.term B => h_6 : hol.term (hol.arr B C) => hyp_1 : hol.proof (p_2 x_3) => hyp_2 : hol.proof (hol.forall A (x_7 : hol.term A => hol.imp (p_2 x_7) (hol.eq C (f_4 x_7) (h_6 (g_1 x_7))))) => hyp_3 : hol.proof (hol.eq B y_5 (g_1 x_3)) => hol.PROVE_HYP (hol.eq B y_5 (g_1 x_3)) (hol.eq C (h_6 y_5) (f_4 x_3)) (thm_194 A B x_3 g_1 y_5 hyp_3) (hyp_4 : hol.proof (hol.eq B y_5 (g_1 x_3)) => thm_216 A B C g_1 p_2 x_3 f_4 y_5 h_6 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((= (h y)) (f x)) ;)

(; dict ;)

def thm_218 : A : hol.type -> B : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> y_5 : hol.term B -> h_6 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (p_2 x_3) -> hyp_2 : hol.proof (hol.forall A (x_7 : hol.term A => hol.imp (p_2 x_7) (hol.eq C (f_4 x_7) (h_6 (g_1 x_7))))) -> hyp_3 : hol.proof (hol.eq B y_5 (g_1 x_3)) -> hol.proof (hol.eq C (h_6 y_5) (f_4 x_3)) :=
  A : hol.type => B : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => y_5 : hol.term B => h_6 : hol.term (hol.arr B C) => hyp_1 : hol.proof (p_2 x_3) => hyp_2 : hol.proof (hol.forall A (x_7 : hol.term A => hol.imp (p_2 x_7) (hol.eq C (f_4 x_7) (h_6 (g_1 x_7))))) => hyp_3 : hol.proof (hol.eq B y_5 (g_1 x_3)) => hol.PROVE_HYP (p_2 x_3) (hol.eq C (h_6 y_5) (f_4 x_3)) (thm_54 A x_3 p_2 hyp_1) (hyp_4 : hol.proof (p_2 x_3) => thm_217 A B C g_1 p_2 x_3 f_4 y_5 h_6 hyp_4 hyp_2 hyp_3).

(; Theorem: |- ((= (h y)) (f x)) ;)

(; dict ;)

def thm_219 : A : hol.type -> B : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> y_5 : hol.term B -> h_6 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (p_2 x_3) -> hyp_2 : hol.proof (hol.forall A (x_7 : hol.term A => hol.imp (p_2 x_7) (hol.eq C (f_4 x_7) (h_6 (g_1 x_7))))) -> hyp_3 : hol.proof (hol.and (p_2 x_3) (hol.eq B y_5 (g_1 x_3))) -> hol.proof (hol.eq C (h_6 y_5) (f_4 x_3)) :=
  A : hol.type => B : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => y_5 : hol.term B => h_6 : hol.term (hol.arr B C) => hyp_1 : hol.proof (p_2 x_3) => hyp_2 : hol.proof (hol.forall A (x_7 : hol.term A => hol.imp (p_2 x_7) (hol.eq C (f_4 x_7) (h_6 (g_1 x_7))))) => hyp_3 : hol.proof (hol.and (p_2 x_3) (hol.eq B y_5 (g_1 x_3))) => hol.PROVE_HYP (hol.eq B y_5 (g_1 x_3)) (hol.eq C (h_6 y_5) (f_4 x_3)) (thm_193 A B p_2 x_3 g_1 y_5 hyp_3) (hyp_4 : hol.proof (hol.eq B y_5 (g_1 x_3)) => thm_218 A B C g_1 p_2 x_3 f_4 y_5 h_6 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((= (h y)) (f x)) ;)

(; dict ;)

def thm_220 : A : hol.type -> B : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> y_5 : hol.term B -> h_6 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.imp (p_2 x_7) (hol.eq C (f_4 x_7) (h_6 (g_1 x_7))))) -> hyp_2 : hol.proof (hol.and (p_2 x_3) (hol.eq B y_5 (g_1 x_3))) -> hol.proof (hol.eq C (h_6 y_5) (f_4 x_3)) :=
  A : hol.type => B : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => y_5 : hol.term B => h_6 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.imp (p_2 x_7) (hol.eq C (f_4 x_7) (h_6 (g_1 x_7))))) => hyp_2 : hol.proof (hol.and (p_2 x_3) (hol.eq B y_5 (g_1 x_3))) => hol.PROVE_HYP (p_2 x_3) (hol.eq C (h_6 y_5) (f_4 x_3)) (thm_191 B A g_1 y_5 x_3 p_2 hyp_2) (hyp_3 : hol.proof (p_2 x_3) => thm_219 A B C g_1 p_2 x_3 f_4 y_5 h_6 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))) ;)

(; dict ;)

def thm_221 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> y_4 : hol.term B -> x_5 : hol.term A -> p_6 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.imp (p_6 x_7) (hol.eq C (f_1 x_7) (h_2 (g_3 x_7))))) -> hol.proof (hol.imp (hol.and (p_6 x_5) (hol.eq B y_4 (g_3 x_5))) (hol.eq C (h_2 y_4) (f_1 x_5))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => x_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_7 : hol.term A => hol.imp (p_6 x_7) (hol.eq C (f_1 x_7) (h_2 (g_3 x_7))))) => hyp_2 : hol.proof (hol.and (p_6 x_5) (hol.eq B y_4 (g_3 x_5))) => thm_220 A B C g_3 p_6 x_5 f_1 y_4 h_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))) ;)

(; dict ;)

def thm_222 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> y_4 : hol.term B -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_5 x_6) (hol.eq C (f_1 x_6) (h_2 (g_3 x_6))))) -> hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_2 y_4) (f_1 x_6)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.imp (p_5 x_6) (hol.eq C (f_1 x_6) (h_2 (g_3 x_6))))) => x_6 : hol.term A => thm_221 C B A f_1 h_2 g_3 y_4 x_6 p_5 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))) ;)

(; dict ;)

def thm_223 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_1 x_5) (h_2 (g_3 x_5))))) -> hol.proof (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6))))) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_1 x_5) (h_2 (g_3 x_5))))) => y_5 : hol.term B => hol.EQ_MP (hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6)))) (hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6)))) (thm_188 C B A f_1 h_2 g_3 y_5 p_4) (thm_222 C B A f_1 h_2 g_3 y_5 p_4 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))) ;)

(; dict ;)

def thm_224 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> h_2 : hol.term (hol.arr B C) -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_1 x_5) (h_2 (g_3 x_5))))) -> hol.proof (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6))))) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => h_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_1 x_5) (h_2 (g_3 x_5))))) => hol.PROVE_HYP (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_1 x_5) (h_2 (g_3 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6))))) (thm_181 B C A g_3 h_2 f_1 p_4 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_1 x_5) (h_2 (g_3 x_5))))) => hol.EQ_MP (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_2 y_5) (f_1 x_6))))) (thm_185 C A B f_1 h_2 g_3 p_4) (thm_223 C A B f_1 h_2 g_3 p_4 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))) ;)

(; dict ;)

def thm_225 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6)))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) => thm_224 C A B f_3 h_2 g_1 p_4 hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))) ;)

(; dict ;)

def thm_226 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6)))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6))))) (hyp_1 : hol.proof (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6))))) => thm_180 C A B f_3 h_2 g_1 p_4 (thm_49 C A B f_3 h_2 g_1 p_4 hyp_1)) (hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) => thm_225 B C A g_1 h_2 f_3 p_4 (thm_181 B C A g_1 h_2 f_3 p_4 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda h. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) ;)

(; dict ;)

def thm_227 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => h_4 : hol.term (hol.arr B C) => thm_226 B C A g_1 h_4 f_2 p_3.

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))))) (= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))))) ;)

(; dict ;)

def thm_228 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))))).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_229 : C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool))) :=
  C : hol.type => B : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool)).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) ;)

(; dict ;)

def thm_230 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6)))))) (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6))))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6)))))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) ;)

(; dict ;)

def thm_231 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6)))))) (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6))))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6)))))) (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6)))))) (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6)))))) (thm_230 B C A g_1 h_2 f_3 p_4) (thm_230 B C A g_1 h_2 f_3 p_4).

(; Theorem: |- (Data.Bool.! \lambda h. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) ;)

(; dict ;)

def thm_232 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))))) -> hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))) ;)

(; dict ;)

def thm_233 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_5 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_6 : hol.term A => hol.imp (p_4 x_6) (hol.eq C (f_3 x_6) (h_5 (g_1 x_6))))) (hol.forall B (y_6 : hol.term B => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_4 x_7) (hol.eq B y_6 (g_1 x_7))) (hol.eq C (h_5 y_6) (f_3 x_7))))))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6)))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_5 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_6 : hol.term A => hol.imp (p_4 x_6) (hol.eq C (f_3 x_6) (h_5 (g_1 x_6))))) (hol.forall B (y_6 : hol.term B => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_4 x_7) (hol.eq B y_6 (g_1 x_7))) (hol.eq C (h_5 y_6) (f_3 x_7))))))) => thm_232 A C B g_1 f_3 p_4 hyp_1 h_2.

(; Theorem: |- ((= \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))) \lambda h. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))) ;)

(; dict ;)

def thm_234 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))))) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6)))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))))) => hol.ABS_THM (hol.arr B C) hol.bool (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))) (h_4 : hol.term (hol.arr B C) => (B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_5 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_6 : hol.term A => hol.imp (p_4 x_6) (hol.eq C (f_3 x_6) (h_5 (g_1 x_6))))) (hol.forall B (y_6 : hol.term B => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_4 x_7) (hol.eq B y_6 (g_1 x_7))) (hol.eq C (h_5 y_6) (f_3 x_7))))))) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6)))))) (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (h_2 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_2 y_5) (f_3 x_6)))))) (thm_231 B C A g_1 h_2 f_3 p_4) (thm_233 B C A g_1 h_2 f_3 p_4 hyp_1)) B C A g_1 h_4 f_2 p_3 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) ;)

(; dict ;)

def thm_235 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))))) => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool)) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (h_4 (g_1 x_5))))) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_1 x_6))) (hol.eq C (h_4 y_5) (f_2 x_6))))) (thm_229 C B) (thm_234 A C B g_1 f_2 p_3 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))) ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))))) ;)

(; dict ;)

def thm_236 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6)))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6)))))) (thm_228 C B A f_1 g_2 p_3) (thm_235 A C B g_2 f_1 p_3 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))))) ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))) ;)

(; dict ;)

def thm_237 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5)))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) => hol.SYM hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) (thm_236 C B A f_1 g_2 p_3 hyp_1).

(; Theorem: |- ((= (\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y)) \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x))))) ;)

(; dict ;)

def thm_238 : A : hol.type -> B : hol.type -> C : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A C) -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr C hol.bool) ((y_5 : hol.term B => __11034_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_4 x_7) (hol.eq B y_5 (g_3 x_7))) (hol.eq C __11034_6 (f_2 x_7)))) y_1) (__11034_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_1 (g_3 x_6))) (hol.eq C __11034_5 (f_2 x_6))))) :=
  A : hol.type => B : hol.type => C : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A C) => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV B (hol.arr C hol.bool) (y_5 : hol.term B => __11034_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_4 x_7) (hol.eq B y_5 (g_3 x_7))) (hol.eq C __11034_6 (f_2 x_7)))) y_1.

(; Theorem: |- ((= (h y)) (h y)) ;)

(; dict ;)

def thm_239 : B : hol.type -> C : hol.type -> y_1 : hol.term B -> h_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq C (h_2 y_1) (h_2 y_1)) :=
  B : hol.type => C : hol.type => y_1 : hol.term B => h_2 : hol.term (hol.arr B C) => hol.REFL C (h_2 y_1).

(; Theorem: |- ((= ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) (h y))) (\lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) (h y))) ;)

(; dict ;)

def thm_240 : A : hol.type -> C : hol.type -> B : hol.type -> h_1 : hol.term (hol.arr B C) -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A C) -> g_4 : hol.term (hol.arr A B) -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_5 x_8) (hol.eq B y_6 (g_4 x_8))) (hol.eq C __11034_7 (f_3 x_8)))) y_2 (h_1 y_2)) ((__11034_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_5 x_7) (hol.eq B y_2 (g_4 x_7))) (hol.eq C __11034_6 (f_3 x_7)))) (h_1 y_2))) :=
  A : hol.type => C : hol.type => B : hol.type => h_1 : hol.term (hol.arr B C) => y_2 : hol.term B => f_3 : hol.term (hol.arr A C) => g_4 : hol.term (hol.arr A B) => p_5 : hol.term (hol.arr A hol.bool) => hol.APP_THM C hol.bool ((y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_5 x_8) (hol.eq B y_6 (g_4 x_8))) (hol.eq C __11034_7 (f_3 x_8)))) y_2) (__11034_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_5 x_7) (hol.eq B y_2 (g_4 x_7))) (hol.eq C __11034_6 (f_3 x_7)))) (h_1 y_2) (h_1 y_2) (thm_238 A B C y_2 f_3 g_4 p_5) (thm_239 B C y_2 h_1).

(; Theorem: |- ((= (\lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) (h y))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))) ;)

(; dict ;)

def thm_241 : B : hol.type -> A : hol.type -> C : hol.type -> h_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> g_3 : hol.term (hol.arr A B) -> y_4 : hol.term B -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__11034_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_5 x_7) (hol.eq B y_4 (g_3 x_7))) (hol.eq C __11034_6 (f_2 x_7)))) (h_1 y_4)) (hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C (h_1 y_4) (f_2 x_6))))) :=
  B : hol.type => A : hol.type => C : hol.type => h_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => p_5 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV C hol.bool (__11034_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_5 x_7) (hol.eq B y_4 (g_3 x_7))) (hol.eq C __11034_6 (f_2 x_7)))) (h_1 y_4).

(; Theorem: |- ((= ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) (h y))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))) ;)

(; dict ;)

def thm_242 : A : hol.type -> C : hol.type -> B : hol.type -> h_1 : hol.term (hol.arr B C) -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A C) -> g_4 : hol.term (hol.arr A B) -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_5 x_8) (hol.eq B y_6 (g_4 x_8))) (hol.eq C __11034_7 (f_3 x_8)))) y_2 (h_1 y_2)) (hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_2 (g_4 x_6))) (hol.eq C (h_1 y_2) (f_3 x_6))))) :=
  A : hol.type => C : hol.type => B : hol.type => h_1 : hol.term (hol.arr B C) => y_2 : hol.term B => f_3 : hol.term (hol.arr A C) => g_4 : hol.term (hol.arr A B) => p_5 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool ((y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_5 x_8) (hol.eq B y_6 (g_4 x_8))) (hol.eq C __11034_7 (f_3 x_8)))) y_2 (h_1 y_2)) ((__11034_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_5 x_7) (hol.eq B y_2 (g_4 x_7))) (hol.eq C __11034_6 (f_3 x_7)))) (h_1 y_2)) (hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_2 (g_4 x_6))) (hol.eq C (h_1 y_2) (f_3 x_6)))) (thm_240 A C B h_1 y_2 f_3 g_4 p_5) (thm_241 B A C h_1 f_3 g_4 y_2 p_5).

(; Theorem: |- ((= \lambda y. ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) (h y))) \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))) ;)

(; dict ;)

def thm_243 : A : hol.type -> C : hol.type -> B : hol.type -> h_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_4 x_8) (hol.eq B y_6 (g_3 x_8))) (hol.eq C __11034_7 (f_2 x_8)))) y_5 (h_1 y_5)) (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_1 y_5) (f_2 x_6))))) :=
  A : hol.type => C : hol.type => B : hol.type => h_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hol.ABS_THM B hol.bool (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_4 x_8) (hol.eq B y_6 (g_3 x_8))) (hol.eq C __11034_7 (f_2 x_8)))) y_5 (h_1 y_5)) (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_1 y_5) (f_2 x_6)))) (y_5 : hol.term B => thm_242 A C B h_1 y_5 f_2 g_3 p_4).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) (h y)))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))) ;)

(; dict ;)

def thm_244 : A : hol.type -> C : hol.type -> B : hol.type -> h_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall B (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_4 x_8) (hol.eq B y_6 (g_3 x_8))) (hol.eq C __11034_7 (f_2 x_8)))) y_5 (h_1 y_5))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_1 y_5) (f_2 x_6)))))) :=
  A : hol.type => C : hol.type => B : hol.type => h_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_4 x_8) (hol.eq B y_6 (g_3 x_8))) (hol.eq C __11034_7 (f_2 x_8)))) y_5 (h_1 y_5)) (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_5 (g_3 x_6))) (hol.eq C (h_1 y_5) (f_2 x_6)))) (thm_182 B) (thm_243 A C B h_1 f_2 g_3 p_4).

(; Theorem: |- ((= \lambda h. (Data.Bool.! \lambda y. ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) (h y)))) \lambda h. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))) ;)

(; dict ;)

def thm_245 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_5 (h_4 y_5))) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6)))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.ABS_THM (hol.arr B C) hol.bool (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_5 (h_4 y_5))) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))) (h_4 : hol.term (hol.arr B C) => thm_244 A C B h_4 f_1 g_2 p_3).

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) (h y))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) ;)

(; dict ;)

def thm_246 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_5 (h_4 y_5)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool)) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_5 (h_4 y_5))) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))) (thm_229 C B) (thm_245 A C B f_1 g_2 p_3).

(; Theorem: |- ((= (= (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) (h y)))))) (= (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))))) ;)

(; dict ;)

def thm_247 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_5 (h_4 y_5))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6)))))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_5 (h_4 y_5)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6)))))) thm_198 (thm_246 A C B f_1 g_2 p_3).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_248 : C : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr C hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool))) :=
  C : hol.type => hol.REFL (hol.arr (hol.arr C hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool)).

(; Theorem: |- ((= y) y) ;)

(; dict ;)

def thm_249 : C : hol.type -> y_1 : hol.term C -> hol.proof (hol.eq C y_1 y_1) :=
  C : hol.type => y_1 : hol.term C => hol.REFL C y_1.

(; Theorem: |- ((= ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) y)) (\lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y)) ;)

(; dict ;)

def thm_250 : A : hol.type -> C : hol.type -> B : hol.type -> y_1 : hol.term C -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A C) -> g_4 : hol.term (hol.arr A B) -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_5 x_8) (hol.eq B y_6 (g_4 x_8))) (hol.eq C __11034_7 (f_3 x_8)))) y_2 y_1) ((__11034_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_5 x_7) (hol.eq B y_2 (g_4 x_7))) (hol.eq C __11034_6 (f_3 x_7)))) y_1)) :=
  A : hol.type => C : hol.type => B : hol.type => y_1 : hol.term C => y_2 : hol.term B => f_3 : hol.term (hol.arr A C) => g_4 : hol.term (hol.arr A B) => p_5 : hol.term (hol.arr A hol.bool) => hol.APP_THM C hol.bool ((y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_5 x_8) (hol.eq B y_6 (g_4 x_8))) (hol.eq C __11034_7 (f_3 x_8)))) y_2) (__11034_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_5 x_7) (hol.eq B y_2 (g_4 x_7))) (hol.eq C __11034_6 (f_3 x_7)))) y_1 y_1 (thm_238 A B C y_2 f_3 g_4 p_5) (thm_249 C y_1).

(; Theorem: |- ((= (\lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x))))) ;)

(; dict ;)

def thm_251 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term C -> f_2 : hol.term (hol.arr A C) -> g_3 : hol.term (hol.arr A B) -> y_4 : hol.term B -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__11034_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_5 x_7) (hol.eq B y_4 (g_3 x_7))) (hol.eq C __11034_6 (f_2 x_7)))) y_1) (hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_4 (g_3 x_6))) (hol.eq C y_1 (f_2 x_6))))) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term C => f_2 : hol.term (hol.arr A C) => g_3 : hol.term (hol.arr A B) => y_4 : hol.term B => p_5 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV C hol.bool (__11034_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_5 x_7) (hol.eq B y_4 (g_3 x_7))) (hol.eq C __11034_6 (f_2 x_7)))) y_1.

(; Theorem: |- ((= ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) y)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x))))) ;)

(; dict ;)

def thm_252 : A : hol.type -> C : hol.type -> B : hol.type -> y_1 : hol.term C -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A C) -> g_4 : hol.term (hol.arr A B) -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_5 x_8) (hol.eq B y_6 (g_4 x_8))) (hol.eq C __11034_7 (f_3 x_8)))) y_2 y_1) (hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_2 (g_4 x_6))) (hol.eq C y_1 (f_3 x_6))))) :=
  A : hol.type => C : hol.type => B : hol.type => y_1 : hol.term C => y_2 : hol.term B => f_3 : hol.term (hol.arr A C) => g_4 : hol.term (hol.arr A B) => p_5 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool ((y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_5 x_8) (hol.eq B y_6 (g_4 x_8))) (hol.eq C __11034_7 (f_3 x_8)))) y_2 y_1) ((__11034_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_5 x_7) (hol.eq B y_2 (g_4 x_7))) (hol.eq C __11034_6 (f_3 x_7)))) y_1) (hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.eq B y_2 (g_4 x_6))) (hol.eq C y_1 (f_3 x_6)))) (thm_250 A C B y_1 y_2 f_3 g_4 p_5) (thm_251 B A C y_1 f_3 g_4 y_2 p_5).

(; Theorem: |- ((= \lambda y. ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) y)) \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x))))) ;)

(; dict ;)

def thm_253 : A : hol.type -> B : hol.type -> C : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A C) -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr C hol.bool) (y_5 : hol.term C => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_4 x_8) (hol.eq B y_6 (g_3 x_8))) (hol.eq C __11034_7 (f_2 x_8)))) y_1 y_5) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_1 (g_3 x_6))) (hol.eq C y_5 (f_2 x_6))))) :=
  A : hol.type => B : hol.type => C : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A C) => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hol.ABS_THM C hol.bool (y_5 : hol.term C => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_4 x_8) (hol.eq B y_6 (g_3 x_8))) (hol.eq C __11034_7 (f_2 x_8)))) y_1 y_5) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_1 (g_3 x_6))) (hol.eq C y_5 (f_2 x_6)))) (y_5 : hol.term C => thm_252 A C B y_5 y_1 f_2 g_3 p_4).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) y))) (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))))) ;)

(; dict ;)

def thm_254 : A : hol.type -> B : hol.type -> C : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A C) -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_4 x_8) (hol.eq B y_6 (g_3 x_8))) (hol.eq C __11034_7 (f_2 x_8)))) y_1 y_5)) (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_1 (g_3 x_6))) (hol.eq C y_5 (f_2 x_6)))))) :=
  A : hol.type => B : hol.type => C : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A C) => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr C hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool)) (y_5 : hol.term C => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_4 x_8) (hol.eq B y_6 (g_3 x_8))) (hol.eq C __11034_7 (f_2 x_8)))) y_1 y_5) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_1 (g_3 x_6))) (hol.eq C y_5 (f_2 x_6)))) (thm_248 C) (thm_253 A B C y_1 f_2 g_3 p_4).

(; Theorem: |- ((= \lambda y. (Data.Bool.? \lambda y. ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) y))) \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))))) ;)

(; dict ;)

def thm_255 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_4 y_5)) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.ABS_THM B hol.bool (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_4 y_5)) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))) (y_4 : hol.term B => thm_254 A B C y_4 f_1 g_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) y)))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x))))))) ;)

(; dict ;)

def thm_256 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_4 y_5))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_4 y_5)) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))) (thm_182 B) (thm_255 A C B f_1 g_2 p_3).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) (h y))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) y))))) ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))))))) ;)

(; dict ;)

def thm_257 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_5 (h_4 y_5)))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_4 y_5)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6)))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_5 (h_4 y_5))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_4 y_5))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) (thm_247 A C B f_1 g_2 p_3) (thm_256 A C B f_1 g_2 p_3).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))))) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))))) ;)

(; dict ;)

def thm_258 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. ((r y) (h y))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. ((r y) y))))) ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. ((r y) (h y))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. ((r y) y))))) ;)

(; dict ;)

def thm_259 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (y_3 : hol.term A => r_1 y_3 (h_2 y_3)))) (hol.forall A (y_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 y_2 y_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (y_3 : hol.term A => r_1 y_3 (h_2 y_3)))) (hol.forall A (y_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 y_2 y_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (y_3 : hol.term A => r_1 y_3 (h_2 y_3)))) (hol.forall A (y_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 y_2 y_3)))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))))) ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. ((r y) (h y))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. ((r y) y))))) ;)

(; dict ;)

def thm_260 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (y_3 : hol.term A => r_1 y_3 (h_2 y_3)))) (hol.forall A (y_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 y_2 y_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (y_3 : hol.term A => r_1 y_3 (h_2 y_3)))) (hol.forall A (y_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 y_2 y_3)))) (thm_258 B A r_1) (thm_259 B A r_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_261 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool)))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr B hol.bool))).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_262 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) ;)

(; dict ;)

def thm_263 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (thm_262 B A r_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) ;)

(; dict ;)

def thm_264 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_265 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) => hol.SYM hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (thm_264 B A r_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))))) ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))))) ;)

(; dict ;)

def thm_266 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.PROP_EXT (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) => thm_263 B A r_1 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) => thm_265 B A r_1 hyp_1).

(; Theorem: |- ((= \lambda r. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x)))))) \lambda r. ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))))) ;)

(; dict ;)

def thm_267 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B hol.bool)) hol.bool (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_266 B A r_1).

(; Theorem: |- ((= (Data.Bool.! \lambda r. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))))) (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))))) ;)

(; dict ;)

def thm_268 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B hol.bool)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B hol.bool))) (hol.forall (hol.arr A (hol.arr B hol.bool))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3))))) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (thm_261 B A) (thm_267 B A).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))))) ;)

(; dict ;)

def thm_269 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))))) (hol.forall (hol.arr A (hol.arr B hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))))) (thm_268 B A) (thm_9 B A).

(; Theorem: |- ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_270 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_269 B A r_1.

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. ((r y) (h y))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. ((r y) y)))) ;)

(; dict ;)

def thm_271 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (y_3 : hol.term A => r_1 y_3 (h_2 y_3)))) (hol.forall A (y_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 y_2 y_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (y_3 : hol.term A => r_1 y_3 (h_2 y_3)))) (hol.forall A (y_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 y_2 y_3)))) (thm_260 B A r_1) (thm_270 B A r_1).

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. ((r y) (h y))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. ((r y) y)))) ;)

(; dict ;)

def thm_272 : C : hol.type -> B : hol.type -> r_1 : hol.term (hol.arr B (hol.arr C hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_2 : hol.term (hol.arr B C) => hol.forall B (y_3 : hol.term B => r_1 y_3 (h_2 y_3)))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_3 : hol.term C => r_1 y_2 y_3)))) :=
  C : hol.type => B : hol.type => r_1 : hol.term (hol.arr B (hol.arr C hol.bool)) => (B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_271 B A r_1) C B r_1.

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) (h y))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. ((\lambda y. \lambda _11034. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= _11034) (f x)))) y) y)))) ;)

(; dict ;)

def thm_273 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_5 (h_4 y_5)))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_4 y_5)))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => (C : hol.type => B : hol.type => r_1 : hol.term (hol.arr B (hol.arr C hol.bool)) => thm_272 C B r_1) C B (y_4 : hol.term B => __11034_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C __11034_5 (f_1 x_6)))).

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x))))))) ;)

(; dict ;)

def thm_274 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6)))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_5 (h_4 y_5)))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => (y_6 : hol.term B => __11034_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_3 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C __11034_7 (f_1 x_8)))) y_4 y_5)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6)))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))))) (thm_257 A C B f_1 g_2 p_3) (thm_273 A C B f_1 g_2 p_3).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))))) ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))))))) ;)

(; dict ;)

def thm_275 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6)))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) (thm_228 C B A f_1 g_2 p_3) (thm_274 A C B f_1 g_2 p_3).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))))))) ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x)))))))) ;)

(; dict ;)

def thm_276 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6)))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))))) (thm_275 C B A f_1 g_2 p_3).

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))))) ;)

(; dict ;)

def thm_277 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) -> hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) => hyp_1.

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))) \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_278 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))) (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))) \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_279 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))) (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))) (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))) (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))) (thm_278 C B A f_1 g_2 p_3) (thm_278 C B A f_1 g_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) ;)

(; dict ;)

def thm_280 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))) (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))) (thm_50 A) (thm_279 C B A f_1 g_2 p_3).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))) \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_281 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5))) (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5))).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))) \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_282 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5))) (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5))) (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5))) (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5))) (thm_281 C B A f_1 g_2 x_3 p_4) (thm_281 C B A f_1 g_2 x_3 p_4).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_283 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5)))) (hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5))) (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5))) (thm_50 A) (thm_282 C B A f_1 g_2 x_3 p_4).

(; Theorem: |- ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y)))) ;)

(; dict ;)

def thm_284 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_4 x_3) (hol.and (p_4 y_2) (hol.eq B (g_1 x_3) (g_1 y_2)))) -> hol.proof (hol.and (p_4 x_3) (hol.and (p_4 y_2) (hol.eq B (g_1 x_3) (g_1 y_2)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_4 x_3) (hol.and (p_4 y_2) (hol.eq B (g_1 x_3) (g_1 y_2)))) => hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_285 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_4 x_3) (hol.and (p_4 y_2) (hol.eq B (g_1 x_3) (g_1 y_2)))) -> hol.proof (p_4 x_3) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_4 x_3) (hol.and (p_4 y_2) (hol.eq B (g_1 x_3) (g_1 y_2)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_167 q_1 p_2 hyp_1) (hol.and (p_4 y_2) (hol.eq B (g_1 x_3) (g_1 y_2))) (p_4 x_3) hyp_1.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_286 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> y_2 : hol.term A -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_4 x_3) (hol.and (p_4 y_2) (hol.eq B (g_1 x_3) (g_1 y_2)))) -> hol.proof (p_4 x_3) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => y_2 : hol.term A => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_4 x_3) (hol.and (p_4 y_2) (hol.eq B (g_1 x_3) (g_1 y_2)))) => hol.PROVE_HYP (hol.and (p_4 x_3) (hol.and (p_4 y_2) (hol.eq B (g_1 x_3) (g_1 y_2)))) (p_4 x_3) (thm_284 B A g_1 y_2 x_3 p_4 hyp_1) (hyp_2 : hol.proof (hol.and (p_4 x_3) (hol.and (p_4 y_2) (hol.eq B (g_1 x_3) (g_1 y_2)))) => thm_285 B A g_1 y_2 x_3 p_4 hyp_2).

(; Theorem: |- ((Data.Bool./\ (p y)) ((= (g x)) (g y))) ;)

(; dict ;)

def thm_287 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_4 x_1) (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3)))) -> hol.proof (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_4 x_1) (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_128 p_1 q_2 hyp_1) (p_4 x_1) (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) hyp_1.

(; Theorem: |- ((Data.Bool./\ (p y)) ((= (g x)) (g y))) ;)

(; dict ;)

def thm_288 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_4 x_1) (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3)))) -> hol.proof (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_4 x_1) (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3)))) => hol.PROVE_HYP (hol.and (p_4 x_1) (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3)))) (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) (thm_284 B A g_2 y_3 x_1 p_4 hyp_1) (hyp_2 : hol.proof (hol.and (p_4 x_1) (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3)))) => thm_287 B A x_1 g_2 y_3 p_4 hyp_2).

(; Theorem: |- ((Data.Bool./\ (p y)) ((= (g x)) (g y))) ;)

(; dict ;)

def thm_289 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) -> hol.proof (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) => hyp_1.

(; Theorem: |- (p y) ;)

(; dict ;)

def thm_290 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) -> hol.proof (p_4 y_3) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_167 q_1 p_2 hyp_1) (hol.eq B (g_2 x_1) (g_2 y_3)) (p_4 y_3) hyp_1.

(; Theorem: |- (p y) ;)

(; dict ;)

def thm_291 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) -> hol.proof (p_4 y_3) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) => hol.PROVE_HYP (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) (p_4 y_3) (thm_289 B A x_1 g_2 y_3 p_4 hyp_1) (hyp_2 : hol.proof (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) => thm_290 B A x_1 g_2 y_3 p_4 hyp_2).

(; Theorem: |- ((= (g x)) (g y)) ;)

(; dict ;)

def thm_292 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> y_2 : hol.term A -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.and (p_1 y_2) (hol.eq B (g_4 x_3) (g_4 y_2))) -> hol.proof (hol.eq B (g_4 x_3) (g_4 y_2)) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A hol.bool) => y_2 : hol.term A => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.and (p_1 y_2) (hol.eq B (g_4 x_3) (g_4 y_2))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_128 p_1 q_2 hyp_1) (p_1 y_2) (hol.eq B (g_4 x_3) (g_4 y_2)) hyp_1.

(; Theorem: |- ((= (g x)) (g y)) ;)

(; dict ;)

def thm_293 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> y_2 : hol.term A -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.and (p_1 y_2) (hol.eq B (g_4 x_3) (g_4 y_2))) -> hol.proof (hol.eq B (g_4 x_3) (g_4 y_2)) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr A hol.bool) => y_2 : hol.term A => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.and (p_1 y_2) (hol.eq B (g_4 x_3) (g_4 y_2))) => hol.PROVE_HYP (hol.and (p_1 y_2) (hol.eq B (g_4 x_3) (g_4 y_2))) (hol.eq B (g_4 x_3) (g_4 y_2)) (thm_289 B A x_3 g_4 y_2 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (p_1 y_2) (hol.eq B (g_4 x_3) (g_4 y_2))) => thm_292 A B p_1 y_2 x_3 g_4 hyp_2).

(; Theorem: |- (p y) ;)

(; dict ;)

def thm_294 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 y_1) -> hol.proof (p_2 y_1) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 y_1) => hyp_1.

(; Theorem: |- ((= (g x)) (g y)) ;)

(; dict ;)

def thm_295 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq B (g_3 x_2) (g_3 y_1)) -> hol.proof (hol.eq B (g_3 x_2) (g_3 y_1)) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq B (g_3 x_2) (g_3 y_1)) => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_296 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_297 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) => hol.EQ_MP p_1 q_2 (thm_296 q_2 p_1 hyp_2) (thm_122 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_298 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_2 : hol.proof p_2 => thm_297 p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= p) q)) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_299 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 q_1) (hol.imp p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => thm_298 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_300 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_299 q_1 p_2) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_301 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_302 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_303 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_301 A P_1) (thm_302 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_304 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_305 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_10 A) (thm_304 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_306 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_303 A P_1) (thm_305 A P_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_307 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_300 A P_1 (thm_306 A P_1).

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_308 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)) ;)

(; dict ;)

def thm_309 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_307 A P_1 (thm_308 A P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_310 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_309 A P_2 hyp_1 Q_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_311 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_312 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof Q_2 :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_310 A Q_2 P_1 hyp_2 (thm_311 A Q_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) Q) ;)

(; dict ;)

def thm_313 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_312 A P_2 Q_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) ((Data.Bool.==> (Data.Bool.? P)) Q)) ;)

(; dict ;)

def thm_314 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => thm_313 A Q_1 P_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x')) ((= (g x)) (g x')))) ((= y) (f x')))) x)) ((= (f x)) (f y))))) ((Data.Bool.==> (Data.Bool.? \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x')) ((= (g x)) (g x')))) ((= y) (f x')))))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_315 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall C (x_6 : hol.term C => hol.imp ((y_7 : hol.term C => hol.forall A (x_27_8 : hol.term A => hol.imp (hol.and (p_5 x_27_8) (hol.eq B (g_4 x_3) (g_4 x_27_8))) (hol.eq C y_7 (f_2 x_27_8)))) x_6) (hol.eq C (f_2 x_3) (f_2 y_1)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_5 x_27_7) (hol.eq B (g_4 x_3) (g_4 x_27_7))) (hol.eq C y_6 (f_2 x_27_7))))) (hol.eq C (f_2 x_3) (f_2 y_1)))) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A C) => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => p_5 : hol.term (hol.arr A hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_314 A Q_1 P_2) C (hol.eq C (f_2 x_3) (f_2 y_1)) (y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_5 x_27_7) (hol.eq B (g_4 x_3) (g_4 x_27_7))) (hol.eq C y_6 (f_2 x_27_7)))).

(; Theorem: |- (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x')) ((= (g x)) (g x')))) ((= y') (f x')))) ;)

(; dict ;)

def thm_316 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> y_27_2 : hol.term C -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_27_6 : hol.term A => hol.imp (hol.and (p_5 x_27_6) (hol.eq B (g_4 x_3) (g_4 x_27_6))) (hol.eq C y_27_2 (f_1 x_27_6)))) -> hol.proof (hol.forall A (x_27_6 : hol.term A => hol.imp (hol.and (p_5 x_27_6) (hol.eq B (g_4 x_3) (g_4 x_27_6))) (hol.eq C y_27_2 (f_1 x_27_6)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => y_27_2 : hol.term C => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_27_6 : hol.term A => hol.imp (hol.and (p_5 x_27_6) (hol.eq B (g_4 x_3) (g_4 x_27_6))) (hol.eq C y_27_2 (f_1 x_27_6)))) => hyp_1.

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_317 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= ((= (p y)) Data.Bool.T)) ((= (p y)) Data.Bool.T)) ;)

(; dict ;)

def thm_318 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 y_1) hol.true) (hol.eq hol.bool (p_2 y_1) hol.true)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_2 y_1) hol.true).

(; Theorem: |- ((= ((= (p y)) Data.Bool.T)) ((= (p y)) Data.Bool.T)) ;)

(; dict ;)

def thm_319 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_2 y_1) hol.true) (hol.eq hol.bool (p_2 y_1) hol.true)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_2 y_1) hol.true) (hol.eq hol.bool (p_2 y_1) hol.true) (hol.eq hol.bool (p_2 y_1) hol.true) (thm_318 A y_1 p_2) (thm_318 A y_1 p_2).

(; Theorem: |- ((= (p y)) ((= (p y)) Data.Bool.T)) ;)

(; dict ;)

def thm_320 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_2 y_1) (hol.eq hol.bool (p_2 y_1) hol.true)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => (t_1 : hol.term hol.bool => thm_84 t_1) (p_2 y_1).

(; Theorem: |- ((= (p y)) Data.Bool.T) ;)

(; dict ;)

def thm_321 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 y_1) -> hol.proof (hol.eq hol.bool (p_2 y_1) hol.true) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 y_1) => hol.EQ_MP (p_2 y_1) (hol.eq hol.bool (p_2 y_1) hol.true) (thm_320 A y_1 p_2) (thm_294 A y_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool./\ (p y))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_322 : A : hol.type -> y_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_2 y_1) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (p_2 y_1)) (hol.and hol.true)) :=
  A : hol.type => y_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_2 y_1) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (p_2 y_1) hol.true thm_76 (hol.EQ_MP (hol.eq hol.bool (p_2 y_1) hol.true) (hol.eq hol.bool (p_2 y_1) hol.true) (thm_319 A y_1 p_2) (thm_321 A y_1 p_2 hyp_1)).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_323 : B : hol.type -> hol.proof (hol.eq (hol.arr B (hol.arr B hol.bool)) (hol.eq B) (hol.eq B)) :=
  B : hol.type => hol.REFL (hol.arr B (hol.arr B hol.bool)) (hol.eq B).

(; Theorem: |- ((= (= (g x))) (= (g y))) ;)

(; dict ;)

def thm_324 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq B (g_3 x_2) (g_3 y_1)) -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B (g_3 x_2)) (hol.eq B (g_3 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq B (g_3 x_2) (g_3 y_1)) => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) (g_3 x_2) (g_3 y_1) (thm_323 B) (thm_295 A B y_1 x_2 g_3 hyp_1).

(; Theorem: |- ((= (g y)) (g y)) ;)

(; dict ;)

def thm_325 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (g_2 y_1) (g_2 y_1)) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => g_2 : hol.term (hol.arr A B) => hol.REFL B (g_2 y_1).

(; Theorem: |- ((= ((= (g x)) (g y))) ((= (g y)) (g y))) ;)

(; dict ;)

def thm_326 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq B (g_3 x_2) (g_3 y_1)) -> hol.proof (hol.eq hol.bool (hol.eq B (g_3 x_2) (g_3 y_1)) (hol.eq B (g_3 y_1) (g_3 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq B (g_3 x_2) (g_3 y_1)) => hol.APP_THM B hol.bool (hol.eq B (g_3 x_2)) (hol.eq B (g_3 y_1)) (g_3 y_1) (g_3 y_1) (thm_324 A B y_1 x_2 g_3 hyp_1) (thm_325 A B y_1 g_3).

(; Theorem: |- ((= ((= (g y)) (g y))) Data.Bool.T) ;)

(; dict ;)

def thm_327 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (g_2 y_1) (g_2 y_1)) hol.true) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => g_2 : hol.term (hol.arr A B) => (B : hol.type => x_1 : hol.term B => thm_97 B x_1) B (g_2 y_1).

(; Theorem: |- ((= ((= (g x)) (g y))) Data.Bool.T) ;)

(; dict ;)

def thm_328 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq B (g_3 x_2) (g_3 y_1)) -> hol.proof (hol.eq hol.bool (hol.eq B (g_3 x_2) (g_3 y_1)) hol.true) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq B (g_3 x_2) (g_3 y_1)) => hol.TRANS hol.bool (hol.eq B (g_3 x_2) (g_3 y_1)) (hol.eq B (g_3 y_1) (g_3 y_1)) hol.true (thm_326 A B y_1 x_2 g_3 hyp_1) (thm_327 A B y_1 g_3).

(; Theorem: |- ((= ((Data.Bool./\ (p y)) ((= (g x)) (g y)))) ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_329 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_4 y_3) -> hyp_2 : hol.proof (hol.eq B (g_2 x_1) (g_2 y_3)) -> hol.proof (hol.eq hol.bool (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) (hol.and hol.true hol.true)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_4 y_3) => hyp_2 : hol.proof (hol.eq B (g_2 x_1) (g_2 y_3)) => hol.APP_THM hol.bool hol.bool (hol.and (p_4 y_3)) (hol.and hol.true) (hol.eq B (g_2 x_1) (g_2 y_3)) hol.true (thm_322 A y_3 p_4 hyp_1) (thm_328 A B y_3 x_1 g_2 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ (p y)) ((= (g x)) (g y)))) Data.Bool.T) ;)

(; dict ;)

def thm_330 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_4 y_3) -> hyp_2 : hol.proof (hol.eq B (g_2 x_1) (g_2 y_3)) -> hol.proof (hol.eq hol.bool (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) hol.true) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_4 y_3) => hyp_2 : hol.proof (hol.eq B (g_2 x_1) (g_2 y_3)) => hol.TRANS hol.bool (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) (hol.and hol.true hol.true) hol.true (thm_329 B A x_1 g_2 y_3 p_4 hyp_1 hyp_2) thm_170.

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_331 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_4 y_3) -> hyp_2 : hol.proof (hol.eq B (g_2 x_1) (g_2 y_3)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3)))) (hol.imp hol.true)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_4 y_3) => hyp_2 : hol.proof (hol.eq B (g_2 x_1) (g_2 y_3)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.and (p_4 y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) hol.true thm_317 (thm_330 B A x_1 g_2 y_3 p_4 hyp_1 hyp_2).

(; Theorem: |- ((= ((= y') (f y))) ((= y') (f y))) ;)

(; dict ;)

def thm_332 : A : hol.type -> C : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> y_27_3 : hol.term C -> hol.proof (hol.eq hol.bool (hol.eq C y_27_3 (f_2 y_1)) (hol.eq C y_27_3 (f_2 y_1))) :=
  A : hol.type => C : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A C) => y_27_3 : hol.term C => hol.REFL hol.bool (hol.eq C y_27_3 (f_2 y_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (p y)) ((= (g x)) (g y)))) ((= y') (f y)))) ((Data.Bool.==> Data.Bool.T) ((= y') (f y)))) ;)

(; dict ;)

def thm_333 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> y_27_2 : hol.term C -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> y_5 : hol.term A -> p_6 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_6 y_5) -> hyp_2 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_5)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (p_6 y_5) (hol.eq B (g_4 x_3) (g_4 y_5))) (hol.eq C y_27_2 (f_1 y_5))) (hol.imp hol.true (hol.eq C y_27_2 (f_1 y_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => y_27_2 : hol.term C => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => y_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_6 y_5) => hyp_2 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_5)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.and (p_6 y_5) (hol.eq B (g_4 x_3) (g_4 y_5)))) (hol.imp hol.true) (hol.eq C y_27_2 (f_1 y_5)) (hol.eq C y_27_2 (f_1 y_5)) (thm_331 B A x_3 g_4 y_5 p_6 hyp_1 hyp_2) (thm_332 A C y_5 f_1 y_27_2).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_334 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_335 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_334 t_1) (thm_334 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_336 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_337 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_336 thm_336.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) ;)

(; dict ;)

def thm_338 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_102 thm_337.

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_339 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_11 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_340 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_136 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_341 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_334 t_1) (thm_339 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => thm_340 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_342 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_343 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_342 t_1) (thm_342 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_344 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_12 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_345 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_136 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_346 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_343 t_1) (thm_344 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => thm_345 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_347 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_348 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_347 t_1) (thm_347 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_349 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_13 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_350 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_136 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_351 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_348 t_1) (thm_349 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => thm_350 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_352 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_353 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_352 t_1) (thm_352 t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_354 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_355 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_354 thm_354.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_356 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_102 thm_355.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_357 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_84 t_1) (hol.imp t_1 t_1).

(; Theorem: |- ((Data.Bool.==> t) t) ;)

(; dict ;)

def thm_358 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 t_1) :=
  t_1 : hol.term hol.bool => thm_14 t_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_359 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_357 t_1) (thm_358 t_1).

(; Theorem: |- ((= (= ((Data.Bool.==> t) t))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_360 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp t_1 t_1) hol.true thm_198 (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_352 t_1) (thm_359 t_1)).

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_361 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_362 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true) hol.true hol.true (thm_360 t_1) thm_361.

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_363 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true) (thm_362 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_364 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_363 t_1) thm_361.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_365 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_136 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_366 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_353 t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) thm_356 thm_364 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => thm_365 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_367 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_368 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_367 t_1) (thm_367 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_369 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_15 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_370 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_366 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_368 t_1) (thm_369 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_371 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_351 t_1) (thm_370 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_372 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (thm_346 t_1) (thm_371 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_373 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (thm_341 t_1) (thm_372 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_374 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => thm_373 t_1.

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_375 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_167 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_376 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) thm_338 thm_374 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => thm_375 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) ((= y') (f y)))) ((= y') (f y))) ;)

(; dict ;)

def thm_377 : A : hol.type -> C : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> y_27_3 : hol.term C -> hol.proof (hol.eq hol.bool (hol.imp hol.true (hol.eq C y_27_3 (f_2 y_1))) (hol.eq C y_27_3 (f_2 y_1))) :=
  A : hol.type => C : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A C) => y_27_3 : hol.term C => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_335 t_1) (thm_376 t_1)) (hol.eq C y_27_3 (f_2 y_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (p y)) ((= (g x)) (g y)))) ((= y') (f y)))) ((= y') (f y))) ;)

(; dict ;)

def thm_378 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> y_27_2 : hol.term C -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> y_5 : hol.term A -> p_6 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_6 y_5) -> hyp_2 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_5)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (p_6 y_5) (hol.eq B (g_4 x_3) (g_4 y_5))) (hol.eq C y_27_2 (f_1 y_5))) (hol.eq C y_27_2 (f_1 y_5))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => y_27_2 : hol.term C => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => y_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_6 y_5) => hyp_2 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_5)) => hol.TRANS hol.bool (hol.imp (hol.and (p_6 y_5) (hol.eq B (g_4 x_3) (g_4 y_5))) (hol.eq C y_27_2 (f_1 y_5))) (hol.imp hol.true (hol.eq C y_27_2 (f_1 y_5))) (hol.eq C y_27_2 (f_1 y_5)) (thm_333 C B A f_1 y_27_2 x_3 g_4 y_5 p_6 hyp_1 hyp_2) (thm_377 A C y_5 f_1 y_27_2).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ (p y)) ((= (g x)) (g y)))) ((= y') (f y))))) (Data.Bool.==> ((= y') (f y)))) ;)

(; dict ;)

def thm_379 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> y_27_2 : hol.term C -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> y_5 : hol.term A -> p_6 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_6 y_5) -> hyp_2 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_5)) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.imp (hol.and (p_6 y_5) (hol.eq B (g_4 x_3) (g_4 y_5))) (hol.eq C y_27_2 (f_1 y_5)))) (hol.imp (hol.eq C y_27_2 (f_1 y_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => y_27_2 : hol.term C => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => y_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_6 y_5) => hyp_2 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_5)) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.imp (hol.and (p_6 y_5) (hol.eq B (g_4 x_3) (g_4 y_5))) (hol.eq C y_27_2 (f_1 y_5))) (hol.eq C y_27_2 (f_1 y_5)) thm_317 (thm_378 C B A f_1 y_27_2 x_3 g_4 y_5 p_6 hyp_1 hyp_2).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool./\ (p x)) ((= (g x)) (g x))))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_380 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.and (p_3 x_2) (hol.eq B (g_1 x_2) (g_1 x_2)))) (hol.imp hol.true)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.and (p_3 x_2) (hol.eq B (g_1 x_2) (g_1 x_2))) hol.true thm_317 (thm_171 B A g_1 x_2 p_3 hyp_1).

(; Theorem: |- ((= ((= y') (f x))) ((= y') (f x))) ;)

(; dict ;)

def thm_381 : A : hol.type -> C : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> y_27_3 : hol.term C -> hol.proof (hol.eq hol.bool (hol.eq C y_27_3 (f_2 x_1)) (hol.eq C y_27_3 (f_2 x_1))) :=
  A : hol.type => C : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A C) => y_27_3 : hol.term C => hol.REFL hol.bool (hol.eq C y_27_3 (f_2 x_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) ((= y') (f x)))) ((Data.Bool.==> Data.Bool.T) ((= y') (f x)))) ;)

(; dict ;)

def thm_382 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> y_27_2 : hol.term C -> g_3 : hol.term (hol.arr A B) -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_5 x_4) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (p_5 x_4) (hol.eq B (g_3 x_4) (g_3 x_4))) (hol.eq C y_27_2 (f_1 x_4))) (hol.imp hol.true (hol.eq C y_27_2 (f_1 x_4)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => y_27_2 : hol.term C => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_5 x_4) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.and (p_5 x_4) (hol.eq B (g_3 x_4) (g_3 x_4)))) (hol.imp hol.true) (hol.eq C y_27_2 (f_1 x_4)) (hol.eq C y_27_2 (f_1 x_4)) (thm_380 B A g_3 x_4 p_5 hyp_1) (thm_381 A C x_4 f_1 y_27_2).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) ((= y') (f x)))) ((= y') (f x))) ;)

(; dict ;)

def thm_383 : A : hol.type -> C : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> y_27_3 : hol.term C -> hol.proof (hol.eq hol.bool (hol.imp hol.true (hol.eq C y_27_3 (f_2 x_1))) (hol.eq C y_27_3 (f_2 x_1))) :=
  A : hol.type => C : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A C) => y_27_3 : hol.term C => (t_1 : hol.term hol.bool => thm_339 t_1) (hol.eq C y_27_3 (f_2 x_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) ((= y') (f x)))) ((= y') (f x))) ;)

(; dict ;)

def thm_384 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> y_27_2 : hol.term C -> g_3 : hol.term (hol.arr A B) -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_5 x_4) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (p_5 x_4) (hol.eq B (g_3 x_4) (g_3 x_4))) (hol.eq C y_27_2 (f_1 x_4))) (hol.eq C y_27_2 (f_1 x_4))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => y_27_2 : hol.term C => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_5 x_4) => hol.TRANS hol.bool (hol.imp (hol.and (p_5 x_4) (hol.eq B (g_3 x_4) (g_3 x_4))) (hol.eq C y_27_2 (f_1 x_4))) (hol.imp hol.true (hol.eq C y_27_2 (f_1 x_4))) (hol.eq C y_27_2 (f_1 x_4)) (thm_382 C B A f_1 y_27_2 g_3 x_4 p_5 hyp_1) (thm_383 A C x_4 f_1 y_27_2).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) ((= y') (f x))))) (Data.Bool.==> ((= y') (f x)))) ;)

(; dict ;)

def thm_385 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> y_27_2 : hol.term C -> g_3 : hol.term (hol.arr A B) -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_5 x_4) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.imp (hol.and (p_5 x_4) (hol.eq B (g_3 x_4) (g_3 x_4))) (hol.eq C y_27_2 (f_1 x_4)))) (hol.imp (hol.eq C y_27_2 (f_1 x_4)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => y_27_2 : hol.term C => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_5 x_4) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.imp (hol.and (p_5 x_4) (hol.eq B (g_3 x_4) (g_3 x_4))) (hol.eq C y_27_2 (f_1 x_4))) (hol.eq C y_27_2 (f_1 x_4)) thm_317 (thm_384 C B A f_1 y_27_2 g_3 x_4 p_5 hyp_1).

(; Theorem: |- ((= ((= (f x)) (f y))) ((= (f x)) (f y))) ;)

(; dict ;)

def thm_386 : A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq C (f_3 x_2) (f_3 y_1)) (hol.eq C (f_3 x_2) (f_3 y_1))) :=
  A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A C) => hol.REFL hol.bool (hol.eq C (f_3 x_2) (f_3 y_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) ((= y') (f x)))) ((= (f x)) (f y)))) ((Data.Bool.==> ((= y') (f x))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_387 : C : hol.type -> B : hol.type -> A : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> y_27_3 : hol.term C -> g_4 : hol.term (hol.arr A B) -> x_5 : hol.term A -> p_6 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_6 x_5) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.and (p_6 x_5) (hol.eq B (g_4 x_5) (g_4 x_5))) (hol.eq C y_27_3 (f_2 x_5))) (hol.eq C (f_2 x_5) (f_2 y_1))) (hol.imp (hol.eq C y_27_3 (f_2 x_5)) (hol.eq C (f_2 x_5) (f_2 y_1)))) :=
  C : hol.type => B : hol.type => A : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A C) => y_27_3 : hol.term C => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_6 x_5) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.imp (hol.and (p_6 x_5) (hol.eq B (g_4 x_5) (g_4 x_5))) (hol.eq C y_27_3 (f_2 x_5)))) (hol.imp (hol.eq C y_27_3 (f_2 x_5))) (hol.eq C (f_2 x_5) (f_2 y_1)) (hol.eq C (f_2 x_5) (f_2 y_1)) (thm_385 C B A f_2 y_27_3 g_4 x_5 p_6 hyp_1) (thm_386 A C y_1 x_5 f_2).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ (p y)) ((= (g x)) (g y)))) ((= y') (f y)))) ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) ((= y') (f x)))) ((= (f x)) (f y))))) ((Data.Bool.==> ((= y') (f y))) ((Data.Bool.==> ((= y') (f x))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_388 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> y_27_2 : hol.term C -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> y_5 : hol.term A -> p_6 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_6 x_3) -> hyp_2 : hol.proof (p_6 y_5) -> hyp_3 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_5)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.and (p_6 y_5) (hol.eq B (g_4 x_3) (g_4 y_5))) (hol.eq C y_27_2 (f_1 y_5))) (hol.imp (hol.imp (hol.and (p_6 x_3) (hol.eq B (g_4 x_3) (g_4 x_3))) (hol.eq C y_27_2 (f_1 x_3))) (hol.eq C (f_1 x_3) (f_1 y_5)))) (hol.imp (hol.eq C y_27_2 (f_1 y_5)) (hol.imp (hol.eq C y_27_2 (f_1 x_3)) (hol.eq C (f_1 x_3) (f_1 y_5))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => y_27_2 : hol.term C => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => y_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_6 x_3) => hyp_2 : hol.proof (p_6 y_5) => hyp_3 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_5)) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.imp (hol.and (p_6 y_5) (hol.eq B (g_4 x_3) (g_4 y_5))) (hol.eq C y_27_2 (f_1 y_5)))) (hol.imp (hol.eq C y_27_2 (f_1 y_5))) (hol.imp (hol.imp (hol.and (p_6 x_3) (hol.eq B (g_4 x_3) (g_4 x_3))) (hol.eq C y_27_2 (f_1 x_3))) (hol.eq C (f_1 x_3) (f_1 y_5))) (hol.imp (hol.eq C y_27_2 (f_1 x_3)) (hol.eq C (f_1 x_3) (f_1 y_5))) (thm_379 C B A f_1 y_27_2 x_3 g_4 y_5 p_6 hyp_2 hyp_3) (thm_387 C B A y_5 f_1 y_27_2 g_4 x_3 p_6 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= y') (f y))) ((Data.Bool.==> ((= y') (f x))) ((= (f x)) (f y))))) ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ (p y)) ((= (g x)) (g y)))) ((= y') (f y)))) ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) ((= y') (f x)))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_389 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> x_3 : hol.term A -> y_4 : hol.term A -> f_5 : hol.term (hol.arr A C) -> y_27_6 : hol.term C -> hyp_1 : hol.proof (p_2 x_3) -> hyp_2 : hol.proof (p_2 y_4) -> hyp_3 : hol.proof (hol.eq B (g_1 x_3) (g_1 y_4)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq C y_27_6 (f_5 y_4)) (hol.imp (hol.eq C y_27_6 (f_5 x_3)) (hol.eq C (f_5 x_3) (f_5 y_4)))) (hol.imp (hol.imp (hol.and (p_2 y_4) (hol.eq B (g_1 x_3) (g_1 y_4))) (hol.eq C y_27_6 (f_5 y_4))) (hol.imp (hol.imp (hol.and (p_2 x_3) (hol.eq B (g_1 x_3) (g_1 x_3))) (hol.eq C y_27_6 (f_5 x_3))) (hol.eq C (f_5 x_3) (f_5 y_4))))) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => x_3 : hol.term A => y_4 : hol.term A => f_5 : hol.term (hol.arr A C) => y_27_6 : hol.term C => hyp_1 : hol.proof (p_2 x_3) => hyp_2 : hol.proof (p_2 y_4) => hyp_3 : hol.proof (hol.eq B (g_1 x_3) (g_1 y_4)) => hol.SYM hol.bool (hol.imp (hol.imp (hol.and (p_2 y_4) (hol.eq B (g_1 x_3) (g_1 y_4))) (hol.eq C y_27_6 (f_5 y_4))) (hol.imp (hol.imp (hol.and (p_2 x_3) (hol.eq B (g_1 x_3) (g_1 x_3))) (hol.eq C y_27_6 (f_5 x_3))) (hol.eq C (f_5 x_3) (f_5 y_4)))) (hol.imp (hol.eq C y_27_6 (f_5 y_4)) (hol.imp (hol.eq C y_27_6 (f_5 x_3)) (hol.eq C (f_5 x_3) (f_5 y_4)))) (thm_388 C B A f_5 y_27_6 x_3 g_1 y_4 p_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((= (= (\lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y))) y'))) (= (\lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y))) y'))) ;)

(; dict ;)

def thm_390 : A : hol.type -> C : hol.type -> y_27_1 : hol.term C -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1)) (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1))) :=
  A : hol.type => C : hol.type => y_27_1 : hol.term C => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1)).

(; Theorem: |- ((= (\lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y))) (f y))) ((Data.Bool.==> ((= (f y)) (f x))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_391 : A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool ((__11042_4 : hol.term C => hol.imp (hol.eq C __11042_4 (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1))) (f_3 y_1)) (hol.imp (hol.eq C (f_3 y_1) (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1)))) :=
  A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A C) => hol.BETA_CONV C hol.bool (__11042_4 : hol.term C => hol.imp (hol.eq C __11042_4 (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1))) (f_3 y_1).

(; Theorem: |- ((= ((= (\lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y))) y')) (\lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y))) (f y)))) ((= (\lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y))) y')) ((Data.Bool.==> ((= (f y)) (f x))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_392 : A : hol.type -> C : hol.type -> y_27_1 : hol.term C -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1) ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) (f_4 y_2))) (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1) (hol.imp (hol.eq C (f_4 y_2) (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))))) :=
  A : hol.type => C : hol.type => y_27_1 : hol.term C => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1)) (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1)) ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) (f_4 y_2)) (hol.imp (hol.eq C (f_4 y_2) (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) (thm_390 A C y_27_1 y_2 x_3 f_4) (thm_391 A C y_2 x_3 f_4).

(; Theorem: |- ((= (\lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y))) y')) ((Data.Bool.==> ((= y') (f x))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_393 : A : hol.type -> C : hol.type -> y_27_1 : hol.term C -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1) (hol.imp (hol.eq C y_27_1 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2)))) :=
  A : hol.type => C : hol.type => y_27_1 : hol.term C => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => hol.BETA_CONV C hol.bool (__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1.

(; Theorem: |- ((= (= (\lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y))) y'))) (= ((Data.Bool.==> ((= y') (f x))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_394 : A : hol.type -> C : hol.type -> y_27_1 : hol.term C -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1)) (hol.eq hol.bool (hol.imp (hol.eq C y_27_1 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))))) :=
  A : hol.type => C : hol.type => y_27_1 : hol.term C => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1) (hol.imp (hol.eq C y_27_1 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) thm_198 (thm_393 A C y_27_1 y_2 x_3 f_4).

(; Theorem: |- ((= ((Data.Bool.==> ((= (f y)) (f x))) ((= (f x)) (f y)))) ((Data.Bool.==> ((= (f y)) (f x))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_395 : A : hol.type -> C : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq C (f_3 y_2) (f_3 x_1)) (hol.eq C (f_3 x_1) (f_3 y_2))) (hol.imp (hol.eq C (f_3 y_2) (f_3 x_1)) (hol.eq C (f_3 x_1) (f_3 y_2)))) :=
  A : hol.type => C : hol.type => x_1 : hol.term A => y_2 : hol.term A => f_3 : hol.term (hol.arr A C) => hol.REFL hol.bool (hol.imp (hol.eq C (f_3 y_2) (f_3 x_1)) (hol.eq C (f_3 x_1) (f_3 y_2))).

(; Theorem: |- ((= ((= (\lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y))) y')) ((Data.Bool.==> ((= (f y)) (f x))) ((= (f x)) (f y))))) ((= ((Data.Bool.==> ((= y') (f x))) ((= (f x)) (f y)))) ((Data.Bool.==> ((= (f y)) (f x))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_396 : A : hol.type -> C : hol.type -> y_27_1 : hol.term C -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1) (hol.imp (hol.eq C (f_4 y_2) (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2)))) (hol.eq hol.bool (hol.imp (hol.eq C y_27_1 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) (hol.imp (hol.eq C (f_4 y_2) (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))))) :=
  A : hol.type => C : hol.type => y_27_1 : hol.term C => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1)) (hol.eq hol.bool (hol.imp (hol.eq C y_27_1 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2)))) (hol.imp (hol.eq C (f_4 y_2) (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) (hol.imp (hol.eq C (f_4 y_2) (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) (thm_394 A C y_27_1 y_2 x_3 f_4) (thm_395 A C x_3 y_2 f_4).

(; Theorem: |- ((= ((= (\lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y))) y')) (\lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y))) (f y)))) ((= ((Data.Bool.==> ((= y') (f x))) ((= (f x)) (f y)))) ((Data.Bool.==> ((= (f y)) (f x))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_397 : A : hol.type -> C : hol.type -> y_27_1 : hol.term C -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1) ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) (f_4 y_2))) (hol.eq hol.bool (hol.imp (hol.eq C y_27_1 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) (hol.imp (hol.eq C (f_4 y_2) (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))))) :=
  A : hol.type => C : hol.type => y_27_1 : hol.term C => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => hol.TRANS hol.bool (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1) ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) (f_4 y_2))) (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1) (hol.imp (hol.eq C (f_4 y_2) (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2)))) (hol.eq hol.bool (hol.imp (hol.eq C y_27_1 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) (hol.imp (hol.eq C (f_4 y_2) (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2)))) (thm_392 A C y_27_1 y_2 x_3 f_4) (thm_396 A C y_27_1 y_2 x_3 f_4).

(; Theorem: |- ((= \lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y)))) \lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_398 : A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr C hol.bool) (__11042_4 : hol.term C => hol.imp (hol.eq C __11042_4 (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1))) (__11042_4 : hol.term C => hol.imp (hol.eq C __11042_4 (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1)))) :=
  A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A C) => hol.REFL (hol.arr C hol.bool) (__11042_4 : hol.term C => hol.imp (hol.eq C __11042_4 (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1))).

(; Theorem: |- ((= y') (f y)) ;)

(; dict ;)

def thm_399 : A : hol.type -> C : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> y_27_3 : hol.term C -> hyp_1 : hol.proof (hol.eq C y_27_3 (f_2 y_1)) -> hol.proof (hol.eq C y_27_3 (f_2 y_1)) :=
  A : hol.type => C : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A C) => y_27_3 : hol.term C => hyp_1 : hol.proof (hol.eq C y_27_3 (f_2 y_1)) => hyp_1.

(; Theorem: |- ((= (\lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y))) y')) (\lambda _11042. ((Data.Bool.==> ((= _11042) (f x))) ((= (f x)) (f y))) (f y))) ;)

(; dict ;)

def thm_400 : A : hol.type -> C : hol.type -> y_27_1 : hol.term C -> y_2 : hol.term A -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (hol.eq C y_27_1 (f_4 y_2)) -> hol.proof (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1) ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) (f_4 y_2))) :=
  A : hol.type => C : hol.type => y_27_1 : hol.term C => y_2 : hol.term A => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => hyp_1 : hol.proof (hol.eq C y_27_1 (f_4 y_2)) => hol.APP_THM C hol.bool (__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) (__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_4 x_3)) (hol.eq C (f_4 x_3) (f_4 y_2))) y_27_1 (f_4 y_2) (thm_398 A C y_2 x_3 f_4) (thm_399 A C y_2 f_4 y_27_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= y') (f x))) ((= (f x)) (f y)))) ((Data.Bool.==> ((= (f y)) (f x))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_401 : A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> y_27_4 : hol.term C -> hyp_1 : hol.proof (hol.eq C y_27_4 (f_3 y_1)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq C y_27_4 (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1))) (hol.imp (hol.eq C (f_3 y_1) (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1)))) :=
  A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A C) => y_27_4 : hol.term C => hyp_1 : hol.proof (hol.eq C y_27_4 (f_3 y_1)) => hol.EQ_MP (hol.eq hol.bool ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1))) y_27_4) ((__11042_5 : hol.term C => hol.imp (hol.eq C __11042_5 (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1))) (f_3 y_1))) (hol.eq hol.bool (hol.imp (hol.eq C y_27_4 (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1))) (hol.imp (hol.eq C (f_3 y_1) (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1)))) (thm_397 A C y_27_4 y_1 x_2 f_3) (thm_400 A C y_27_4 y_1 x_2 f_3 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= (f y)) (f x))) ((= (f x)) (f y)))) ((Data.Bool.==> ((= y') (f x))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_402 : A : hol.type -> C : hol.type -> y_27_1 : hol.term C -> x_2 : hol.term A -> y_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (hol.eq C y_27_1 (f_4 y_3)) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq C (f_4 y_3) (f_4 x_2)) (hol.eq C (f_4 x_2) (f_4 y_3))) (hol.imp (hol.eq C y_27_1 (f_4 x_2)) (hol.eq C (f_4 x_2) (f_4 y_3)))) :=
  A : hol.type => C : hol.type => y_27_1 : hol.term C => x_2 : hol.term A => y_3 : hol.term A => f_4 : hol.term (hol.arr A C) => hyp_1 : hol.proof (hol.eq C y_27_1 (f_4 y_3)) => hol.SYM hol.bool (hol.imp (hol.eq C y_27_1 (f_4 x_2)) (hol.eq C (f_4 x_2) (f_4 y_3))) (hol.imp (hol.eq C (f_4 y_3) (f_4 x_2)) (hol.eq C (f_4 x_2) (f_4 y_3))) (thm_401 A C y_3 x_2 f_4 y_27_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= (f y)) (f x))) ((= (f x)) (f y))) ;)

(; dict ;)

def thm_403 : A : hol.type -> C : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.imp (hol.eq C (f_3 y_2) (f_3 x_1)) (hol.eq C (f_3 x_1) (f_3 y_2))) :=
  A : hol.type => C : hol.type => x_1 : hol.term A => y_2 : hol.term A => f_3 : hol.term (hol.arr A C) => (C : hol.type => y_1 : hol.term C => x_2 : hol.term C => thm_69 C y_1 x_2) C (f_3 x_1) (f_3 y_2).

(; Theorem: |- ((Data.Bool.==> ((= y') (f x))) ((= (f x)) (f y))) ;)

(; dict ;)

def thm_404 : A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> y_27_4 : hol.term C -> hyp_1 : hol.proof (hol.eq C y_27_4 (f_3 y_1)) -> hol.proof (hol.imp (hol.eq C y_27_4 (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1))) :=
  A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A C) => y_27_4 : hol.term C => hyp_1 : hol.proof (hol.eq C y_27_4 (f_3 y_1)) => hol.EQ_MP (hol.imp (hol.eq C (f_3 y_1) (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1))) (hol.imp (hol.eq C y_27_4 (f_3 x_2)) (hol.eq C (f_3 x_2) (f_3 y_1))) (thm_402 A C y_27_4 x_2 y_1 f_3 hyp_1) (thm_403 A C x_2 y_1 f_3).

(; Theorem: |- ((Data.Bool.==> ((= y') (f y))) ((Data.Bool.==> ((= y') (f x))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_405 : A : hol.type -> C : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> y_27_4 : hol.term C -> hol.proof (hol.imp (hol.eq C y_27_4 (f_3 y_2)) (hol.imp (hol.eq C y_27_4 (f_3 x_1)) (hol.eq C (f_3 x_1) (f_3 y_2)))) :=
  A : hol.type => C : hol.type => x_1 : hol.term A => y_2 : hol.term A => f_3 : hol.term (hol.arr A C) => y_27_4 : hol.term C => hyp_1 : hol.proof (hol.eq C y_27_4 (f_3 y_2)) => thm_404 A C y_2 x_1 f_3 y_27_4 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ (p y)) ((= (g x)) (g y)))) ((= y') (f y)))) ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) ((= y') (f x)))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_406 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> y_27_2 : hol.term C -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> y_5 : hol.term A -> p_6 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_6 x_3) -> hyp_2 : hol.proof (p_6 y_5) -> hyp_3 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_5)) -> hol.proof (hol.imp (hol.imp (hol.and (p_6 y_5) (hol.eq B (g_4 x_3) (g_4 y_5))) (hol.eq C y_27_2 (f_1 y_5))) (hol.imp (hol.imp (hol.and (p_6 x_3) (hol.eq B (g_4 x_3) (g_4 x_3))) (hol.eq C y_27_2 (f_1 x_3))) (hol.eq C (f_1 x_3) (f_1 y_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => y_27_2 : hol.term C => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => y_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_6 x_3) => hyp_2 : hol.proof (p_6 y_5) => hyp_3 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_5)) => hol.EQ_MP (hol.imp (hol.eq C y_27_2 (f_1 y_5)) (hol.imp (hol.eq C y_27_2 (f_1 x_3)) (hol.eq C (f_1 x_3) (f_1 y_5)))) (hol.imp (hol.imp (hol.and (p_6 y_5) (hol.eq B (g_4 x_3) (g_4 y_5))) (hol.eq C y_27_2 (f_1 y_5))) (hol.imp (hol.imp (hol.and (p_6 x_3) (hol.eq B (g_4 x_3) (g_4 x_3))) (hol.eq C y_27_2 (f_1 x_3))) (hol.eq C (f_1 x_3) (f_1 y_5)))) (thm_389 B A C g_4 p_6 x_3 y_5 f_1 y_27_2 hyp_1 hyp_2 hyp_3) (thm_405 A C x_3 y_5 f_1 y_27_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p y)) ((= (g x)) (g y)))) ((= y') (f y))) ;)

(; dict ;)

def thm_407 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> y_27_2 : hol.term C -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> y_5 : hol.term A -> p_6 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_6 x_27_7) (hol.eq B (g_4 x_3) (g_4 x_27_7))) (hol.eq C y_27_2 (f_1 x_27_7)))) -> hol.proof (hol.imp (hol.and (p_6 y_5) (hol.eq B (g_4 x_3) (g_4 y_5))) (hol.eq C y_27_2 (f_1 y_5))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => y_27_2 : hol.term C => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => y_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_6 x_27_7) (hol.eq B (g_4 x_3) (g_4 x_27_7))) (hol.eq C y_27_2 (f_1 x_27_7)))) => thm_316 C B A f_1 y_27_2 x_3 g_4 p_6 hyp_1 y_5.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) ((= y') (f x)))) ((= (f x)) (f y))) ;)

(; dict ;)

def thm_408 : C : hol.type -> B : hol.type -> A : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> y_27_3 : hol.term C -> g_4 : hol.term (hol.arr A B) -> x_5 : hol.term A -> p_6 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_6 x_5) -> hyp_2 : hol.proof (p_6 y_1) -> hyp_3 : hol.proof (hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_6 x_27_7) (hol.eq B (g_4 x_5) (g_4 x_27_7))) (hol.eq C y_27_3 (f_2 x_27_7)))) -> hyp_4 : hol.proof (hol.eq B (g_4 x_5) (g_4 y_1)) -> hol.proof (hol.imp (hol.imp (hol.and (p_6 x_5) (hol.eq B (g_4 x_5) (g_4 x_5))) (hol.eq C y_27_3 (f_2 x_5))) (hol.eq C (f_2 x_5) (f_2 y_1))) :=
  C : hol.type => B : hol.type => A : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A C) => y_27_3 : hol.term C => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_6 x_5) => hyp_2 : hol.proof (p_6 y_1) => hyp_3 : hol.proof (hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_6 x_27_7) (hol.eq B (g_4 x_5) (g_4 x_27_7))) (hol.eq C y_27_3 (f_2 x_27_7)))) => hyp_4 : hol.proof (hol.eq B (g_4 x_5) (g_4 y_1)) => thm_406 C B A f_2 y_27_3 x_5 g_4 y_1 p_6 hyp_1 hyp_2 hyp_4 (thm_407 C B A f_2 y_27_3 x_5 g_4 y_1 p_6 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) ((= y') (f x))) ;)

(; dict ;)

def thm_409 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> y_27_2 : hol.term C -> g_3 : hol.term (hol.arr A B) -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_27_6 : hol.term A => hol.imp (hol.and (p_5 x_27_6) (hol.eq B (g_3 x_4) (g_3 x_27_6))) (hol.eq C y_27_2 (f_1 x_27_6)))) -> hol.proof (hol.imp (hol.and (p_5 x_4) (hol.eq B (g_3 x_4) (g_3 x_4))) (hol.eq C y_27_2 (f_1 x_4))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => y_27_2 : hol.term C => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_27_6 : hol.term A => hol.imp (hol.and (p_5 x_27_6) (hol.eq B (g_3 x_4) (g_3 x_27_6))) (hol.eq C y_27_2 (f_1 x_27_6)))) => thm_316 C B A f_1 y_27_2 x_4 g_3 p_5 hyp_1 x_4.

(; Theorem: |- ((= (f x)) (f y)) ;)

(; dict ;)

def thm_410 : B : hol.type -> A : hol.type -> C : hol.type -> y_27_1 : hol.term C -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> y_4 : hol.term A -> x_5 : hol.term A -> f_6 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_3 x_5) -> hyp_2 : hol.proof (p_3 y_4) -> hyp_3 : hol.proof (hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_3 x_27_7) (hol.eq B (g_2 x_5) (g_2 x_27_7))) (hol.eq C y_27_1 (f_6 x_27_7)))) -> hyp_4 : hol.proof (hol.eq B (g_2 x_5) (g_2 y_4)) -> hol.proof (hol.eq C (f_6 x_5) (f_6 y_4)) :=
  B : hol.type => A : hol.type => C : hol.type => y_27_1 : hol.term C => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => y_4 : hol.term A => x_5 : hol.term A => f_6 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_3 x_5) => hyp_2 : hol.proof (p_3 y_4) => hyp_3 : hol.proof (hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_3 x_27_7) (hol.eq B (g_2 x_5) (g_2 x_27_7))) (hol.eq C y_27_1 (f_6 x_27_7)))) => hyp_4 : hol.proof (hol.eq B (g_2 x_5) (g_2 y_4)) => thm_408 C B A y_4 f_6 y_27_1 g_2 x_5 p_3 hyp_1 hyp_2 hyp_3 hyp_4 (thm_409 C B A f_6 y_27_1 g_2 x_5 p_3 hyp_3).

(; Theorem: |- ((= (f x)) (f y)) ;)

(; dict ;)

def thm_411 : B : hol.type -> A : hol.type -> C : hol.type -> y_27_1 : hol.term C -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> y_4 : hol.term A -> x_5 : hol.term A -> f_6 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_3 x_5) -> hyp_2 : hol.proof (p_3 y_4) -> hyp_3 : hol.proof (hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_3 x_27_7) (hol.eq B (g_2 x_5) (g_2 x_27_7))) (hol.eq C y_27_1 (f_6 x_27_7)))) -> hyp_4 : hol.proof (hol.eq B (g_2 x_5) (g_2 y_4)) -> hol.proof (hol.eq C (f_6 x_5) (f_6 y_4)) :=
  B : hol.type => A : hol.type => C : hol.type => y_27_1 : hol.term C => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => y_4 : hol.term A => x_5 : hol.term A => f_6 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_3 x_5) => hyp_2 : hol.proof (p_3 y_4) => hyp_3 : hol.proof (hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_3 x_27_7) (hol.eq B (g_2 x_5) (g_2 x_27_7))) (hol.eq C y_27_1 (f_6 x_27_7)))) => hyp_4 : hol.proof (hol.eq B (g_2 x_5) (g_2 y_4)) => hol.PROVE_HYP (hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_3 x_27_7) (hol.eq B (g_2 x_5) (g_2 x_27_7))) (hol.eq C y_27_1 (f_6 x_27_7)))) (hol.eq C (f_6 x_5) (f_6 y_4)) (thm_316 C B A f_6 y_27_1 x_5 g_2 p_3 hyp_3) (hyp_5 : hol.proof (hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_3 x_27_7) (hol.eq B (g_2 x_5) (g_2 x_27_7))) (hol.eq C y_27_1 (f_6 x_27_7)))) => thm_410 B A C y_27_1 g_2 p_3 y_4 x_5 f_6 hyp_1 hyp_2 hyp_5 hyp_4).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x')) ((= (g x)) (g x')))) ((= y') (f x'))))) ((= (f x)) (f y))) ;)

(; dict ;)

def thm_412 : C : hol.type -> B : hol.type -> A : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> y_27_3 : hol.term C -> x_4 : hol.term A -> g_5 : hol.term (hol.arr A B) -> p_6 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_6 x_4) -> hyp_2 : hol.proof (p_6 y_1) -> hyp_3 : hol.proof (hol.eq B (g_5 x_4) (g_5 y_1)) -> hol.proof (hol.imp (hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_6 x_27_7) (hol.eq B (g_5 x_4) (g_5 x_27_7))) (hol.eq C y_27_3 (f_2 x_27_7)))) (hol.eq C (f_2 x_4) (f_2 y_1))) :=
  C : hol.type => B : hol.type => A : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A C) => y_27_3 : hol.term C => x_4 : hol.term A => g_5 : hol.term (hol.arr A B) => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_6 x_4) => hyp_2 : hol.proof (p_6 y_1) => hyp_3 : hol.proof (hol.eq B (g_5 x_4) (g_5 y_1)) => hyp_4 : hol.proof (hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_6 x_27_7) (hol.eq B (g_5 x_4) (g_5 x_27_7))) (hol.eq C y_27_3 (f_2 x_27_7)))) => thm_411 B A C y_27_3 g_5 p_6 y_1 x_4 f_2 hyp_1 hyp_2 hyp_4 hyp_3.

(; Theorem: |- ((= (\lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x')) ((= (g x)) (g x')))) ((= y) (f x')))) y')) (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x')) ((= (g x)) (g x')))) ((= y') (f x'))))) ;)

(; dict ;)

def thm_413 : B : hol.type -> A : hol.type -> C : hol.type -> y_27_1 : hol.term C -> f_2 : hol.term (hol.arr A C) -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_5 x_27_7) (hol.eq B (g_4 x_3) (g_4 x_27_7))) (hol.eq C y_6 (f_2 x_27_7)))) y_27_1) (hol.forall A (x_27_6 : hol.term A => hol.imp (hol.and (p_5 x_27_6) (hol.eq B (g_4 x_3) (g_4 x_27_6))) (hol.eq C y_27_1 (f_2 x_27_6))))) :=
  B : hol.type => A : hol.type => C : hol.type => y_27_1 : hol.term C => f_2 : hol.term (hol.arr A C) => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => p_5 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV C hol.bool (y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_5 x_27_7) (hol.eq B (g_4 x_3) (g_4 x_27_7))) (hol.eq C y_6 (f_2 x_27_7)))) y_27_1.

(; Theorem: |- (\lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x')) ((= (g x)) (g x')))) ((= y) (f x')))) y') ;)

(; dict ;)

def thm_414 : B : hol.type -> A : hol.type -> C : hol.type -> y_27_1 : hol.term C -> f_2 : hol.term (hol.arr A C) -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_5 x_27_7) (hol.eq B (g_4 x_3) (g_4 x_27_7))) (hol.eq C y_6 (f_2 x_27_7)))) y_27_1) -> hol.proof ((y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_5 x_27_7) (hol.eq B (g_4 x_3) (g_4 x_27_7))) (hol.eq C y_6 (f_2 x_27_7)))) y_27_1) :=
  B : hol.type => A : hol.type => C : hol.type => y_27_1 : hol.term C => f_2 : hol.term (hol.arr A C) => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_5 x_27_7) (hol.eq B (g_4 x_3) (g_4 x_27_7))) (hol.eq C y_6 (f_2 x_27_7)))) y_27_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x')) ((= (g x)) (g x')))) ((= y') (f x')))) ;)

(; dict ;)

def thm_415 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> y_27_2 : hol.term C -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_5 x_27_7) (hol.eq B (g_4 x_3) (g_4 x_27_7))) (hol.eq C y_6 (f_1 x_27_7)))) y_27_2) -> hol.proof (hol.forall A (x_27_6 : hol.term A => hol.imp (hol.and (p_5 x_27_6) (hol.eq B (g_4 x_3) (g_4 x_27_6))) (hol.eq C y_27_2 (f_1 x_27_6)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => y_27_2 : hol.term C => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_5 x_27_7) (hol.eq B (g_4 x_3) (g_4 x_27_7))) (hol.eq C y_6 (f_1 x_27_7)))) y_27_2) => hol.EQ_MP ((y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_5 x_27_7) (hol.eq B (g_4 x_3) (g_4 x_27_7))) (hol.eq C y_6 (f_1 x_27_7)))) y_27_2) (hol.forall A (x_27_6 : hol.term A => hol.imp (hol.and (p_5 x_27_6) (hol.eq B (g_4 x_3) (g_4 x_27_6))) (hol.eq C y_27_2 (f_1 x_27_6)))) (thm_413 B A C y_27_2 f_1 x_3 g_4 p_5) (thm_414 B A C y_27_2 f_1 x_3 g_4 p_5 hyp_1).

(; Theorem: |- ((= (f x)) (f y)) ;)

(; dict ;)

def thm_416 : B : hol.type -> A : hol.type -> C : hol.type -> y_27_1 : hol.term C -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> y_4 : hol.term A -> x_5 : hol.term A -> f_6 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_3 x_5) -> hyp_2 : hol.proof (p_3 y_4) -> hyp_3 : hol.proof ((y_7 : hol.term C => hol.forall A (x_27_8 : hol.term A => hol.imp (hol.and (p_3 x_27_8) (hol.eq B (g_2 x_5) (g_2 x_27_8))) (hol.eq C y_7 (f_6 x_27_8)))) y_27_1) -> hyp_4 : hol.proof (hol.eq B (g_2 x_5) (g_2 y_4)) -> hol.proof (hol.eq C (f_6 x_5) (f_6 y_4)) :=
  B : hol.type => A : hol.type => C : hol.type => y_27_1 : hol.term C => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => y_4 : hol.term A => x_5 : hol.term A => f_6 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_3 x_5) => hyp_2 : hol.proof (p_3 y_4) => hyp_3 : hol.proof ((y_7 : hol.term C => hol.forall A (x_27_8 : hol.term A => hol.imp (hol.and (p_3 x_27_8) (hol.eq B (g_2 x_5) (g_2 x_27_8))) (hol.eq C y_7 (f_6 x_27_8)))) y_27_1) => hyp_4 : hol.proof (hol.eq B (g_2 x_5) (g_2 y_4)) => thm_412 C B A y_4 f_6 y_27_1 x_5 g_2 p_3 hyp_1 hyp_2 hyp_4 (thm_415 C B A f_6 y_27_1 x_5 g_2 p_3 hyp_3).

(; Theorem: |- ((Data.Bool.==> (\lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x')) ((= (g x)) (g x')))) ((= y) (f x')))) y')) ((= (f x)) (f y))) ;)

(; dict ;)

def thm_417 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term A -> y_27_2 : hol.term C -> f_3 : hol.term (hol.arr A C) -> x_4 : hol.term A -> g_5 : hol.term (hol.arr A B) -> p_6 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_6 x_4) -> hyp_2 : hol.proof (p_6 y_1) -> hyp_3 : hol.proof (hol.eq B (g_5 x_4) (g_5 y_1)) -> hol.proof (hol.imp ((y_7 : hol.term C => hol.forall A (x_27_8 : hol.term A => hol.imp (hol.and (p_6 x_27_8) (hol.eq B (g_5 x_4) (g_5 x_27_8))) (hol.eq C y_7 (f_3 x_27_8)))) y_27_2) (hol.eq C (f_3 x_4) (f_3 y_1))) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => y_27_2 : hol.term C => f_3 : hol.term (hol.arr A C) => x_4 : hol.term A => g_5 : hol.term (hol.arr A B) => p_6 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_6 x_4) => hyp_2 : hol.proof (p_6 y_1) => hyp_3 : hol.proof (hol.eq B (g_5 x_4) (g_5 y_1)) => hyp_4 : hol.proof ((y_7 : hol.term C => hol.forall A (x_27_8 : hol.term A => hol.imp (hol.and (p_6 x_27_8) (hol.eq B (g_5 x_4) (g_5 x_27_8))) (hol.eq C y_7 (f_3 x_27_8)))) y_27_2) => thm_416 B A C y_27_2 g_5 p_6 y_1 x_4 f_3 hyp_1 hyp_2 hyp_4 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda y'. ((Data.Bool.==> (\lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x')) ((= (g x)) (g x')))) ((= y) (f x')))) y')) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_418 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_5 x_3) -> hyp_2 : hol.proof (p_5 y_1) -> hyp_3 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_1)) -> hol.proof (hol.forall C (y_27_6 : hol.term C => hol.imp ((y_7 : hol.term C => hol.forall A (x_27_8 : hol.term A => hol.imp (hol.and (p_5 x_27_8) (hol.eq B (g_4 x_3) (g_4 x_27_8))) (hol.eq C y_7 (f_2 x_27_8)))) y_27_6) (hol.eq C (f_2 x_3) (f_2 y_1)))) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A C) => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_5 x_3) => hyp_2 : hol.proof (p_5 y_1) => hyp_3 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_1)) => y_27_6 : hol.term C => thm_417 B A C y_1 y_27_6 f_2 x_3 g_4 p_5 hyp_1 hyp_2 hyp_3.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x')) ((= (g x)) (g x')))) ((= y) (f x')))))) ((= (f x)) (f y))) ;)

(; dict ;)

def thm_419 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> x_3 : hol.term A -> g_4 : hol.term (hol.arr A B) -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_5 x_3) -> hyp_2 : hol.proof (p_5 y_1) -> hyp_3 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_5 x_27_7) (hol.eq B (g_4 x_3) (g_4 x_27_7))) (hol.eq C y_6 (f_2 x_27_7))))) (hol.eq C (f_2 x_3) (f_2 y_1))) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A C) => x_3 : hol.term A => g_4 : hol.term (hol.arr A B) => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_5 x_3) => hyp_2 : hol.proof (p_5 y_1) => hyp_3 : hol.proof (hol.eq B (g_4 x_3) (g_4 y_1)) => thm_315 B A C y_1 f_2 x_3 g_4 p_5 (thm_418 B A C y_1 f_2 x_3 g_4 p_5 hyp_1 hyp_2 hyp_3).

(; Theorem: |- (Data.Bool.? \lambda y. (Data.Bool.! \lambda x'. ((Data.Bool.==> ((Data.Bool./\ (p x')) ((= (g x)) (g x')))) ((= y) (f x'))))) ;)

(; dict ;)

def thm_420 : B : hol.type -> A : hol.type -> C : hol.type -> f_1 : hol.term (hol.arr A C) -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_27_6 : hol.term A => hol.imp (hol.and (p_4 x_27_6) (hol.eq B (g_3 x_2) (g_3 x_27_6))) (hol.eq C y_5 (f_1 x_27_6))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_27_6 : hol.term A => hol.imp (hol.and (p_4 x_27_6) (hol.eq B (g_3 x_2) (g_3 x_27_6))) (hol.eq C y_5 (f_1 x_27_6))))) :=
  B : hol.type => A : hol.type => C : hol.type => f_1 : hol.term (hol.arr A C) => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_27_6 : hol.term A => hol.imp (hol.and (p_4 x_27_6) (hol.eq B (g_3 x_2) (g_3 x_27_6))) (hol.eq C y_5 (f_1 x_27_6))))) => hyp_1.

(; Theorem: |- ((= (f x)) (f y)) ;)

(; dict ;)

def thm_421 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> y_3 : hol.term A -> x_4 : hol.term A -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_2 x_4) -> hyp_2 : hol.proof (p_2 y_3) -> hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_2 x_27_7) (hol.eq B (g_1 x_4) (g_1 x_27_7))) (hol.eq C y_6 (f_5 x_27_7))))) -> hyp_4 : hol.proof (hol.eq B (g_1 x_4) (g_1 y_3)) -> hol.proof (hol.eq C (f_5 x_4) (f_5 y_3)) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => y_3 : hol.term A => x_4 : hol.term A => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_2 x_4) => hyp_2 : hol.proof (p_2 y_3) => hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_2 x_27_7) (hol.eq B (g_1 x_4) (g_1 x_27_7))) (hol.eq C y_6 (f_5 x_27_7))))) => hyp_4 : hol.proof (hol.eq B (g_1 x_4) (g_1 y_3)) => thm_419 B A C y_3 f_5 x_4 g_1 p_2 hyp_1 hyp_2 hyp_4 (thm_420 B A C f_5 x_4 g_1 p_2 hyp_3).

(; Theorem: |- (Data.Bool.? \lambda y. (Data.Bool.! \lambda x_1. ((Data.Bool.==> ((Data.Bool./\ (p x_1)) ((= (g x)) (g x_1)))) ((= y) (f x_1))))) ;)

(; dict ;)

def thm_422 : B : hol.type -> A : hol.type -> C : hol.type -> f_1 : hol.term (hol.arr A C) -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_5 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_4 x_7) (hol.eq B y_5 (g_3 x_7))) (hol.eq C y_6 (f_1 x_7)))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x__1_6 : hol.term A => hol.imp (hol.and (p_4 x__1_6) (hol.eq B (g_3 x_2) (g_3 x__1_6))) (hol.eq C y_5 (f_1 x__1_6))))) :=
  B : hol.type => A : hol.type => C : hol.type => f_1 : hol.term (hol.arr A C) => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_5 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_4 x_7) (hol.eq B y_5 (g_3 x_7))) (hol.eq C y_6 (f_1 x_7)))))) => thm_277 A C B f_1 g_3 p_4 hyp_1 (g_3 x_2).

(; Theorem: |- ((= (f x)) (f y)) ;)

(; dict ;)

def thm_423 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> y_3 : hol.term A -> x_4 : hol.term A -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_2 x_4) -> hyp_2 : hol.proof (p_2 y_3) -> hyp_3 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) -> hyp_4 : hol.proof (hol.eq B (g_1 x_4) (g_1 y_3)) -> hol.proof (hol.eq C (f_5 x_4) (f_5 y_3)) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => y_3 : hol.term A => x_4 : hol.term A => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_2 x_4) => hyp_2 : hol.proof (p_2 y_3) => hyp_3 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) => hyp_4 : hol.proof (hol.eq B (g_1 x_4) (g_1 y_3)) => (hyp_5 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_6 : hol.term C => hol.forall A (x_27_7 : hol.term A => hol.imp (hol.and (p_2 x_27_7) (hol.eq B (g_1 x_4) (g_1 x_27_7))) (hol.eq C y_6 (f_5 x_27_7))))) => thm_421 B A C g_1 p_2 y_3 x_4 f_5 hyp_1 hyp_2 hyp_5 hyp_4) (thm_422 B A C f_5 x_4 g_1 p_2 hyp_3).

(; Theorem: |- ((= (f x)) (f y)) ;)

(; dict ;)

def thm_424 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> y_3 : hol.term A -> x_4 : hol.term A -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_2 x_4) -> hyp_2 : hol.proof (p_2 y_3) -> hyp_3 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) -> hyp_4 : hol.proof (hol.eq B (g_1 x_4) (g_1 y_3)) -> hol.proof (hol.eq C (f_5 x_4) (f_5 y_3)) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => y_3 : hol.term A => x_4 : hol.term A => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_2 x_4) => hyp_2 : hol.proof (p_2 y_3) => hyp_3 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) => hyp_4 : hol.proof (hol.eq B (g_1 x_4) (g_1 y_3)) => hol.PROVE_HYP (hol.eq B (g_1 x_4) (g_1 y_3)) (hol.eq C (f_5 x_4) (f_5 y_3)) (thm_295 A B y_3 x_4 g_1 hyp_4) (hyp_5 : hol.proof (hol.eq B (g_1 x_4) (g_1 y_3)) => thm_423 B A C g_1 p_2 y_3 x_4 f_5 hyp_1 hyp_2 hyp_3 hyp_5).

(; Theorem: |- ((= (f x)) (f y)) ;)

(; dict ;)

def thm_425 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> y_3 : hol.term A -> x_4 : hol.term A -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_2 x_4) -> hyp_2 : hol.proof (p_2 y_3) -> hyp_3 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) -> hyp_4 : hol.proof (hol.eq B (g_1 x_4) (g_1 y_3)) -> hol.proof (hol.eq C (f_5 x_4) (f_5 y_3)) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => y_3 : hol.term A => x_4 : hol.term A => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_2 x_4) => hyp_2 : hol.proof (p_2 y_3) => hyp_3 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) => hyp_4 : hol.proof (hol.eq B (g_1 x_4) (g_1 y_3)) => hol.PROVE_HYP (p_2 y_3) (hol.eq C (f_5 x_4) (f_5 y_3)) (thm_294 A y_3 p_2 hyp_2) (hyp_5 : hol.proof (p_2 y_3) => thm_424 B A C g_1 p_2 y_3 x_4 f_5 hyp_1 hyp_5 hyp_3 hyp_4).

(; Theorem: |- ((= (f x)) (f y)) ;)

(; dict ;)

def thm_426 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> y_3 : hol.term A -> x_4 : hol.term A -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_2 x_4) -> hyp_2 : hol.proof (p_2 y_3) -> hyp_3 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) -> hyp_4 : hol.proof (hol.and (p_2 y_3) (hol.eq B (g_1 x_4) (g_1 y_3))) -> hol.proof (hol.eq C (f_5 x_4) (f_5 y_3)) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => y_3 : hol.term A => x_4 : hol.term A => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_2 x_4) => hyp_2 : hol.proof (p_2 y_3) => hyp_3 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) => hyp_4 : hol.proof (hol.and (p_2 y_3) (hol.eq B (g_1 x_4) (g_1 y_3))) => hol.PROVE_HYP (hol.eq B (g_1 x_4) (g_1 y_3)) (hol.eq C (f_5 x_4) (f_5 y_3)) (thm_293 A B p_2 y_3 x_4 g_1 hyp_4) (hyp_5 : hol.proof (hol.eq B (g_1 x_4) (g_1 y_3)) => thm_425 B A C g_1 p_2 y_3 x_4 f_5 hyp_1 hyp_2 hyp_3 hyp_5).

(; Theorem: |- ((= (f x)) (f y)) ;)

(; dict ;)

def thm_427 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> y_3 : hol.term A -> x_4 : hol.term A -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_2 x_4) -> hyp_2 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) -> hyp_3 : hol.proof (hol.and (p_2 y_3) (hol.eq B (g_1 x_4) (g_1 y_3))) -> hol.proof (hol.eq C (f_5 x_4) (f_5 y_3)) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => y_3 : hol.term A => x_4 : hol.term A => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_2 x_4) => hyp_2 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) => hyp_3 : hol.proof (hol.and (p_2 y_3) (hol.eq B (g_1 x_4) (g_1 y_3))) => hol.PROVE_HYP (p_2 y_3) (hol.eq C (f_5 x_4) (f_5 y_3)) (thm_291 B A x_4 g_1 y_3 p_2 hyp_3) (hyp_4 : hol.proof (p_2 y_3) => thm_426 B A C g_1 p_2 y_3 x_4 f_5 hyp_1 hyp_4 hyp_2 hyp_3).

(; Theorem: |- ((= (f x)) (f y)) ;)

(; dict ;)

def thm_428 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> y_3 : hol.term A -> x_4 : hol.term A -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_2 x_4) -> hyp_2 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) -> hyp_3 : hol.proof (hol.and (p_2 y_3) (hol.eq B (g_1 x_4) (g_1 y_3))) -> hol.proof (hol.eq C (f_5 x_4) (f_5 y_3)) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => y_3 : hol.term A => x_4 : hol.term A => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_2 x_4) => hyp_2 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) => hyp_3 : hol.proof (hol.and (p_2 y_3) (hol.eq B (g_1 x_4) (g_1 y_3))) => hol.PROVE_HYP (p_2 x_4) (hol.eq C (f_5 x_4) (f_5 y_3)) (thm_54 A x_4 p_2 hyp_1) (hyp_4 : hol.proof (p_2 x_4) => thm_427 B A C g_1 p_2 y_3 x_4 f_5 hyp_4 hyp_2 hyp_3).

(; Theorem: |- ((= (f x)) (f y)) ;)

(; dict ;)

def thm_429 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> y_3 : hol.term A -> x_4 : hol.term A -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_2 x_4) -> hyp_2 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) -> hyp_3 : hol.proof (hol.and (p_2 x_4) (hol.and (p_2 y_3) (hol.eq B (g_1 x_4) (g_1 y_3)))) -> hol.proof (hol.eq C (f_5 x_4) (f_5 y_3)) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => y_3 : hol.term A => x_4 : hol.term A => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_2 x_4) => hyp_2 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) => hyp_3 : hol.proof (hol.and (p_2 x_4) (hol.and (p_2 y_3) (hol.eq B (g_1 x_4) (g_1 y_3)))) => hol.PROVE_HYP (hol.and (p_2 y_3) (hol.eq B (g_1 x_4) (g_1 y_3))) (hol.eq C (f_5 x_4) (f_5 y_3)) (thm_288 B A x_4 g_1 y_3 p_2 hyp_3) (hyp_4 : hol.proof (hol.and (p_2 y_3) (hol.eq B (g_1 x_4) (g_1 y_3))) => thm_428 B A C g_1 p_2 y_3 x_4 f_5 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((= (f x)) (f y)) ;)

(; dict ;)

def thm_430 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr A hol.bool) -> y_3 : hol.term A -> x_4 : hol.term A -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) -> hyp_2 : hol.proof (hol.and (p_2 x_4) (hol.and (p_2 y_3) (hol.eq B (g_1 x_4) (g_1 y_3)))) -> hol.proof (hol.eq C (f_5 x_4) (f_5 y_3)) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr A hol.bool) => y_3 : hol.term A => x_4 : hol.term A => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_2 x_8) (hol.eq B y_6 (g_1 x_8))) (hol.eq C y_7 (f_5 x_8)))))) => hyp_2 : hol.proof (hol.and (p_2 x_4) (hol.and (p_2 y_3) (hol.eq B (g_1 x_4) (g_1 y_3)))) => hol.PROVE_HYP (p_2 x_4) (hol.eq C (f_5 x_4) (f_5 y_3)) (thm_286 B A g_1 y_3 x_4 p_2 hyp_2) (hyp_3 : hol.proof (p_2 x_4) => thm_429 B A C g_1 p_2 y_3 x_4 f_5 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y))) ;)

(; dict ;)

def thm_431 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_5 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C y_7 (f_1 x_8)))))) -> hol.proof (hol.imp (hol.and (p_5 x_4) (hol.and (p_5 y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) (hol.eq C (f_1 x_4) (f_1 y_3))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_6 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_7 : hol.term C => hol.forall A (x_8 : hol.term A => hol.imp (hol.and (p_5 x_8) (hol.eq B y_6 (g_2 x_8))) (hol.eq C y_7 (f_1 x_8)))))) => hyp_2 : hol.proof (hol.and (p_5 x_4) (hol.and (p_5 y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) => thm_430 B A C g_2 p_5 y_3 x_4 f_1 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_432 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_5 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_4 x_7) (hol.eq B y_5 (g_2 x_7))) (hol.eq C y_6 (f_1 x_7)))))) -> hol.proof (hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_5 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_6 : hol.term C => hol.forall A (x_7 : hol.term A => hol.imp (hol.and (p_4 x_7) (hol.eq B y_5 (g_2 x_7))) (hol.eq C y_6 (f_1 x_7)))))) => y_5 : hol.term A => thm_431 C B A f_1 g_2 y_5 x_3 p_4 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_433 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) -> hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) => x_4 : hol.term A => hol.EQ_MP (hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))) (hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))) (thm_283 C B A f_1 g_2 x_4 p_3) (thm_432 C B A f_1 g_2 x_4 p_3 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_434 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) -> hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) => hol.PROVE_HYP (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (thm_277 A C B f_1 g_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) => hol.EQ_MP (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (thm_280 C B A f_1 g_2 p_3) (thm_433 C B A f_1 g_2 p_3 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) ;)

(; dict ;)

def thm_435 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5)))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) => thm_434 C B A f_1 g_2 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_436 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) -> hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) => hyp_1.

(; Theorem: |- ((= \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))))) \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))))) ;)

(; dict ;)

def thm_437 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr B hol.bool) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))).

(; Theorem: |- ((= \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))))) \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))))) ;)

(; dict ;)

def thm_438 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr B hol.bool) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))) (thm_437 A C B f_1 g_2 p_3) (thm_437 A C B f_1 g_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x))))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x))))))) ;)

(; dict ;)

def thm_439 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))) (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))) (thm_182 B) (thm_438 A C B f_1 g_2 p_3).

(; Theorem: |- ((= (\lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))) (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z))))))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x))))) ;)

(; dict ;)

def thm_440 : B : hol.type -> A : hol.type -> C : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))) (f_1 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B y_3 (g_2 z_5)))))) (hol.forall A (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5))))) :=
  B : hol.type => A : hol.type => C : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV C hol.bool (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))) (f_1 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B y_3 (g_2 z_5))))).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x))))) (\lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))) (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z))))))) ;)

(; dict ;)

def thm_441 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5)))) ((y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))) (f_1 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B y_3 (g_2 z_5))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))) (f_1 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B y_3 (g_2 z_5)))))) (hol.forall A (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5)))) (thm_440 B A C f_1 g_2 y_3 p_4).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x)))) \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x)))) ;)

(; dict ;)

def thm_442 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5))) (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5))).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x)))) \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x)))) ;)

(; dict ;)

def thm_443 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5))) (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr A hol.bool) (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5))) (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5))) (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5))) (thm_442 C B A f_1 g_2 y_3 p_4) (thm_442 C B A f_1 g_2 y_3 p_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x))))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x))))) ;)

(; dict ;)

def thm_444 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5)))) (hol.forall A (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5))) (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5))) (thm_50 A) (thm_443 C B A f_1 g_2 y_3 p_4).

(; Theorem: |- ((= (= (\lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x)) y))) (= (\lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x)) y))) ;)

(; dict ;)

def thm_445 : A : hol.type -> C : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1)) (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1))) :=
  A : hol.type => C : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1)).

(; Theorem: |- ((= (\lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x)) (g x))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (f x))) ;)

(; dict ;)

def thm_446 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool ((__11036_5 : hol.term B => hol.eq C (f_4 (hol.select A (z_6 : hol.term A => hol.and (p_3 z_6) (hol.eq B __11036_5 (g_2 z_6))))) (f_4 x_1)) (g_2 x_1)) (hol.eq C (f_4 (hol.select A (z_5 : hol.term A => hol.and (p_3 z_5) (hol.eq B (g_2 x_1) (g_2 z_5))))) (f_4 x_1))) :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => f_4 : hol.term (hol.arr A C) => hol.BETA_CONV B hol.bool (__11036_5 : hol.term B => hol.eq C (f_4 (hol.select A (z_6 : hol.term A => hol.and (p_3 z_6) (hol.eq B __11036_5 (g_2 z_6))))) (f_4 x_1)) (g_2 x_1).

(; Theorem: |- ((= ((= (\lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x)) y)) (\lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x)) (g x)))) ((= (\lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x)) y)) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (f x)))) ;)

(; dict ;)

def thm_447 : A : hol.type -> C : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1) ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) (g_3 x_2))) (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_3 x_2) (g_3 z_6))))) (f_5 x_2)))) :=
  A : hol.type => C : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1)) (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1)) ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) (g_3 x_2)) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_3 x_2) (g_3 z_6))))) (f_5 x_2)) (thm_445 A C B y_1 x_2 g_3 p_4 f_5) (thm_446 A C B x_2 g_3 p_4 f_5).

(; Theorem: |- ((= (\lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x)) y)) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x))) ;)

(; dict ;)

def thm_448 : A : hol.type -> C : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_1 (g_3 z_6))))) (f_5 x_2))) :=
  A : hol.type => C : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hol.BETA_CONV B hol.bool (__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1.

(; Theorem: |- ((= (= (\lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x)) y))) (= ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x)))) ;)

(; dict ;)

def thm_449 : A : hol.type -> C : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1)) (hol.eq hol.bool (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_1 (g_3 z_6))))) (f_5 x_2)))) :=
  A : hol.type => C : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_1 (g_3 z_6))))) (f_5 x_2)) thm_198 (thm_448 A C B y_1 x_2 g_3 p_4 f_5).

(; Theorem: |- ((= ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (f x))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (f x))) ;)

(; dict ;)

def thm_450 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq C (f_4 (hol.select A (z_5 : hol.term A => hol.and (p_3 z_5) (hol.eq B (g_2 x_1) (g_2 z_5))))) (f_4 x_1)) (hol.eq C (f_4 (hol.select A (z_5 : hol.term A => hol.and (p_3 z_5) (hol.eq B (g_2 x_1) (g_2 z_5))))) (f_4 x_1))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => f_4 : hol.term (hol.arr A C) => hol.REFL hol.bool (hol.eq C (f_4 (hol.select A (z_5 : hol.term A => hol.and (p_3 z_5) (hol.eq B (g_2 x_1) (g_2 z_5))))) (f_4 x_1)).

(; Theorem: |- ((= ((= (\lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x)) y)) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (f x)))) ((= ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (f x)))) ;)

(; dict ;)

def thm_451 : A : hol.type -> C : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_3 x_2) (g_3 z_6))))) (f_5 x_2))) (hol.eq hol.bool (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_1 (g_3 z_6))))) (f_5 x_2)) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_3 x_2) (g_3 z_6))))) (f_5 x_2)))) :=
  A : hol.type => C : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1)) (hol.eq hol.bool (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_1 (g_3 z_6))))) (f_5 x_2))) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_3 x_2) (g_3 z_6))))) (f_5 x_2)) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_3 x_2) (g_3 z_6))))) (f_5 x_2)) (thm_449 A C B y_1 x_2 g_3 p_4 f_5) (thm_450 B A C x_2 g_3 p_4 f_5).

(; Theorem: |- ((= ((= (\lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x)) y)) (\lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x)) (g x)))) ((= ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (f x)))) ;)

(; dict ;)

def thm_452 : A : hol.type -> C : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1) ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) (g_3 x_2))) (hol.eq hol.bool (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_1 (g_3 z_6))))) (f_5 x_2)) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_3 x_2) (g_3 z_6))))) (f_5 x_2)))) :=
  A : hol.type => C : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hol.TRANS hol.bool (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1) ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) (g_3 x_2))) (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_3 x_2) (g_3 z_6))))) (f_5 x_2))) (hol.eq hol.bool (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_1 (g_3 z_6))))) (f_5 x_2)) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_3 x_2) (g_3 z_6))))) (f_5 x_2))) (thm_447 A C B y_1 x_2 g_3 p_4 f_5) (thm_451 A C B y_1 x_2 g_3 p_4 f_5).

(; Theorem: |- ((= \lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x))) \lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x))) ;)

(; dict ;)

def thm_453 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr B hol.bool) (__11036_5 : hol.term B => hol.eq C (f_4 (hol.select A (z_6 : hol.term A => hol.and (p_3 z_6) (hol.eq B __11036_5 (g_2 z_6))))) (f_4 x_1)) (__11036_5 : hol.term B => hol.eq C (f_4 (hol.select A (z_6 : hol.term A => hol.and (p_3 z_6) (hol.eq B __11036_5 (g_2 z_6))))) (f_4 x_1))) :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => f_4 : hol.term (hol.arr A C) => hol.REFL (hol.arr B hol.bool) (__11036_5 : hol.term B => hol.eq C (f_4 (hol.select A (z_6 : hol.term A => hol.and (p_3 z_6) (hol.eq B __11036_5 (g_2 z_6))))) (f_4 x_1)).

(; Theorem: |- ((= (\lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x)) y)) (\lambda _11036. ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= _11036) (g z)))))) (f x)) (g x))) ;)

(; dict ;)

def thm_454 : A : hol.type -> C : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (hol.eq B y_1 (g_3 x_2)) -> hol.proof (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1) ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) (g_3 x_2))) :=
  A : hol.type => C : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (hol.eq B y_1 (g_3 x_2)) => hol.APP_THM B hol.bool (__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) (__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_3 z_7))))) (f_5 x_2)) y_1 (g_3 x_2) (thm_453 A C B x_2 g_3 p_4 f_5) (thm_194 A B x_2 g_3 y_1 hyp_1).

(; Theorem: |- ((= ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (f x))) ;)

(; dict ;)

def thm_455 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (hol.eq B y_3 (g_2 x_1)) -> hol.proof (hol.eq hol.bool (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_5 x_1)) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_2 x_1) (g_2 z_6))))) (f_5 x_1))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (hol.eq B y_3 (g_2 x_1)) => hol.EQ_MP (hol.eq hol.bool ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_2 z_7))))) (f_5 x_1)) y_3) ((__11036_6 : hol.term B => hol.eq C (f_5 (hol.select A (z_7 : hol.term A => hol.and (p_4 z_7) (hol.eq B __11036_6 (g_2 z_7))))) (f_5 x_1)) (g_2 x_1))) (hol.eq hol.bool (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_5 x_1)) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_2 x_1) (g_2 z_6))))) (f_5 x_1))) (thm_452 A C B y_3 x_1 g_2 p_4 f_5) (thm_454 A C B y_3 x_1 g_2 p_4 f_5 hyp_1).

(; Theorem: |- ((= ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (f x))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x))) ;)

(; dict ;)

def thm_456 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (hol.eq B y_1 (g_3 x_2)) -> hol.proof (hol.eq hol.bool (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_3 x_2) (g_3 z_6))))) (f_5 x_2)) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_1 (g_3 z_6))))) (f_5 x_2))) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term B => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (hol.eq B y_1 (g_3 x_2)) => hol.SYM hol.bool (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_1 (g_3 z_6))))) (f_5 x_2)) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_3 x_2) (g_3 z_6))))) (f_5 x_2)) (thm_455 B A C x_2 g_3 y_1 p_4 f_5 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))) ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_457 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (p_5 x_4) (hol.and (p_5 y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) (hol.eq C (f_1 x_4) (f_1 y_3))) (hol.imp (hol.and (p_5 x_4) (hol.and (p_5 y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) (hol.eq C (f_1 x_4) (f_1 y_3)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.imp (hol.and (p_5 x_4) (hol.and (p_5 y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) (hol.eq C (f_1 x_4) (f_1 y_3))).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))) ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_458 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (p_5 x_4) (hol.and (p_5 y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) (hol.eq C (f_1 x_4) (f_1 y_3))) (hol.imp (hol.and (p_5 x_4) (hol.and (p_5 y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) (hol.eq C (f_1 x_4) (f_1 y_3)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.imp (hol.and (p_5 x_4) (hol.and (p_5 y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) (hol.eq C (f_1 x_4) (f_1 y_3))) (hol.imp (hol.and (p_5 x_4) (hol.and (p_5 y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) (hol.eq C (f_1 x_4) (f_1 y_3))) (hol.imp (hol.and (p_5 x_4) (hol.and (p_5 y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) (hol.eq C (f_1 x_4) (f_1 y_3))) (thm_457 C B A f_1 g_2 y_3 x_4 p_5) (thm_457 C B A f_1 g_2 y_3 x_4 p_5).

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_459 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.and (p_4 y_6) (hol.eq B (g_2 x_5) (g_2 y_6)))) (hol.eq C (f_1 x_5) (f_1 y_6))))) -> hol.proof (hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_4 x_3) (hol.and (p_4 y_5) (hol.eq B (g_2 x_3) (g_2 y_5)))) (hol.eq C (f_1 x_3) (f_1 y_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.and (p_4 y_6) (hol.eq B (g_2 x_5) (g_2 y_6)))) (hol.eq C (f_1 x_5) (f_1 y_6))))) => thm_436 C B A f_1 g_2 p_4 hyp_1 x_3.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y))) ;)

(; dict ;)

def thm_460 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.and (p_5 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_1 x_6) (f_1 y_7))))) -> hol.proof (hol.imp (hol.and (p_5 x_4) (hol.and (p_5 y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) (hol.eq C (f_1 x_4) (f_1 y_3))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.and (p_5 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_1 x_6) (f_1 y_7))))) => thm_459 C B A f_1 g_2 x_4 p_5 hyp_1 y_3.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((Data.Bool./\ (p x)) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x))))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (f x))) ;)

(; dict ;)

def thm_461 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_4 x__1_5) (hol.and (p_4 y_6) (hol.eq B (g_3 x__1_5) (g_3 y_6)))) (hol.eq C (f_1 x__1_5) (f_1 y_6))))) -> hol.proof (hol.imp (hol.and (p_4 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B (g_3 x_2) (g_3 z_5))))) (hol.and (p_4 x_2) (hol.eq B (g_3 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B (g_3 x_2) (g_3 z_5))))) (g_3 x_2)))) (hol.eq C (f_1 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B (g_3 x_2) (g_3 z_5))))) (f_1 x_2))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_4 x__1_5) (hol.and (p_4 y_6) (hol.eq B (g_3 x__1_5) (g_3 y_6)))) (hol.eq C (f_1 x__1_5) (f_1 y_6))))) => (C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.and (p_5 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_1 x_6) (f_1 y_7))))) => (C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.and (p_5 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_1 x_6) (f_1 y_7))))) => hol.EQ_MP (hol.imp (hol.and (p_5 x_4) (hol.and (p_5 y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) (hol.eq C (f_1 x_4) (f_1 y_3))) (hol.imp (hol.and (p_5 x_4) (hol.and (p_5 y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) (hol.eq C (f_1 x_4) (f_1 y_3))) (thm_458 C B A f_1 g_2 y_3 x_4 p_5) (thm_460 C B A f_1 g_2 y_3 x_4 p_5 hyp_1)) C B A f_1 g_2 y_3 x_4 p_5 hyp_1) C B A f_1 g_3 x_2 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B (g_3 x_2) (g_3 z_5)))) p_4 hyp_1.

(; Theorem: |- ((= (Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))))))) (Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))))))) ;)

(; dict ;)

def thm_462 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))).

(; Theorem: |- ((= ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x))) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x))) ;)

(; dict ;)

def thm_463 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> g_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (g_3 (hol.select A (z_4 : hol.term A => hol.and (p_2 z_4) (hol.eq B (g_3 x_1) (g_3 z_4))))) (g_3 x_1)) (hol.eq B (g_3 (hol.select A (z_4 : hol.term A => hol.and (p_2 z_4) (hol.eq B (g_3 x_1) (g_3 z_4))))) (g_3 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => g_3 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq B (g_3 (hol.select A (z_4 : hol.term A => hol.and (p_2 z_4) (hol.eq B (g_3 x_1) (g_3 z_4))))) (g_3 x_1)).

(; Theorem: |- ((= ((Data.Bool./\ (p x)) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x)))) ((Data.Bool./\ Data.Bool.T) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x)))) ;)

(; dict ;)

def thm_464 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hol.proof (hol.eq hol.bool (hol.and (p_3 x_2) (hol.eq B (g_1 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_1 x_2) (g_1 z_4))))) (g_1 x_2))) (hol.and hol.true (hol.eq B (g_1 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_1 x_2) (g_1 z_4))))) (g_1 x_2)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hol.APP_THM hol.bool hol.bool (hol.and (p_3 x_2)) (hol.and hol.true) (hol.eq B (g_1 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_1 x_2) (g_1 z_4))))) (g_1 x_2)) (hol.eq B (g_1 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_1 x_2) (g_1 z_4))))) (g_1 x_2)) (thm_87 A x_2 p_3 hyp_1) (thm_463 A B x_2 p_3 g_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x)))) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x))) ;)

(; dict ;)

def thm_465 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> g_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.and hol.true (hol.eq B (g_3 (hol.select A (z_4 : hol.term A => hol.and (p_2 z_4) (hol.eq B (g_3 x_1) (g_3 z_4))))) (g_3 x_1))) (hol.eq B (g_3 (hol.select A (z_4 : hol.term A => hol.and (p_2 z_4) (hol.eq B (g_3 x_1) (g_3 z_4))))) (g_3 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => g_3 : hol.term (hol.arr A B) => (t_1 : hol.term hol.bool => thm_106 t_1) (hol.eq B (g_3 (hol.select A (z_4 : hol.term A => hol.and (p_2 z_4) (hol.eq B (g_3 x_1) (g_3 z_4))))) (g_3 x_1)).

(; Theorem: |- ((= ((Data.Bool./\ (p x)) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x)))) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x))) ;)

(; dict ;)

def thm_466 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_2) -> hol.proof (hol.eq hol.bool (hol.and (p_3 x_2) (hol.eq B (g_1 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_1 x_2) (g_1 z_4))))) (g_1 x_2))) (hol.eq B (g_1 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_1 x_2) (g_1 z_4))))) (g_1 x_2))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_2) => hol.TRANS hol.bool (hol.and (p_3 x_2) (hol.eq B (g_1 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_1 x_2) (g_1 z_4))))) (g_1 x_2))) (hol.and hol.true (hol.eq B (g_1 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_1 x_2) (g_1 z_4))))) (g_1 x_2))) (hol.eq B (g_1 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_1 x_2) (g_1 z_4))))) (g_1 x_2)) (thm_464 B A g_1 x_2 p_3 hyp_1) (thm_465 A B x_2 p_3 g_1).

(; Theorem: |- ((= ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((Data.Bool./\ (p x)) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x))))) ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x)))) ;)

(; dict ;)

def thm_467 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hol.proof (hol.eq hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.and (p_3 x_1) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1)))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hol.APP_THM hol.bool hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))) (hol.and (p_3 x_1) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1))) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1)) (thm_462 B A x_1 g_2 p_3) (thm_466 B A g_2 x_1 p_3 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x)))) ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((Data.Bool./\ (p x)) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x))))) ;)

(; dict ;)

def thm_468 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hol.proof (hol.eq hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.and (p_3 x_1) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hol.SYM hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.and (p_3 x_1) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1)))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1))) (thm_467 B A x_1 g_2 p_3 hyp_1).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_469 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_470 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_469 A y_1 x_2) (thm_469 A y_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_471 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => thm_16 A x_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_472 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_471 A x_2 y_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_473 : B : hol.type -> y_1 : hol.term B -> x_2 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B x_2 y_1) (hol.eq B y_1 x_2)) :=
  B : hol.type => y_1 : hol.term B => x_2 : hol.term B => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_470 A y_1 x_2) (thm_472 A y_1 x_2)) B y_1 x_2.

(; Theorem: |- ((= ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x))) ((= (g x)) (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))))))) ;)

(; dict ;)

def thm_474 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> g_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (g_3 (hol.select A (z_4 : hol.term A => hol.and (p_2 z_4) (hol.eq B (g_3 x_1) (g_3 z_4))))) (g_3 x_1)) (hol.eq B (g_3 x_1) (g_3 (hol.select A (z_4 : hol.term A => hol.and (p_2 z_4) (hol.eq B (g_3 x_1) (g_3 z_4))))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => g_3 : hol.term (hol.arr A B) => (B : hol.type => y_1 : hol.term B => x_2 : hol.term B => thm_473 B y_1 x_2) B (g_3 x_1) (g_3 (hol.select A (z_4 : hol.term A => hol.and (p_2 z_4) (hol.eq B (g_3 x_1) (g_3 z_4))))).

(; Theorem: |- ((= ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x)))) ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= (g x)) (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))))) ;)

(; dict ;)

def thm_475 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1)) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))) (thm_462 B A x_1 g_2 p_3) (thm_474 A B x_1 p_3 g_2).

(; Theorem: |- ((= ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= (g x)) (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))))) ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x)))) ;)

(; dict ;)

def thm_476 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))))) (thm_475 B A x_1 g_2 p_3).

(; Theorem: |- ((= (\lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))) (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= (g x)) (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))))) ;)

(; dict ;)

def thm_477 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))).

(; Theorem: |- ((= (= (\lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))) (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))))))) (= ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= (g x)) (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))))))))) ;)

(; dict ;)

def thm_478 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))) (hol.eq hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))))) thm_198 (thm_477 B A x_1 g_2 p_3).

(; Theorem: |- ((= (Data.Bool.? \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))))) (Data.Bool.? \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))))) ;)

(; dict ;)

def thm_479 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))).

(; Theorem: |- ((= ((= (\lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))) (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (Data.Bool.? \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= (g x)) (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))))) (Data.Bool.? \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ;)

(; dict ;)

def thm_480 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))) (hol.eq hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))) (thm_478 B A x_1 g_2 p_3) (thm_479 B A x_1 g_2 p_3).

(; Theorem: |- ((= (= (p (select p)))) (= (p (select p)))) ;)

(; dict ;)

def thm_481 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (p_1 (hol.select A p_1))) (hol.eq hol.bool (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (p_1 (hol.select A p_1))).

(; Theorem: |- ((= ((= Data.Bool.?) \lambda p. (p (select p)))) ((= Data.Bool.?) \lambda p. (p (select p)))) ;)

(; dict ;)

def thm_482 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)))) :=
  A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))).

(; Theorem: |- ((= ((= Data.Bool.?) \lambda p. (p (select p)))) ((= Data.Bool.?) \lambda p. (p (select p)))) ;)

(; dict ;)

def thm_483 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)))) :=
  A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) (thm_482 A) (thm_482 A).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_484 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) p_1 p_1) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) p_1.

(; Theorem: |- ((= (Data.Bool.? p)) (\lambda p. (p (select p)) p)) ;)

(; dict ;)

def thm_485 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1 p_1 (hol.EQ_MP (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2))) (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2))) (thm_483 A) (thm_17 A)) (thm_484 A p_1).

(; Theorem: |- ((= (\lambda p. (p (select p)) p)) (p (select p))) ;)

(; dict ;)

def thm_486 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1.

(; Theorem: |- ((= \lambda p. (\lambda p. (p (select p)) p)) \lambda p. (p (select p))) ;)

(; dict ;)

def thm_487 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 : hol.term (hol.arr A hol.bool) => p_1 (hol.select A p_1)) (p_1 : hol.term (hol.arr A hol.bool) => thm_486 A p_1).

(; Theorem: |- ((= (\lambda p. (\lambda p. (p (select p)) p) p)) (\lambda p. (p (select p)) p)) ;)

(; dict ;)

def thm_488 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) (p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1 p_1 (thm_487 A) (thm_484 A p_1).

(; Theorem: |- ((= (= (\lambda p. (\lambda p. (p (select p)) p) p))) (= (\lambda p. (p (select p)) p))) ;)

(; dict ;)

def thm_489 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1)) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) thm_198 (thm_488 A p_1).

(; Theorem: |- ((= ((= (\lambda p. (\lambda p. (p (select p)) p) p)) (\lambda p. (p (select p)) p))) ((= (\lambda p. (p (select p)) p)) (p (select p)))) ;)

(; dict ;)

def thm_490 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1)) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1)) (thm_489 A p_1) (thm_486 A p_1).

(; Theorem: |- ((= (Data.Bool.? p)) (p (select p))) ;)

(; dict ;)

def thm_491 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1)) (thm_485 A p_1) (hol.EQ_MP (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => (p_3 : hol.term (hol.arr A hol.bool) => p_3 (hol.select A p_3)) p_2) p_1) ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1)) (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => p_2 (hol.select A p_2)) p_1) (p_1 (hol.select A p_1))) (thm_490 A p_1) (thm_488 A p_1)).

(; Theorem: |- ((= ((= (p (select p))) (Data.Bool.? p))) ((= (p (select p))) (p (select p)))) ;)

(; dict ;)

def thm_492 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) (hol.eq hol.bool (p_1 (hol.select A p_1)) (p_1 (hol.select A p_1)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1))) (hol.eq hol.bool (p_1 (hol.select A p_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1) (p_1 (hol.select A p_1)) (thm_481 A p_1) (thm_491 A p_1).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_493 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 x_1) hol.true) :=
  x_1 : hol.term hol.bool => (A : hol.type => x_1 : hol.term A => thm_95 A x_1) hol.bool x_1.

(; Theorem: |- ((= ((= (p (select p))) (p (select p)))) Data.Bool.T) ;)

(; dict ;)

def thm_494 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (p_1 (hol.select A p_1))) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (x_1 : hol.term hol.bool => thm_493 x_1) (p_1 (hol.select A p_1)).

(; Theorem: |- ((= ((= (p (select p))) (Data.Bool.? p))) Data.Bool.T) ;)

(; dict ;)

def thm_495 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) hol.true) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) (hol.eq hol.bool (p_1 (hol.select A p_1)) (p_1 (hol.select A p_1))) hol.true (thm_492 A p_1) (thm_494 A p_1).

(; Theorem: |- ((= Data.Bool.T) ((= (p (select p))) (Data.Bool.? p))) ;)

(; dict ;)

def thm_496 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool hol.true (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) hol.true (thm_495 A p_1).

(; Theorem: |- ((= (p (select p))) (Data.Bool.? p)) ;)

(; dict ;)

def thm_497 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP hol.true (hol.eq hol.bool (p_1 (hol.select A p_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) p_1)) (thm_496 A p_1) thm_1.

(; Theorem: |- ((= (\lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))) (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (Data.Bool.? \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))))) ;)

(; dict ;)

def thm_498 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_497 A p_1) A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))).

(; Theorem: |- ((= ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= (g x)) (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))))) (Data.Bool.? \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))))) ;)

(; dict ;)

def thm_499 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (thm_480 B A x_1 g_2 p_3) (thm_498 B A x_1 g_2 p_3).

(; Theorem: |- ((= (Data.Bool.? \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))))) ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= (g x)) (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))))) ;)

(; dict ;)

def thm_500 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))) (thm_499 B A x_1 g_2 p_3).

(; Theorem: |- ((= (\lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))) x)) ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) ;)

(; dict ;)

def thm_501 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) x_1) (hol.and (p_3 x_1) (hol.eq B (g_2 x_1) (g_2 x_1)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A hol.bool (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) x_1.

(; Theorem: |- ((= ((Data.Bool./\ (p x)) ((= (g x)) (g x)))) (\lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))) x)) ;)

(; dict ;)

def thm_502 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.and (p_3 x_2) (hol.eq B (g_1 x_2) (g_1 x_2))) ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_1 x_2) (g_1 z_4))) x_2)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => p_3 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_1 x_2) (g_1 z_4))) x_2) (hol.and (p_3 x_2) (hol.eq B (g_1 x_2) (g_1 x_2))) (thm_501 B A x_2 g_1 p_3).

(; Theorem: |- (\lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))) x) ;)

(; dict ;)

def thm_503 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hol.proof ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hol.EQ_MP (hol.and (p_3 x_1) (hol.eq B (g_2 x_1) (g_2 x_1))) ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) x_1) (thm_502 B A g_2 x_1 p_3) (thm_173 B A g_2 x_1 p_3 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_504 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_306 A P_1).

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_505 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_311 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_506 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_507 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_505 A Q_3 x_1 P_2 hyp_2 (thm_506 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_508 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_507 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_509 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_508 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_510 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_504 A P_2) (thm_509 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))) ;)

(; dict ;)

def thm_511 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_510 A x_1 P_2 hyp_1) A x_1 (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))) ;)

(; dict ;)

def thm_512 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hol.PROVE_HYP ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))) (thm_503 B A x_1 g_2 p_3 hyp_1) (hyp_2 : hol.proof ((z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))) x_1) => thm_511 B A x_1 g_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= (g x)) (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z))))))) ;)

(; dict ;)

def thm_513 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hol.proof (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4)))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))))) (thm_500 B A x_1 g_2 p_3) (thm_512 B A x_1 g_2 p_3 hyp_1).

(; Theorem: |- ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x))) ;)

(; dict ;)

def thm_514 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hol.proof (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hol.EQ_MP (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 x_1) (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1))) (thm_476 B A x_1 g_2 p_3) (thm_513 B A x_1 g_2 p_3 hyp_1).

(; Theorem: |- ((Data.Bool./\ (p (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) ((Data.Bool./\ (p x)) ((= (g (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (g x)))) ;)

(; dict ;)

def thm_515 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (p_3 x_1) -> hol.proof (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.and (p_3 x_1) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (p_3 x_1) => hol.EQ_MP (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1))) (hol.and (p_3 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (hol.and (p_3 x_1) (hol.eq B (g_2 (hol.select A (z_4 : hol.term A => hol.and (p_3 z_4) (hol.eq B (g_2 x_1) (g_2 z_4))))) (g_2 x_1)))) (thm_468 B A x_1 g_2 p_3 hyp_1) (thm_514 B A x_1 g_2 p_3 hyp_1).

(; Theorem: |- ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (f x)) ;)

(; dict ;)

def thm_516 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> f_4 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_3 x_1) -> hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_3 x__1_5) (hol.and (p_3 y_6) (hol.eq B (g_2 x__1_5) (g_2 y_6)))) (hol.eq C (f_4 x__1_5) (f_4 y_6))))) -> hol.proof (hol.eq C (f_4 (hol.select A (z_5 : hol.term A => hol.and (p_3 z_5) (hol.eq B (g_2 x_1) (g_2 z_5))))) (f_4 x_1)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => f_4 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_3 x_1) => hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_3 x__1_5) (hol.and (p_3 y_6) (hol.eq B (g_2 x__1_5) (g_2 y_6)))) (hol.eq C (f_4 x__1_5) (f_4 y_6))))) => thm_461 C B A f_4 x_1 g_2 p_3 hyp_2 (thm_515 B A x_1 g_2 p_3 hyp_1).

(; Theorem: |- ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (f x)) ;)

(; dict ;)

def thm_517 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> f_4 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_3 x_1) -> hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_3 x__1_5) (hol.and (p_3 y_6) (hol.eq B (g_2 x__1_5) (g_2 y_6)))) (hol.eq C (f_4 x__1_5) (f_4 y_6))))) -> hol.proof (hol.eq C (f_4 (hol.select A (z_5 : hol.term A => hol.and (p_3 z_5) (hol.eq B (g_2 x_1) (g_2 z_5))))) (f_4 x_1)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => f_4 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_3 x_1) => hyp_2 : hol.proof (hol.forall A (x__1_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_3 x__1_5) (hol.and (p_3 y_6) (hol.eq B (g_2 x__1_5) (g_2 y_6)))) (hol.eq C (f_4 x__1_5) (f_4 y_6))))) => hol.PROVE_HYP (p_3 x_1) (hol.eq C (f_4 (hol.select A (z_5 : hol.term A => hol.and (p_3 z_5) (hol.eq B (g_2 x_1) (g_2 z_5))))) (f_4 x_1)) (thm_54 A x_1 p_3 hyp_1) (hyp_3 : hol.proof (p_3 x_1) => thm_516 B A C x_1 g_2 p_3 f_4 hyp_3 hyp_2).

(; Theorem: |- ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= (g x)) (g z)))))) (f x)) ;)

(; dict ;)

def thm_518 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> f_4 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_3 x_1) -> hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_3 x_5) (hol.and (p_3 y_6) (hol.eq B (g_2 x_5) (g_2 y_6)))) (hol.eq C (f_4 x_5) (f_4 y_6))))) -> hol.proof (hol.eq C (f_4 (hol.select A (z_5 : hol.term A => hol.and (p_3 z_5) (hol.eq B (g_2 x_1) (g_2 z_5))))) (f_4 x_1)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => f_4 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_3 x_5) (hol.and (p_3 y_6) (hol.eq B (g_2 x_5) (g_2 y_6)))) (hol.eq C (f_4 x_5) (f_4 y_6))))) => hol.PROVE_HYP (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_3 x_5) (hol.and (p_3 y_6) (hol.eq B (g_2 x_5) (g_2 y_6)))) (hol.eq C (f_4 x_5) (f_4 y_6))))) (hol.eq C (f_4 (hol.select A (z_5 : hol.term A => hol.and (p_3 z_5) (hol.eq B (g_2 x_1) (g_2 z_5))))) (f_4 x_1)) (thm_436 C B A f_4 g_2 p_3 hyp_2) (hyp_3 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_3 x_5) (hol.and (p_3 y_6) (hol.eq B (g_2 x_5) (g_2 y_6)))) (hol.eq C (f_4 x_5) (f_4 y_6))))) => thm_517 B A C x_1 g_2 p_3 f_4 hyp_1 hyp_3).

(; Theorem: |- ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x)) ;)

(; dict ;)

def thm_519 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_4 x_1) -> hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.and (p_4 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_5 x_6) (f_5 y_7))))) -> hyp_3 : hol.proof (hol.eq B y_3 (g_2 x_1)) -> hol.proof (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_5 x_1)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_4 x_1) => hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.and (p_4 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_5 x_6) (f_5 y_7))))) => hyp_3 : hol.proof (hol.eq B y_3 (g_2 x_1)) => hol.EQ_MP (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B (g_2 x_1) (g_2 z_6))))) (f_5 x_1)) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_5 x_1)) (thm_456 B A C y_3 x_1 g_2 p_4 f_5 hyp_3) (thm_518 B A C x_1 g_2 p_4 f_5 hyp_1 hyp_2).

(; Theorem: |- ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x)) ;)

(; dict ;)

def thm_520 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_4 x_1) -> hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.and (p_4 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_5 x_6) (f_5 y_7))))) -> hyp_3 : hol.proof (hol.eq B y_3 (g_2 x_1)) -> hol.proof (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_5 x_1)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_4 x_1) => hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.and (p_4 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_5 x_6) (f_5 y_7))))) => hyp_3 : hol.proof (hol.eq B y_3 (g_2 x_1)) => hol.PROVE_HYP (hol.eq B y_3 (g_2 x_1)) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_5 x_1)) (thm_194 A B x_1 g_2 y_3 hyp_3) (hyp_4 : hol.proof (hol.eq B y_3 (g_2 x_1)) => thm_519 B A C x_1 g_2 y_3 p_4 f_5 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x)) ;)

(; dict ;)

def thm_521 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_4 x_1) -> hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.and (p_4 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_5 x_6) (f_5 y_7))))) -> hyp_3 : hol.proof (hol.eq B y_3 (g_2 x_1)) -> hol.proof (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_5 x_1)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_4 x_1) => hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.and (p_4 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_5 x_6) (f_5 y_7))))) => hyp_3 : hol.proof (hol.eq B y_3 (g_2 x_1)) => hol.PROVE_HYP (p_4 x_1) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_5 x_1)) (thm_54 A x_1 p_4 hyp_1) (hyp_4 : hol.proof (p_4 x_1) => thm_520 B A C x_1 g_2 y_3 p_4 f_5 hyp_4 hyp_2 hyp_3).

(; Theorem: |- ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x)) ;)

(; dict ;)

def thm_522 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (p_4 x_1) -> hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.and (p_4 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_5 x_6) (f_5 y_7))))) -> hyp_3 : hol.proof (hol.and (p_4 x_1) (hol.eq B y_3 (g_2 x_1))) -> hol.proof (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_5 x_1)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (p_4 x_1) => hyp_2 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.and (p_4 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_5 x_6) (f_5 y_7))))) => hyp_3 : hol.proof (hol.and (p_4 x_1) (hol.eq B y_3 (g_2 x_1))) => hol.PROVE_HYP (hol.eq B y_3 (g_2 x_1)) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_5 x_1)) (thm_192 A B p_4 x_1 g_2 y_3 hyp_3) (hyp_4 : hol.proof (hol.eq B y_3 (g_2 x_1)) => thm_521 B A C x_1 g_2 y_3 p_4 f_5 hyp_1 hyp_2 hyp_4).

(; Theorem: |- ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x)) ;)

(; dict ;)

def thm_523 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> f_5 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.and (p_4 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_5 x_6) (f_5 y_7))))) -> hyp_2 : hol.proof (hol.and (p_4 x_1) (hol.eq B y_3 (g_2 x_1))) -> hol.proof (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_5 x_1)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => f_5 : hol.term (hol.arr A C) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.and (p_4 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_5 x_6) (f_5 y_7))))) => hyp_2 : hol.proof (hol.and (p_4 x_1) (hol.eq B y_3 (g_2 x_1))) => hol.PROVE_HYP (p_4 x_1) (hol.eq C (f_5 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_5 x_1)) (thm_190 B A g_2 y_3 x_1 p_4 hyp_2) (hyp_3 : hol.proof (p_4 x_1) => thm_522 B A C x_1 g_2 y_3 p_4 f_5 hyp_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x))) ;)

(; dict ;)

def thm_524 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.and (p_5 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_1 x_6) (f_1 y_7))))) -> hol.proof (hol.imp (hol.and (p_5 x_4) (hol.eq B y_3 (g_2 x_4))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_5 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_4))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_6 : hol.term A => hol.forall A (y_7 : hol.term A => hol.imp (hol.and (p_5 x_6) (hol.and (p_5 y_7) (hol.eq B (g_2 x_6) (g_2 y_7)))) (hol.eq C (f_1 x_6) (f_1 y_7))))) => hyp_2 : hol.proof (hol.and (p_5 x_4) (hol.eq B y_3 (g_2 x_4))) => thm_523 B A C x_4 g_2 y_3 p_5 f_1 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) (f x)))) ;)

(; dict ;)

def thm_525 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.and (p_4 y_6) (hol.eq B (g_2 x_5) (g_2 y_6)))) (hol.eq C (f_1 x_5) (f_1 y_6))))) -> hol.proof (hol.forall A (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.and (p_4 y_6) (hol.eq B (g_2 x_5) (g_2 y_6)))) (hol.eq C (f_1 x_5) (f_1 y_6))))) => x_5 : hol.term A => thm_524 C B A f_1 g_2 y_3 x_5 p_4 hyp_1.

(; Theorem: |- (\lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))) (f (select \lambda z. ((Data.Bool./\ (p z)) ((= y) (g z)))))) ;)

(; dict ;)

def thm_526 : B : hol.type -> A : hol.type -> C : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.and (p_4 y_6) (hol.eq B (g_2 x_5) (g_2 y_6)))) (hol.eq C (f_1 x_5) (f_1 y_6))))) -> hol.proof ((y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))) (f_1 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B y_3 (g_2 z_5)))))) :=
  B : hol.type => A : hol.type => C : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.and (p_4 y_6) (hol.eq B (g_2 x_5) (g_2 y_6)))) (hol.eq C (f_1 x_5) (f_1 y_6))))) => hol.EQ_MP (hol.forall A (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5)))) ((y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))) (f_1 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B y_3 (g_2 z_5)))))) (thm_441 C B A f_1 g_2 y_3 p_4) (hol.EQ_MP (hol.forall A (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5)))) (hol.forall A (x_5 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.eq B y_3 (g_2 x_5))) (hol.eq C (f_1 (hol.select A (z_6 : hol.term A => hol.and (p_4 z_6) (hol.eq B y_3 (g_2 z_6))))) (f_1 x_5)))) (thm_444 C B A f_1 g_2 y_3 p_4) (thm_525 C B A f_1 g_2 y_3 p_4 hyp_1)).

(; Theorem: |- (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x))))) ;)

(; dict ;)

def thm_527 : B : hol.type -> A : hol.type -> C : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof ((y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))) (f_1 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B y_3 (g_2 z_5)))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))) :=
  B : hol.type => A : hol.type => C : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof ((y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))) (f_1 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B y_3 (g_2 z_5)))))) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_510 A x_1 P_2 hyp_1) C (f_1 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B y_3 (g_2 z_5))))) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x))))) ;)

(; dict ;)

def thm_528 : B : hol.type -> A : hol.type -> C : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.and (p_4 y_6) (hol.eq B (g_2 x_5) (g_2 y_6)))) (hol.eq C (f_1 x_5) (f_1 y_6))))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))) :=
  B : hol.type => A : hol.type => C : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => hol.forall A (y_6 : hol.term A => hol.imp (hol.and (p_4 x_5) (hol.and (p_4 y_6) (hol.eq B (g_2 x_5) (g_2 y_6)))) (hol.eq C (f_1 x_5) (f_1 y_6))))) => hol.PROVE_HYP ((y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))) (f_1 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B y_3 (g_2 z_5)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))) (thm_526 B A C f_1 g_2 y_3 p_4 hyp_1) (hyp_2 : hol.proof ((y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_4 x_6) (hol.eq B y_3 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))) (f_1 (hol.select A (z_5 : hol.term A => hol.and (p_4 z_5) (hol.eq B y_3 (g_2 z_5)))))) => thm_527 B A C f_1 g_2 y_3 p_4 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))))) ;)

(; dict ;)

def thm_529 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) -> hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) => y_4 : hol.term B => thm_528 B A C f_1 g_2 y_4 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x)))))) ;)

(; dict ;)

def thm_530 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) -> hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) => hol.PROVE_HYP (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) (thm_436 C B A f_1 g_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) => hol.EQ_MP (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) (thm_439 A C B f_1 g_2 p_3) (thm_529 A C B f_1 g_2 p_3 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x))))))) ;)

(; dict ;)

def thm_531 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) => thm_530 A C B f_1 g_2 p_3 hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= y) (f x))))))) ;)

(; dict ;)

def thm_532 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) (hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6)))))) => thm_435 A C B f_1 g_2 p_3 (thm_277 A C B f_1 g_2 p_3 hyp_1)) (hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) => thm_531 C B A f_1 g_2 p_3 (thm_436 C B A f_1 g_2 p_3 hyp_1)).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((= y) (g x)))) ((= (h y)) (f x))))))) ;)

(; dict ;)

def thm_533 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr C hol.bool) hol.bool) (y_5 : hol.term C => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_4 (g_2 x_6))) (hol.eq C y_5 (f_1 x_6))))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) (thm_276 C B A f_1 g_2 p_3) (thm_532 C B A f_1 g_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))))) ;)

(; dict ;)

def thm_534 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))))) (thm_237 C B A f_1 g_2 p_3 hyp_1) (thm_533 C B A f_1 g_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))))) ;)

(; dict ;)

def thm_535 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr A hol.bool) => hol.PROVE_HYP (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_3 x_4) (hol.and (p_3 y_5) (hol.eq B (g_2 x_4) (g_2 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))))) (hol.EQ_MP (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) (thm_48 A C B g_2 f_1 p_3) (thm_227 A C B g_2 f_1 p_3)) (hyp_1 : hol.proof (hol.forall (hol.arr B C) (h_4 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (h_4 (g_2 x_5))))) (hol.forall B (y_5 : hol.term B => hol.forall A (x_6 : hol.term A => hol.imp (hol.and (p_3 x_6) (hol.eq B y_5 (g_2 x_6))) (hol.eq C (h_4 y_5) (f_1 x_6))))))) => thm_534 C B A f_1 g_2 p_3 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))) ;)

(; dict ;)

def thm_536 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_2 x_4) (hol.and (p_2 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_1 x_4) (f_1 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (h_4 (g_3 x_5)))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => p_2 : hol.term (hol.arr A hol.bool) => g_3 : hol.term (hol.arr A B) => thm_535 C B A f_1 g_3 p_2.

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x))))))))) ;)

(; dict ;)

def thm_537 : B : hol.type -> C : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => f_2 : hol.term (hol.arr A C) => hol.EQ_MP (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))) (hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))) (thm_44 C B A f_2 p_1) (thm_536 C B A f_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))))) ;)

(; dict ;)

def thm_538 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))) (hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5))))))))) (thm_40 B C A p_1) (thm_537 B C A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))))) ;)

(; thm ;)

def thm_539 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_3 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.forall A (y_5 : hol.term A => hol.imp (hol.and (p_1 x_4) (hol.and (p_1 y_5) (hol.eq B (g_3 x_4) (g_3 y_5)))) (hol.eq C (f_2 x_4) (f_2 y_5))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_4 : hol.term (hol.arr B C) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (h_4 (g_3 x_5)))))))))) (thm_36 B C A) (thm_538 B C A).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))))) (= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))))) ;)

(; dict ;)

def thm_540 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_541 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_542 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_541 B A g_1 f_2) (thm_541 B A g_1 f_2).

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_543 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_2 y_1) (hol.eq hol.bool y_1 x_2)) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_472 A y_1 x_2) hol.bool y_1 x_2.

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_544 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => (y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => thm_543 y_1 x_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1).

(; Theorem: |- ((= \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_545 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (g_2 : hol.term (hol.arr A B) => thm_544 B A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_546 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (thm_41 B A) (thm_545 B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_547 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) hol.bool (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (f_1 : hol.term (hol.arr A B) => thm_546 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) ;)

(; dict ;)

def thm_548 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (thm_41 B A) (thm_547 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) ;)

(; dict ;)

def thm_549 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (thm_548 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) ;)

(; dict ;)

def thm_550 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (thm_549 B A) (thm_18 B A).

(; Theorem: |- (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_551 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_550 B A f_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_552 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_551 B A f_2 g_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_553 : C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A C) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq C (f_2 x_3) (g_1 x_3)))) :=
  C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A C) => f_2 : hol.term (hol.arr A C) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_542 B A g_1 f_2) (thm_552 B A g_1 f_2)) C A g_1 f_2.

(; Theorem: |- ((= ((= f) ((Function.o h) g))) (Data.Bool.! \lambda x. ((= (f x)) (((Function.o h) g) x)))) ;)

(; dict ;)

def thm_554 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_2 g_1)) (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_2 g_1 x_4)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => (C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A C) => f_2 : hol.term (hol.arr A C) => thm_553 C A g_1 f_2) C A (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_2 g_1) f_3.

(; Theorem: |- ((= (= (f x))) (= (f x))) ;)

(; dict ;)

def thm_555 : A : hol.type -> C : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr C hol.bool) (hol.eq C (f_2 x_1)) (hol.eq C (f_2 x_1))) :=
  A : hol.type => C : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A C) => hol.REFL (hol.arr C hol.bool) (hol.eq C (f_2 x_1)).

(; Theorem: |- ((= ((= (((Function.o f) g) x)) (f (g x)))) ((= (((Function.o f) g) x)) (f (g x)))) ;)

(; dict ;)

def thm_556 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1)))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.REFL hol.bool (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))).

(; Theorem: |- ((= ((= (((Function.o f) g) x)) (f (g x)))) ((= (((Function.o f) g) x)) (f (g x)))) ;)

(; dict ;)

def thm_557 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1)))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.TRANS hol.bool (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (thm_556 A B C x_1 g_2 f_3) (thm_556 A B C x_1 g_2 f_3).

(; Theorem: |- (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.o f) g) x)) (f (g x))))) ;)

(; dict ;)

def thm_558 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => thm_19 A C B f_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((= (((Function.o f) g) x)) (f (g x)))) ;)

(; dict ;)

def thm_559 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1 x_3) (f_2 (g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => thm_558 C B A f_2 g_1.

(; Theorem: |- ((= (((Function.o f) g) x)) (f (g x))) ;)

(; dict ;)

def thm_560 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => thm_559 B C A g_2 f_3 x_1.

(; Theorem: |- ((= (((Function.o h) g) x)) (h (g x))) ;)

(; dict ;)

def thm_561 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> h_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2 x_1) (h_3 (g_2 x_1))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => h_3 : hol.term (hol.arr B C) => (A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => (A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.EQ_MP (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (thm_557 A B C x_1 g_2 f_3) (thm_560 A B C x_1 g_2 f_3)) A B C x_1 g_2 f_3) A B C x_1 g_2 h_3.

(; Theorem: |- ((= ((= (f x)) (((Function.o h) g) x))) ((= (f x)) (h (g x)))) ;)

(; dict ;)

def thm_562 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq C (f_4 x_3) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_2 g_1 x_3)) (hol.eq C (f_4 x_3) (h_2 (g_1 x_3)))) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => hol.APP_THM C hol.bool (hol.eq C (f_4 x_3)) (hol.eq C (f_4 x_3)) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_2 g_1 x_3) (h_2 (g_1 x_3)) (thm_555 A C x_3 f_4) (thm_561 A B C x_3 g_1 h_2).

(; Theorem: |- ((= \lambda x. ((= (f x)) (((Function.o h) g) x))) \lambda x. ((= (f x)) (h (g x)))) ;)

(; dict ;)

def thm_563 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_4 : hol.term A => hol.eq C (f_3 x_4) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_2 g_1 x_4)) (x_4 : hol.term A => hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => hol.ABS_THM A hol.bool (x_4 : hol.term A => hol.eq C (f_3 x_4) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_2 g_1 x_4)) (x_4 : hol.term A => hol.eq C (f_3 x_4) (h_2 (g_1 x_4))) (x_4 : hol.term A => thm_562 B A C g_1 h_2 x_4 f_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (f x)) (((Function.o h) g) x)))) (Data.Bool.! \lambda x. ((= (f x)) (h (g x))))) ;)

(; dict ;)

def thm_564 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_2 g_1 x_4))) (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (h_2 (g_1 x_4))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_4 : hol.term A => hol.eq C (f_3 x_4) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_2 g_1 x_4)) (x_4 : hol.term A => hol.eq C (f_3 x_4) (h_2 (g_1 x_4))) (thm_50 A) (thm_563 B C A g_1 h_2 f_3).

(; Theorem: |- ((= ((= f) ((Function.o h) g))) (Data.Bool.! \lambda x. ((= (f x)) (h (g x))))) ;)

(; dict ;)

def thm_565 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_2 g_1)) (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (h_2 (g_1 x_4))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => hol.TRANS hol.bool (hol.eq (hol.arr A C) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_2 g_1)) (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_2 g_1 x_4))) (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (thm_554 B C A g_1 h_2 f_3) (thm_564 B C A g_1 h_2 f_3).

(; Theorem: |- ((= \lambda h. ((= f) ((Function.o h) g))) \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x))))) ;)

(; dict ;)

def thm_566 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_1)) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => hol.ABS_THM (hol.arr B C) hol.bool (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_1)) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4)))) (h_3 : hol.term (hol.arr B C) => thm_565 B C A g_1 h_3 f_2).

(; Theorem: |- ((= (Data.Bool.? \lambda h. ((= f) ((Function.o h) g)))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) ;)

(; dict ;)

def thm_567 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4)))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool)) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_1)) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4)))) (thm_229 C B) (thm_566 A C B g_1 f_2).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))))) ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))))) ;)

(; dict ;)

def thm_568 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4))))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))))) ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))))) ;)

(; dict ;)

def thm_569 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4))))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))) (thm_568 A C B g_1 f_2) (thm_568 A C B g_1 f_2).

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) ;)

(; dict ;)

def thm_570 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) ;)

(; dict ;)

def thm_571 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (thm_570 A C B g_2 f_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) ;)

(; dict ;)

def thm_572 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) ;)

(; dict ;)

def thm_573 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4)))))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4)))))) => hol.SYM hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (thm_572 C B A f_2 g_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x))))))) ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))))) ;)

(; dict ;)

def thm_574 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => hol.PROP_EXT (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))) (hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))) => thm_571 C B A f_1 g_2 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))) => thm_573 A C B g_2 f_1 hyp_1).

(; Theorem: |- ((= \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x))))))) \lambda g. ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))))) ;)

(; dict ;)

def thm_575 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))) (g_2 : hol.term (hol.arr A B) => thm_574 C B A f_1 g_2).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))))) (Data.Bool.! \lambda g. ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))))) ;)

(; dict ;)

def thm_576 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))) (thm_41 B A) (thm_575 C B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))))) ;)

(; dict ;)

def thm_577 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.ABS_THM (hol.arr A C) hol.bool (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))))) (f_1 : hol.term (hol.arr A C) => thm_576 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x))))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))))))) ;)

(; dict ;)

def thm_578 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))))) (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A C) hol.bool) hol.bool (hol.forall (hol.arr A C)) (hol.forall (hol.arr A C)) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))))) (thm_37 C A) (thm_577 B C A).

(; Theorem: |- ((= (\lambda x. Data.Bool.T x)) Data.Bool.T) ;)

(; dict ;)

def thm_579 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool ((x_2 : hol.term A => hol.true) x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.BETA_CONV A hol.bool (x_2 : hol.term A => hol.true) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. Data.Bool.T x)) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_580 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => (x_2 : hol.term A => hol.true) x_1) (x_1 : hol.term A => hol.true)) :=
  A : hol.type => hol.ABS_THM A hol.bool (x_1 : hol.term A => (x_2 : hol.term A => hol.true) x_1) (x_1 : hol.term A => hol.true) (x_1 : hol.term A => thm_579 A x_1).

(; Theorem: |- ((= (\lambda x. (\lambda x. Data.Bool.T x) x)) (\lambda x. Data.Bool.T x)) ;)

(; dict ;)

def thm_581 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) x_1) ((x_2 : hol.term A => hol.true) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) (x_2 : hol.term A => hol.true) x_1 x_1 (thm_580 A) (thm_94 A x_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. Data.Bool.T x) x))) (= (\lambda x. Data.Bool.T x))) ;)

(; dict ;)

def thm_582 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) x_1)) (hol.eq hol.bool ((x_2 : hol.term A => hol.true) x_1))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) x_1) ((x_2 : hol.term A => hol.true) x_1) thm_198 (thm_581 A x_1).

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. Data.Bool.T x) x)) (\lambda x. Data.Bool.T x))) ((= (\lambda x. Data.Bool.T x)) Data.Bool.T)) ;)

(; dict ;)

def thm_583 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) x_1) ((x_2 : hol.term A => hol.true) x_1)) (hol.eq hol.bool ((x_2 : hol.term A => hol.true) x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) x_1)) (hol.eq hol.bool ((x_2 : hol.term A => hol.true) x_1)) ((x_2 : hol.term A => hol.true) x_1) hol.true (thm_582 A x_1) (thm_579 A x_1).

(; Theorem: |- ((= (Data.Bool./\ (\lambda x. Data.Bool.T x))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_584 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((x_2 : hol.term A => hol.true) x_1)) (hol.and hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((x_2 : hol.term A => hol.true) x_1) hol.true thm_76 (hol.EQ_MP (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) x_1) ((x_2 : hol.term A => hol.true) x_1)) (hol.eq hol.bool ((x_2 : hol.term A => hol.true) x_1) hol.true) (thm_583 A x_1) (thm_581 A x_1)).

(; Theorem: |- ((= y) y) ;)

(; dict ;)

def thm_585 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.eq A y_1 y_1) :=
  A : hol.type => y_1 : hol.term A => hol.REFL A y_1.

(; Theorem: |- ((= (\lambda x. (\lambda x. Data.Bool.T x) y)) (\lambda x. Data.Bool.T y)) ;)

(; dict ;)

def thm_586 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) y_1) ((x_2 : hol.term A => hol.true) y_1)) :=
  A : hol.type => y_1 : hol.term A => hol.APP_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) (x_2 : hol.term A => hol.true) y_1 y_1 (thm_580 A) (thm_585 A y_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. Data.Bool.T x) y))) (= (\lambda x. Data.Bool.T y))) ;)

(; dict ;)

def thm_587 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) y_1)) (hol.eq hol.bool ((x_2 : hol.term A => hol.true) y_1))) :=
  A : hol.type => y_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) y_1) ((x_2 : hol.term A => hol.true) y_1) thm_198 (thm_586 A y_1).

(; Theorem: |- ((= (\lambda x. Data.Bool.T y)) Data.Bool.T) ;)

(; dict ;)

def thm_588 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.eq hol.bool ((x_2 : hol.term A => hol.true) y_1) hol.true) :=
  A : hol.type => y_1 : hol.term A => hol.BETA_CONV A hol.bool (x_2 : hol.term A => hol.true) y_1.

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. Data.Bool.T x) y)) (\lambda x. Data.Bool.T y))) ((= (\lambda x. Data.Bool.T y)) Data.Bool.T)) ;)

(; dict ;)

def thm_589 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) y_1) ((x_2 : hol.term A => hol.true) y_1)) (hol.eq hol.bool ((x_2 : hol.term A => hol.true) y_1) hol.true)) :=
  A : hol.type => y_1 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) y_1)) (hol.eq hol.bool ((x_2 : hol.term A => hol.true) y_1)) ((x_2 : hol.term A => hol.true) y_1) hol.true (thm_587 A y_1) (thm_588 A y_1).

(; Theorem: |- ((= (Data.Bool./\ (\lambda x. Data.Bool.T y))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_590 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and ((x_2 : hol.term A => hol.true) y_1)) (hol.and hol.true)) :=
  A : hol.type => y_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and ((x_2 : hol.term A => hol.true) y_1) hol.true thm_76 (hol.EQ_MP (hol.eq hol.bool ((x_2 : hol.term A => (x_3 : hol.term A => hol.true) x_2) y_1) ((x_2 : hol.term A => hol.true) y_1)) (hol.eq hol.bool ((x_2 : hol.term A => hol.true) y_1) hol.true) (thm_589 A y_1) (thm_586 A y_1)).

(; Theorem: |- ((= ((= (g x)) (g y))) ((= (g x)) (g y))) ;)

(; dict ;)

def thm_591 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (g_3 x_2) (g_3 y_1)) (hol.eq B (g_3 x_2) (g_3 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq B (g_3 x_2) (g_3 y_1)).

(; Theorem: |- ((= ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y)))) ((Data.Bool./\ Data.Bool.T) ((= (g x)) (g y)))) ;)

(; dict ;)

def thm_592 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and ((x_4 : hol.term A => hol.true) y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) (hol.and hol.true (hol.eq B (g_2 x_1) (g_2 y_3)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and ((x_4 : hol.term A => hol.true) y_3)) (hol.and hol.true) (hol.eq B (g_2 x_1) (g_2 y_3)) (hol.eq B (g_2 x_1) (g_2 y_3)) (thm_590 A y_3) (thm_591 A B y_3 x_1 g_2).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) ((= (g x)) (g y)))) ((= (g x)) (g y))) ;)

(; dict ;)

def thm_593 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> g_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.and hol.true (hol.eq B (g_3 x_2) (g_3 y_1))) (hol.eq B (g_3 x_2) (g_3 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => x_2 : hol.term A => g_3 : hol.term (hol.arr A B) => (t_1 : hol.term hol.bool => thm_106 t_1) (hol.eq B (g_3 x_2) (g_3 y_1)).

(; Theorem: |- ((= ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y)))) ((= (g x)) (g y))) ;)

(; dict ;)

def thm_594 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and ((x_4 : hol.term A => hol.true) y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) (hol.eq B (g_2 x_1) (g_2 y_3))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => hol.TRANS hol.bool (hol.and ((x_4 : hol.term A => hol.true) y_3) (hol.eq B (g_2 x_1) (g_2 y_3))) (hol.and hol.true (hol.eq B (g_2 x_1) (g_2 y_3))) (hol.eq B (g_2 x_1) (g_2 y_3)) (thm_592 B A x_1 g_2 y_3) (thm_593 A B y_3 x_1 g_2).

(; Theorem: |- ((= ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((Data.Bool./\ Data.Bool.T) ((= (g x)) (g y)))) ;)

(; dict ;)

def thm_595 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and ((x_4 : hol.term A => hol.true) x_3) (hol.and ((x_4 : hol.term A => hol.true) y_2) (hol.eq B (g_1 x_3) (g_1 y_2)))) (hol.and hol.true (hol.eq B (g_1 x_3) (g_1 y_2)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => y_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and ((x_4 : hol.term A => hol.true) x_3)) (hol.and hol.true) (hol.and ((x_4 : hol.term A => hol.true) y_2) (hol.eq B (g_1 x_3) (g_1 y_2))) (hol.eq B (g_1 x_3) (g_1 y_2)) (thm_584 A x_3) (thm_594 B A x_3 g_1 y_2).

(; Theorem: |- ((= ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((= (g x)) (g y))) ;)

(; dict ;)

def thm_596 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and ((x_4 : hol.term A => hol.true) x_3) (hol.and ((x_4 : hol.term A => hol.true) y_2) (hol.eq B (g_1 x_3) (g_1 y_2)))) (hol.eq B (g_1 x_3) (g_1 y_2))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => y_2 : hol.term A => x_3 : hol.term A => hol.TRANS hol.bool (hol.and ((x_4 : hol.term A => hol.true) x_3) (hol.and ((x_4 : hol.term A => hol.true) y_2) (hol.eq B (g_1 x_3) (g_1 y_2)))) (hol.and hol.true (hol.eq B (g_1 x_3) (g_1 y_2))) (hol.eq B (g_1 x_3) (g_1 y_2)) (thm_595 B A g_1 y_2 x_3) (thm_593 A B y_2 x_3 g_1).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y)))))) (Data.Bool.==> ((= (g x)) (g y)))) ;)

(; dict ;)

def thm_597 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> y_2 : hol.term A -> x_3 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.and ((x_4 : hol.term A => hol.true) x_3) (hol.and ((x_4 : hol.term A => hol.true) y_2) (hol.eq B (g_1 x_3) (g_1 y_2))))) (hol.imp (hol.eq B (g_1 x_3) (g_1 y_2)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => y_2 : hol.term A => x_3 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.and ((x_4 : hol.term A => hol.true) x_3) (hol.and ((x_4 : hol.term A => hol.true) y_2) (hol.eq B (g_1 x_3) (g_1 y_2)))) (hol.eq B (g_1 x_3) (g_1 y_2)) thm_317 (thm_596 B A g_1 y_2 x_3).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))) ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_598 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> y_3 : hol.term A -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_4) (hol.and ((x_5 : hol.term A => hol.true) y_3) (hol.eq B (g_2 x_4) (g_2 y_3)))) (hol.eq C (f_1 x_4) (f_1 y_3))) (hol.imp (hol.eq B (g_2 x_4) (g_2 y_3)) (hol.eq C (f_1 x_4) (f_1 y_3)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => y_3 : hol.term A => x_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_4) (hol.and ((x_5 : hol.term A => hol.true) y_3) (hol.eq B (g_2 x_4) (g_2 y_3))))) (hol.imp (hol.eq B (g_2 x_4) (g_2 y_3))) (hol.eq C (f_1 x_4) (f_1 y_3)) (hol.eq C (f_1 x_4) (f_1 y_3)) (thm_597 B A g_2 y_3 x_4) (thm_386 A C y_3 x_4 f_1).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))) \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))) ;)

(; dict ;)

def thm_599 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> x_3 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))) (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => hol.ABS_THM A hol.bool (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))) (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))) (y_4 : hol.term A => thm_598 C B A f_1 g_2 y_4 x_3).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))) (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_600 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4)))) (hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))) (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))) (thm_50 A) (thm_599 C B A f_1 g_2 x_3).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))) \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))) ;)

(; dict ;)

def thm_601 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4)))) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4)))) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))) (x_3 : hol.term A => thm_600 C B A f_1 g_2 x_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) ;)

(; dict ;)

def thm_602 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4)))) (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))) (thm_50 A) (thm_601 C B A f_1 g_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((= (f x)) (f y))))))) (= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))))) ;)

(; dict ;)

def thm_603 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4)))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) thm_198 (thm_602 C B A f_1 g_2).

(; Theorem: |- ((= (Data.Bool.==> (\lambda x. Data.Bool.T x))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_604 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp ((x_2 : hol.term A => hol.true) x_1)) (hol.imp hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp ((x_2 : hol.term A => hol.true) x_1) hol.true thm_317 (thm_579 A x_1).

(; Theorem: |- ((= ((= (f x)) (h (g x)))) ((= (f x)) (h (g x)))) ;)

(; dict ;)

def thm_605 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq C (f_4 x_3) (h_2 (g_1 x_3))) (hol.eq C (f_4 x_3) (h_2 (g_1 x_3)))) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => hol.REFL hol.bool (hol.eq C (f_4 x_3) (h_2 (g_1 x_3))).

(; Theorem: |- ((= ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (h (g x))))) ((Data.Bool.==> Data.Bool.T) ((= (f x)) (h (g x))))) ;)

(; dict ;)

def thm_606 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (hol.imp hol.true (hol.eq C (f_3 x_4) (h_2 (g_1 x_4))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => x_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp ((x_5 : hol.term A => hol.true) x_4)) (hol.imp hol.true) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4))) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4))) (thm_604 A x_4) (thm_605 B A C g_1 h_2 x_4 f_3).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) ((= (f x)) (h (g x))))) ((= (f x)) (h (g x)))) ;)

(; dict ;)

def thm_607 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.imp hol.true (hol.eq C (f_4 x_3) (h_2 (g_1 x_3)))) (hol.eq C (f_4 x_3) (h_2 (g_1 x_3)))) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => (t_1 : hol.term hol.bool => thm_339 t_1) (hol.eq C (f_4 x_3) (h_2 (g_1 x_3))).

(; Theorem: |- ((= ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (h (g x))))) ((= (f x)) (h (g x)))) ;)

(; dict ;)

def thm_608 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => x_4 : hol.term A => hol.TRANS hol.bool (hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (hol.imp hol.true (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4))) (thm_606 B C A g_1 h_2 f_3 x_4) (thm_607 B A C g_1 h_2 x_4 f_3).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (h (g x))))) \lambda x. ((= (f x)) (h (g x)))) ;)

(; dict ;)

def thm_609 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (x_4 : hol.term A => hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => hol.ABS_THM A hol.bool (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (x_4 : hol.term A => hol.eq C (f_3 x_4) (h_2 (g_1 x_4))) (x_4 : hol.term A => thm_608 B C A g_1 h_2 f_3 x_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. ((= (f x)) (h (g x))))) ;)

(; dict ;)

def thm_610 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> h_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4))))) (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (h_2 (g_1 x_4))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => h_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (h_2 (g_1 x_4)))) (x_4 : hol.term A => hol.eq C (f_3 x_4) (h_2 (g_1 x_4))) (thm_50 A) (thm_609 B C A g_1 h_2 f_3).

(; Theorem: |- ((= \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (h (g x)))))) \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x))))) ;)

(; dict ;)

def thm_611 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => hol.ABS_THM (hol.arr B C) hol.bool (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4)))) (h_3 : hol.term (hol.arr B C) => thm_610 B C A g_1 h_3 f_2).

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (h (g x))))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) ;)

(; dict ;)

def thm_612 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_2 x_4) (h_3 (g_1 x_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4)))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool)) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4)))) (thm_229 C B) (thm_611 A C B g_1 f_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (h (g x)))))))) ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x))))))) ;)

(; dict ;)

def thm_613 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4)))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (thm_603 C B A f_1 g_2) (thm_612 A C B g_2 f_1).

(; Theorem: |- ((= \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (h (g x)))))))) \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x))))))) ;)

(; dict ;)

def thm_614 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))) (g_2 : hol.term (hol.arr A B) => thm_613 C B A f_1 g_2).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (h (g x))))))))) (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))))) ;)

(; dict ;)

def thm_615 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))) (thm_41 B A) (thm_614 C B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (h (g x))))))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))))) ;)

(; dict ;)

def thm_616 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))))) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.ABS_THM (hol.arr A C) hol.bool (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))))) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))) (f_1 : hol.term (hol.arr A C) => thm_615 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (h (g x)))))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x))))))))) ;)

(; dict ;)

def thm_617 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))))) (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A C) hol.bool) hol.bool (hol.forall (hol.arr A C)) (hol.forall (hol.arr A C)) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))))) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))) (thm_37 C A) (thm_616 B C A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (\lambda x. Data.Bool.T x)) ((Data.Bool./\ (\lambda x. Data.Bool.T y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (h (g x))))))))) ;)

(; dict ;)

def thm_618 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => thm_538 B C A (x_1 : hol.term A => hol.true).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))))) ;)

(; dict ;)

def thm_619 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.and ((x_5 : hol.term A => hol.true) x_3) (hol.and ((x_5 : hol.term A => hol.true) y_4) (hol.eq B (g_2 x_3) (g_2 y_4)))) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))))))) (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))))) (thm_617 B C A) (thm_618 B C A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))))) ;)

(; dict ;)

def thm_620 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4)))))))) (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))))) (thm_578 B C A) (thm_619 B C A).

(; Theorem: |- (Data.Bool.! \lambda g. ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))))) ;)

(; dict ;)

def thm_621 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (h_3 (g_2 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => thm_620 B C A f_1.

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (h (g x)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) ;)

(; dict ;)

def thm_622 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => thm_621 C B A f_2 g_1.

(; Theorem: |- ((= (Data.Bool.? \lambda h. ((= f) ((Function.o h) g)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) ;)

(; dict ;)

def thm_623 : A : hol.type -> C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_1))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))) :=
  A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4))))) (thm_567 A C B g_1 f_2) ((A : hol.type => C : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A C) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (h_3 (g_1 x_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_1 x_3) (g_1 y_4)) (hol.eq C (f_2 x_3) (f_2 y_4)))))) (thm_569 A C B g_1 f_2) (thm_622 A C B g_1 f_2)) A C B g_1 f_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. ((= f) ((Function.o h) g))))) ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))))) ;)

(; dict ;)

def thm_624 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (thm_540 C B A f_1 g_2) (thm_623 A C B g_2 f_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y))))))) Data.Bool.T) ;)

(; dict ;)

def thm_625 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => (x_1 : hol.term hol.bool => thm_493 x_1) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. ((= f) ((Function.o h) g))))) Data.Bool.T) ;)

(; dict ;)

def thm_626 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2)))) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4)))))) hol.true (thm_624 C B A f_1 g_2) (thm_625 C B A f_1 g_2).

(; Theorem: |- ((= \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. ((= f) ((Function.o h) g))))) \lambda g. Data.Bool.T) ;)

(; dict ;)

def thm_627 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2)))) (g_2 : hol.term (hol.arr A B) => hol.true)) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2)))) (g_2 : hol.term (hol.arr A B) => hol.true) (g_2 : hol.term (hol.arr A B) => thm_626 C B A f_1 g_2).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. ((= f) ((Function.o h) g)))))) (Data.Bool.! \lambda g. Data.Bool.T)) ;)

(; dict ;)

def thm_628 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.true))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2)))) (g_2 : hol.term (hol.arr A B) => hol.true) (thm_41 B A) (thm_627 C B A f_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_629 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda g. t)) t)) ((= (Data.Bool.! \lambda g. t)) t)) ;)

(; dict ;)

def thm_630 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda g. t)) t)) ;)

(; dict ;)

def thm_631 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1) (thm_629 A t_1) (thm_630 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_632 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_20 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda g. t)) t) ;)

(; dict ;)

def thm_633 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1) (thm_631 A t_1) (thm_632 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. t)) t) ;)

(; dict ;)

def thm_634 : B : hol.type -> A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => t_1)) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_633 A t_1) (hol.arr A B) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda g. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_635 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_1 : hol.term (hol.arr A B) => hol.true)) hol.true) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => t_1 : hol.term hol.bool => thm_634 B A t_1) B A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. ((= f) ((Function.o h) g)))))) Data.Bool.T) ;)

(; dict ;)

def thm_636 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2))))) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => hol.TRANS hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.true)) hol.true (thm_628 C B A f_1) (thm_635 B A).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. ((= f) ((Function.o h) g)))))) \lambda f. Data.Bool.T) ;)

(; dict ;)

def thm_637 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2))))) (f_1 : hol.term (hol.arr A C) => hol.true)) :=
  B : hol.type => C : hol.type => A : hol.type => hol.ABS_THM (hol.arr A C) hol.bool (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2))))) (f_1 : hol.term (hol.arr A C) => hol.true) (f_1 : hol.term (hol.arr A C) => thm_636 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. ((= f) ((Function.o h) g))))))) (Data.Bool.! \lambda f. Data.Bool.T)) ;)

(; dict ;)

def thm_638 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2)))))) (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.true))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A C) hol.bool) hol.bool (hol.forall (hol.arr A C)) (hol.forall (hol.arr A C)) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2))))) (f_1 : hol.term (hol.arr A C) => hol.true) (thm_37 C A) (thm_637 B C A).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda f. t)) t)) ((= (Data.Bool.! \lambda f. t)) t)) ;)

(; dict ;)

def thm_639 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda f. t)) t)) ;)

(; dict ;)

def thm_640 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1) (thm_629 A t_1) (thm_639 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. t)) t) ;)

(; dict ;)

def thm_641 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1) (thm_640 A t_1) (thm_632 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. t)) t) ;)

(; dict ;)

def thm_642 : C : hol.type -> A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => t_1)) t_1) :=
  C : hol.type => A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_641 A t_1) (hol.arr A C) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda f. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_643 : C : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.true)) hol.true) :=
  C : hol.type => A : hol.type => (C : hol.type => A : hol.type => t_1 : hol.term hol.bool => thm_642 C A t_1) C A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. ((= f) ((Function.o h) g))))))) Data.Bool.T) ;)

(; dict ;)

def thm_644 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2)))))) hol.true) :=
  B : hol.type => C : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2)))))) (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.true)) hol.true (thm_638 B C A) (thm_643 C A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. ((= f) ((Function.o h) g))))))) ;)

(; dict ;)

def thm_645 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2)))))) hol.true (thm_644 B C A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. ((= f) ((Function.o h) g)))))) ;)

(; dict ;)

def thm_646 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2)))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.EQ_MP hol.true (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq B (g_2 x_3) (g_2 y_4)) (hol.eq C (f_1 x_3) (f_1 y_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (h_3 : hol.term (hol.arr B C) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) h_3 g_2)))))) (thm_645 B C A) thm_1.

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))))) \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))))) ;)

(; dict ;)

def thm_647 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))).

(; Theorem: |- ((= \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))))) \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))))) ;)

(; dict ;)

def thm_648 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))) (thm_647 B C A) (thm_647 B C A).

(; Theorem: |- ((= (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))))))))) (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))))))))) ;)

(; dict ;)

def thm_649 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))) (thm_33 A) (thm_648 B C A).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))))))) ;)

(; dict ;)

def thm_650 : B : hol.type -> C : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr (hol.arr A C) hol.bool) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))))))) ;)

(; dict ;)

def thm_651 : B : hol.type -> C : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr (hol.arr A C) hol.bool) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))) (thm_650 B C A p_1) (thm_650 B C A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))))) ;)

(; dict ;)

def thm_652 : B : hol.type -> C : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))) (hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr A C) hol.bool) hol.bool (hol.forall (hol.arr A C)) (hol.forall (hol.arr A C)) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))) (thm_37 C A) (thm_651 B C A p_1).

(; Theorem: |- ((= \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))) \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))) ;)

(; dict ;)

def thm_653 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (g_3 (h_4 x_5))))))) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (g_3 (h_4 x_5)))))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr (hol.arr B C) hol.bool) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (g_3 (h_4 x_5))))))).

(; Theorem: |- ((= \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))) \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))) ;)

(; dict ;)

def thm_654 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (g_3 (h_4 x_5))))))) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (g_3 (h_4 x_5)))))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => p_2 : hol.term (hol.arr A hol.bool) => hol.TRANS (hol.arr (hol.arr B C) hol.bool) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (g_3 (h_4 x_5))))))) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (g_3 (h_4 x_5))))))) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (g_3 (h_4 x_5))))))) (thm_653 A C B f_1 p_2) (thm_653 A C B f_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))))))) (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))))))) ;)

(; dict ;)

def thm_655 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (g_3 (h_4 x_5)))))))) (hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (g_3 (h_4 x_5))))))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => p_2 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C)) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (g_3 (h_4 x_5))))))) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (g_3 (h_4 x_5))))))) (thm_45 C B) (thm_654 A C B f_1 p_2).

(; Theorem: |- ((= (Data.Bool.==> (p x))) (Data.Bool.==> (p x))) ;)

(; dict ;)

def thm_656 : A : hol.type -> x_1 : hol.term A -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (p_2 x_1)) (hol.imp (p_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => p_2 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.imp (p_2 x_1)).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_657 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool))) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)).

(; Theorem: |- ((= (\lambda y. ((= (g y)) (f x)) y)) ((= (g y)) (f x))) ;)

(; dict ;)

def thm_658 : A : hol.type -> C : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A C) -> g_4 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool ((y_5 : hol.term B => hol.eq C (g_4 y_5) (f_3 x_2)) y_1) (hol.eq C (g_4 y_1) (f_3 x_2))) :=
  A : hol.type => C : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A C) => g_4 : hol.term (hol.arr B C) => hol.BETA_CONV B hol.bool (y_5 : hol.term B => hol.eq C (g_4 y_5) (f_3 x_2)) y_1.

(; Theorem: |- ((= \lambda y. (\lambda y. ((= (g y)) (f x)) y)) \lambda y. ((= (g y)) (f x))) ;)

(; dict ;)

def thm_659 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> g_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_4 : hol.term B => (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_1)) y_4) (y_4 : hol.term B => hol.eq C (g_3 y_4) (f_2 x_1))) :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A C) => g_3 : hol.term (hol.arr B C) => hol.ABS_THM B hol.bool (y_4 : hol.term B => (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_1)) y_4) (y_4 : hol.term B => hol.eq C (g_3 y_4) (f_2 x_1)) (y_4 : hol.term B => thm_658 A C B y_4 x_1 f_2 g_3).

(; Theorem: |- ((= (Data.Bool.? \lambda y. (\lambda y. ((= (g y)) (f x)) y))) (Data.Bool.? \lambda y. ((= (g y)) (f x)))) ;)

(; dict ;)

def thm_660 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> g_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_1)) y_4)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_3 y_4) (f_2 x_1)))) :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A C) => g_3 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_4 : hol.term B => (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_1)) y_4) (y_4 : hol.term B => hol.eq C (g_3 y_4) (f_2 x_1)) (thm_657 B) (thm_659 A C B x_1 f_2 g_3).

(; Theorem: |- ((= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. (\lambda y. ((= (g y)) (f x)) y)))) ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x))))) ;)

(; dict ;)

def thm_661 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5))) (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (p_4 x_3)) (hol.imp (p_4 x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_3))) (thm_656 A x_3 p_4) (thm_660 A C B x_3 f_1 g_2).

(; Theorem: |- ((= (= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. (\lambda y. ((= (g y)) (f x)) y))))) (= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) ;)

(; dict ;)

def thm_662 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5)))) (hol.eq hol.bool (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_3)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5))) (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_3)))) thm_198 (thm_661 C B A f_1 g_2 x_3 p_4).

(; Theorem: |- ((= ((Data.Bool.==> (p x)) (\lambda y. ((= (g y)) (f x)) y))) ((Data.Bool.==> (p x)) ((= (g y)) (f x)))) ;)

(; dict ;)

def thm_663 : C : hol.type -> B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A C) -> g_3 : hol.term (hol.arr B C) -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_5 x_4) ((y_6 : hol.term B => hol.eq C (g_3 y_6) (f_2 x_4)) y_1)) (hol.imp (p_5 x_4) (hol.eq C (g_3 y_1) (f_2 x_4)))) :=
  C : hol.type => B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A C) => g_3 : hol.term (hol.arr B C) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (p_5 x_4)) (hol.imp (p_5 x_4)) ((y_6 : hol.term B => hol.eq C (g_3 y_6) (f_2 x_4)) y_1) (hol.eq C (g_3 y_1) (f_2 x_4)) (thm_656 A x_4 p_5) (thm_658 A C B y_1 x_4 f_2 g_3).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> (p x)) (\lambda y. ((= (g y)) (f x)) y))) \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))) ;)

(; dict ;)

def thm_664 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) ((y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5)) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (g_2 y_5) (f_1 x_3)))) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.ABS_THM B hol.bool (y_5 : hol.term B => hol.imp (p_4 x_3) ((y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5)) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (g_2 y_5) (f_1 x_3))) (y_5 : hol.term B => thm_663 C B A y_5 f_1 g_2 x_3 p_4).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) (\lambda y. ((= (g y)) (f x)) y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x))))) ;)

(; dict ;)

def thm_665 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) ((y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (g_2 y_5) (f_1 x_3))))) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_5 : hol.term B => hol.imp (p_4 x_3) ((y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5)) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (g_2 y_5) (f_1 x_3))) (thm_657 B) (thm_664 C A B f_1 g_2 x_3 p_4).

(; Theorem: |- ((= ((= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. (\lambda y. ((= (g y)) (f x)) y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) (\lambda y. ((= (g y)) (f x)) y))))) ((= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))))) ;)

(; dict ;)

def thm_666 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) ((y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5)))) (hol.eq hol.bool (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (g_2 y_5) (f_1 x_3)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5)))) (hol.eq hol.bool (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) ((y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (g_2 y_5) (f_1 x_3)))) (thm_662 C B A f_1 g_2 x_3 p_4) (thm_665 C A B f_1 g_2 x_3 p_4).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_667 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) (Data.Bool.? \lambda y. (q y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> p) (q y))))) ((= ((Data.Bool.==> p) (Data.Bool.? \lambda y. (q y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> p) (q y))))) ;)

(; dict ;)

def thm_668 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3)))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3)))).

(; Theorem: |- ((= ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ((= ((Data.Bool.==> p) (Data.Bool.? \lambda y. (q y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> p) (q y))))) ;)

(; dict ;)

def thm_669 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3))))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3)))) (thm_667 A q_1 p_2) (thm_668 A q_1 p_2).

(; Theorem: |- (Data.Bool.! \lambda q. ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x))))) ;)

(; dict ;)

def thm_670 : A : hol.type -> p_1 : hol.term hol.bool -> hol.proof (hol.forall (hol.arr A hol.bool) (q_2 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.imp p_1 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_2 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_1 (q_2 x_3))))) :=
  A : hol.type => p_1 : hol.term hol.bool => thm_21 A p_1.

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.? \lambda x. (q x)))) (Data.Bool.? \lambda x. ((Data.Bool.==> p) (q x)))) ;)

(; dict ;)

def thm_671 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_670 A p_2 q_1.

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.? \lambda y. (q y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> p) (q y)))) ;)

(; dict ;)

def thm_672 : A : hol.type -> q_1 : hol.term (hol.arr A hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3)))) :=
  A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => q_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.imp p_2 (q_1 x_3)))) (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_3 : hol.term A => hol.imp p_2 (q_1 y_3)))) (thm_669 A q_1 p_2) (thm_671 A q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> p) (Data.Bool.? \lambda y. (q y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> p) (q y)))) ;)

(; dict ;)

def thm_673 : B : hol.type -> q_1 : hol.term (hol.arr B hol.bool) -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp p_2 (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => q_1 y_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => hol.imp p_2 (q_1 y_3)))) :=
  B : hol.type => q_1 : hol.term (hol.arr B hol.bool) => p_2 : hol.term hol.bool => (A : hol.type => q_1 : hol.term (hol.arr A hol.bool) => p_2 : hol.term hol.bool => thm_672 A q_1 p_2) B q_1 p_2.

(; Theorem: |- ((= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. (\lambda y. ((= (g y)) (f x)) y)))) (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) (\lambda y. ((= (g y)) (f x)) y)))) ;)

(; dict ;)

def thm_674 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) ((y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => (B : hol.type => q_1 : hol.term (hol.arr B hol.bool) => p_2 : hol.term hol.bool => thm_673 B q_1 p_2) B (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_3)) (p_4 x_3).

(; Theorem: |- ((= ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x))))) ;)

(; dict ;)

def thm_675 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (g_2 y_5) (f_1 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) ((y_6 : hol.term B => hol.eq C (g_2 y_6) (f_1 x_3)) y_5)))) (hol.eq hol.bool (hol.imp (p_4 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (g_2 y_5) (f_1 x_3))))) (thm_666 C B A f_1 g_2 x_3 p_4) (thm_674 C B A f_1 g_2 x_3 p_4).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x))))) \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x))))) ;)

(; dict ;)

def thm_676 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_4 : hol.term A => hol.imp (p_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_4)))) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => p_3 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_4 : hol.term A => hol.imp (p_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_4)))) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4)))) (x_4 : hol.term A => thm_675 C B A f_1 g_2 x_4 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))))) ;)

(; dict ;)

def thm_677 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_4 : hol.term A => hol.imp (p_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_4)))) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4)))) (thm_50 A) (thm_676 C B A f_1 g_2 p_3).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x))))))) (= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x))))))) ;)

(; dict ;)

def thm_678 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_4)))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) thm_198 (thm_677 C B A f_1 g_2 p_3).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_679 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)).

(; Theorem: |- ((= (\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x)) \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050)))) ;)

(; dict ;)

def thm_680 : C : hol.type -> A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) ((x_5 : hol.term A => __11050_6 : hol.term B => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (g_2 __11050_6))) x_1) (__11050_5 : hol.term B => hol.imp (p_4 x_1) (hol.eq C (f_3 x_1) (g_2 __11050_5)))) :=
  C : hol.type => A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV A (hol.arr B hol.bool) (x_5 : hol.term A => __11050_6 : hol.term B => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (g_2 __11050_6))) x_1.

(; Theorem: |- ((= (h x)) (h x)) ;)

(; dict ;)

def thm_681 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (h_2 x_1) (h_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => hol.REFL B (h_2 x_1).

(; Theorem: |- ((= ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) (h x))) (\lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) (h x))) ;)

(; dict ;)

def thm_682 : C : hol.type -> B : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> g_3 : hol.term (hol.arr B C) -> f_4 : hol.term (hol.arr A C) -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_5 x_6) (hol.eq C (f_4 x_6) (g_3 __11050_7))) x_2 (h_1 x_2)) ((__11050_6 : hol.term B => hol.imp (p_5 x_2) (hol.eq C (f_4 x_2) (g_3 __11050_6))) (h_1 x_2))) :=
  C : hol.type => B : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => x_2 : hol.term A => g_3 : hol.term (hol.arr B C) => f_4 : hol.term (hol.arr A C) => p_5 : hol.term (hol.arr A hol.bool) => hol.APP_THM B hol.bool ((x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_5 x_6) (hol.eq C (f_4 x_6) (g_3 __11050_7))) x_2) (__11050_6 : hol.term B => hol.imp (p_5 x_2) (hol.eq C (f_4 x_2) (g_3 __11050_6))) (h_1 x_2) (h_1 x_2) (thm_680 C A B x_2 g_3 f_4 p_5) (thm_681 A B x_2 h_1).

(; Theorem: |- ((= (\lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) (h x))) ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))) ;)

(; dict ;)

def thm_683 : C : hol.type -> A : hol.type -> B : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__11050_6 : hol.term B => hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (g_2 __11050_6))) (h_1 x_4)) (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (g_2 (h_1 x_4))))) :=
  C : hol.type => A : hol.type => B : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV B hol.bool (__11050_6 : hol.term B => hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (g_2 __11050_6))) (h_1 x_4).

(; Theorem: |- ((= ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) (h x))) ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))) ;)

(; dict ;)

def thm_684 : C : hol.type -> B : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> g_3 : hol.term (hol.arr B C) -> f_4 : hol.term (hol.arr A C) -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_5 x_6) (hol.eq C (f_4 x_6) (g_3 __11050_7))) x_2 (h_1 x_2)) (hol.imp (p_5 x_2) (hol.eq C (f_4 x_2) (g_3 (h_1 x_2))))) :=
  C : hol.type => B : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => x_2 : hol.term A => g_3 : hol.term (hol.arr B C) => f_4 : hol.term (hol.arr A C) => p_5 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool ((x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_5 x_6) (hol.eq C (f_4 x_6) (g_3 __11050_7))) x_2 (h_1 x_2)) ((__11050_6 : hol.term B => hol.imp (p_5 x_2) (hol.eq C (f_4 x_2) (g_3 __11050_6))) (h_1 x_2)) (hol.imp (p_5 x_2) (hol.eq C (f_4 x_2) (g_3 (h_1 x_2)))) (thm_682 C B A h_1 x_2 g_3 f_4 p_5) (thm_683 C A B h_1 g_3 f_4 x_2 p_5).

(; Theorem: |- ((= \lambda x. ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) (h x))) \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))) ;)

(; dict ;)

def thm_685 : C : hol.type -> B : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_4 x_6) (hol.eq C (f_3 x_6) (g_2 __11050_7))) x_5 (h_1 x_5)) (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (g_2 (h_1 x_5))))) :=
  C : hol.type => B : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_4 x_6) (hol.eq C (f_3 x_6) (g_2 __11050_7))) x_5 (h_1 x_5)) (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (g_2 (h_1 x_5)))) (x_5 : hol.term A => thm_684 C B A h_1 x_5 g_2 f_3 p_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) (h x)))) (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))) ;)

(; dict ;)

def thm_686 : C : hol.type -> B : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_4 x_6) (hol.eq C (f_3 x_6) (g_2 __11050_7))) x_5 (h_1 x_5))) (hol.forall A (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (g_2 (h_1 x_5)))))) :=
  C : hol.type => B : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_4 x_6) (hol.eq C (f_3 x_6) (g_2 __11050_7))) x_5 (h_1 x_5)) (x_5 : hol.term A => hol.imp (p_4 x_5) (hol.eq C (f_3 x_5) (g_2 (h_1 x_5)))) (thm_50 A) (thm_685 C B A h_1 g_2 f_3 p_4).

(; Theorem: |- ((= \lambda h. (Data.Bool.! \lambda x. ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) (h x)))) \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))) ;)

(; dict ;)

def thm_687 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_5 (h_4 x_5))) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (g_1 (h_4 x_5)))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hol.ABS_THM (hol.arr A B) hol.bool (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_5 (h_4 x_5))) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (g_1 (h_4 x_5))))) (h_4 : hol.term (hol.arr A B) => thm_686 C B A h_4 g_1 f_2 p_3).

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) (h x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))))) ;)

(; dict ;)

def thm_688 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_5 (h_4 x_5)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (g_1 (h_4 x_5))))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_5 (h_4 x_5))) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (g_1 (h_4 x_5))))) (thm_679 B A) (thm_687 C B A g_1 f_2 p_3).

(; Theorem: |- ((= (= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) (h x)))))) (= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))) ;)

(; dict ;)

def thm_689 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_5 (h_4 x_5))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (g_1 (h_4 x_5)))))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_5 (h_4 x_5)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (g_1 (h_4 x_5)))))) thm_198 (thm_688 C B A g_1 f_2 p_3).

(; Theorem: |- ((= y) y) ;)

(; dict ;)

def thm_690 : B : hol.type -> y_1 : hol.term B -> hol.proof (hol.eq B y_1 y_1) :=
  B : hol.type => y_1 : hol.term B => hol.REFL B y_1.

(; Theorem: |- ((= ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) y)) (\lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) y)) ;)

(; dict ;)

def thm_691 : C : hol.type -> B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> g_3 : hol.term (hol.arr B C) -> f_4 : hol.term (hol.arr A C) -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_5 x_6) (hol.eq C (f_4 x_6) (g_3 __11050_7))) x_2 y_1) ((__11050_6 : hol.term B => hol.imp (p_5 x_2) (hol.eq C (f_4 x_2) (g_3 __11050_6))) y_1)) :=
  C : hol.type => B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => g_3 : hol.term (hol.arr B C) => f_4 : hol.term (hol.arr A C) => p_5 : hol.term (hol.arr A hol.bool) => hol.APP_THM B hol.bool ((x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_5 x_6) (hol.eq C (f_4 x_6) (g_3 __11050_7))) x_2) (__11050_6 : hol.term B => hol.imp (p_5 x_2) (hol.eq C (f_4 x_2) (g_3 __11050_6))) y_1 y_1 (thm_680 C A B x_2 g_3 f_4 p_5) (thm_690 B y_1).

(; Theorem: |- ((= (\lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) y)) ((Data.Bool.==> (p x)) ((= (f x)) (g y)))) ;)

(; dict ;)

def thm_692 : C : hol.type -> A : hol.type -> B : hol.type -> y_1 : hol.term B -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((__11050_6 : hol.term B => hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (g_2 __11050_6))) y_1) (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (g_2 y_1)))) :=
  C : hol.type => A : hol.type => B : hol.type => y_1 : hol.term B => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV B hol.bool (__11050_6 : hol.term B => hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (g_2 __11050_6))) y_1.

(; Theorem: |- ((= ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) y)) ((Data.Bool.==> (p x)) ((= (f x)) (g y)))) ;)

(; dict ;)

def thm_693 : C : hol.type -> B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> g_3 : hol.term (hol.arr B C) -> f_4 : hol.term (hol.arr A C) -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_5 x_6) (hol.eq C (f_4 x_6) (g_3 __11050_7))) x_2 y_1) (hol.imp (p_5 x_2) (hol.eq C (f_4 x_2) (g_3 y_1)))) :=
  C : hol.type => B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => g_3 : hol.term (hol.arr B C) => f_4 : hol.term (hol.arr A C) => p_5 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool ((x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_5 x_6) (hol.eq C (f_4 x_6) (g_3 __11050_7))) x_2 y_1) ((__11050_6 : hol.term B => hol.imp (p_5 x_2) (hol.eq C (f_4 x_2) (g_3 __11050_6))) y_1) (hol.imp (p_5 x_2) (hol.eq C (f_4 x_2) (g_3 y_1))) (thm_691 C B A y_1 x_2 g_3 f_4 p_5) (thm_692 C A B y_1 g_3 f_4 x_2 p_5).

(; Theorem: |- ((= \lambda y. ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) y)) \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y)))) ;)

(; dict ;)

def thm_694 : C : hol.type -> A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_5 : hol.term B => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_4 x_6) (hol.eq C (f_3 x_6) (g_2 __11050_7))) x_1 y_5) (y_5 : hol.term B => hol.imp (p_4 x_1) (hol.eq C (f_3 x_1) (g_2 y_5)))) :=
  C : hol.type => A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hol.ABS_THM B hol.bool (y_5 : hol.term B => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_4 x_6) (hol.eq C (f_3 x_6) (g_2 __11050_7))) x_1 y_5) (y_5 : hol.term B => hol.imp (p_4 x_1) (hol.eq C (f_3 x_1) (g_2 y_5))) (y_5 : hol.term B => thm_693 C B A y_5 x_1 g_2 f_3 p_4).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) y))) (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y))))) ;)

(; dict ;)

def thm_695 : C : hol.type -> A : hol.type -> B : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_4 x_6) (hol.eq C (f_3 x_6) (g_2 __11050_7))) x_1 y_5)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_1) (hol.eq C (f_3 x_1) (g_2 y_5))))) :=
  C : hol.type => A : hol.type => B : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_5 : hol.term B => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_4 x_6) (hol.eq C (f_3 x_6) (g_2 __11050_7))) x_1 y_5) (y_5 : hol.term B => hol.imp (p_4 x_1) (hol.eq C (f_3 x_1) (g_2 y_5))) (thm_657 B) (thm_694 C A B x_1 g_2 f_3 p_4).

(; Theorem: |- ((= \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) y))) \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y))))) ;)

(; dict ;)

def thm_696 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_4 y_5)) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_2 x_4) (g_1 y_5))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_4 y_5)) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_2 x_4) (g_1 y_5)))) (x_4 : hol.term A => thm_695 C A B x_4 g_1 f_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y)))))) ;)

(; dict ;)

def thm_697 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_4 y_5))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_2 x_4) (g_1 y_5)))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_4 y_5)) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_2 x_4) (g_1 y_5)))) (thm_50 A) (thm_696 C B A g_1 f_2 p_3).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) (h x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) y))))) ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y))))))) ;)

(; dict ;)

def thm_698 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_5 (h_4 x_5)))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_4 y_5)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (g_1 (h_4 x_5)))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_2 x_4) (g_1 y_5))))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_5 (h_4 x_5))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (g_1 (h_4 x_5))))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_4 y_5))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_2 x_4) (g_1 y_5))))) (thm_689 C B A g_1 f_2 p_3) (thm_697 C B A g_1 f_2 p_3).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((r x) (h x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))))) ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((r x) (h x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))))) ;)

(; dict ;)

def thm_699 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (h_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (h_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (h_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda f. (Data.Bool.! \lambda x. ((r x) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))))) ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((r x) (h x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y))))) ;)

(; dict ;)

def thm_700 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (h_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3))))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (h_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (thm_258 B A r_1) (thm_699 B A r_1).

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((r x) (h x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((r x) y)))) ;)

(; dict ;)

def thm_701 : B : hol.type -> A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (h_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) :=
  B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (f_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (f_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => r_1 x_3 (h_2 x_3)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => r_1 x_2 y_3)))) (thm_700 B A r_1) (thm_270 B A r_1).

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) (h x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((\lambda x. \lambda _11050. ((Data.Bool.==> (p x)) ((= (f x)) (g _11050))) x) y)))) ;)

(; dict ;)

def thm_702 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_5 (h_4 x_5)))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_4 y_5)))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => (B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => (B : hol.type => A : hol.type => r_1 : hol.term (hol.arr A (hol.arr B hol.bool)) => thm_701 B A r_1) B A r_1) B A (x_4 : hol.term A => __11050_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_2 x_4) (g_1 __11050_5))).

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y)))))) ;)

(; dict ;)

def thm_703 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (g_1 (h_4 x_5)))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_2 x_4) (g_1 y_5)))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_5 (h_4 x_5)))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => (x_6 : hol.term A => __11050_7 : hol.term B => hol.imp (p_3 x_6) (hol.eq C (f_2 x_6) (g_1 __11050_7))) x_4 y_5)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_2 x_5) (g_1 (h_4 x_5)))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_2 x_4) (g_1 y_5)))))) (thm_698 C B A g_1 f_2 p_3) (thm_702 C B A g_1 f_2 p_3).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))) ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y))))))) ;)

(; dict ;)

def thm_704 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (g_2 (h_4 x_5))))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_1 x_4) (g_2 y_5))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_4)))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (g_2 (h_4 x_5)))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_1 x_4) (g_2 y_5))))) (thm_678 C B A f_1 g_2 p_3) (thm_703 C B A g_2 f_1 p_3).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y))))))) ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))) ;)

(; dict ;)

def thm_705 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_1 x_4) (g_2 y_5)))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (g_2 (h_4 x_5)))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => p_3 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (g_2 (h_4 x_5))))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_1 x_4) (g_2 y_5)))))) (thm_704 C B A f_1 g_2 p_3).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x))))))) (= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x))))))) ;)

(; dict ;)

def thm_706 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4)))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4)))))).

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_707 : C : hol.type -> y_1 : hol.term C -> x_2 : hol.term C -> hol.proof (hol.eq hol.bool (hol.eq C x_2 y_1) (hol.eq C y_1 x_2)) :=
  C : hol.type => y_1 : hol.term C => x_2 : hol.term C => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_472 A y_1 x_2) C y_1 x_2.

(; Theorem: |- ((= ((= (f x)) (g y))) ((= (g y)) (f x))) ;)

(; dict ;)

def thm_708 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term B -> g_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq C (f_4 x_3) (g_2 y_1)) (hol.eq C (g_2 y_1) (f_4 x_3))) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term B => g_2 : hol.term (hol.arr B C) => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => (C : hol.type => y_1 : hol.term C => x_2 : hol.term C => thm_707 C y_1 x_2) C (g_2 y_1) (f_4 x_3).

(; Theorem: |- ((= ((Data.Bool.==> (p x)) ((= (f x)) (g y)))) ((Data.Bool.==> (p x)) ((= (g y)) (f x)))) ;)

(; dict ;)

def thm_709 : B : hol.type -> C : hol.type -> A : hol.type -> y_1 : hol.term B -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> x_4 : hol.term A -> p_5 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (p_5 x_4) (hol.eq C (f_3 x_4) (g_2 y_1))) (hol.imp (p_5 x_4) (hol.eq C (g_2 y_1) (f_3 x_4)))) :=
  B : hol.type => C : hol.type => A : hol.type => y_1 : hol.term B => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => x_4 : hol.term A => p_5 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.imp (p_5 x_4)) (hol.imp (p_5 x_4)) (hol.eq C (f_3 x_4) (g_2 y_1)) (hol.eq C (g_2 y_1) (f_3 x_4)) (thm_656 A x_4 p_5) (thm_708 B A C y_1 g_2 x_4 f_3).

(; Theorem: |- ((= \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y)))) \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))) ;)

(; dict ;)

def thm_710 : C : hol.type -> A : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (f_2 x_3) (g_1 y_5))) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (g_1 y_5) (f_2 x_3)))) :=
  C : hol.type => A : hol.type => B : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.ABS_THM B hol.bool (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (f_2 x_3) (g_1 y_5))) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (g_1 y_5) (f_2 x_3))) (y_5 : hol.term B => thm_709 B C A y_5 g_1 f_2 x_3 p_4).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y))))) (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x))))) ;)

(; dict ;)

def thm_711 : C : hol.type -> A : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> x_3 : hol.term A -> p_4 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (f_2 x_3) (g_1 y_5)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (g_1 y_5) (f_2 x_3))))) :=
  C : hol.type => A : hol.type => B : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => x_3 : hol.term A => p_4 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (f_2 x_3) (g_1 y_5))) (y_5 : hol.term B => hol.imp (p_4 x_3) (hol.eq C (g_1 y_5) (f_2 x_3))) (thm_657 B) (thm_710 C A B g_1 f_2 x_3 p_4).

(; Theorem: |- ((= \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y))))) \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x))))) ;)

(; dict ;)

def thm_712 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_2 x_4) (g_1 y_5)))) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_1 y_5) (f_2 x_4))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hol.ABS_THM A hol.bool (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_2 x_4) (g_1 y_5)))) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_1 y_5) (f_2 x_4)))) (x_4 : hol.term A => thm_711 C A B g_1 f_2 x_4 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))))) ;)

(; dict ;)

def thm_713 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_2 x_4) (g_1 y_5))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_1 y_5) (f_2 x_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_2 x_4) (g_1 y_5)))) (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_1 y_5) (f_2 x_4)))) (thm_50 A) (thm_712 C B A g_1 f_2 p_3).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y))))))) ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x))))))) ;)

(; dict ;)

def thm_714 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_1 x_4) (g_2 y_5)))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => p_3 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4)))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4)))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_1 x_4) (g_2 y_5))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (thm_706 C B A f_1 g_2 p_3) (thm_713 C B A g_2 f_1 p_3).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x))))))) ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y))))))) ;)

(; dict ;)

def thm_715 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4)))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_1 x_4) (g_2 y_5))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => p_3 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_1 x_4) (g_2 y_5)))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4)))))) (thm_714 C B A f_1 g_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))))) ;)

(; dict ;)

def thm_716 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => p_3 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (g y)) (f x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((Data.Bool.==> (p x)) ((= (f x)) (g y)))))) ;)

(; dict ;)

def thm_717 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_1 x_4) (g_2 y_5)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => p_3 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4)))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_1 x_4) (g_2 y_5)))))) (thm_715 C B A f_1 g_2 p_3) (thm_716 C B A f_1 g_2 p_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))))) ;)

(; dict ;)

def thm_718 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> p_3 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (g_2 (h_4 x_5))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => p_3 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (g_2 y_5) (f_1 x_4))))) (hol.forall A (x_4 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.imp (p_3 x_4) (hol.eq C (f_1 x_4) (g_2 y_5)))))) (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_3 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_2 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_3 x_5) (hol.eq C (f_1 x_5) (g_2 (h_4 x_5))))))) (thm_705 C B A f_1 g_2 p_3) (thm_717 C B A f_1 g_2 p_3).

(; Theorem: |- (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))) ;)

(; dict ;)

def thm_719 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> p_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_1 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_2 x_5) (hol.eq C (f_1 x_5) (g_3 (h_4 x_5)))))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => p_2 : hol.term (hol.arr A hol.bool) => g_3 : hol.term (hol.arr B C) => thm_718 C B A f_1 g_3 p_2.

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x))))))))) ;)

(; dict ;)

def thm_720 : B : hol.type -> C : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => f_2 : hol.term (hol.arr A C) => hol.EQ_MP (hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))) (hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))) (thm_655 A C B f_2 p_1) (thm_719 A C B f_2 p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))))) ;)

(; dict ;)

def thm_721 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))) (hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5))))))))) (thm_652 B C A p_1) (thm_720 B C A p_1).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))))) ;)

(; thm ;)

def thm_722 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall (hol.arr A C) (f_2 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_3 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp (p_1 x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_5 : hol.term B => hol.eq C (g_3 y_5) (f_2 x_4))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_4 : hol.term (hol.arr A B) => hol.forall A (x_5 : hol.term A => hol.imp (p_1 x_5) (hol.eq C (f_2 x_5) (g_3 (h_4 x_5)))))))))) (thm_649 B C A) (thm_721 B C A).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) ;)

(; dict ;)

def thm_723 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))).

(; Theorem: |- ((= ((= f) ((Function.o g) h))) (Data.Bool.! \lambda x. ((= (f x)) (((Function.o g) h) x)))) ;)

(; dict ;)

def thm_724 : B : hol.type -> C : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1)) (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1 x_4)))) :=
  B : hol.type => C : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => (C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A C) => f_2 : hol.term (hol.arr A C) => thm_553 C A g_1 f_2) C A (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1) f_3.

(; Theorem: |- ((= (((Function.o g) h) x)) (g (h x))) ;)

(; dict ;)

def thm_725 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_3 h_2 x_1) (g_3 (h_2 x_1))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => (A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => thm_560 A B C x_1 g_2 f_3) A B C x_1 h_2 g_3.

(; Theorem: |- ((= ((= (f x)) (((Function.o g) h) x))) ((= (f x)) (g (h x)))) ;)

(; dict ;)

def thm_726 : B : hol.type -> A : hol.type -> C : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq C (f_4 x_3) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1 x_3)) (hol.eq C (f_4 x_3) (g_2 (h_1 x_3)))) :=
  B : hol.type => A : hol.type => C : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => hol.APP_THM C hol.bool (hol.eq C (f_4 x_3)) (hol.eq C (f_4 x_3)) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1 x_3) (g_2 (h_1 x_3)) (thm_555 A C x_3 f_4) (thm_725 A B C x_3 h_1 g_2).

(; Theorem: |- ((= \lambda x. ((= (f x)) (((Function.o g) h) x))) \lambda x. ((= (f x)) (g (h x)))) ;)

(; dict ;)

def thm_727 : B : hol.type -> C : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_4 : hol.term A => hol.eq C (f_3 x_4) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1 x_4)) (x_4 : hol.term A => hol.eq C (f_3 x_4) (g_2 (h_1 x_4)))) :=
  B : hol.type => C : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => hol.ABS_THM A hol.bool (x_4 : hol.term A => hol.eq C (f_3 x_4) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1 x_4)) (x_4 : hol.term A => hol.eq C (f_3 x_4) (g_2 (h_1 x_4))) (x_4 : hol.term A => thm_726 B A C h_1 g_2 x_4 f_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (f x)) (((Function.o g) h) x)))) (Data.Bool.! \lambda x. ((= (f x)) (g (h x))))) ;)

(; dict ;)

def thm_728 : B : hol.type -> C : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1 x_4))) (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (g_2 (h_1 x_4))))) :=
  B : hol.type => C : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_4 : hol.term A => hol.eq C (f_3 x_4) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1 x_4)) (x_4 : hol.term A => hol.eq C (f_3 x_4) (g_2 (h_1 x_4))) (thm_50 A) (thm_727 B C A h_1 g_2 f_3).

(; Theorem: |- ((= ((= f) ((Function.o g) h))) (Data.Bool.! \lambda x. ((= (f x)) (g (h x))))) ;)

(; dict ;)

def thm_729 : B : hol.type -> C : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1)) (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (g_2 (h_1 x_4))))) :=
  B : hol.type => C : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => hol.TRANS hol.bool (hol.eq (hol.arr A C) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1)) (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1 x_4))) (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (g_2 (h_1 x_4)))) (thm_724 B C A h_1 g_2 f_3) (thm_728 B C A h_1 g_2 f_3).

(; Theorem: |- ((= \lambda h. ((= f) ((Function.o g) h))) \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x))))) ;)

(; dict ;)

def thm_730 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => hol.ABS_THM (hol.arr A B) hol.bool (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4)))) (h_3 : hol.term (hol.arr A B) => thm_729 B C A h_3 g_1 f_2).

(; Theorem: |- ((= (Data.Bool.? \lambda h. ((= f) ((Function.o g) h)))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) ;)

(; dict ;)

def thm_731 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4)))) (thm_679 B A) (thm_730 C B A g_1 f_2).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) ;)

(; dict ;)

def thm_732 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3)))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) ;)

(; dict ;)

def thm_733 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3)))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))) (thm_732 C B A g_1 f_2) (thm_732 C B A g_1 f_2).

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) ;)

(; dict ;)

def thm_734 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) ;)

(; dict ;)

def thm_735 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (thm_734 C B A g_2 f_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) ;)

(; dict ;)

def thm_736 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) ;)

(; dict ;)

def thm_737 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4)))))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4)))))) => hol.SYM hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (thm_736 C B A f_2 g_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x))))))) ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) ;)

(; dict ;)

def thm_738 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => hol.PROP_EXT (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) => thm_735 C B A f_1 g_2 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))) => thm_737 C B A g_2 f_1 hyp_1).

(; Theorem: |- ((= \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x))))))) \lambda g. ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) ;)

(; dict ;)

def thm_739 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => hol.ABS_THM (hol.arr B C) hol.bool (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (g_2 : hol.term (hol.arr B C) => thm_738 C B A f_1 g_2).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))))) (Data.Bool.! \lambda g. ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))))) ;)

(; dict ;)

def thm_740 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))) (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C)) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (thm_45 C B) (thm_739 A C B f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))))) ;)

(; dict ;)

def thm_741 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.ABS_THM (hol.arr A C) hol.bool (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))))) (f_1 : hol.term (hol.arr A C) => thm_740 A C B f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x))))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))))))) ;)

(; dict ;)

def thm_742 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))))) (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A C) hol.bool) hol.bool (hol.forall (hol.arr A C)) (hol.forall (hol.arr A C)) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))))) (thm_37 C A) (thm_741 B C A).

(; Theorem: |- ((= (Data.Bool.? \lambda y. ((= (g y)) (f x)))) (Data.Bool.? \lambda y. ((= (g y)) (f x)))) ;)

(; dict ;)

def thm_743 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> g_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_3 y_4) (f_2 x_1))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_3 y_4) (f_2 x_1)))) :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A C) => g_3 : hol.term (hol.arr B C) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_3 y_4) (f_2 x_1))).

(; Theorem: |- ((= ((Data.Bool.==> (\lambda x. Data.Bool.T x)) (Data.Bool.? \lambda y. ((= (g y)) (f x))))) ((Data.Bool.==> Data.Bool.T) (Data.Bool.? \lambda y. ((= (g y)) (f x))))) ;)

(; dict ;)

def thm_744 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (hol.imp hol.true (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => x_3 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp ((x_4 : hol.term A => hol.true) x_3)) (hol.imp hol.true) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))) (thm_604 A x_3) (thm_743 A C B x_3 f_1 g_2).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda y. ((= (g y)) (f x)))) ;)

(; dict ;)

def thm_745 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> g_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.imp hol.true (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_3 y_4) (f_2 x_1)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_3 y_4) (f_2 x_1)))) :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A C) => g_3 : hol.term (hol.arr B C) => (t_1 : hol.term hol.bool => thm_339 t_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_3 y_4) (f_2 x_1))).

(; Theorem: |- ((= ((Data.Bool.==> (\lambda x. Data.Bool.T x)) (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda y. ((= (g y)) (f x)))) ;)

(; dict ;)

def thm_746 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => x_3 : hol.term A => hol.TRANS hol.bool (hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (hol.imp hol.true (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))) (thm_744 C B A f_1 g_2 x_3) (thm_745 A C B x_3 f_1 g_2).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) (Data.Bool.? \lambda y. ((= (g y)) (f x))))) \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))) ;)

(; dict ;)

def thm_747 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))) (x_3 : hol.term A => thm_746 C B A f_1 g_2 x_3).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) ;)

(; dict ;)

def thm_748 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))) (thm_50 A) (thm_747 C B A f_1 g_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) (Data.Bool.? \lambda y. ((= (g y)) (f x))))))) (= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) ;)

(; dict ;)

def thm_749 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) thm_198 (thm_748 C B A f_1 g_2).

(; Theorem: |- ((= ((= (f x)) (g (h x)))) ((= (f x)) (g (h x)))) ;)

(; dict ;)

def thm_750 : B : hol.type -> A : hol.type -> C : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq C (f_4 x_3) (g_2 (h_1 x_3))) (hol.eq C (f_4 x_3) (g_2 (h_1 x_3)))) :=
  B : hol.type => A : hol.type => C : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => hol.REFL hol.bool (hol.eq C (f_4 x_3) (g_2 (h_1 x_3))).

(; Theorem: |- ((= ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (g (h x))))) ((Data.Bool.==> Data.Bool.T) ((= (f x)) (g (h x))))) ;)

(; dict ;)

def thm_751 : B : hol.type -> C : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (g_2 (h_1 x_4)))) (hol.imp hol.true (hol.eq C (f_3 x_4) (g_2 (h_1 x_4))))) :=
  B : hol.type => C : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => x_4 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.imp ((x_5 : hol.term A => hol.true) x_4)) (hol.imp hol.true) (hol.eq C (f_3 x_4) (g_2 (h_1 x_4))) (hol.eq C (f_3 x_4) (g_2 (h_1 x_4))) (thm_604 A x_4) (thm_750 B A C h_1 g_2 x_4 f_3).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) ((= (f x)) (g (h x))))) ((= (f x)) (g (h x)))) ;)

(; dict ;)

def thm_752 : B : hol.type -> A : hol.type -> C : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.imp hol.true (hol.eq C (f_4 x_3) (g_2 (h_1 x_3)))) (hol.eq C (f_4 x_3) (g_2 (h_1 x_3)))) :=
  B : hol.type => A : hol.type => C : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => x_3 : hol.term A => f_4 : hol.term (hol.arr A C) => (t_1 : hol.term hol.bool => thm_339 t_1) (hol.eq C (f_4 x_3) (g_2 (h_1 x_3))).

(; Theorem: |- ((= ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (g (h x))))) ((= (f x)) (g (h x)))) ;)

(; dict ;)

def thm_753 : B : hol.type -> C : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> x_4 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (g_2 (h_1 x_4)))) (hol.eq C (f_3 x_4) (g_2 (h_1 x_4)))) :=
  B : hol.type => C : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => x_4 : hol.term A => hol.TRANS hol.bool (hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (g_2 (h_1 x_4)))) (hol.imp hol.true (hol.eq C (f_3 x_4) (g_2 (h_1 x_4)))) (hol.eq C (f_3 x_4) (g_2 (h_1 x_4))) (thm_751 B C A h_1 g_2 f_3 x_4) (thm_752 B A C h_1 g_2 x_4 f_3).

(; Theorem: |- ((= \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (g (h x))))) \lambda x. ((= (f x)) (g (h x)))) ;)

(; dict ;)

def thm_754 : B : hol.type -> C : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (g_2 (h_1 x_4)))) (x_4 : hol.term A => hol.eq C (f_3 x_4) (g_2 (h_1 x_4)))) :=
  B : hol.type => C : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => hol.ABS_THM A hol.bool (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (g_2 (h_1 x_4)))) (x_4 : hol.term A => hol.eq C (f_3 x_4) (g_2 (h_1 x_4))) (x_4 : hol.term A => thm_753 B C A h_1 g_2 f_3 x_4).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. ((= (f x)) (g (h x))))) ;)

(; dict ;)

def thm_755 : B : hol.type -> C : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (g_2 (h_1 x_4))))) (hol.forall A (x_4 : hol.term A => hol.eq C (f_3 x_4) (g_2 (h_1 x_4))))) :=
  B : hol.type => C : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_3 x_4) (g_2 (h_1 x_4)))) (x_4 : hol.term A => hol.eq C (f_3 x_4) (g_2 (h_1 x_4))) (thm_50 A) (thm_754 B C A h_1 g_2 f_3).

(; Theorem: |- ((= \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (g (h x)))))) \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x))))) ;)

(; dict ;)

def thm_756 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => hol.ABS_THM (hol.arr A B) hol.bool (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4)))) (h_3 : hol.term (hol.arr A B) => thm_755 B C A h_3 g_1 f_2).

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (g (h x))))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) ;)

(; dict ;)

def thm_757 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_2 x_4) (g_1 (h_3 x_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4)))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool)) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4)))) (thm_679 B A) (thm_756 C B A g_1 f_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (g (h x)))))))) ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x))))))) ;)

(; dict ;)

def thm_758 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (thm_749 C B A f_1 g_2) (thm_757 C B A g_2 f_1).

(; Theorem: |- ((= \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (g (h x)))))))) \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x))))))) ;)

(; dict ;)

def thm_759 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => hol.ABS_THM (hol.arr B C) hol.bool (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))) (g_2 : hol.term (hol.arr B C) => thm_758 C B A f_1 g_2).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (g (h x))))))))) (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))))) ;)

(; dict ;)

def thm_760 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))))) (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C)) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))) (thm_45 C B) (thm_759 A C B f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (g (h x))))))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))))) ;)

(; dict ;)

def thm_761 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))))) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.ABS_THM (hol.arr A C) hol.bool (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))))) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))) (f_1 : hol.term (hol.arr A C) => thm_760 A C B f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (g (h x)))))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x))))))))) ;)

(; dict ;)

def thm_762 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))))) (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A C) hol.bool) hol.bool (hol.forall (hol.arr A C)) (hol.forall (hol.arr A C)) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))))) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))) (thm_37 C A) (thm_761 B C A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. Data.Bool.T x)) ((= (f x)) (g (h x))))))))) ;)

(; dict ;)

def thm_763 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))))) :=
  B : hol.type => C : hol.type => A : hol.type => thm_721 B C A (x_1 : hol.term A => hol.true).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))))) ;)

(; dict ;)

def thm_764 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => hol.true) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.true) x_4) (hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))))))) (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))))) (thm_762 B C A) (thm_763 B C A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))))) ;)

(; dict ;)

def thm_765 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4)))))))) (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))))) (thm_742 B C A) (thm_764 B C A).

(; Theorem: |- (Data.Bool.! \lambda g. ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) ;)

(; dict ;)

def thm_766 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_1 x_4) (g_2 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => thm_765 B C A f_1.

(; Theorem: |- ((= (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((= (f x)) (g (h x)))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) ;)

(; dict ;)

def thm_767 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => thm_766 A C B f_2 g_1.

(; Theorem: |- ((= (Data.Bool.? \lambda h. ((= f) ((Function.o g) h)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) ;)

(; dict ;)

def thm_768 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3)))) (thm_731 C B A g_1 f_2) ((C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr A C) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.forall A (x_4 : hol.term A => hol.eq C (f_2 x_4) (g_1 (h_3 x_4))))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_1 y_4) (f_2 x_3))))) (thm_733 C B A g_1 f_2) (thm_767 C B A g_1 f_2)) C B A g_1 f_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. ((= f) ((Function.o g) h))))) ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) ;)

(; dict ;)

def thm_769 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (thm_723 C B A f_1 g_2) (thm_768 C B A g_2 f_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) Data.Bool.T) ;)

(; dict ;)

def thm_770 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => (x_1 : hol.term hol.bool => thm_493 x_1) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. ((= f) ((Function.o g) h))))) Data.Bool.T) ;)

(; dict ;)

def thm_771 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A C) -> g_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A C) => g_2 : hol.term (hol.arr B C) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3))))) hol.true (thm_769 C B A f_1 g_2) (thm_770 C B A f_1 g_2).

(; Theorem: |- ((= \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. ((= f) ((Function.o g) h))))) \lambda g. Data.Bool.T) ;)

(; dict ;)

def thm_772 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (g_2 : hol.term (hol.arr B C) => hol.true)) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => hol.ABS_THM (hol.arr B C) hol.bool (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (g_2 : hol.term (hol.arr B C) => hol.true) (g_2 : hol.term (hol.arr B C) => thm_771 C B A f_1 g_2).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. ((= f) ((Function.o g) h)))))) (Data.Bool.! \lambda g. Data.Bool.T)) ;)

(; dict ;)

def thm_773 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.true))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C)) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (g_2 : hol.term (hol.arr B C) => hol.true) (thm_45 C B) (thm_772 A C B f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. t)) t) ;)

(; dict ;)

def thm_774 : C : hol.type -> B : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => t_1)) t_1) :=
  C : hol.type => B : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_633 A t_1) (hol.arr B C) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda g. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_775 : C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (g_1 : hol.term (hol.arr B C) => hol.true)) hol.true) :=
  C : hol.type => B : hol.type => (C : hol.type => B : hol.type => t_1 : hol.term hol.bool => thm_774 C B t_1) C B hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. ((= f) ((Function.o g) h)))))) Data.Bool.T) ;)

(; dict ;)

def thm_776 : A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) hol.true) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr A C) => hol.TRANS hol.bool (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.true)) hol.true (thm_773 A C B f_1) (thm_775 C B).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. ((= f) ((Function.o g) h)))))) \lambda f. Data.Bool.T) ;)

(; dict ;)

def thm_777 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (f_1 : hol.term (hol.arr A C) => hol.true)) :=
  B : hol.type => C : hol.type => A : hol.type => hol.ABS_THM (hol.arr A C) hol.bool (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (f_1 : hol.term (hol.arr A C) => hol.true) (f_1 : hol.term (hol.arr A C) => thm_776 A C B f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. ((= f) ((Function.o g) h))))))) (Data.Bool.! \lambda f. Data.Bool.T)) ;)

(; dict ;)

def thm_778 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.true))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A C) hol.bool) hol.bool (hol.forall (hol.arr A C)) (hol.forall (hol.arr A C)) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (f_1 : hol.term (hol.arr A C) => hol.true) (thm_37 C A) (thm_777 B C A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. ((= f) ((Function.o g) h))))))) Data.Bool.T) ;)

(; dict ;)

def thm_779 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) hol.true) :=
  B : hol.type => C : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.true)) hol.true (thm_778 B C A) (thm_643 C A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. ((= f) ((Function.o g) h))))))) ;)

(; dict ;)

def thm_780 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) hol.true (thm_779 B C A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. ((= f) ((Function.o g) h)))))) ;)

(; dict ;)

def thm_781 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) :=
  B : hol.type => C : hol.type => A : hol.type => hol.EQ_MP hol.true (hol.forall (hol.arr A C) (f_1 : hol.term (hol.arr A C) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => hol.eq C (g_2 y_4) (f_1 x_3)))) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) (thm_780 B C A) thm_1.

(; Theorem: |- ((= \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))))) \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))))) ;)

(; dict ;)

def thm_782 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))))) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))))).

(; Theorem: |- ((= \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))))) \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))))) ;)

(; dict ;)

def thm_783 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))))) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))))) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))))) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))))) (thm_782 B A) (thm_782 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y))))))) (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y))))))) ;)

(; dict ;)

def thm_784 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))))) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))))) (thm_41 B A) (thm_783 B A).

(; Theorem: |- ((= (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y)) (Data.Bool.? \lambda x. ((= (f x)) y))) ;)

(; dict ;)

def thm_785 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_2 x_4) y_3)) y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hol.BETA_CONV B hol.bool (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_2 x_4) y_3)) y_1.

(; Theorem: |- ((= \lambda y. (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y)) \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))) ;)

(; dict ;)

def thm_786 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM B hol.bool (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)) (y_2 : hol.term B => thm_785 A B y_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_787 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2) (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)) (thm_182 B) (thm_786 A B f_1).

(; Theorem: |- ((= (= (Data.Bool.! \lambda y. (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y)))) (= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))))) ;)

(; dict ;)

def thm_788 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2))) (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall B (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) thm_198 (thm_787 A B f_1).

(; Theorem: |- ((= (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) (f x))) (Data.Bool.? \lambda x_1. ((= (f x_1)) (f x)))) ;)

(; dict ;)

def thm_789 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_2 x_4) y_3)) (f_2 x_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.eq B (f_2 x__1_3) (f_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.BETA_CONV B hol.bool (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_2 x_4) y_3)) (f_2 x_1).

(; Theorem: |- ((= \lambda x. (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) (f x))) \lambda x. (Data.Bool.? \lambda x_1. ((= (f x_1)) (f x)))) ;)

(; dict ;)

def thm_790 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) (f_1 x_2)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.eq B (f_1 x__1_3) (f_1 x_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM A hol.bool (x_2 : hol.term A => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) (f_1 x_2)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.eq B (f_1 x__1_3) (f_1 x_2))) (x_2 : hol.term A => thm_789 A B x_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) (f x)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda x_1. ((= (f x_1)) (f x))))) ;)

(; dict ;)

def thm_791 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) (f_1 x_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.eq B (f_1 x__1_3) (f_1 x_2))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) (f_1 x_2)) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.eq B (f_1 x__1_3) (f_1 x_2))) (thm_50 A) (thm_790 B A f_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y))) (Data.Bool.! \lambda x. (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) (f x))))) ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda x_1. ((= (f x_1)) (f x)))))) ;)

(; dict ;)

def thm_792 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)) (hol.forall A (x_2 : hol.term A => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) (f_1 x_2)))) (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.eq B (f_1 x__1_3) (f_1 x_2)))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2))) (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (hol.forall A (x_2 : hol.term A => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) (f_1 x_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.eq B (f_1 x__1_3) (f_1 x_2)))) (thm_788 A B f_1) (thm_791 B A f_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda x. (p (f x))))) ((= (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda x. (p (f x))))) ;)

(; dict ;)

def thm_793 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda x. (p (f x))))) ((= (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda x. (p (f x))))) ;)

(; dict ;)

def thm_794 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) (thm_793 A B f_1 p_2) (thm_793 A B f_1 p_2).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_795 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr B hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr B hol.bool)) (hol.forall (hol.arr B hol.bool))) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr B hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr B hol.bool)).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda x. (p (f x)))) ;)

(; dict ;)

def thm_796 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y))) ;)

(; dict ;)

def thm_797 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) => hol.SYM hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (thm_796 A B f_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y))) ;)

(; dict ;)

def thm_798 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda x. (p (f x)))) ;)

(; dict ;)

def thm_799 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) -> hol.proof (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) => hol.SYM hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)) (thm_798 B A f_1 p_2 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))) ((= (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda x. (p (f x))))) ;)

(; dict ;)

def thm_800 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hol.PROP_EXT (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) (hyp_1 : hol.proof (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) => thm_797 B A f_1 p_2 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) => thm_799 A B f_1 p_2 hyp_1).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))) \lambda p. ((= (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda x. (p (f x))))) ;)

(; dict ;)

def thm_801 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM (hol.arr B hol.bool) hol.bool (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) (p_2 : hol.term (hol.arr B hol.bool) => thm_800 B A f_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y))))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda x. (p (f x)))))) ;)

(; dict ;)

def thm_802 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr (hol.arr B hol.bool) hol.bool) hol.bool (hol.forall (hol.arr B hol.bool)) (hol.forall (hol.arr B hol.bool)) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) (thm_795 B) (thm_801 A B f_1).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))) ;)

(; dict ;)

def thm_803 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) -> hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda x. (p (f x))))) ;)

(; dict ;)

def thm_804 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) -> hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) => hol.EQ_MP (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))))) (thm_802 A B f_1) (thm_803 A B f_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda x. (p (f x)))) ;)

(; dict ;)

def thm_805 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_3 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => p_3 (f_1 x_4))) (hol.forall B (y_4 : hol.term B => p_3 y_4)))) -> hol.proof (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_3 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => p_3 (f_1 x_4))) (hol.forall B (y_4 : hol.term B => p_3 y_4)))) => thm_804 A B f_1 hyp_1 p_2.

(; Theorem: |- ((= (Data.Bool.! \lambda y. (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y))) (Data.Bool.! \lambda x. (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) (f x)))) ;)

(; dict ;)

def thm_806 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)) (hol.forall A (x_2 : hol.term A => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) (f_1 x_2)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) => (A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_3 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => p_3 (f_1 x_4))) (hol.forall B (y_4 : hol.term B => p_3 y_4)))) => (A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_3 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_4 : hol.term A => p_3 (f_1 x_4))) (hol.forall B (y_4 : hol.term B => p_3 y_4)))) => hol.EQ_MP (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) (hol.eq hol.bool (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) (thm_794 A B f_1 p_2) (thm_805 A B f_1 p_2 hyp_1)) A B f_1 p_2 hyp_1) A B f_1 (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)) hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda x_1. ((= (f x_1)) (f x))))) ;)

(; dict ;)

def thm_807 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.eq B (f_1 x__1_3) (f_1 x_2))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) => hol.EQ_MP (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)) (hol.forall A (x_2 : hol.term A => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) (f_1 x_2)))) (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.eq B (f_1 x__1_3) (f_1 x_2))))) (thm_792 A B f_1) (thm_806 A B f_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda x_1. ((= (f x_1)) (f x))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_808 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.eq B (f_1 x__1_3) (f_1 x_2)))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) => hol.SYM hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x__1_3 : hol.term A => hol.eq B (f_1 x__1_3) (f_1 x_2)))) (thm_807 A B f_1 hyp_1).

(; Theorem: |- ((= \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))) \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))) ;)

(; dict ;)

def thm_809 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.REFL (hol.arr A hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))).

(; Theorem: |- ((= \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))) \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))) ;)

(; dict ;)

def thm_810 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS (hol.arr A hol.bool) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))) (thm_809 B A f_1) (thm_809 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))))) ;)

(; dict ;)

def thm_811 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))) (thm_50 A) (thm_810 B A f_1).

(; Theorem: |- ((= (\lambda x'. ((= (f x')) (f x)) x)) ((= (f x)) (f x))) ;)

(; dict ;)

def thm_812 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)) x_1) (hol.eq B (f_2 x_1) (f_2 x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.BETA_CONV A hol.bool (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)) x_1.

(; Theorem: |- ((= ((= (f x)) (f x))) (\lambda x'. ((= (f x')) (f x)) x)) ;)

(; dict ;)

def thm_813 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (f_2 x_1) (f_2 x_1)) ((x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.SYM hol.bool ((x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)) x_1) (hol.eq B (f_2 x_1) (f_2 x_1)) (thm_812 B A x_1 f_2).

(; Theorem: |- ((= (f x)) (f x)) ;)

(; dict ;)

def thm_814 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (f_2 x_1) (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.REFL B (f_2 x_1).

(; Theorem: |- (\lambda x'. ((= (f x')) (f x)) x) ;)

(; dict ;)

def thm_815 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof ((x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)) x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq B (f_2 x_1) (f_2 x_1)) ((x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)) x_1) (thm_813 A B x_1 f_2) (thm_814 A B x_1 f_2).

(; Theorem: |- (Data.Bool.? \lambda x'. ((= (f x')) (f x))) ;)

(; dict ;)

def thm_816 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof ((x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof ((x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_510 A x_1 P_2 hyp_1) A x_1 (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x'. ((= (f x')) (f x))) ;)

(; dict ;)

def thm_817 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.PROVE_HYP ((x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1))) (thm_815 B A x_1 f_2) (hyp_1 : hol.proof ((x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)) x_1) => thm_816 B A x_1 f_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))) ;)

(; dict ;)

def thm_818 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => x_2 : hol.term A => thm_817 B A x_2 f_1.

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))) ;)

(; dict ;)

def thm_819 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) -> hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) => hol.EQ_MP (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (thm_808 B A f_1 hyp_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) (thm_811 B A f_1) (thm_818 B A f_1)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_820 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.imp (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) => thm_819 A B f_1 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))) ;)

(; dict ;)

def thm_821 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) -> hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) => hyp_1.

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))) \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))) ;)

(; dict ;)

def thm_822 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))) \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))) ;)

(; dict ;)

def thm_823 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS (hol.arr (hol.arr B hol.bool) hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) (thm_822 A B f_1) (thm_822 A B f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y))))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y))))) ;)

(; dict ;)

def thm_824 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr (hol.arr B hol.bool) hol.bool) hol.bool (hol.forall (hol.arr B hol.bool)) (hol.forall (hol.arr B hol.bool)) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) (thm_795 B) (thm_823 A B f_1).

(; Theorem: |- (Data.Bool.! \lambda y. (p y)) ;)

(; dict ;)

def thm_825 : B : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => p_1 y_2)) -> hol.proof (hol.forall B (y_2 : hol.term B => p_1 y_2)) :=
  B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => p_1 y_2)) => hyp_1.

(; Theorem: |- ((= \lambda x. (p (f x))) \lambda x. (p (f x))) ;)

(; dict ;)

def thm_826 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3)) (x_3 : hol.term A => p_2 (f_1 x_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3)).

(; Theorem: |- ((= \lambda x. (p (f x))) \lambda x. (p (f x))) ;)

(; dict ;)

def thm_827 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3)) (x_3 : hol.term A => p_2 (f_1 x_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3)) (x_3 : hol.term A => p_2 (f_1 x_3)) (x_3 : hol.term A => p_2 (f_1 x_3)) (thm_826 B A f_1 p_2) (thm_826 B A f_1 p_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda x. (p (f x)))) ;)

(; dict ;)

def thm_828 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => p_2 (f_1 x_3)) (x_3 : hol.term A => p_2 (f_1 x_3)) (thm_50 A) (thm_827 B A f_1 p_2).

(; Theorem: |- ((= (p y)) (p y)) ;)

(; dict ;)

def thm_829 : B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (p_2 y_1) (p_2 y_1)) :=
  B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => hol.REFL hol.bool (p_2 y_1).

(; Theorem: |- ((= (p y)) (p y)) ;)

(; dict ;)

def thm_830 : B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (p_2 y_1) (p_2 y_1)) :=
  B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => hol.TRANS hol.bool (p_2 y_1) (p_2 y_1) (p_2 y_1) (thm_829 B y_1 p_2) (thm_829 B y_1 p_2).

(; Theorem: |- (p y) ;)

(; dict ;)

def thm_831 : B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => p_2 y_3)) -> hol.proof (p_2 y_1) :=
  B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => p_2 y_3)) => thm_825 B p_2 hyp_1 y_1.

(; Theorem: |- (p (f x)) ;)

(; dict ;)

def thm_832 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => p_3 y_4)) -> hol.proof (p_3 (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => p_3 y_4)) => (B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => p_2 y_3)) => (B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => p_2 y_3)) => hol.EQ_MP (p_2 y_1) (p_2 y_1) (thm_830 B y_1 p_2) (thm_831 B y_1 p_2 hyp_1)) B y_1 p_2 hyp_1) B (f_2 x_1) p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (p (f x))) ;)

(; dict ;)

def thm_833 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => p_2 y_3)) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => p_2 y_3)) => x_3 : hol.term A => thm_832 A B x_3 f_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (p (f x))) ;)

(; dict ;)

def thm_834 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => p_2 y_3)) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => p_2 y_3)) => hol.PROVE_HYP (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (thm_825 B p_2 hyp_1) (hyp_2 : hol.proof (hol.forall B (y_3 : hol.term B => p_2 y_3)) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (thm_828 B A f_1 p_2) (thm_833 B A f_1 p_2 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda x. (p (f x)))) ;)

(; dict ;)

def thm_835 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.imp (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => p_2 y_3)) => thm_834 B A f_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. (p (f x))) ;)

(; dict ;)

def thm_836 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) -> hol.proof (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) => hyp_1.

(; Theorem: |- ((= \lambda y. (p y)) \lambda y. (p y)) ;)

(; dict ;)

def thm_837 : B : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_2 : hol.term B => p_1 y_2) (y_2 : hol.term B => p_1 y_2)) :=
  B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => hol.REFL (hol.arr B hol.bool) (y_2 : hol.term B => p_1 y_2).

(; Theorem: |- ((= \lambda y. (p y)) \lambda y. (p y)) ;)

(; dict ;)

def thm_838 : B : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_2 : hol.term B => p_1 y_2) (y_2 : hol.term B => p_1 y_2)) :=
  B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => hol.TRANS (hol.arr B hol.bool) (y_2 : hol.term B => p_1 y_2) (y_2 : hol.term B => p_1 y_2) (y_2 : hol.term B => p_1 y_2) (thm_837 B p_1) (thm_837 B p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (p y))) (Data.Bool.! \lambda y. (p y))) ;)

(; dict ;)

def thm_839 : B : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => p_1 y_2)) (hol.forall B (y_2 : hol.term B => p_1 y_2))) :=
  B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y_2 : hol.term B => p_1 y_2) (y_2 : hol.term B => p_1 y_2) (thm_182 B) (thm_838 B p_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((= (f x)) y) x)) (p y)))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((= (f x)) y))) (p y))) ;)

(; dict ;)

def thm_840 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.eq B (f_3 x_5) y_2) x_4) (p_1 y_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_3 x_4) y_2)) (p_1 y_2))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr B hol.bool) => y_2 : hol.term B => f_3 : hol.term (hol.arr A B) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_314 A Q_1 P_2) A (p_1 y_2) (x_4 : hol.term A => hol.eq B (f_3 x_4) y_2).

(; Theorem: |- ((= (= (\lambda _11052. (p _11052) y))) (= (\lambda _11052. (p _11052) y))) ;)

(; dict ;)

def thm_841 : B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11052_3 : hol.term B => p_2 __11052_3) y_1)) (hol.eq hol.bool ((__11052_3 : hol.term B => p_2 __11052_3) y_1))) :=
  B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11052_3 : hol.term B => p_2 __11052_3) y_1)).

(; Theorem: |- ((= (\lambda _11052. (p _11052) (f x))) (p (f x))) ;)

(; dict ;)

def thm_842 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool ((__11052_4 : hol.term B => p_3 __11052_4) (f_2 x_1)) (p_3 (f_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hol.BETA_CONV B hol.bool (__11052_4 : hol.term B => p_3 __11052_4) (f_2 x_1).

(; Theorem: |- ((= ((= (\lambda _11052. (p _11052) y)) (\lambda _11052. (p _11052) (f x)))) ((= (\lambda _11052. (p _11052) y)) (p (f x)))) ;)

(; dict ;)

def thm_843 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11052_5 : hol.term B => p_4 __11052_5) y_3) ((__11052_5 : hol.term B => p_4 __11052_5) (f_2 x_1))) (hol.eq hol.bool ((__11052_5 : hol.term B => p_4 __11052_5) y_3) (p_4 (f_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr B hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__11052_5 : hol.term B => p_4 __11052_5) y_3)) (hol.eq hol.bool ((__11052_5 : hol.term B => p_4 __11052_5) y_3)) ((__11052_5 : hol.term B => p_4 __11052_5) (f_2 x_1)) (p_4 (f_2 x_1)) (thm_841 B y_3 p_4) (thm_842 A B x_1 f_2 p_4).

(; Theorem: |- ((= (\lambda _11052. (p _11052) y)) (p y)) ;)

(; dict ;)

def thm_844 : B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool ((__11052_3 : hol.term B => p_2 __11052_3) y_1) (p_2 y_1)) :=
  B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => hol.BETA_CONV B hol.bool (__11052_3 : hol.term B => p_2 __11052_3) y_1.

(; Theorem: |- ((= (= (\lambda _11052. (p _11052) y))) (= (p y))) ;)

(; dict ;)

def thm_845 : B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11052_3 : hol.term B => p_2 __11052_3) y_1)) (hol.eq hol.bool (p_2 y_1))) :=
  B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__11052_3 : hol.term B => p_2 __11052_3) y_1) (p_2 y_1) thm_198 (thm_844 B y_1 p_2).

(; Theorem: |- ((= (p (f x))) (p (f x))) ;)

(; dict ;)

def thm_846 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (p_3 (f_2 x_1)) (p_3 (f_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hol.REFL hol.bool (p_3 (f_2 x_1)).

(; Theorem: |- ((= ((= (\lambda _11052. (p _11052) y)) (p (f x)))) ((= (p y)) (p (f x)))) ;)

(; dict ;)

def thm_847 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11052_5 : hol.term B => p_4 __11052_5) y_3) (p_4 (f_2 x_1))) (hol.eq hol.bool (p_4 y_3) (p_4 (f_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr B hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__11052_5 : hol.term B => p_4 __11052_5) y_3)) (hol.eq hol.bool (p_4 y_3)) (p_4 (f_2 x_1)) (p_4 (f_2 x_1)) (thm_845 B y_3 p_4) (thm_846 A B x_1 f_2 p_4).

(; Theorem: |- ((= ((= (\lambda _11052. (p _11052) y)) (\lambda _11052. (p _11052) (f x)))) ((= (p y)) (p (f x)))) ;)

(; dict ;)

def thm_848 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11052_5 : hol.term B => p_4 __11052_5) y_3) ((__11052_5 : hol.term B => p_4 __11052_5) (f_2 x_1))) (hol.eq hol.bool (p_4 y_3) (p_4 (f_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr B hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool ((__11052_5 : hol.term B => p_4 __11052_5) y_3) ((__11052_5 : hol.term B => p_4 __11052_5) (f_2 x_1))) (hol.eq hol.bool ((__11052_5 : hol.term B => p_4 __11052_5) y_3) (p_4 (f_2 x_1))) (hol.eq hol.bool (p_4 y_3) (p_4 (f_2 x_1))) (thm_843 A B x_1 f_2 y_3 p_4) (thm_847 A B x_1 f_2 y_3 p_4).

(; Theorem: |- ((= \lambda _11052. (p _11052)) \lambda _11052. (p _11052)) ;)

(; dict ;)

def thm_849 : B : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq (hol.arr B hol.bool) (__11052_2 : hol.term B => p_1 __11052_2) (__11052_2 : hol.term B => p_1 __11052_2)) :=
  B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => hol.REFL (hol.arr B hol.bool) (__11052_2 : hol.term B => p_1 __11052_2).

(; Theorem: |- ((= (f x)) y) ;)

(; dict ;)

def thm_850 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq B (f_3 x_2) y_1) -> hol.proof (hol.eq B (f_3 x_2) y_1) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq B (f_3 x_2) y_1) => hyp_1.

(; Theorem: |- ((= y) (f x)) ;)

(; dict ;)

def thm_851 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> hyp_1 : hol.proof (hol.eq B (f_2 x_1) y_3) -> hol.proof (hol.eq B y_3 (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y_3 : hol.term B => hyp_1 : hol.proof (hol.eq B (f_2 x_1) y_3) => hol.SYM B (f_2 x_1) y_3 (thm_850 A B y_3 x_1 f_2 hyp_1).

(; Theorem: |- ((= (\lambda _11052. (p _11052) y)) (\lambda _11052. (p _11052) (f x))) ;)

(; dict ;)

def thm_852 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.eq B (f_2 x_1) y_3) -> hol.proof (hol.eq hol.bool ((__11052_5 : hol.term B => p_4 __11052_5) y_3) ((__11052_5 : hol.term B => p_4 __11052_5) (f_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.eq B (f_2 x_1) y_3) => hol.APP_THM B hol.bool (__11052_5 : hol.term B => p_4 __11052_5) (__11052_5 : hol.term B => p_4 __11052_5) y_3 (f_2 x_1) (thm_849 B p_4) (thm_851 A B x_1 f_2 y_3 hyp_1).

(; Theorem: |- ((= (p y)) (p (f x))) ;)

(; dict ;)

def thm_853 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.eq B (f_2 x_1) y_3) -> hol.proof (hol.eq hol.bool (p_4 y_3) (p_4 (f_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.eq B (f_2 x_1) y_3) => hol.EQ_MP (hol.eq hol.bool ((__11052_5 : hol.term B => p_4 __11052_5) y_3) ((__11052_5 : hol.term B => p_4 __11052_5) (f_2 x_1))) (hol.eq hol.bool (p_4 y_3) (p_4 (f_2 x_1))) (thm_848 A B x_1 f_2 y_3 p_4) (thm_852 A B x_1 f_2 y_3 p_4 hyp_1).

(; Theorem: |- ((= (p (f x))) (p y)) ;)

(; dict ;)

def thm_854 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.eq B (f_3 x_2) y_1) -> hol.proof (hol.eq hol.bool (p_4 (f_3 x_2)) (p_4 y_1)) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.eq B (f_3 x_2) y_1) => hol.SYM hol.bool (p_4 y_1) (p_4 (f_3 x_2)) (thm_853 A B x_2 f_3 y_1 p_4 hyp_1).

(; Theorem: |- (p (f x)) ;)

(; dict ;)

def thm_855 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 (f_2 x_4))) -> hol.proof (p_3 (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 (f_2 x_4))) => thm_836 B A f_2 p_3 hyp_1 x_1.

(; Theorem: |- (p (f x)) ;)

(; dict ;)

def thm_856 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 (f_2 x_4))) -> hol.proof (p_3 (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 (f_2 x_4))) => hol.PROVE_HYP (hol.forall A (x_4 : hol.term A => p_3 (f_2 x_4))) (p_3 (f_2 x_1)) (thm_836 B A f_2 p_3 hyp_1) (hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 (f_2 x_4))) => (A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 (f_2 x_4))) => hol.EQ_MP (p_3 (f_2 x_1)) (p_3 (f_2 x_1)) (thm_846 A B x_1 f_2 p_3) (thm_855 A B x_1 f_2 p_3 hyp_1)) A B x_1 f_2 p_3 hyp_2).

(; Theorem: |- (p y) ;)

(; dict ;)

def thm_857 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 (f_2 x_5))) -> hyp_2 : hol.proof (hol.eq B (f_2 x_1) y_3) -> hol.proof (p_4 y_3) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 (f_2 x_5))) => hyp_2 : hol.proof (hol.eq B (f_2 x_1) y_3) => hol.EQ_MP (p_4 (f_2 x_1)) (p_4 y_3) (thm_854 A B y_3 x_1 f_2 p_4 hyp_2) (thm_856 A B x_1 f_2 p_4 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((= (f x)) y)) (p y)) ;)

(; dict ;)

def thm_858 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> y_2 : hol.term B -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_1 (f_4 x_5))) -> hol.proof (hol.imp (hol.eq B (f_4 x_3) y_2) (p_1 y_2)) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => y_2 : hol.term B => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_1 (f_4 x_5))) => hyp_2 : hol.proof (hol.eq B (f_4 x_3) y_2) => thm_857 A B x_3 f_4 y_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((= (\lambda x. ((= (f x)) y) x)) ((= (f x)) y)) ;)

(; dict ;)

def thm_859 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => hol.eq B (f_3 x_4) y_2) x_1) (hol.eq B (f_3 x_1) y_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => f_3 : hol.term (hol.arr A B) => hol.BETA_CONV A hol.bool (x_4 : hol.term A => hol.eq B (f_3 x_4) y_2) x_1.

(; Theorem: |- (\lambda x. ((= (f x)) y) x) ;)

(; dict ;)

def thm_860 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.eq B (f_3 x_4) y_2) x_1) -> hol.proof ((x_4 : hol.term A => hol.eq B (f_3 x_4) y_2) x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.eq B (f_3 x_4) y_2) x_1) => hyp_1.

(; Theorem: |- ((= (f x)) y) ;)

(; dict ;)

def thm_861 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof ((x_4 : hol.term A => hol.eq B (f_3 x_4) y_1) x_2) -> hol.proof (hol.eq B (f_3 x_2) y_1) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof ((x_4 : hol.term A => hol.eq B (f_3 x_4) y_1) x_2) => hol.EQ_MP ((x_4 : hol.term A => hol.eq B (f_3 x_4) y_1) x_2) (hol.eq B (f_3 x_2) y_1) (thm_859 B A x_2 y_1 f_3) (thm_860 B A x_2 y_1 f_3 hyp_1).

(; Theorem: |- (p y) ;)

(; dict ;)

def thm_862 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> y_3 : hol.term B -> p_4 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 (f_2 x_5))) -> hyp_2 : hol.proof ((x_5 : hol.term A => hol.eq B (f_2 x_5) y_3) x_1) -> hol.proof (p_4 y_3) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => y_3 : hol.term B => p_4 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_4 (f_2 x_5))) => hyp_2 : hol.proof ((x_5 : hol.term A => hol.eq B (f_2 x_5) y_3) x_1) => thm_858 A B p_4 y_3 x_1 f_2 hyp_1 (thm_861 A B y_3 x_1 f_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((= (f x)) y) x)) (p y)) ;)

(; dict ;)

def thm_863 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> x_2 : hol.term A -> y_3 : hol.term B -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_1 (f_4 x_5))) -> hol.proof (hol.imp ((x_5 : hol.term A => hol.eq B (f_4 x_5) y_3) x_2) (p_1 y_3)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr B hol.bool) => x_2 : hol.term A => y_3 : hol.term B => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x_5 : hol.term A => p_1 (f_4 x_5))) => hyp_2 : hol.proof ((x_5 : hol.term A => hol.eq B (f_4 x_5) y_3) x_2) => thm_862 A B x_2 f_4 y_3 p_1 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((= (f x)) y) x)) (p y))) ;)

(; dict ;)

def thm_864 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 (f_3 x_4))) -> hol.proof (hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.eq B (f_3 x_5) y_2) x_4) (p_1 y_2))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr B hol.bool) => y_2 : hol.term B => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 (f_3 x_4))) => x_4 : hol.term A => thm_863 B A p_1 x_4 y_2 f_3 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((= (f x)) y))) (p y)) ;)

(; dict ;)

def thm_865 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 (f_3 x_4))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_3 x_4) y_2)) (p_1 y_2)) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr B hol.bool) => y_2 : hol.term B => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_1 (f_3 x_4))) => thm_840 B A p_1 y_2 f_3 (thm_864 B A p_1 y_2 f_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. ((= (f x)) y)) ;)

(; dict ;)

def thm_866 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1)) => hyp_1.

(; Theorem: |- (p y) ;)

(; dict ;)

def thm_867 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y_2 : hol.term B -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 (f_1 x_4))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_2)) -> hol.proof (p_3 y_2) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y_2 : hol.term B => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 (f_1 x_4))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_2)) => thm_865 B A p_3 y_2 f_1 hyp_1 (thm_866 B A y_2 f_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. ((= (f x)) y)) ;)

(; dict ;)

def thm_868 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_2 x_4) y_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_2 x_4) y_3))) => thm_821 A B f_2 hyp_1 y_1.

(; Theorem: |- (p y) ;)

(; dict ;)

def thm_869 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y_2 : hol.term B -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 (f_1 x_4))) -> hyp_2 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.eq B (f_1 x_5) y_4))) -> hol.proof (p_3 y_2) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y_2 : hol.term B => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => p_3 (f_1 x_4))) => hyp_2 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.eq B (f_1 x_5) y_4))) => (hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_2)) => thm_867 A B f_1 y_2 p_3 hyp_1 hyp_3) (thm_868 B A y_2 f_1 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda y. (p y)) ;)

(; dict ;)

def thm_870 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) -> hyp_2 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) -> hol.proof (hol.forall B (y_3 : hol.term B => p_2 y_3)) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) => hyp_2 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) => y_3 : hol.term B => thm_869 A B f_1 y_3 p_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda y. (p y)) ;)

(; dict ;)

def thm_871 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) -> hyp_2 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) -> hol.proof (hol.forall B (y_3 : hol.term B => p_2 y_3)) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) => hyp_2 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) => hol.PROVE_HYP (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)) (thm_836 B A f_1 p_2 hyp_1) (hyp_3 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) => hol.EQ_MP (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hol.forall B (y_3 : hol.term B => p_2 y_3)) (thm_839 B p_2) (thm_870 A B f_1 p_2 hyp_3 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y))) ;)

(; dict ;)

def thm_872 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) => thm_871 A B f_1 p_2 hyp_2 hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y))) ;)

(; dict ;)

def thm_873 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) => hol.PROP_EXT (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)) (hyp_2 : hol.proof (hol.forall B (y_3 : hol.term B => p_2 y_3)) => thm_835 A B f_1 p_2 (thm_825 B p_2 hyp_2)) (hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) => thm_872 B A f_1 p_2 hyp_1 (thm_836 B A f_1 p_2 hyp_2)).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))) ;)

(; dict ;)

def thm_874 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) -> hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) => p_2 : hol.term (hol.arr B hol.bool) => thm_873 B A f_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))) ;)

(; dict ;)

def thm_875 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) -> hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) => hol.PROVE_HYP (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) (thm_821 A B f_1 hyp_1) (hyp_2 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) => hol.EQ_MP (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) (thm_824 A B f_1) (thm_874 A B f_1 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y))))) ;)

(; dict ;)

def thm_876 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.imp (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) => thm_875 A B f_1 hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y))))) ;)

(; dict ;)

def thm_877 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.PROP_EXT (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) (hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))) => thm_820 A B f_1 (thm_803 A B f_1 hyp_1)) (hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) => thm_876 A B f_1 (thm_821 A B f_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))))) ;)

(; dict ;)

def thm_878 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_877 A B f_1.

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))))) ;)

(; thm ;)

def thm_879 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => p_2 (f_1 x_3))) (hol.forall B (y_3 : hol.term B => p_2 y_3)))))) (thm_784 B A) (thm_878 B A).

(; Theorem: |- ((= \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))))) \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))))) ;)

(; dict ;)

def thm_880 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))))) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))))).

(; Theorem: |- ((= \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))))) \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))))) ;)

(; dict ;)

def thm_881 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))))) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))))) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))))) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))))) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))))) (thm_880 B A) (thm_880 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y))))))) (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y))))))) ;)

(; dict ;)

def thm_882 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))))) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))))) (thm_41 B A) (thm_881 B A).

(; Theorem: |- ((= Data.Bool.?) Data.Bool.?) ;)

(; dict ;)

def thm_883 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)).

(; Theorem: |- ((= (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y)) (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y)))) ;)

(; dict ;)

def thm_884 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) y_1) (hol.forall A (x_3 : hol.term A => hol.not (hol.eq B (f_2 x_3) y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hol.BETA_CONV B hol.bool (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) y_1.

(; Theorem: |- ((= \lambda y. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y)) \lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y)))) ;)

(; dict ;)

def thm_885 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2) (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => hol.not (hol.eq B (f_1 x_3) y_2)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM B hol.bool (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2) (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => hol.not (hol.eq B (f_1 x_3) y_2))) (y_2 : hol.term B => thm_884 A B y_2 f_1).

(; Theorem: |- ((= (\lambda y. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y) (f x))) (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x))) ;)

(; dict ;)

def thm_886 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => (y_4 : hol.term B => hol.forall A (x_5 : hol.term A => hol.not (hol.eq B (f_2 x_5) y_4))) y_3) (f_2 x_1)) ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM B hol.bool (y_3 : hol.term B => (y_4 : hol.term B => hol.forall A (x_5 : hol.term A => hol.not (hol.eq B (f_2 x_5) y_4))) y_3) (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1) (f_2 x_1) (thm_885 A B f_2) (thm_814 A B x_1 f_2).

(; Theorem: |- ((= (= (\lambda y. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y) (f x)))) (= (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x)))) ;)

(; dict ;)

def thm_887 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((y_3 : hol.term B => (y_4 : hol.term B => hol.forall A (x_5 : hol.term A => hol.not (hol.eq B (f_2 x_5) y_4))) y_3) (f_2 x_1))) (hol.eq hol.bool ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((y_3 : hol.term B => (y_4 : hol.term B => hol.forall A (x_5 : hol.term A => hol.not (hol.eq B (f_2 x_5) y_4))) y_3) (f_2 x_1)) ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1)) thm_198 (thm_886 A B x_1 f_2).

(; Theorem: |- ((= (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x))) (Data.Bool.! \lambda x_1. (Data.Bool.~ ((= (f x_1)) (f x))))) ;)

(; dict ;)

def thm_888 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1)) (hol.forall A (x__1_3 : hol.term A => hol.not (hol.eq B (f_2 x__1_3) (f_2 x_1))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.BETA_CONV B hol.bool (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1).

(; Theorem: |- ((= ((= (\lambda y. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y) (f x))) (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x)))) ((= (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x))) (Data.Bool.! \lambda x_1. (Data.Bool.~ ((= (f x_1)) (f x)))))) ;)

(; dict ;)

def thm_889 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((y_3 : hol.term B => (y_4 : hol.term B => hol.forall A (x_5 : hol.term A => hol.not (hol.eq B (f_2 x_5) y_4))) y_3) (f_2 x_1)) ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1))) (hol.eq hol.bool ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1)) (hol.forall A (x__1_3 : hol.term A => hol.not (hol.eq B (f_2 x__1_3) (f_2 x_1)))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((y_3 : hol.term B => (y_4 : hol.term B => hol.forall A (x_5 : hol.term A => hol.not (hol.eq B (f_2 x_5) y_4))) y_3) (f_2 x_1))) (hol.eq hol.bool ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1))) ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1)) (hol.forall A (x__1_3 : hol.term A => hol.not (hol.eq B (f_2 x__1_3) (f_2 x_1)))) (thm_887 A B x_1 f_2) (thm_888 A B x_1 f_2).

(; Theorem: |- ((= Data.Bool.~) Data.Bool.~) ;)

(; dict ;)

def thm_890 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not hol.not) :=
  hol.REFL (hol.arr hol.bool hol.bool) hol.not.

(; Theorem: |- ((= (\lambda x'. ((= (f x')) (f x)) x')) ((= (f x')) (f x))) ;)

(; dict ;)

def thm_891 : B : hol.type -> A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((x_27_4 : hol.term A => hol.eq B (f_3 x_27_4) (f_3 x_2)) x_27_1) (hol.eq B (f_3 x_27_1) (f_3 x_2))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.BETA_CONV A hol.bool (x_27_4 : hol.term A => hol.eq B (f_3 x_27_4) (f_3 x_2)) x_27_1.

(; Theorem: |- ((= (Data.Bool.~ (\lambda x'. ((= (f x')) (f x)) x'))) (Data.Bool.~ ((= (f x')) (f x)))) ;)

(; dict ;)

def thm_892 : B : hol.type -> A : hol.type -> x_27_1 : hol.term A -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.not ((x_27_4 : hol.term A => hol.eq B (f_3 x_27_4) (f_3 x_2)) x_27_1)) (hol.not (hol.eq B (f_3 x_27_1) (f_3 x_2)))) :=
  B : hol.type => A : hol.type => x_27_1 : hol.term A => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_27_4 : hol.term A => hol.eq B (f_3 x_27_4) (f_3 x_2)) x_27_1) (hol.eq B (f_3 x_27_1) (f_3 x_2)) thm_890 (thm_891 B A x_27_1 x_2 f_3).

(; Theorem: |- ((= \lambda x'. (Data.Bool.~ (\lambda x'. ((= (f x')) (f x)) x'))) \lambda x'. (Data.Bool.~ ((= (f x')) (f x)))) ;)

(; dict ;)

def thm_893 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => hol.not ((x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3)) (x_27_3 : hol.term A => hol.not (hol.eq B (f_2 x_27_3) (f_2 x_1)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.ABS_THM A hol.bool (x_27_3 : hol.term A => hol.not ((x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3)) (x_27_3 : hol.term A => hol.not (hol.eq B (f_2 x_27_3) (f_2 x_1))) (x_27_3 : hol.term A => thm_892 B A x_27_3 x_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. (Data.Bool.~ (\lambda x'. ((= (f x')) (f x)) x')))) (Data.Bool.! \lambda x'. (Data.Bool.~ ((= (f x')) (f x))))) ;)

(; dict ;)

def thm_894 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.not ((x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3))) (hol.forall A (x_27_3 : hol.term A => hol.not (hol.eq B (f_2 x_27_3) (f_2 x_1))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_27_3 : hol.term A => hol.not ((x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3)) (x_27_3 : hol.term A => hol.not (hol.eq B (f_2 x_27_3) (f_2 x_1))) (thm_50 A) (thm_893 B A x_1 f_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x'. (Data.Bool.~ (\lambda x'. ((= (f x')) (f x)) x'))))) (= (Data.Bool.! \lambda x'. (Data.Bool.~ ((= (f x')) (f x)))))) ;)

(; dict ;)

def thm_895 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.not ((x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3)))) (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.not (hol.eq B (f_2 x_27_3) (f_2 x_1)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_27_3 : hol.term A => hol.not ((x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3))) (hol.forall A (x_27_3 : hol.term A => hol.not (hol.eq B (f_2 x_27_3) (f_2 x_1)))) thm_198 (thm_894 B A x_1 f_2).

(; Theorem: |- ((= \lambda x'. (\lambda x'. ((= (f x')) (f x)) x')) \lambda x'. ((= (f x')) (f x))) ;)

(; dict ;)

def thm_896 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_27_3 : hol.term A => (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.ABS_THM A hol.bool (x_27_3 : hol.term A => (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)) (x_27_3 : hol.term A => thm_891 B A x_27_3 x_1 f_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x'. (\lambda x'. ((= (f x')) (f x)) x'))) (Data.Bool.? \lambda x'. ((= (f x')) (f x)))) ;)

(; dict ;)

def thm_897 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_27_3 : hol.term A => (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)) (thm_883 A) (thm_896 B A x_1 f_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x'. (\lambda x'. ((= (f x')) (f x)) x')))) (Data.Bool.~ (Data.Bool.? \lambda x'. ((= (f x')) (f x))))) ;)

(; dict ;)

def thm_898 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool hol.not hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1))) thm_890 (thm_897 B A x_1 f_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x'. (Data.Bool.~ (\lambda x'. ((= (f x')) (f x)) x')))) (Data.Bool.~ (Data.Bool.? \lambda x'. (\lambda x'. ((= (f x')) (f x)) x'))))) ((= (Data.Bool.! \lambda x'. (Data.Bool.~ ((= (f x')) (f x))))) (Data.Bool.~ (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) ;)

(; dict ;)

def thm_899 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.not ((x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3)))) (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.not (hol.eq B (f_2 x_27_3) (f_2 x_1)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.not ((x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3)))) (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.not (hol.eq B (f_2 x_27_3) (f_2 x_1))))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)))) (thm_895 B A x_1 f_2) (thm_898 B A x_1 f_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_900 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x'. (Data.Bool.~ (p x')))) (Data.Bool.~ (Data.Bool.? \lambda x'. (p x'))))) ((= (Data.Bool.! \lambda x'. (Data.Bool.~ (p x')))) (Data.Bool.~ (Data.Bool.? \lambda x'. (p x'))))) ;)

(; dict ;)

def thm_901 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_27_2 : hol.term A => hol.not (p_1 x_27_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2)))) (hol.eq hol.bool (hol.forall A (x_27_2 : hol.term A => hol.not (p_1 x_27_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_27_2 : hol.term A => hol.not (p_1 x_27_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2)))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ((= (Data.Bool.! \lambda x'. (Data.Bool.~ (p x')))) (Data.Bool.~ (Data.Bool.? \lambda x'. (p x'))))) ;)

(; dict ;)

def thm_902 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_27_2 : hol.term A => hol.not (p_1 x_27_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_27_2 : hol.term A => hol.not (p_1 x_27_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2)))) (thm_900 A p_1) (thm_901 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_903 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_904 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) => hol.SYM hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (thm_903 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_905 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_906 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) => hol.SYM hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (thm_905 A p_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_907 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hyp_1 : hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) => thm_904 A p_1 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) => thm_906 A p_1 hyp_1).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x))))) \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_908 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => thm_907 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))))) ;)

(; dict ;)

def thm_909 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (thm_33 A) (thm_908 A).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x))))) ;)

(; dict ;)

def thm_910 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2))))) (thm_909 A) (thm_22 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (p x)))) ;)

(; dict ;)

def thm_911 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_910 A p_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x'. (Data.Bool.~ (p x')))) (Data.Bool.~ (Data.Bool.? \lambda x'. (p x')))) ;)

(; dict ;)

def thm_912 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_2 : hol.term A => hol.not (p_1 x_27_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (hol.forall A (x_27_2 : hol.term A => hol.not (p_1 x_27_2))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_2 : hol.term A => p_1 x_27_2)))) (thm_902 A p_1) (thm_911 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. (Data.Bool.~ (\lambda x'. ((= (f x')) (f x)) x')))) (Data.Bool.~ (Data.Bool.? \lambda x'. (\lambda x'. ((= (f x')) (f x)) x')))) ;)

(; dict ;)

def thm_913 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.not ((x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_912 A p_1) A p_1) A (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)).

(; Theorem: |- ((= (Data.Bool.! \lambda x'. (Data.Bool.~ ((= (f x')) (f x))))) (Data.Bool.~ (Data.Bool.? \lambda x'. ((= (f x')) (f x))))) ;)

(; dict ;)

def thm_914 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.not (hol.eq B (f_2 x_27_3) (f_2 x_1)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.not ((x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_1)) x_27_3)))) (hol.eq hol.bool (hol.forall A (x_27_3 : hol.term A => hol.not (hol.eq B (f_2 x_27_3) (f_2 x_1)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1))))) (thm_899 B A x_1 f_2) (thm_913 B A x_1 f_2).

(; Theorem: |- ((= (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x))) (Data.Bool.~ (Data.Bool.? \lambda x'. ((= (f x')) (f x))))) ;)

(; dict ;)

def thm_915 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1))))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1)) (hol.forall A (x__1_3 : hol.term A => hol.not (hol.eq B (f_2 x__1_3) (f_2 x_1)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)))) (hol.EQ_MP (hol.eq hol.bool ((y_3 : hol.term B => (y_4 : hol.term B => hol.forall A (x_5 : hol.term A => hol.not (hol.eq B (f_2 x_5) y_4))) y_3) (f_2 x_1)) ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1))) (hol.eq hol.bool ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) (f_2 x_1)) (hol.forall A (x__1_3 : hol.term A => hol.not (hol.eq B (f_2 x__1_3) (f_2 x_1))))) (thm_889 A B x_1 f_2) (thm_886 A B x_1 f_2)) (thm_914 B A x_1 f_2).

(; Theorem: |- ((= \lambda x. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x))) \lambda x. (Data.Bool.~ (Data.Bool.? \lambda x'. ((= (f x')) (f x))))) ;)

(; dict ;)

def thm_916 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2)) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM A hol.bool (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2)) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) (x_2 : hol.term A => thm_915 A B x_2 f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) ;)

(; dict ;)

def thm_917 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2)) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) (thm_883 A) (thm_916 B A f_1).

(; Theorem: |- ((= (\lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))) x)) (Data.Bool.? \lambda x'. ((= (f x')) (f x)))) ;)

(; dict ;)

def thm_918 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_3))) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1)))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.BETA_CONV A hol.bool (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_3))) x_1.

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))) x))) (Data.Bool.~ (Data.Bool.? \lambda x'. ((= (f x')) (f x))))) ;)

(; dict ;)

def thm_919 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.not ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_3))) x_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1))))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_2 x_27_4) (f_2 x_3))) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_2 x_27_3) (f_2 x_1))) thm_890 (thm_918 B A x_1 f_2).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))) x))) \lambda x. (Data.Bool.~ (Data.Bool.? \lambda x'. ((= (f x')) (f x))))) ;)

(; dict ;)

def thm_920 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2)) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2)) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) (x_2 : hol.term A => thm_919 B A x_2 f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))) x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) ;)

(; dict ;)

def thm_921 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2)) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) (thm_883 A) (thm_920 B A f_1).

(; Theorem: |- ((= (= (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))) x))))) (= (Data.Bool.? \lambda x. (Data.Bool.~ (Data.Bool.? \lambda x'. ((= (f x')) (f x))))))) ;)

(; dict ;)

def thm_922 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) thm_198 (thm_921 B A f_1).

(; Theorem: |- ((= \lambda x. (\lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))) x)) \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))) ;)

(; dict ;)

def thm_923 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM A hol.bool (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))) (x_2 : hol.term A => thm_918 B A x_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))) x))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))))) ;)

(; dict ;)

def thm_924 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2)) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2) (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))) (thm_50 A) (thm_923 B A f_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))) x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) ;)

(; dict ;)

def thm_925 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2))) (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2)) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) thm_890 (thm_924 B A f_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))) x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))) x))))) ((= (Data.Bool.? \lambda x. (Data.Bool.~ (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))))))) ;)

(; dict ;)

def thm_926 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2))) (hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))))) (hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2))) (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (thm_922 B A f_1) (thm_925 B A f_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_927 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_928 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (thm_927 A p_1) (thm_927 A p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_929 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_930 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (thm_929 A p_1 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) ;)

(; dict ;)

def thm_931 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_932 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) => hol.SYM hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (thm_931 A p_1 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_933 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.PROP_EXT (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hyp_1 : hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) => thm_930 A p_1 hyp_1) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) => thm_932 A p_1 hyp_1).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x))))) \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_934 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.ABS_THM (hol.arr A hol.bool) hol.bool (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => thm_933 A p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))))) ;)

(; dict ;)

def thm_935 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr (hol.arr A hol.bool) hol.bool) hol.bool (hol.forall (hol.arr A hol.bool)) (hol.forall (hol.arr A hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2)))) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (thm_33 A) (thm_934 A).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_936 : A : hol.type -> hol.proof (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))))) (hol.forall (hol.arr A hol.bool) (p_1 : hol.term (hol.arr A hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2))))) (thm_935 A) (thm_23 A).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_937 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_936 A p_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (\lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))) x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (\lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))) x)))) ;)

(; dict ;)

def thm_938 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2))) (hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (thm_928 A p_1) (thm_937 A p_1)) A p_1) A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (Data.Bool.~ (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) ;)

(; dict ;)

def thm_939 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not ((x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2))) (hol.not (hol.forall A (x_2 : hol.term A => (x_3 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_4 : hol.term A => hol.eq B (f_1 x_27_4) (f_1 x_3))) x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))))) (thm_926 B A f_1) (thm_938 B A f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) ;)

(; dict ;)

def thm_940 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (thm_917 B A f_1) (thm_939 B A f_1).

(; Theorem: |- ((= (= (Data.Bool.? \lambda x. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x))))) (= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))))))) ;)

(; dict ;)

def thm_941 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) thm_198 (thm_940 B A f_1).

(; Theorem: |- ((= (Data.Bool.~ (\lambda x. ((= (f x)) y) x))) (Data.Bool.~ ((= (f x)) y))) ;)

(; dict ;)

def thm_942 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.not ((x_4 : hol.term A => hol.eq B (f_3 x_4) y_2) x_1)) (hol.not (hol.eq B (f_3 x_1) y_2))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => f_3 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((x_4 : hol.term A => hol.eq B (f_3 x_4) y_2) x_1) (hol.eq B (f_3 x_1) y_2) thm_890 (thm_859 B A x_1 y_2 f_3).

(; Theorem: |- ((= \lambda x. (Data.Bool.~ (\lambda x. ((= (f x)) y) x))) \lambda x. (Data.Bool.~ ((= (f x)) y))) ;)

(; dict ;)

def thm_943 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3)) (x_3 : hol.term A => hol.not (hol.eq B (f_2 x_3) y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3)) (x_3 : hol.term A => hol.not (hol.eq B (f_2 x_3) y_1)) (x_3 : hol.term A => thm_942 B A x_3 y_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((= (f x)) y) x)))) (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y)))) ;)

(; dict ;)

def thm_944 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3))) (hol.forall A (x_3 : hol.term A => hol.not (hol.eq B (f_2 x_3) y_1)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3)) (x_3 : hol.term A => hol.not (hol.eq B (f_2 x_3) y_1)) (thm_50 A) (thm_943 B A y_1 f_2).

(; Theorem: |- ((= (= (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((= (f x)) y) x))))) (= (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))))) ;)

(; dict ;)

def thm_945 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not (hol.eq B (f_2 x_3) y_1))))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3))) (hol.forall A (x_3 : hol.term A => hol.not (hol.eq B (f_2 x_3) y_1))) thm_198 (thm_944 B A y_1 f_2).

(; Theorem: |- ((= \lambda x. (\lambda x. ((= (f x)) y) x)) \lambda x. ((= (f x)) y)) ;)

(; dict ;)

def thm_946 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hol.ABS_THM A hol.bool (x_3 : hol.term A => (x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1) (x_3 : hol.term A => thm_859 B A x_3 y_1 f_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (\lambda x. ((= (f x)) y) x))) (Data.Bool.? \lambda x. ((= (f x)) y))) ;)

(; dict ;)

def thm_947 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (x_3 : hol.term A => (x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1) (thm_883 A) (thm_946 B A y_1 f_2).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((= (f x)) y) x)))) (Data.Bool.~ (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_948 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool hol.not hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1)) thm_890 (thm_947 B A y_1 f_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((= (f x)) y) x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((= (f x)) y) x))))) ((= (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y)))) (Data.Bool.~ (Data.Bool.? \lambda x. ((= (f x)) y))))) ;)

(; dict ;)

def thm_949 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not (hol.eq B (f_2 x_3) y_1))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1))))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not (hol.eq B (f_2 x_3) y_1)))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1))) (thm_945 B A y_1 f_2) (thm_948 B A y_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ (\lambda x. ((= (f x)) y) x)))) (Data.Bool.~ (Data.Bool.? \lambda x. (\lambda x. ((= (f x)) y) x)))) ;)

(; dict ;)

def thm_950 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_911 A p_1) A (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y)))) (Data.Bool.~ (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_951 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not (hol.eq B (f_2 x_3) y_1))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1)))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not ((x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => (x_4 : hol.term A => hol.eq B (f_2 x_4) y_1) x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.not (hol.eq B (f_2 x_3) y_1))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1)))) (thm_949 B A y_1 f_2) (thm_950 B A y_1 f_2).

(; Theorem: |- ((= (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y)) (Data.Bool.~ (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_952 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) y_1) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool ((y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_2 x_4) y_3))) y_1) (hol.forall A (x_3 : hol.term A => hol.not (hol.eq B (f_2 x_3) y_1))) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1))) (thm_884 A B y_1 f_2) (thm_951 B A y_1 f_2).

(; Theorem: |- ((= \lambda y. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y)) \lambda y. (Data.Bool.~ (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_953 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM B hol.bool (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (y_2 : hol.term B => thm_952 A B y_2 f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda y. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y))) (Data.Bool.? \lambda y. (Data.Bool.~ (Data.Bool.? \lambda x. ((= (f x)) y))))) ;)

(; dict ;)

def thm_954 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (thm_657 B) (thm_953 A B f_1).

(; Theorem: |- ((= (Data.Bool.~ (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y))) (Data.Bool.~ (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_955 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.not ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_2 x_4) y_3)) y_1)) (hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1)))) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool hol.not hol.not ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_2 x_4) y_3)) y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_2 x_3) y_1)) thm_890 (thm_785 A B y_1 f_2).

(; Theorem: |- ((= \lambda y. (Data.Bool.~ (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y))) \lambda y. (Data.Bool.~ (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_956 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr B hol.bool) (y_2 : hol.term B => hol.not ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM B hol.bool (y_2 : hol.term B => hol.not ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (y_2 : hol.term B => thm_955 A B y_2 f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda y. (Data.Bool.~ (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y)))) (Data.Bool.? \lambda y. (Data.Bool.~ (Data.Bool.? \lambda x. ((= (f x)) y))))) ;)

(; dict ;)

def thm_957 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr B hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool)) (y_2 : hol.term B => hol.not ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (thm_657 B) (thm_956 A B f_1).

(; Theorem: |- ((= (= (Data.Bool.? \lambda y. (Data.Bool.~ (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y))))) (= (Data.Bool.? \lambda y. (Data.Bool.~ (Data.Bool.? \lambda x. ((= (f x)) y)))))) ;)

(; dict ;)

def thm_958 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) thm_198 (thm_957 A B f_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.! \lambda y. (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y)))) (Data.Bool.~ (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))))) ;)

(; dict ;)

def thm_959 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.not (hol.forall B (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.forall B (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) thm_890 (thm_787 A B f_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda y. (Data.Bool.~ (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y)))) (Data.Bool.~ (Data.Bool.! \lambda y. (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y))))) ((= (Data.Bool.? \lambda y. (Data.Bool.~ (Data.Bool.? \lambda x. ((= (f x)) y))))) (Data.Bool.~ (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))))) ;)

(; dict ;)

def thm_960 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2))) (hol.not (hol.forall B (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) (hol.not (hol.forall B (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (thm_958 A B f_1) (thm_959 A B f_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda y. (Data.Bool.~ (p y)))) (Data.Bool.~ (Data.Bool.! \lambda y. (p y))))) ((= (Data.Bool.? \lambda y. (Data.Bool.~ (p y)))) (Data.Bool.~ (Data.Bool.! \lambda y. (p y))))) ;)

(; dict ;)

def thm_961 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2))) (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2))) (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2))) (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2)))).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (Data.Bool.~ (p x)))) (Data.Bool.~ (Data.Bool.! \lambda x. (p x))))) ((= (Data.Bool.? \lambda y. (Data.Bool.~ (p y)))) (Data.Bool.~ (Data.Bool.! \lambda y. (p y))))) ;)

(; dict ;)

def thm_962 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2))) (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2))))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2))) (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2)))) (thm_927 A p_1) (thm_961 A p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda y. (Data.Bool.~ (p y)))) (Data.Bool.~ (Data.Bool.! \lambda y. (p y)))) ;)

(; dict ;)

def thm_963 : A : hol.type -> p_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2))) (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2)))) :=
  A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => hol.not (p_1 x_2))) (hol.not (hol.forall A (x_2 : hol.term A => p_1 x_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (y_2 : hol.term A => hol.not (p_1 y_2))) (hol.not (hol.forall A (y_2 : hol.term A => p_1 y_2)))) (thm_962 A p_1) (thm_937 A p_1).

(; Theorem: |- ((= (Data.Bool.? \lambda y. (Data.Bool.~ (p y)))) (Data.Bool.~ (Data.Bool.! \lambda y. (p y)))) ;)

(; dict ;)

def thm_964 : B : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (p_1 y_2))) (hol.not (hol.forall B (y_2 : hol.term B => p_1 y_2)))) :=
  B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => (A : hol.type => p_1 : hol.term (hol.arr A hol.bool) => thm_963 A p_1) B p_1.

(; Theorem: |- ((= (Data.Bool.? \lambda y. (Data.Bool.~ (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y)))) (Data.Bool.~ (Data.Bool.! \lambda y. (\lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)) y)))) ;)

(; dict ;)

def thm_965 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2))) (hol.not (hol.forall B (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => (B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => thm_964 B p_1) B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)).

(; Theorem: |- ((= (Data.Bool.? \lambda y. (Data.Bool.~ (Data.Bool.? \lambda x. ((= (f x)) y))))) (Data.Bool.~ (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))))) ;)

(; dict ;)

def thm_966 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not ((y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2))) (hol.not (hol.forall B (y_2 : hol.term B => (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3)) y_2)))) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) (thm_960 A B f_1) (thm_965 A B f_1).

(; Theorem: |- ((= (Data.Bool.? \lambda y. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y))) (Data.Bool.~ (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))))) ;)

(; dict ;)

def thm_967 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2)) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => hol.not (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (thm_954 A B f_1) (thm_966 A B f_1).

(; Theorem: |- ((= ((= (Data.Bool.? \lambda x. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x)))) (Data.Bool.? \lambda y. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y)))) ((= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) (Data.Bool.~ (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))))) ;)

(; dict ;)

def thm_968 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2)))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2)) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (thm_941 B A f_1) (thm_967 A B f_1).

(; Theorem: |- ((= (Data.Bool.==> ((= (Data.Bool.? \lambda x. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x)))) (Data.Bool.? \lambda y. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y))))) (Data.Bool.==> ((= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) (Data.Bool.~ (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))))))) ;)

(; dict ;)

def thm_969 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2)))) (hol.imp (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2))) (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) thm_317 (thm_968 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_970 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))).

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.? \lambda x. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x)))) (Data.Bool.? \lambda y. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y)))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))))) ((Data.Bool.==> ((= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) (Data.Bool.~ (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))))) ;)

(; dict ;)

def thm_971 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (hol.imp (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2)))) (hol.imp (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (thm_969 B A f_1) (thm_970 A B f_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) (Data.Bool.~ (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))))) ((Data.Bool.==> ((= (Data.Bool.? \lambda x. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x)))) (Data.Bool.? \lambda y. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y)))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))))) ;)

(; dict ;)

def thm_972 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.SYM hol.bool (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (hol.imp (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (thm_971 B A f_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ;)

(; dict ;)

def thm_973 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ;)

(; dict ;)

def thm_974 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (thm_973 Z_1 X_2 Y_3) (thm_973 Z_1 X_2 Y_3).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z)) ;)

(; dict ;)

def thm_975 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) -> hol.proof (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= Y) X)) Z) ;)

(; dict ;)

def thm_976 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) -> hol.proof (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z) ;)

(; dict ;)

def thm_977 : Z_1 : hol.term hol.bool -> Y_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool Y_2 X_3) Z_1) -> hyp_2 : hol.proof (hol.imp (hol.imp (hol.eq hol.bool Y_2 X_3) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_2)) Z_1)) -> hol.proof (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_2)) Z_1) :=
  Z_1 : hol.term hol.bool => Y_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool Y_2 X_3) Z_1) => hyp_2 : hol.proof (hol.imp (hol.imp (hol.eq hol.bool Y_2 X_3) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_2)) Z_1)) => thm_975 Z_1 X_3 Y_2 hyp_2 (thm_976 Z_1 X_3 Y_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z)) ;)

(; dict ;)

def thm_978 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) -> hol.proof (hol.imp (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) => hyp_2 : hol.proof (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) => thm_977 Z_1 Y_3 X_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ;)

(; dict ;)

def thm_979 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) => thm_978 Z_1 X_2 Y_3 hyp_2 (thm_975 Z_1 X_2 Y_3 hyp_1).

(; Theorem: |- ((= (= (\lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z)) Y))) (= (\lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z)) Y))) ;)

(; dict ;)

def thm_980 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1)) (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1)).

(; Theorem: |- ((= (\lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z)) Data.Bool.F)) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z))) ;)

(; dict ;)

def thm_981 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__11058_3 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11058_3)) Z_1)) hol.false) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__11058_3 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11058_3)) Z_1)) hol.false.

(; Theorem: |- ((= ((= (\lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z)) Y)) (\lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z)) Data.Bool.F))) ((= (\lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z)) Y)) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z)))) ;)

(; dict ;)

def thm_982 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1) ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) hol.false)) (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.false)) Z_2)))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1)) (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1)) ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) hol.false) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.false)) Z_2)) (thm_980 Y_1 Z_2 X_3) (thm_981 Z_2 X_3).

(; Theorem: |- ((= (\lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z)) Y)) ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ;)

(; dict ;)

def thm_983 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1) (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1.

(; Theorem: |- ((= (= (\lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z)) Y))) (= ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z)))) ;)

(; dict ;)

def thm_984 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1)) (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2)))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1) (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2)) thm_198 (thm_983 Y_1 Z_2 X_3).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z))) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z))) ;)

(; dict ;)

def thm_985 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1)).

(; Theorem: |- ((= ((= (\lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z)) Y)) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z)))) ((= ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z)))) ;)

(; dict ;)

def thm_986 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.false)) Z_2))) (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2)) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.false)) Z_2)))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1)) (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2))) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.false)) Z_2)) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.false)) Z_2)) (thm_984 Y_1 Z_2 X_3) (thm_985 Z_2 X_3).

(; Theorem: |- ((= ((= (\lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z)) Y)) (\lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z)) Data.Bool.F))) ((= ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z)))) ;)

(; dict ;)

def thm_987 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1) ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) hol.false)) (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2)) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.false)) Z_2)))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1) ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) hol.false)) (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.false)) Z_2))) (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2)) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.false)) Z_2))) (thm_982 Y_1 Z_2 X_3) (thm_986 Y_1 Z_2 X_3).

(; Theorem: |- ((= \lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z))) \lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z))) ;)

(; dict ;)

def thm_988 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__11058_3 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11058_3)) Z_1)) (__11058_3 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11058_3)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__11058_3 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11058_3)) Z_1)).

(; Theorem: |- ((= Y) Data.Bool.F) ;)

(; dict ;)

def thm_989 : Y_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool Y_1 hol.false) -> hol.proof (hol.eq hol.bool Y_1 hol.false) :=
  Y_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool Y_1 hol.false) => hyp_1.

(; Theorem: |- ((= (\lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z)) Y)) (\lambda _11058. ((Data.Bool.==> ((Data.Bool.==> ((= _11058) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11058))) Z)) Data.Bool.F)) ;)

(; dict ;)

def thm_990 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool Y_1 hol.false) -> hol.proof (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1) ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) hol.false)) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool Y_1 hol.false) => hol.APP_THM hol.bool hol.bool (__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) (__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11058_4)) Z_2)) Y_1 hol.false (thm_988 Z_2 X_3) (thm_989 Y_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z))) ;)

(; dict ;)

def thm_991 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool Y_3 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool Y_3 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11058_4)) Z_1)) Y_3) ((__11058_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11058_4 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11058_4)) Z_1)) hol.false)) (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1))) (thm_987 Y_3 Z_1 X_2) (thm_990 Y_3 Z_1 X_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z))) ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ;)

(; dict ;)

def thm_992 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool Y_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.false X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.false)) Z_2)) (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool Y_1 hol.false) => hol.SYM hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2)) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.false)) Z_2)) (thm_991 Z_2 X_3 Y_1 hyp_1).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_993 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_994 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_993 t_1) (thm_993 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_995 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_996 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_995 thm_995.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_997 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) thm_102 thm_996.

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_998 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((= Data.Bool.T) t)) t)) ((= ((= Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_999 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_998 t_1) (thm_998 t_1).

(; Theorem: |- ((= ((= Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_1000 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_24 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_1001 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_136 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_1002 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (thm_999 t_1) (thm_1000 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) => thm_1001 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_1003 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.T)) t)) ((= ((= t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_1004 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_1003 t_1) (thm_1003 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_1005 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_25 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_1006 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_136 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_1007 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (thm_1004 t_1) (thm_1005 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) => thm_1006 t_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_1008 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_26 t_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_1009 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_136 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_1010 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_993 t_1) (thm_1008 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) => thm_1009 t_1 hyp_1).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_1011 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_1012 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_1011 t_1) (thm_1011 t_1).

(; Theorem: |- ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_1013 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_27 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_1014 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_1010 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (thm_1012 t_1) (thm_1013 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_1015 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (thm_1007 t_1) (thm_1014 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_1016 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (thm_1002 t_1) (thm_1015 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((= Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_1017 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => thm_1016 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_1018 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_128 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_1019 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_2) (hol.not t_2)) (hol.eq hol.bool (hol.eq hol.bool t_2 hol.false) (hol.not t_2)))))) thm_997 thm_1017 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))))) => thm_1018 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_1020 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_128 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((= Data.Bool.F) t)) (Data.Bool.~ t))) ((= ((= t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_1021 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (thm_1019 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)))) => thm_1020 t_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_1022 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_167 q_1 p_2 hyp_1) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= Data.Bool.F) t)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_1023 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_1021 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool t_1 hol.false) (hol.not t_1))) => thm_1022 t_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.F) X)) (Data.Bool.~ X)) ;)

(; dict ;)

def thm_1024 : X_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.false X_1) (hol.not X_1)) :=
  X_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (hol.eq hol.bool (hol.eq hol.bool hol.false t_1) (hol.not t_1)) (thm_994 t_1) (thm_1023 t_1)) X_1.

(; Theorem: |- ((= (Data.Bool.==> ((= Data.Bool.F) X))) (Data.Bool.==> (Data.Bool.~ X))) ;)

(; dict ;)

def thm_1025 : X_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq hol.bool hol.false X_1)) (hol.imp (hol.not X_1))) :=
  X_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq hol.bool hol.false X_1) (hol.not X_1) thm_317 (thm_1024 X_1).

(; Theorem: |- ((= Z) Z) ;)

(; dict ;)

def thm_1026 : Z_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool Z_1 Z_1) :=
  Z_1 : hol.term hol.bool => hol.REFL hol.bool Z_1.

(; Theorem: |- ((= ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> (Data.Bool.~ X)) Z)) ;)

(; dict ;)

def thm_1027 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.not X_2) Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq hol.bool hol.false X_2)) (hol.imp (hol.not X_2)) Z_1 Z_1 (thm_1025 X_2) (thm_1026 Z_1).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z))) (Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ X)) Z))) ;)

(; dict ;)

def thm_1028 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1)) (hol.imp (hol.imp (hol.not X_2) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.not X_2) Z_1) thm_317 (thm_1027 Z_1 X_2).

(; Theorem: |- ((= (= (Data.Bool.~ X))) (= (Data.Bool.~ X))) ;)

(; dict ;)

def thm_1029 : X_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not X_1)) (hol.eq hol.bool (hol.not X_1))) :=
  X_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.not X_1)).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_1030 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_1031 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_1030 thm_1030.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_1032 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_1033 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_1032 thm_1032.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_1034 : hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_136 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_1035 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.PROVE_HYP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_1033 thm_28) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => thm_1034 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_1036 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) thm_1035 (hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_1030 thm_29).

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_1037 : hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) -> hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true) :=
  hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_128 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_1038 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true) :=
  hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_1036 (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => thm_1037 hyp_1).

(; Theorem: |- ((= ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) ((= (Data.Bool.~ X)) Data.Bool.T)) ;)

(; dict ;)

def thm_1039 : X_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not X_1) (hol.not hol.false)) (hol.eq hol.bool (hol.not X_1) hol.true)) :=
  X_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not X_1)) (hol.eq hol.bool (hol.not X_1)) (hol.not hol.false) hol.true (thm_1029 X_1) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_1031 thm_1038).

(; Theorem: |- ((= ((= (Data.Bool.~ X)) Data.Bool.T)) (Data.Bool.~ X)) ;)

(; dict ;)

def thm_1040 : X_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not X_1) hol.true) (hol.not X_1)) :=
  X_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_1005 t_1) (hol.not X_1).

(; Theorem: |- ((= ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) (Data.Bool.~ X)) ;)

(; dict ;)

def thm_1041 : X_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not X_1) (hol.not hol.false)) (hol.not X_1)) :=
  X_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not X_1) (hol.not hol.false)) (hol.eq hol.bool (hol.not X_1) hol.true) (hol.not X_1) (thm_1039 X_1) (thm_1040 X_1).

(; Theorem: |- ((= (Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F)))) (Data.Bool.==> (Data.Bool.~ X))) ;)

(; dict ;)

def thm_1042 : X_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq hol.bool (hol.not X_1) (hol.not hol.false))) (hol.imp (hol.not X_1))) :=
  X_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq hol.bool (hol.not X_1) (hol.not hol.false)) (hol.not X_1) thm_317 (thm_1041 X_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z)) ((Data.Bool.==> (Data.Bool.~ X)) Z)) ;)

(; dict ;)

def thm_1043 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1) (hol.imp (hol.not X_2) Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false))) (hol.imp (hol.not X_2)) Z_1 Z_1 (thm_1042 X_2) (thm_1026 Z_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z))) ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ X)) Z)) ((Data.Bool.==> (Data.Bool.~ X)) Z))) ;)

(; dict ;)

def thm_1044 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1)) (hol.imp (hol.imp (hol.not X_2) Z_1) (hol.imp (hol.not X_2) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1)) (hol.imp (hol.imp (hol.not X_2) Z_1)) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1) (hol.imp (hol.not X_2) Z_1) (thm_1028 Z_1 X_2) (thm_1043 Z_1 X_2).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> (Data.Bool.~ X)) Z)) ((Data.Bool.==> (Data.Bool.~ X)) Z))) Data.Bool.T) ;)

(; dict ;)

def thm_1045 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.not X_2) Z_1) (hol.imp (hol.not X_2) Z_1)) hol.true) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_359 t_1) (hol.imp (hol.not X_2) Z_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z))) Data.Bool.T) ;)

(; dict ;)

def thm_1046 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1)) hol.true) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1)) (hol.imp (hol.imp (hol.not X_2) Z_1) (hol.imp (hol.not X_2) Z_1)) hol.true (thm_1044 Z_1 X_2) (thm_1045 Z_1 X_2).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z))) ;)

(; dict ;)

def thm_1047 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.SYM hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1)) hol.true (thm_1046 Z_1 X_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.F) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.F))) Z)) ;)

(; dict ;)

def thm_1048 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.EQ_MP hol.true (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1)) (thm_1047 Z_1 X_2) thm_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z)) ;)

(; dict ;)

def thm_1049 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool Y_3 hol.false) -> hol.proof (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool Y_3 hol.false) => hol.EQ_MP (hol.imp (hol.imp (hol.eq hol.bool hol.false X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.false)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (thm_992 Y_3 Z_1 X_2 hyp_1) (thm_1048 Z_1 X_2).

(; Theorem: |- ((Data.Bool.==> ((= Y) Data.Bool.F)) ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ;)

(; dict ;)

def thm_1050 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.false) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool Y_3 hol.false) => thm_1049 Z_1 X_2 Y_3 hyp_1.

(; Theorem: |- ((= (= (\lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z)) Y))) (= (\lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z)) Y))) ;)

(; dict ;)

def thm_1051 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1)) (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1)).

(; Theorem: |- ((= (\lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z)) Data.Bool.T)) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z))) ;)

(; dict ;)

def thm_1052 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__11056_3 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11056_3)) Z_1)) hol.true) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__11056_3 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11056_3)) Z_1)) hol.true.

(; Theorem: |- ((= ((= (\lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z)) Y)) (\lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z)) Data.Bool.T))) ((= (\lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z)) Y)) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z)))) ;)

(; dict ;)

def thm_1053 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1) ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) hol.true)) (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.true)) Z_2)))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1)) (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1)) ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) hol.true) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.true)) Z_2)) (thm_1051 Y_1 Z_2 X_3) (thm_1052 Z_2 X_3).

(; Theorem: |- ((= (\lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z)) Y)) ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ;)

(; dict ;)

def thm_1054 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1) (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1.

(; Theorem: |- ((= (= (\lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z)) Y))) (= ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z)))) ;)

(; dict ;)

def thm_1055 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1)) (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2)))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1) (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2)) thm_198 (thm_1054 Y_1 Z_2 X_3).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z))) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z))) ;)

(; dict ;)

def thm_1056 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1)).

(; Theorem: |- ((= ((= (\lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z)) Y)) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z)))) ((= ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z)))) ;)

(; dict ;)

def thm_1057 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.true)) Z_2))) (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2)) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.true)) Z_2)))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1)) (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2))) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.true)) Z_2)) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.true)) Z_2)) (thm_1055 Y_1 Z_2 X_3) (thm_1056 Z_2 X_3).

(; Theorem: |- ((= ((= (\lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z)) Y)) (\lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z)) Data.Bool.T))) ((= ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z)))) ;)

(; dict ;)

def thm_1058 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1) ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) hol.true)) (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2)) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.true)) Z_2)))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1) ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) hol.true)) (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.true)) Z_2))) (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2)) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.true)) Z_2))) (thm_1053 Y_1 Z_2 X_3) (thm_1057 Y_1 Z_2 X_3).

(; Theorem: |- ((= \lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z))) \lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z))) ;)

(; dict ;)

def thm_1059 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__11056_3 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11056_3)) Z_1)) (__11056_3 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11056_3)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__11056_3 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11056_3)) Z_1)).

(; Theorem: |- ((= Y) Data.Bool.T) ;)

(; dict ;)

def thm_1060 : Y_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool Y_1 hol.true) -> hol.proof (hol.eq hol.bool Y_1 hol.true) :=
  Y_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool Y_1 hol.true) => hyp_1.

(; Theorem: |- ((= (\lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z)) Y)) (\lambda _11056. ((Data.Bool.==> ((Data.Bool.==> ((= _11056) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ _11056))) Z)) Data.Bool.T)) ;)

(; dict ;)

def thm_1061 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool Y_1 hol.true) -> hol.proof (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1) ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) hol.true)) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool Y_1 hol.true) => hol.APP_THM hol.bool hol.bool (__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) (__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not __11056_4)) Z_2)) Y_1 hol.true (thm_1059 Z_2 X_3) (thm_1060 Y_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z))) ;)

(; dict ;)

def thm_1062 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool Y_3 hol.true) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool Y_3 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11056_4)) Z_1)) Y_3) ((__11056_4 : hol.term hol.bool => hol.imp (hol.imp (hol.eq hol.bool __11056_4 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not __11056_4)) Z_1)) hol.true)) (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1))) (thm_1058 Y_3 Z_1 X_2) (thm_1061 Y_3 Z_1 X_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z))) ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ;)

(; dict ;)

def thm_1063 : Y_1 : hol.term hol.bool -> Z_2 : hol.term hol.bool -> X_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool Y_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.true X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.true)) Z_2)) (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2))) :=
  Y_1 : hol.term hol.bool => Z_2 : hol.term hol.bool => X_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool Y_1 hol.true) => hol.SYM hol.bool (hol.imp (hol.imp (hol.eq hol.bool Y_1 X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not Y_1)) Z_2)) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_3) Z_2) (hol.imp (hol.eq hol.bool (hol.not X_3) (hol.not hol.true)) Z_2)) (thm_1062 Z_2 X_3 Y_1 hyp_1).

(; Theorem: |- ((= ((= Data.Bool.T) X)) X) ;)

(; dict ;)

def thm_1064 : X_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true X_1) X_1) :=
  X_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_1000 t_1) X_1.

(; Theorem: |- ((= (Data.Bool.==> ((= Data.Bool.T) X))) (Data.Bool.==> X)) ;)

(; dict ;)

def thm_1065 : X_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq hol.bool hol.true X_1)) (hol.imp X_1)) :=
  X_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq hol.bool hol.true X_1) X_1 thm_317 (thm_1064 X_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> X) Z)) ;)

(; dict ;)

def thm_1066 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp X_2 Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq hol.bool hol.true X_2)) (hol.imp X_2) Z_1 Z_1 (thm_1065 X_2) (thm_1026 Z_1).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z))) (Data.Bool.==> ((Data.Bool.==> X) Z))) ;)

(; dict ;)

def thm_1067 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1)) (hol.imp (hol.imp X_2 Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp X_2 Z_1) thm_317 (thm_1066 Z_1 X_2).

(; Theorem: |- ((= ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) ((= (Data.Bool.~ X)) Data.Bool.F)) ;)

(; dict ;)

def thm_1068 : X_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not X_1) (hol.not hol.true)) (hol.eq hol.bool (hol.not X_1) hol.false)) :=
  X_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.not X_1)) (hol.eq hol.bool (hol.not X_1)) (hol.not hol.true) hol.false (thm_1029 X_1) thm_28.

(; Theorem: |- ((= ((= (Data.Bool.~ X)) Data.Bool.F)) (Data.Bool.~ (Data.Bool.~ X))) ;)

(; dict ;)

def thm_1069 : X_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not X_1) hol.false) (hol.not (hol.not X_1))) :=
  X_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_1013 t_1) (hol.not X_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_1070 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_1071 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_1070 t_1) (thm_1070 t_1).

(; Theorem: |- ((= ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)))) ;)

(; dict ;)

def thm_1072 : hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) :=
  hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_136 p_1 q_2 hyp_1) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)))) ;)

(; dict ;)

def thm_1073 : hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) :=
  hol.PROVE_HYP (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)))) thm_30 (hyp_1 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) => thm_1072 hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t))) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_1074 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.EQ_MP (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) thm_1073 thm_1036.

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_1075 : hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_167 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda t. ((= (Data.Bool.~ (Data.Bool.~ t))) t)) ;)

(; dict ;)

def thm_1076 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) :=
  hol.PROVE_HYP (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) thm_1074 (hyp_1 : hol.proof (hol.and (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.not (hol.not t_1)) t_1)) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) => thm_1075 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ t))) t) ;)

(; dict ;)

def thm_1077 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) :=
  t_1 : hol.term hol.bool => thm_1076 t_1.

(; Theorem: |- ((= (Data.Bool.~ (Data.Bool.~ X))) X) ;)

(; dict ;)

def thm_1078 : X_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.not X_1)) X_1) :=
  X_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (hol.eq hol.bool (hol.not (hol.not t_1)) t_1) (thm_1071 t_1) (thm_1077 t_1)) X_1.

(; Theorem: |- ((= ((= (Data.Bool.~ X)) Data.Bool.F)) X) ;)

(; dict ;)

def thm_1079 : X_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not X_1) hol.false) X_1) :=
  X_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not X_1) hol.false) (hol.not (hol.not X_1)) X_1 (thm_1069 X_1) (thm_1078 X_1).

(; Theorem: |- ((= ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) X) ;)

(; dict ;)

def thm_1080 : X_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not X_1) (hol.not hol.true)) X_1) :=
  X_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.not X_1) (hol.not hol.true)) (hol.eq hol.bool (hol.not X_1) hol.false) X_1 (thm_1068 X_1) (thm_1079 X_1).

(; Theorem: |- ((= (Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T)))) (Data.Bool.==> X)) ;)

(; dict ;)

def thm_1081 : X_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.eq hol.bool (hol.not X_1) (hol.not hol.true))) (hol.imp X_1)) :=
  X_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.eq hol.bool (hol.not X_1) (hol.not hol.true)) X_1 thm_317 (thm_1080 X_1).

(; Theorem: |- ((= ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z)) ((Data.Bool.==> X) Z)) ;)

(; dict ;)

def thm_1082 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1) (hol.imp X_2 Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true))) (hol.imp X_2) Z_1 Z_1 (thm_1081 X_2) (thm_1026 Z_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z))) ((Data.Bool.==> ((Data.Bool.==> X) Z)) ((Data.Bool.==> X) Z))) ;)

(; dict ;)

def thm_1083 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1)) (hol.imp (hol.imp X_2 Z_1) (hol.imp X_2 Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1)) (hol.imp (hol.imp X_2 Z_1)) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1) (hol.imp X_2 Z_1) (thm_1067 Z_1 X_2) (thm_1082 Z_1 X_2).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> X) Z)) ((Data.Bool.==> X) Z))) Data.Bool.T) ;)

(; dict ;)

def thm_1084 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp X_2 Z_1) (hol.imp X_2 Z_1)) hol.true) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_359 t_1) (hol.imp X_2 Z_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z))) Data.Bool.T) ;)

(; dict ;)

def thm_1085 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1)) hol.true) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1)) (hol.imp (hol.imp X_2 Z_1) (hol.imp X_2 Z_1)) hol.true (thm_1083 Z_1 X_2) (thm_1084 Z_1 X_2).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z))) ;)

(; dict ;)

def thm_1086 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.SYM hol.bool (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1)) hol.true (thm_1085 Z_1 X_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= Data.Bool.T) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Data.Bool.T))) Z)) ;)

(; dict ;)

def thm_1087 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => hol.EQ_MP hol.true (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1)) (thm_1086 Z_1 X_2) thm_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z)) ;)

(; dict ;)

def thm_1088 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool Y_3 hol.true) -> hol.proof (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool Y_3 hol.true) => hol.EQ_MP (hol.imp (hol.imp (hol.eq hol.bool hol.true X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not hol.true)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (thm_1063 Y_3 Z_1 X_2 hyp_1) (thm_1087 Z_1 X_2).

(; Theorem: |- ((Data.Bool.==> ((= Y) Data.Bool.T)) ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z))) ;)

(; dict ;)

def thm_1089 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.true) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool Y_3 hol.true) => thm_1088 Z_1 X_2 Y_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((= Y) Data.Bool.T)) ((= Y) Data.Bool.F)) ;)

(; dict ;)

def thm_1090 : Y_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool Y_1 hol.true) (hol.eq hol.bool Y_1 hol.false)) :=
  Y_1 : hol.term hol.bool => thm_31 Y_1.

(; Theorem: |- ((= (= ((Data.Bool.\/ P) Q))) (= ((Data.Bool.\/ P) Q))) ;)

(; dict ;)

def thm_1091 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_1092 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q))) ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))))) ;)

(; dict ;)

def thm_1093 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_1091 Q_1 P_2) (thm_1092 Q_1 P_2).

(; Theorem: |- ((= (= (Data.Bool.\/ P))) (= (Data.Bool.\/ P))) ;)

(; dict ;)

def thm_1094 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_1095 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1.

(; Theorem: |- ((= ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P))) ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))))) ;)

(; dict ;)

def thm_1096 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))))) :=
  P_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))) (thm_1094 P_1) (thm_1095 P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_1097 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool P_1 P_1) :=
  P_1 : hol.term hol.bool => hol.REFL hol.bool P_1.

(; Theorem: |- ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) ;)

(; dict ;)

def thm_1098 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1 P_1 thm_32 (thm_1097 P_1).

(; Theorem: |- ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_1099 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) (thm_1096 P_1) (thm_1098 P_1).

(; Theorem: |- ((= Q) Q) ;)

(; dict ;)

def thm_1100 : Q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool Q_1 Q_1) :=
  Q_1 : hol.term hol.bool => hol.REFL hol.bool Q_1.

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) ;)

(; dict ;)

def thm_1101 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or P_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1 Q_1 (thm_1099 P_2) (thm_1100 Q_1).

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_1102 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) (thm_1093 Q_1 P_2) (thm_1101 Q_1 P_2).

(; Theorem: |- ((Data.Bool.\/ P) Q) ;)

(; dict ;)

def thm_1103 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.or P_2 Q_1) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))) ;)

(; dict ;)

def thm_1104 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hol.EQ_MP (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_1102 Q_1 P_2) (thm_1103 Q_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> P) R)) ((Data.Bool.==> ((Data.Bool.==> Q) R)) R)) ;)

(; dict ;)

def thm_1105 : Q_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> P_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_3 Q_1) -> hol.proof (hol.imp (hol.imp P_3 R_2) (hol.imp (hol.imp Q_1 R_2) R_2)) :=
  Q_1 : hol.term hol.bool => R_2 : hol.term hol.bool => P_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_3 Q_1) => thm_1104 Q_1 P_3 hyp_1 R_2.

(; Theorem: |- ((Data.Bool.==> P) R) ;)

(; dict ;)

def thm_1106 : R_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_1) -> hol.proof (hol.imp P_2 R_1) :=
  R_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Q) R)) R) ;)

(; dict ;)

def thm_1107 : P_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_1 R_2) -> hyp_2 : hol.proof (hol.or P_1 Q_3) -> hol.proof (hol.imp (hol.imp Q_3 R_2) R_2) :=
  P_1 : hol.term hol.bool => R_2 : hol.term hol.bool => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_1 R_2) => hyp_2 : hol.proof (hol.or P_1 Q_3) => thm_1105 Q_3 R_2 P_1 hyp_2 (thm_1106 R_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> Q) R) ;)

(; dict ;)

def thm_1108 : R_1 : hol.term hol.bool -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp Q_2 R_1) -> hol.proof (hol.imp Q_2 R_1) :=
  R_1 : hol.term hol.bool => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp Q_2 R_1) => hyp_1.

(; Theorem: |- R ;)

(; dict ;)

def thm_1109 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> R_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_3) -> hyp_2 : hol.proof (hol.imp Q_1 R_3) -> hyp_3 : hol.proof (hol.or P_2 Q_1) -> hol.proof R_3 :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_1107 P_2 R_3 Q_1 hyp_1 hyp_3 (thm_1108 R_3 Q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z)) ;)

(; dict ;)

def thm_1110 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.false) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.true) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool Y_3 hol.true) (hol.eq hol.bool Y_3 hol.false)) -> hol.proof (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.false) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.true) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool Y_3 hol.true) (hol.eq hol.bool Y_3 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_1109 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool Y_3 hol.false) (hol.eq hol.bool Y_3 hol.true) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z)) ;)

(; dict ;)

def thm_1111 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.false) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.true) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) -> hol.proof (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.false) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.true) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool Y_3 hol.true) (hol.eq hol.bool Y_3 hol.false)) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (thm_1090 Y_3) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool Y_3 hol.true) (hol.eq hol.bool Y_3 hol.false)) => thm_1110 Z_1 X_2 Y_3 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z)) ;)

(; dict ;)

def thm_1112 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.false) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) -> hol.proof (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.false) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool Y_3 hol.true) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (thm_1089 Z_1 X_2 Y_3) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.true) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) => thm_1111 Z_1 X_2 Y_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= Y) X)) Z)) ((Data.Bool.==> ((= (Data.Bool.~ X)) (Data.Bool.~ Y))) Z)) ;)

(; dict ;)

def thm_1113 : Z_1 : hol.term hol.bool -> X_2 : hol.term hol.bool -> Y_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) :=
  Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool Y_3 hol.false) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (thm_1050 Z_1 X_2 Y_3) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool Y_3 hol.false) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1))) => thm_1112 Z_1 X_2 Y_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))))) ((Data.Bool.==> ((= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) (Data.Bool.~ (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))))) ;)

(; dict ;)

def thm_1114 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.imp (hol.imp (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (hol.imp (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => (Z_1 : hol.term hol.bool => X_2 : hol.term hol.bool => Y_3 : hol.term hol.bool => hol.EQ_MP (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (thm_974 Z_1 X_2 Y_3) (thm_979 Z_1 X_2 Y_3 (hol.EQ_MP (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (thm_973 Z_1 X_2 Y_3) (hol.EQ_MP (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (hol.imp (hol.imp (hol.eq hol.bool Y_3 X_2) Z_1) (hol.imp (hol.eq hol.bool (hol.not X_2) (hol.not Y_3)) Z_1)) (thm_973 Z_1 X_2 Y_3) (thm_1113 Z_1 X_2 Y_3))))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) ;)

(; dict ;)

def thm_1115 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) ;)

(; dict ;)

def thm_1116 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (thm_1115 A B f_1) (thm_1115 A B f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))))) ;)

(; dict ;)

def thm_1117 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_1118 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) => hol.SYM hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) ((A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) => hol.EQ_MP (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (thm_1116 A B f_1) (thm_1117 A B f_1 hyp_1)) A B f_1 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))) ;)

(; dict ;)

def thm_1119 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) -> hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) => hol.EQ_MP (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2)))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (thm_1118 B A f_1 hyp_1) (thm_818 B A f_1).

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_1120 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.imp (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) => thm_1119 A B f_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.~ (Data.Bool.! \lambda x. (Data.Bool.? \lambda x'. ((= (f x')) (f x)))))) (Data.Bool.~ (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_1121 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.imp (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_1114 A B f_1 (thm_1120 A B f_1).

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.? \lambda x. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x)))) (Data.Bool.? \lambda y. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y)))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_1122 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.EQ_MP (hol.imp (hol.eq hol.bool (hol.not (hol.forall A (x_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_27_3 : hol.term A => hol.eq B (f_1 x_27_3) (f_1 x_2))))) (hol.not (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) (thm_972 B A f_1) (thm_1121 B A f_1).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))) ;)

(; dict ;)

def thm_1123 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) -> hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) => hyp_1.

(; Theorem: |- ((= (Data.Bool.? \lambda x. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) (f x)))) (Data.Bool.? \lambda y. (\lambda y. (Data.Bool.! \lambda x. (Data.Bool.~ ((= (f x)) y))) y))) ;)

(; dict ;)

def thm_1124 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_2 : hol.term A => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) (f_1 x_2))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => (y_3 : hol.term B => hol.forall A (x_4 : hol.term A => hol.not (hol.eq B (f_1 x_4) y_3))) y_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) => thm_1123 A B f_1 hyp_1 (y_2 : hol.term B => hol.forall A (x_3 : hol.term A => hol.not (hol.eq B (f_1 x_3) y_2))).

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))) ;)

(; dict ;)

def thm_1125 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) -> hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) => thm_1122 B A f_1 (thm_1124 B A f_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y))))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) ;)

(; dict ;)

def thm_1126 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.imp (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) => thm_1125 A B f_1 hyp_1.

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))) \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))) ;)

(; dict ;)

def thm_1127 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))).

(; Theorem: |- ((= \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))) \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))) ;)

(; dict ;)

def thm_1128 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS (hol.arr (hol.arr B hol.bool) hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))) (thm_1127 A B f_1) (thm_1127 A B f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y))))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y))))) ;)

(; dict ;)

def thm_1129 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr (hol.arr B hol.bool) hol.bool) hol.bool (hol.forall (hol.arr B hol.bool)) (hol.forall (hol.arr B hol.bool)) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))) (thm_795 B) (thm_1128 A B f_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda y. (p y) x)) (Data.Bool.? \lambda x. (p (f x)))))) ((Data.Bool.==> (Data.Bool.? \lambda y. (p y))) (Data.Bool.? \lambda x. (p (f x))))) ;)

(; dict ;)

def thm_1130 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.imp (hol.forall B (x_3 : hol.term B => hol.imp ((y_4 : hol.term B => p_2 y_4) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 (f_1 x_4))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_314 A Q_1 P_2) B (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (y_3 : hol.term B => p_2 y_3).

(; Theorem: |- (p y) ;)

(; dict ;)

def thm_1131 : B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (p_2 y_1) -> hol.proof (p_2 y_1) :=
  B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (p_2 y_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((= (f x)) y) x)) (Data.Bool.? \lambda x. (p (f x)))))) ((Data.Bool.==> (Data.Bool.? \lambda x. ((= (f x)) y))) (Data.Bool.? \lambda x. (p (f x))))) ;)

(; dict ;)

def thm_1132 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A B) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.eq B (f_3 x_5) y_2) x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_1 (f_3 x_5))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_3 x_4) y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_1 (f_3 x_4))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr B hol.bool) => y_2 : hol.term B => f_3 : hol.term (hol.arr A B) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_314 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_1 (f_3 x_4))) (x_4 : hol.term A => hol.eq B (f_3 x_4) y_2).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda x. (p (f x)))) ;)

(; dict ;)

def thm_1133 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hol.REFL hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda x. (p (f x)))) ;)

(; dict ;)

def thm_1134 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (thm_1133 B A f_1 p_2).

(; Theorem: |- ((= (\lambda x. (p (f x)) x)) (p (f x))) ;)

(; dict ;)

def thm_1135 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) (p_3 (f_2 x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hol.BETA_CONV A hol.bool (x_4 : hol.term A => p_3 (f_2 x_4)) x_1.

(; Theorem: |- ((= (p (f x))) (\lambda x. (p (f x)) x)) ;)

(; dict ;)

def thm_1136 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (p_3 (f_2 x_1)) ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hol.SYM hol.bool ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) (p_3 (f_2 x_1)) (thm_1135 B A x_1 f_2 p_3).

(; Theorem: |- (p (f x)) ;)

(; dict ;)

def thm_1137 : A : hol.type -> B : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (p_4 y_1) -> hyp_2 : hol.proof (hol.eq B (f_3 x_2) y_1) -> hol.proof (p_4 (f_3 x_2)) :=
  A : hol.type => B : hol.type => y_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (p_4 y_1) => hyp_2 : hol.proof (hol.eq B (f_3 x_2) y_1) => hol.EQ_MP (p_4 y_1) (p_4 (f_3 x_2)) (thm_853 A B x_2 f_3 y_1 p_4 hyp_2) (thm_1131 B y_1 p_4 hyp_1).

(; Theorem: |- (\lambda x. (p (f x)) x) ;)

(; dict ;)

def thm_1138 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (p_4 y_1) -> hyp_2 : hol.proof (hol.eq B (f_3 x_2) y_1) -> hol.proof ((x_5 : hol.term A => p_4 (f_3 x_5)) x_2) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (p_4 y_1) => hyp_2 : hol.proof (hol.eq B (f_3 x_2) y_1) => hol.EQ_MP (p_4 (f_3 x_2)) ((x_5 : hol.term A => p_4 (f_3 x_5)) x_2) (thm_1136 A B x_2 f_3 p_4) (thm_1137 A B y_1 x_2 f_3 p_4 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. (p (f x))) ;)

(; dict ;)

def thm_1139 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 (f_2 x_4))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_510 A x_1 P_2 hyp_1) A x_1 (x_4 : hol.term A => p_3 (f_2 x_4)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (p (f x))) ;)

(; dict ;)

def thm_1140 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (p_4 y_2) -> hyp_2 : hol.proof (hol.eq B (f_3 x_1) y_2) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_4 (f_3 x_5))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => f_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (p_4 y_2) => hyp_2 : hol.proof (hol.eq B (f_3 x_1) y_2) => hol.PROVE_HYP ((x_5 : hol.term A => p_4 (f_3 x_5)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_4 (f_3 x_5))) (thm_1138 B A y_2 x_1 f_3 p_4 hyp_1 hyp_2) (hyp_3 : hol.proof ((x_5 : hol.term A => p_4 (f_3 x_5)) x_1) => thm_1139 B A x_1 f_3 p_4 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((= (f x)) y)) (Data.Bool.? \lambda x. (p (f x)))) ;)

(; dict ;)

def thm_1141 : A : hol.type -> B : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> y_2 : hol.term B -> x_3 : hol.term A -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (p_1 y_2) -> hol.proof (hol.imp (hol.eq B (f_4 x_3) y_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_1 (f_4 x_5)))) :=
  A : hol.type => B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => y_2 : hol.term B => x_3 : hol.term A => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (p_1 y_2) => hyp_2 : hol.proof (hol.eq B (f_4 x_3) y_2) => hol.EQ_MP (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_1 (f_4 x_5))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_1 (f_4 x_5))) (thm_1134 B A f_4 p_1) (thm_1140 B A x_3 y_2 f_4 p_1 hyp_1 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. (p (f x))) ;)

(; dict ;)

def thm_1142 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A B) -> p_4 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (p_4 y_2) -> hyp_2 : hol.proof ((x_5 : hol.term A => hol.eq B (f_3 x_5) y_2) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_4 (f_3 x_5))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => y_2 : hol.term B => f_3 : hol.term (hol.arr A B) => p_4 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (p_4 y_2) => hyp_2 : hol.proof ((x_5 : hol.term A => hol.eq B (f_3 x_5) y_2) x_1) => thm_1141 A B p_4 y_2 x_1 f_3 hyp_1 (thm_861 A B y_2 x_1 f_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (\lambda x. ((= (f x)) y) x)) (Data.Bool.? \lambda x. (p (f x)))) ;)

(; dict ;)

def thm_1143 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> x_2 : hol.term A -> y_3 : hol.term B -> f_4 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (p_1 y_3) -> hol.proof (hol.imp ((x_5 : hol.term A => hol.eq B (f_4 x_5) y_3) x_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_1 (f_4 x_5)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr B hol.bool) => x_2 : hol.term A => y_3 : hol.term B => f_4 : hol.term (hol.arr A B) => hyp_1 : hol.proof (p_1 y_3) => hyp_2 : hol.proof ((x_5 : hol.term A => hol.eq B (f_4 x_5) y_3) x_2) => thm_1142 B A x_2 y_3 f_4 p_1 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. ((= (f x)) y) x)) (Data.Bool.? \lambda x. (p (f x))))) ;)

(; dict ;)

def thm_1144 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (p_1 y_2) -> hol.proof (hol.forall A (x_4 : hol.term A => hol.imp ((x_5 : hol.term A => hol.eq B (f_3 x_5) y_2) x_4) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => p_1 (f_3 x_5))))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr B hol.bool) => y_2 : hol.term B => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (p_1 y_2) => x_4 : hol.term A => thm_1143 B A p_1 x_4 y_2 f_3 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. ((= (f x)) y))) (Data.Bool.? \lambda x. (p (f x)))) ;)

(; dict ;)

def thm_1145 : B : hol.type -> A : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> y_2 : hol.term B -> f_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (p_1 y_2) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_3 x_4) y_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_1 (f_3 x_4)))) :=
  B : hol.type => A : hol.type => p_1 : hol.term (hol.arr B hol.bool) => y_2 : hol.term B => f_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (p_1 y_2) => thm_1132 B A p_1 y_2 f_3 (thm_1144 B A p_1 y_2 f_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (p (f x))) ;)

(; dict ;)

def thm_1146 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (p_3 y_1) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_2 x_4) y_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 (f_2 x_4))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (p_3 y_1) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_2 x_4) y_1)) => thm_1145 B A p_3 y_1 f_2 hyp_1 (thm_866 B A y_1 f_2 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. (p (f x))) ;)

(; dict ;)

def thm_1147 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (p_3 y_1) -> hyp_2 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.eq B (f_2 x_5) y_4))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 (f_2 x_4))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (p_3 y_1) => hyp_2 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.eq B (f_2 x_5) y_4))) => (hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_2 x_4) y_1)) => thm_1146 B A y_1 f_2 p_3 hyp_1 hyp_3) (thm_868 B A y_1 f_2 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda x. (p (f x))) ;)

(; dict ;)

def thm_1148 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (p_3 y_1) -> hyp_2 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.eq B (f_2 x_5) y_4))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 (f_2 x_4))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (p_3 y_1) => hyp_2 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.eq B (f_2 x_5) y_4))) => hol.PROVE_HYP (p_3 y_1) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 (f_2 x_4))) (thm_1131 B y_1 p_3 hyp_1) (hyp_3 : hol.proof (p_3 y_1) => thm_1147 B A y_1 f_2 p_3 hyp_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (p y)) (Data.Bool.? \lambda x. (p (f x)))) ;)

(; dict ;)

def thm_1149 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y_2 : hol.term B -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.eq B (f_1 x_5) y_4))) -> hol.proof (hol.imp (p_3 y_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 (f_1 x_4)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y_2 : hol.term B => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.eq B (f_1 x_5) y_4))) => hyp_2 : hol.proof (p_3 y_2) => thm_1148 B A y_2 f_1 p_3 hyp_2 hyp_1.

(; Theorem: |- ((= (\lambda y. (p y) y)) (p y)) ;)

(; dict ;)

def thm_1150 : B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool ((y_3 : hol.term B => p_2 y_3) y_1) (p_2 y_1)) :=
  B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => hol.BETA_CONV B hol.bool (y_3 : hol.term B => p_2 y_3) y_1.

(; Theorem: |- (\lambda y. (p y) y) ;)

(; dict ;)

def thm_1151 : B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof ((y_3 : hol.term B => p_2 y_3) y_1) -> hol.proof ((y_3 : hol.term B => p_2 y_3) y_1) :=
  B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof ((y_3 : hol.term B => p_2 y_3) y_1) => hyp_1.

(; Theorem: |- (p y) ;)

(; dict ;)

def thm_1152 : B : hol.type -> y_1 : hol.term B -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof ((y_3 : hol.term B => p_2 y_3) y_1) -> hol.proof (p_2 y_1) :=
  B : hol.type => y_1 : hol.term B => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof ((y_3 : hol.term B => p_2 y_3) y_1) => hol.EQ_MP ((y_3 : hol.term B => p_2 y_3) y_1) (p_2 y_1) (thm_1150 B y_1 p_2) (thm_1151 B y_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda x. (p (f x))) ;)

(; dict ;)

def thm_1153 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.eq B (f_2 x_5) y_4))) -> hyp_2 : hol.proof ((y_4 : hol.term B => p_3 y_4) y_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 (f_2 x_4))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.eq B (f_2 x_5) y_4))) => hyp_2 : hol.proof ((y_4 : hol.term B => p_3 y_4) y_1) => thm_1149 A B f_2 y_1 p_3 hyp_1 (thm_1152 B y_1 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (\lambda y. (p y) y)) (Data.Bool.? \lambda x. (p (f x)))) ;)

(; dict ;)

def thm_1154 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> y_2 : hol.term B -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.eq B (f_1 x_5) y_4))) -> hol.proof (hol.imp ((y_4 : hol.term B => p_3 y_4) y_2) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_3 (f_1 x_4)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => y_2 : hol.term B => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_4 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_5 : hol.term A => hol.eq B (f_1 x_5) y_4))) => hyp_2 : hol.proof ((y_4 : hol.term B => p_3 y_4) y_2) => thm_1153 B A y_2 f_1 p_3 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> (\lambda y. (p y) y)) (Data.Bool.? \lambda x. (p (f x))))) ;)

(; dict ;)

def thm_1155 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) -> hol.proof (hol.forall B (y_3 : hol.term B => hol.imp ((y_4 : hol.term B => p_2 y_4) y_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => p_2 (f_1 x_4))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) => y_3 : hol.term B => thm_1154 A B f_1 y_3 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda y. (p y))) (Data.Bool.? \lambda x. (p (f x)))) ;)

(; dict ;)

def thm_1156 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) => thm_1130 A B f_1 p_2 (thm_1155 A B f_1 p_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda y. (p y)) ;)

(; dict ;)

def thm_1157 : B : hol.type -> p_1 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => p_1 y_2)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => p_1 y_2)) :=
  B : hol.type => p_1 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_2 : hol.term B => p_1 y_2)) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda x. (p (f x))) ;)

(; dict ;)

def thm_1158 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)) => thm_1156 A B f_1 p_2 hyp_1 (thm_1157 B p_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p (f x)) x)) (Data.Bool.? \lambda y. (p y))))) ((Data.Bool.==> (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))) ;)

(; dict ;)

def thm_1159 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 (f_1 x_4)) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 y_4)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_314 A Q_1 P_2) A (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)) (x_3 : hol.term A => p_2 (f_1 x_3)).

(; Theorem: |- (p (f x)) ;)

(; dict ;)

def thm_1160 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (p_3 (f_2 x_1)) -> hol.proof (p_3 (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (p_3 (f_2 x_1)) => hyp_1.

(; Theorem: |- ((= (\lambda y. (p y) (f x))) (p (f x))) ;)

(; dict ;)

def thm_1161 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool ((y_4 : hol.term B => p_3 y_4) (f_2 x_1)) (p_3 (f_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hol.BETA_CONV B hol.bool (y_4 : hol.term B => p_3 y_4) (f_2 x_1).

(; Theorem: |- ((= (p (f x))) (\lambda y. (p y) (f x))) ;)

(; dict ;)

def thm_1162 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.eq hol.bool (p_3 (f_2 x_1)) ((y_4 : hol.term B => p_3 y_4) (f_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hol.SYM hol.bool ((y_4 : hol.term B => p_3 y_4) (f_2 x_1)) (p_3 (f_2 x_1)) (thm_1161 A B x_1 f_2 p_3).

(; Theorem: |- (\lambda y. (p y) (f x)) ;)

(; dict ;)

def thm_1163 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (p_3 (f_2 x_1)) -> hol.proof ((y_4 : hol.term B => p_3 y_4) (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (p_3 (f_2 x_1)) => hol.EQ_MP (p_3 (f_2 x_1)) ((y_4 : hol.term B => p_3 y_4) (f_2 x_1)) (thm_1162 A B x_1 f_2 p_3) (thm_1160 A B x_1 f_2 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda y. (p y)) ;)

(; dict ;)

def thm_1164 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof ((y_4 : hol.term B => p_3 y_4) (f_2 x_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_3 y_4)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof ((y_4 : hol.term B => p_3 y_4) (f_2 x_1)) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_510 A x_1 P_2 hyp_1) B (f_2 x_1) (y_4 : hol.term B => p_3 y_4) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda y. (p y)) ;)

(; dict ;)

def thm_1165 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (p_3 (f_2 x_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_3 y_4)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (p_3 (f_2 x_1)) => hol.PROVE_HYP ((y_4 : hol.term B => p_3 y_4) (f_2 x_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_3 y_4)) (thm_1163 A B x_1 f_2 p_3 hyp_1) (hyp_2 : hol.proof ((y_4 : hol.term B => p_3 y_4) (f_2 x_1)) => thm_1164 A B x_1 f_2 p_3 hyp_2).

(; Theorem: |- (Data.Bool.? \lambda y. (p y)) ;)

(; dict ;)

def thm_1166 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (p_3 (f_2 x_1)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_3 y_4)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (p_3 (f_2 x_1)) => hol.PROVE_HYP (p_3 (f_2 x_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_3 y_4)) (thm_1160 A B x_1 f_2 p_3 hyp_1) (hyp_2 : hol.proof (p_3 (f_2 x_1)) => thm_1165 A B x_1 f_2 p_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (p (f x))) (Data.Bool.? \lambda y. (p y))) ;)

(; dict ;)

def thm_1167 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.imp (p_3 (f_2 x_1)) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_3 y_4))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (p_3 (f_2 x_1)) => thm_1166 A B x_1 f_2 p_3 hyp_1.

(; Theorem: |- (\lambda x. (p (f x)) x) ;)

(; dict ;)

def thm_1168 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) -> hol.proof ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) => hyp_1.

(; Theorem: |- (p (f x)) ;)

(; dict ;)

def thm_1169 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) -> hol.proof (p_3 (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) => hol.EQ_MP ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) (p_3 (f_2 x_1)) (thm_1135 B A x_1 f_2 p_3) (thm_1168 B A x_1 f_2 p_3 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda y. (p y)) ;)

(; dict ;)

def thm_1170 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_3 y_4)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) => thm_1167 A B x_1 f_2 p_3 (thm_1169 A B x_1 f_2 p_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda x. (p (f x)) x)) (Data.Bool.? \lambda y. (p y))) ;)

(; dict ;)

def thm_1171 : B : hol.type -> A : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> p_3 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.imp ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_3 y_4))) :=
  B : hol.type => A : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => p_3 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof ((x_4 : hol.term A => p_3 (f_2 x_4)) x_1) => thm_1170 A B x_1 f_2 p_3 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda x. (p (f x)) x)) (Data.Bool.? \lambda y. (p y)))) ;)

(; dict ;)

def thm_1172 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp ((x_4 : hol.term A => p_2 (f_1 x_4)) x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_4 : hol.term B => p_2 y_4)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => x_3 : hol.term A => thm_1171 B A x_3 f_1 p_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y))) ;)

(; dict ;)

def thm_1173 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => thm_1159 B A f_1 p_2 (thm_1172 B A f_1 p_2).

(; Theorem: |- (Data.Bool.? \lambda x. (p (f x))) ;)

(; dict ;)

def thm_1174 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) => hyp_1.

(; Theorem: |- (Data.Bool.? \lambda y. (p y)) ;)

(; dict ;)

def thm_1175 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) => thm_1173 B A f_1 p_2 (thm_1174 B A f_1 p_2 hyp_1).

(; Theorem: |- ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y))) ;)

(; dict ;)

def thm_1176 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> p_2 : hol.term (hol.arr B hol.bool) -> hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => p_2 : hol.term (hol.arr B hol.bool) => hyp_1 : hol.proof (hol.forall B (y_3 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_4 : hol.term A => hol.eq B (f_1 x_4) y_3))) => hol.PROP_EXT (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)) => (hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)) => thm_1158 B A f_1 p_2 hyp_1 hyp_3) (thm_1157 B p_2 hyp_2)) (hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) => (hyp_3 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) => thm_1175 A B f_1 p_2 hyp_3) (thm_1174 B A f_1 p_2 hyp_2)).

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))) ;)

(; dict ;)

def thm_1177 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) -> hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) => p_2 : hol.term (hol.arr B hol.bool) => thm_1176 B A f_1 p_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))) ;)

(; dict ;)

def thm_1178 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) -> hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) => hol.PROVE_HYP (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) (thm_821 A B f_1 hyp_1) (hyp_2 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) => hol.EQ_MP (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) (thm_1129 A B f_1) (thm_1177 A B f_1 hyp_2)).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y))))) ;)

(; dict ;)

def thm_1179 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.imp (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) => thm_1178 A B f_1 hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y))))) ;)

(; dict ;)

def thm_1180 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3))))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.PROP_EXT (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) (hyp_1 : hol.proof (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))) => thm_1126 A B f_1 (thm_1123 A B f_1 hyp_1)) (hyp_1 : hol.proof (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) => thm_1179 A B f_1 (thm_821 A B f_1 hyp_1)).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))))) ;)

(; dict ;)

def thm_1181 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_1180 A B f_1.

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))))) ;)

(; thm ;)

def thm_1182 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall B (y_2 : hol.term B => Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => hol.eq B (f_1 x_3) y_2))) (hol.forall (hol.arr B hol.bool) (p_2 : hol.term (hol.arr B hol.bool) => hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (x_3 : hol.term A => p_2 (f_1 x_3))) (Data_2EBool_2E_3F (hol.arr (hol.arr B hol.bool) hol.bool) (y_3 : hol.term B => p_2 y_3)))))) (thm_882 B A) (thm_1181 B A).
