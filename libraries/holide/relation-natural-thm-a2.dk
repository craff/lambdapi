
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME relation_2Dnatural_2Dthm_2Da2.

Number_2ENatural_2Enatural : hol.type.

Number_2ENatural_2E_3C : A : hol.type -> hol.term A.

Relation_2EwellFounded : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr A hol.bool)) (r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))))).

(; axiom ;)

thm_1 : hol.proof hol.true.

(; axiom ;)

thm_2 : hol.proof (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2)))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; Theorem: |- ((= ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) ;)

(; dict ;)

def thm_4 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.REFL hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))).

(; Theorem: |- ((= ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) ;)

(; dict ;)

def thm_5 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3)))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.TRANS hol.bool (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (thm_4 A r_1) (thm_4 A r_1).

(; Theorem: |- ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_6 : A : hol.type -> r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) -> hol.proof (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) :=
  A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => thm_0 A r_1.

(; Theorem: |- ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_7 : r_1 : hol.term (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) -> hol.proof (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) hol.bool) r_1) (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool) (p_2 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.imp (hol.forall Number_2ENatural_2Enatural (x_3 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_4 : hol.term Number_2ENatural_2Enatural => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall Number_2ENatural_2Enatural (x_3 : hol.term Number_2ENatural_2Enatural => p_2 x_3))))) :=
  r_1 : hol.term (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) => (A : hol.type => r_1 : hol.term (hol.arr A (hol.arr A hol.bool)) => hol.EQ_MP (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr A (hol.arr A hol.bool)) hol.bool) r_1) (hol.forall (hol.arr A hol.bool) (p_2 : hol.term (hol.arr A hol.bool) => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (hol.forall A (y_4 : hol.term A => hol.imp (r_1 y_4 x_3) (p_2 y_4))) (p_2 x_3))) (hol.forall A (x_3 : hol.term A => p_2 x_3))))) (thm_5 A r_1) (thm_6 A r_1)) Number_2ENatural_2Enatural r_1.

(; Theorem: |- ((= (Relation.wellFounded Number.Natural.<)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((Number.Natural.< y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_8 : hol.proof (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) hol.bool) (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)))) (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2))))) :=
  (r_1 : hol.term (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) => thm_7 r_1) (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_9 : hol.proof (hol.eq (hol.arr (hol.arr (hol.arr Number_2ENatural_2Enatural hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool)) (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool))) :=
  hol.REFL (hol.arr (hol.arr (hol.arr Number_2ENatural_2Enatural hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool)).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.! \lambda n. ((Data.Bool.==> (Data.Bool.! \lambda m. ((Data.Bool.==> ((Number.Natural.< m) n)) (p m)))) (p n)))) (Data.Bool.! \lambda n. (p n)))) Data.Bool.T)) ((= ((Data.Bool.==> (Data.Bool.! \lambda n. ((Data.Bool.==> (Data.Bool.! \lambda m. ((Data.Bool.==> ((Number.Natural.< m) n)) (p m)))) (p n)))) (Data.Bool.! \lambda n. (p n)))) Data.Bool.T)) ;)

(; dict ;)

def thm_10 : p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))) hol.true) (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))) hol.true)) :=
  p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((Number.Natural.< y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) Data.Bool.T)) ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((Number.Natural.< y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) Data.Bool.T)) ;)

(; dict ;)

def thm_11 : p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2))) hol.true) (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2))) hol.true)) :=
  p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2))) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> (Data.Bool.! \lambda n. ((Data.Bool.==> (Data.Bool.! \lambda m. ((Data.Bool.==> ((Number.Natural.< m) n)) (p m)))) (p n)))) (Data.Bool.! \lambda n. (p n)))) Data.Bool.T)) ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((Number.Natural.< y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) Data.Bool.T)) ;)

(; dict ;)

def thm_12 : p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))) hol.true) (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2))) hol.true)) :=
  p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))) hol.true) (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))) hol.true) (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2))) hol.true) (thm_10 p_1) (thm_11 p_1).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_13 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_14 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_13 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_15 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_14 t_1 hyp_1) thm_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_16 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_17 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_16 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_1).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_18 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_15 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_17 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda n. ((Data.Bool.==> (Data.Bool.! \lambda m. ((Data.Bool.==> ((Number.Natural.< m) n)) (p m)))) (p n)))) (Data.Bool.! \lambda n. (p n)))) ((= ((Data.Bool.==> (Data.Bool.! \lambda n. ((Data.Bool.==> (Data.Bool.! \lambda m. ((Data.Bool.==> ((Number.Natural.< m) n)) (p m)))) (p n)))) (Data.Bool.! \lambda n. (p n)))) Data.Bool.T)) ;)

(; dict ;)

def thm_19 : p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))) (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))) hol.true)) :=
  p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => (t_1 : hol.term hol.bool => thm_18 t_1) (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda n. ((Data.Bool.==> (Data.Bool.! \lambda m. ((Data.Bool.==> ((Number.Natural.< m) n)) (p m)))) (p n)))) (Data.Bool.! \lambda n. (p n))) ;)

(; dict ;)

def thm_20 : p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) -> hol.proof (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))) :=
  p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => thm_2 p_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda n. ((Data.Bool.==> (Data.Bool.! \lambda m. ((Data.Bool.==> ((Number.Natural.< m) n)) (p m)))) (p n)))) (Data.Bool.! \lambda n. (p n)))) Data.Bool.T) ;)

(; dict ;)

def thm_21 : p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))) hol.true) :=
  p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.EQ_MP (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))) (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))) hol.true) (thm_19 p_1) (thm_20 p_1).

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((Number.Natural.< y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) Data.Bool.T) ;)

(; dict ;)

def thm_22 : p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) -> hol.proof (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2))) hol.true) :=
  p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.EQ_MP (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (m_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) m_3 n_2) (p_1 m_3))) (p_1 n_2))) (hol.forall Number_2ENatural_2Enatural (n_2 : hol.term Number_2ENatural_2Enatural => p_1 n_2))) hol.true) (hol.eq hol.bool (hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2))) hol.true) (thm_12 p_1) (thm_21 p_1).

(; Theorem: |- ((= \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((Number.Natural.< y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))) \lambda p. Data.Bool.T) ;)

(; dict ;)

def thm_23 : hol.proof (hol.eq (hol.arr (hol.arr Number_2ENatural_2Enatural hol.bool) hol.bool) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2))) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.true)) :=
  hol.ABS_THM (hol.arr Number_2ENatural_2Enatural hol.bool) hol.bool (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2))) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.true) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => thm_22 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((Number.Natural.< y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) (Data.Bool.! \lambda p. Data.Bool.T)) ;)

(; dict ;)

def thm_24 : hol.proof (hol.eq hol.bool (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2)))) (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.true))) :=
  hol.APP_THM (hol.arr (hol.arr Number_2ENatural_2Enatural hol.bool) hol.bool) hol.bool (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool)) (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool)) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2))) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.true) thm_9 thm_23.

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_25 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda p. t)) t)) ((= (Data.Bool.! \lambda p. t)) t)) ;)

(; dict ;)

def thm_26 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda p. t)) t)) ;)

(; dict ;)

def thm_27 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (thm_25 A t_1) (thm_26 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_28 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_3 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda p. t)) t) ;)

(; dict ;)

def thm_29 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (p_2 : hol.term A => t_1)) t_1) (thm_27 A t_1) (thm_28 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda p. t)) t) ;)

(; dict ;)

def thm_30 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool) (p_2 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => t_1)) t_1) :=
  t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_29 A t_1) (hol.arr Number_2ENatural_2Enatural hol.bool) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda p. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_31 : hol.proof (hol.eq hol.bool (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.true)) hol.true) :=
  (t_1 : hol.term hol.bool => thm_30 t_1) hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((Number.Natural.< y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x))))) Data.Bool.T) ;)

(; dict ;)

def thm_32 : hol.proof (hol.eq hol.bool (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2)))) hol.true) :=
  hol.TRANS hol.bool (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2)))) (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.true)) hol.true thm_24 thm_31.

(; Theorem: |- ((= (Relation.wellFounded Number.Natural.<)) Data.Bool.T) ;)

(; dict ;)

def thm_33 : hol.proof (hol.eq hol.bool (Relation_2EwellFounded (hol.arr (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) hol.bool) (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)))) hol.true) :=
  hol.TRANS hol.bool (Relation_2EwellFounded (hol.arr (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) hol.bool) (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)))) (hol.forall (hol.arr Number_2ENatural_2Enatural hol.bool) (p_1 : hol.term (hol.arr Number_2ENatural_2Enatural hol.bool) => hol.imp (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => hol.imp (hol.forall Number_2ENatural_2Enatural (y_3 : hol.term Number_2ENatural_2Enatural => hol.imp (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) y_3 x_2) (p_1 y_3))) (p_1 x_2))) (hol.forall Number_2ENatural_2Enatural (x_2 : hol.term Number_2ENatural_2Enatural => p_1 x_2)))) hol.true thm_8 thm_32.

(; Theorem: |- ((= Data.Bool.T) (Relation.wellFounded Number.Natural.<)) ;)

(; dict ;)

def thm_34 : hol.proof (hol.eq hol.bool hol.true (Relation_2EwellFounded (hol.arr (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) hol.bool) (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool))))) :=
  hol.SYM hol.bool (Relation_2EwellFounded (hol.arr (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) hol.bool) (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)))) hol.true thm_33.

(; Theorem: |- (Relation.wellFounded Number.Natural.<) ;)

(; dict ;)

def thm_35 : hol.proof (Relation_2EwellFounded (hol.arr (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) hol.bool) (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)))) :=
  hol.EQ_MP hol.true (Relation_2EwellFounded (hol.arr (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)) hol.bool) (Number_2ENatural_2E_3C (hol.arr Number_2ENatural_2Enatural (hol.arr Number_2ENatural_2Enatural hol.bool)))) thm_34 thm_1.
