
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME option_2Dmap_2Dthm.

Data_2EOption_2Eoption : hol.type -> hol.type.

Function_2Eid : A : hol.type -> hol.term A.

Data_2EOption_2Emap : A : hol.type -> hol.term A.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

Data_2EOption_2Esome : A : hol.type -> hol.term A.

Data_2EOption_2Enone : A : hol.type -> hol.term A.

Function_2Eo : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1)).

(; axiom ;)

thm_3 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.true t_1) t_1)).

(; axiom ;)

thm_4 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_5 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)).

(; axiom ;)

thm_6 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp hol.false t_1) hol.true)).

(; axiom ;)

thm_7 : hol.proof hol.true.

(; axiom ;)

thm_8 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.imp t_1 t_1)).

(; axiom ;)

thm_9 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))).

(; axiom ;)

thm_10 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_11 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_12 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_13 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_14 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; axiom ;)

thm_15 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.true t_1) hol.true)).

(; axiom ;)

thm_16 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.true) hol.true)).

(; axiom ;)

thm_17 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or hol.false t_1) t_1)).

(; axiom ;)

thm_18 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 hol.false) t_1)).

(; axiom ;)

thm_19 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.or t_1 t_1) t_1)).

(; axiom ;)

thm_20 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false).

(; axiom ;)

thm_21 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true).

(; axiom ;)

thm_22 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))).

(; axiom ;)

thm_23 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp p_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))).

(; axiom ;)

thm_24 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))).

(; axiom ;)

thm_25 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2))))).

(; axiom ;)

thm_26 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_27 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; axiom ;)

thm_28 : A : hol.type -> hol.proof (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.or (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))))).

(; axiom ;)

thm_29 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3)))))).

(; axiom ;)

thm_30 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_31 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_32 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_31 B A g_1 f_2) (thm_31 B A g_1 f_2).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_33 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_34 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_35 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_34 A y_1 x_2) (thm_34 A y_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_36 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => thm_0 A x_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_37 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_36 A x_2 y_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_38 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_2 y_1) (hol.eq hol.bool y_1 x_2)) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_35 A y_1 x_2) (thm_37 A y_1 x_2)) hol.bool y_1 x_2.

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_39 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => (y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => thm_38 y_1 x_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1).

(; Theorem: |- ((= \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_40 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (g_2 : hol.term (hol.arr A B) => thm_39 B A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_41 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (thm_33 B A) (thm_40 B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_42 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) hol.bool (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (f_1 : hol.term (hol.arr A B) => thm_41 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) ;)

(; dict ;)

def thm_43 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (thm_33 B A) (thm_42 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) ;)

(; dict ;)

def thm_44 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (thm_43 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) ;)

(; dict ;)

def thm_45 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (thm_44 B A) (thm_1 B A).

(; Theorem: |- (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_46 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_45 B A f_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_47 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_46 B A f_2 g_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_48 : A : hol.type -> g_1 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) -> f_2 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) f_2 g_1) (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (f_2 x_3) (g_1 x_3)))) :=
  A : hol.type => g_1 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) => f_2 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_32 B A g_1 f_2) (thm_47 B A g_1 f_2)) (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A) g_1 f_2.

(; Theorem: |- ((= ((= (Data.Option.map Function.id)) Function.id)) (Data.Bool.! \lambda x. ((= ((Data.Option.map Function.id) x)) (Function.id x)))) ;)

(; dict ;)

def thm_49 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)))) (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) x_1)))) :=
  A : hol.type => (A : hol.type => g_1 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) => f_2 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) => thm_48 A g_1 f_2) A (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_50 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (Data_2EOption_2Eoption A) hol.bool) hol.bool) (hol.forall (Data_2EOption_2Eoption A)) (hol.forall (Data_2EOption_2Eoption A))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr (Data_2EOption_2Eoption A) hol.bool) hol.bool) (hol.forall (Data_2EOption_2Eoption A)).

(; Theorem: |- ((= (= ((Data.Option.map Function.id) x))) (= ((Data.Option.map Function.id) x))) ;)

(; dict ;)

def thm_51 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) hol.bool) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1)) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hol.REFL (hol.arr (Data_2EOption_2Eoption A) hol.bool) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1)).

(; Theorem: |- ((= ((= (Function.id x)) x)) ((= (Function.id x)) x)) ;)

(; dict ;)

def thm_52 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1).

(; Theorem: |- ((= ((= (Function.id x)) x)) ((= (Function.id x)) x)) ;)

(; dict ;)

def thm_53 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) (thm_52 A x_1) (thm_52 A x_1).

(; Theorem: |- ((= (Function.id x)) x) ;)

(; dict ;)

def thm_54 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) :=
  A : hol.type => x_1 : hol.term A => thm_2 A x_1.

(; Theorem: |- ((= (Function.id x)) x) ;)

(; dict ;)

def thm_55 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) x_1) x_1) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) (thm_53 A x_1) (thm_54 A x_1)) (Data_2EOption_2Eoption A) x_1.

(; Theorem: |- ((= ((= ((Data.Option.map Function.id) x)) (Function.id x))) ((= ((Data.Option.map Function.id) x)) x)) ;)

(; dict ;)

def thm_56 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) x_1)) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hol.APP_THM (Data_2EOption_2Eoption A) hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1)) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1)) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) x_1) x_1 (thm_51 A x_1) (thm_55 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((Data.Option.map Function.id) x)) (Function.id x))) \lambda x. ((= ((Data.Option.map Function.id) x)) x)) ;)

(; dict ;)

def thm_57 : A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) hol.bool) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) x_1)) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) :=
  A : hol.type => hol.ABS_THM (Data_2EOption_2Eoption A) hol.bool (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) x_1)) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (x_1 : hol.term (Data_2EOption_2Eoption A) => thm_56 A x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Data.Option.map Function.id) x)) (Function.id x)))) (Data.Bool.! \lambda x. ((= ((Data.Option.map Function.id) x)) x))) ;)

(; dict ;)

def thm_58 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) x_1))) (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1))) :=
  A : hol.type => hol.APP_THM (hol.arr (Data_2EOption_2Eoption A) hol.bool) hol.bool (hol.forall (Data_2EOption_2Eoption A)) (hol.forall (Data_2EOption_2Eoption A)) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) x_1)) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (thm_50 A) (thm_57 A).

(; Theorem: |- ((= ((= (Data.Option.map Function.id)) Function.id)) (Data.Bool.! \lambda x. ((= ((Data.Option.map Function.id) x)) x))) ;)

(; dict ;)

def thm_59 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)))) (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1))) :=
  A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)))) (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) x_1))) (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (thm_49 A) (thm_58 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Data.Option.map Function.id) x)) x))) ((= (Data.Option.map Function.id)) Function.id)) ;)

(; dict ;)

def thm_60 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))))) :=
  A : hol.type => hol.SYM hol.bool (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)))) (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (thm_59 A).

(; Theorem: |- ((= \lambda x. ((= ((Data.Option.map Function.id) x)) x)) \lambda x. ((= ((Data.Option.map Function.id) x)) x)) ;)

(; dict ;)

def thm_61 : A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) hol.bool) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) :=
  A : hol.type => hol.REFL (hol.arr (Data_2EOption_2Eoption A) hol.bool) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1).

(; Theorem: |- ((= \lambda x. ((= ((Data.Option.map Function.id) x)) x)) \lambda x. ((= ((Data.Option.map Function.id) x)) x)) ;)

(; dict ;)

def thm_62 : A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) hol.bool) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) :=
  A : hol.type => hol.TRANS (hol.arr (Data_2EOption_2Eoption A) hol.bool) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (thm_61 A) (thm_61 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Data.Option.map Function.id) x)) x))) (Data.Bool.! \lambda x. ((= ((Data.Option.map Function.id) x)) x))) ;)

(; dict ;)

def thm_63 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1))) :=
  A : hol.type => hol.APP_THM (hol.arr (Data_2EOption_2Eoption A) hol.bool) hol.bool (hol.forall (Data_2EOption_2Eoption A)) (hol.forall (Data_2EOption_2Eoption A)) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (thm_50 A) (thm_62 A).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ;)

(; dict ;)

def thm_64 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ;)

(; dict ;)

def thm_65 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (thm_64 y_1 z_2 x_3) (thm_64 y_1 z_2 x_3).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))))) ;)

(; dict ;)

def thm_66 : hyp_1 : hol.proof (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))))) -> hol.proof (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))))) :=
  hyp_1 : hol.proof (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))) ;)

(; dict ;)

def thm_67 : x_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall hol.bool (x_2 : hol.term hol.bool => hol.forall hol.bool (y_3 : hol.term hol.bool => hol.forall hol.bool (z_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_4) (hol.imp y_3 z_4)) (hol.imp (hol.or x_2 y_3) z_4))))) -> hol.proof (hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) :=
  x_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall hol.bool (x_2 : hol.term hol.bool => hol.forall hol.bool (y_3 : hol.term hol.bool => hol.forall hol.bool (z_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_4) (hol.imp y_3 z_4)) (hol.imp (hol.or x_2 y_3) z_4))))) => thm_66 hyp_1 x_1.

(; Theorem: |- (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ;)

(; dict ;)

def thm_68 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.forall hol.bool (y_4 : hol.term hol.bool => hol.forall hol.bool (z_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_3 z_5) (hol.imp y_4 z_5)) (hol.imp (hol.or x_3 y_4) z_5))))) -> hol.proof (hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3))) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.forall hol.bool (y_4 : hol.term hol.bool => hol.forall hol.bool (z_5 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_3 z_5) (hol.imp y_4 z_5)) (hol.imp (hol.or x_3 y_4) z_5))))) => thm_67 x_2 hyp_1 y_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)) ;)

(; dict ;)

def thm_69 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall hol.bool (x_4 : hol.term hol.bool => hol.forall hol.bool (y_5 : hol.term hol.bool => hol.forall hol.bool (z_6 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_4 z_6) (hol.imp y_5 z_6)) (hol.imp (hol.or x_4 y_5) z_6))))) -> hol.proof (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall hol.bool (x_4 : hol.term hol.bool => hol.forall hol.bool (y_5 : hol.term hol.bool => hol.forall hol.bool (z_6 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_4 z_6) (hol.imp y_5 z_6)) (hol.imp (hol.or x_4 y_5) z_6))))) => thm_68 y_1 x_3 hyp_1 z_2.

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z)) ;)

(; dict ;)

def thm_70 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) -> hol.proof (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ x) y)) z) ;)

(; dict ;)

def thm_71 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall hol.bool (x_4 : hol.term hol.bool => hol.forall hol.bool (y_5 : hol.term hol.bool => hol.forall hol.bool (z_6 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_4 z_6) (hol.imp y_5 z_6)) (hol.imp (hol.or x_4 y_5) z_6))))) -> hyp_2 : hol.proof (hol.and (hol.imp x_3 z_1) (hol.imp y_2 z_1)) -> hol.proof (hol.imp (hol.or x_3 y_2) z_1) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall hol.bool (x_4 : hol.term hol.bool => hol.forall hol.bool (y_5 : hol.term hol.bool => hol.forall hol.bool (z_6 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_4 z_6) (hol.imp y_5 z_6)) (hol.imp (hol.or x_4 y_5) z_6))))) => hyp_2 : hol.proof (hol.and (hol.imp x_3 z_1) (hol.imp y_2 z_1)) => thm_69 y_2 z_1 x_3 hyp_1 (thm_70 y_2 z_1 x_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)) ;)

(; dict ;)

def thm_72 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.imp x_3 z_1) (hol.imp y_2 z_1)) -> hol.proof (hol.imp (hol.forall hol.bool (x_4 : hol.term hol.bool => hol.forall hol.bool (y_5 : hol.term hol.bool => hol.forall hol.bool (z_6 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_4 z_6) (hol.imp y_5 z_6)) (hol.imp (hol.or x_4 y_5) z_6))))) (hol.imp (hol.or x_3 y_2) z_1)) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.imp x_3 z_1) (hol.imp y_2 z_1)) => hyp_2 : hol.proof (hol.forall hol.bool (x_4 : hol.term hol.bool => hol.forall hol.bool (y_5 : hol.term hol.bool => hol.forall hol.bool (z_6 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_4 z_6) (hol.imp y_5 z_6)) (hol.imp (hol.or x_4 y_5) z_6))))) => thm_71 z_1 y_2 x_3 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))))) ;)

(; dict ;)

def thm_73 : hol.proof (hol.imp (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))))) (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))))) :=
  hyp_1 : hol.proof (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))))) => x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hyp_2 : hol.proof (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) => thm_72 z_3 y_2 x_1 hyp_2 (thm_66 hyp_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_74 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))))) \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))))) ;)

(; dict ;)

def thm_75 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))))) \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))))) ;)

(; dict ;)

def thm_76 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) thm_75 thm_75.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))))) ;)

(; dict ;)

def thm_77 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))))) (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) thm_74 thm_76.

(; Theorem: |- ((= \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))) \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))) ;)

(; dict ;)

def thm_78 : x_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) :=
  x_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))).

(; Theorem: |- ((= \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))) \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))) ;)

(; dict ;)

def thm_79 : x_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) :=
  x_1 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) (thm_78 x_1) (thm_78 x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))))) ;)

(; dict ;)

def thm_80 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) (hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))))) :=
  x_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) thm_74 (thm_79 x_1).

(; Theorem: |- ((= \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ;)

(; dict ;)

def thm_81 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3)) (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3))) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3)).

(; Theorem: |- ((= \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ;)

(; dict ;)

def thm_82 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3)) (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3))) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hol.TRANS (hol.arr hol.bool hol.bool) (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3)) (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3)) (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3)) (thm_81 y_1 x_2) (thm_81 y_1 x_2).

(; Theorem: |- ((= (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))) (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))) ;)

(; dict ;)

def thm_83 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3))) (hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3)))) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3)) (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3)) thm_74 (thm_82 y_1 x_2).

(; Theorem: |- ((= (= (\lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z)) x))) (= (\lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z)) x))) ;)

(; dict ;)

def thm_84 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1)) (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1)).

(; Theorem: |- ((= (\lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z)) Data.Bool.F)) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z))) ;)

(; dict ;)

def thm_85 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__15715_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15715_3 y_1) z_2)) hol.false) (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__15715_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15715_3 y_1) z_2)) hol.false.

(; Theorem: |- ((= ((= (\lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z)) x)) (\lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z)) Data.Bool.F))) ((= (\lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z)) x)) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z)))) ;)

(; dict ;)

def thm_86 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1) ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) hol.false)) (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1) (hol.imp (hol.and (hol.imp hol.false z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.false y_2) z_3)))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1)) (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1)) ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) hol.false) (hol.imp (hol.and (hol.imp hol.false z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.false y_2) z_3)) (thm_84 x_1 y_2 z_3) (thm_85 y_2 z_3).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_87 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool) (hol.eq hol.bool)) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) (hol.eq hol.bool).

(; Theorem: |- ((= (\lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z)) x)) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ;)

(; dict ;)

def thm_88 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1) (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1.

(; Theorem: |- ((= (= (\lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z)) x))) (= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))) ;)

(; dict ;)

def thm_89 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1)) (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1) (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)) thm_87 (thm_88 x_1 y_2 z_3).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z))) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z))) ;)

(; dict ;)

def thm_90 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2)) (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2)).

(; Theorem: |- ((= ((= (\lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z)) x)) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z)))) ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z)))) ;)

(; dict ;)

def thm_91 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1) (hol.imp (hol.and (hol.imp hol.false z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.false y_2) z_3))) (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)) (hol.imp (hol.and (hol.imp hol.false z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.false y_2) z_3)))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1)) (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) (hol.imp (hol.and (hol.imp hol.false z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.false y_2) z_3)) (hol.imp (hol.and (hol.imp hol.false z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.false y_2) z_3)) (thm_89 x_1 y_2 z_3) (thm_90 y_2 z_3).

(; Theorem: |- ((= ((= (\lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z)) x)) (\lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z)) Data.Bool.F))) ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z)))) ;)

(; dict ;)

def thm_92 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1) ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) hol.false)) (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)) (hol.imp (hol.and (hol.imp hol.false z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.false y_2) z_3)))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1) ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) hol.false)) (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1) (hol.imp (hol.and (hol.imp hol.false z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.false y_2) z_3))) (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)) (hol.imp (hol.and (hol.imp hol.false z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.false y_2) z_3))) (thm_86 x_1 y_2 z_3) (thm_91 x_1 y_2 z_3).

(; Theorem: |- ((= \lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z))) \lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z))) ;)

(; dict ;)

def thm_93 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__15715_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15715_3 y_1) z_2)) (__15715_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15715_3 y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__15715_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15715_3 y_1) z_2)).

(; Theorem: |- ((= x) Data.Bool.F) ;)

(; dict ;)

def thm_94 : x_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.false) -> hol.proof (hol.eq hol.bool x_1 hol.false) :=
  x_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.false) => hyp_1.

(; Theorem: |- ((= (\lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z)) x)) (\lambda _15715. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15715) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15715) y)) z)) Data.Bool.F)) ;)

(; dict ;)

def thm_95 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.false) -> hol.proof (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1) ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) hol.false)) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.false) => hol.APP_THM hol.bool hol.bool (__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) (__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15715_4 y_2) z_3)) x_1 hol.false (thm_93 y_2 z_3) (thm_94 x_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z))) ;)

(; dict ;)

def thm_96 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool x_3 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_3 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15715_4 y_1) z_2)) x_3) ((__15715_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15715_4 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15715_4 y_1) z_2)) hol.false)) (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2))) (thm_92 x_3 y_1 z_2) (thm_95 x_3 y_1 z_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z))) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ;)

(; dict ;)

def thm_97 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.imp hol.false z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.false y_2) z_3)) (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.false) => hol.SYM hol.bool (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)) (hol.imp (hol.and (hol.imp hol.false z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.false y_2) z_3)) (thm_96 y_2 z_3 x_1 hyp_1).

(; Theorem: |- ((= Data.Bool.==>) Data.Bool.==>) ;)

(; dict ;)

def thm_98 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp hol.imp) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.imp.

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_99 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_100 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_101 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_100 t_1) (thm_100 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_102 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_103 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_102 thm_102.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))))) ;)

(; dict ;)

def thm_104 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) thm_74 thm_103.

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_105 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_106 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_105 t_1) (thm_105 t_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_107 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_3 t_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_108 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_109 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_110 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_108 q_1 p_2) (thm_109 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_111 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_112 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_113 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_111 p_1) (thm_112 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_114 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_115 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_4 (thm_114 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_116 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_113 p_1) (thm_115 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_117 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_118 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_116 p_2) (thm_117 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_119 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_110 q_1 p_2) (thm_118 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_120 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_121 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_119 q_1 p_2) (thm_120 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_122 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_121 q_1 p_2 hyp_1 q_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_123 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_124 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_125 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_123 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_124 q_1 hyp_2).

(; Theorem: |- q ;)

(; dict ;)

def thm_126 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_125 q_2 p_1 hyp_1 hyp_2) (thm_123 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_127 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_126 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_128 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_127 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_129 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_122 q_2 p_1 hyp_1 (thm_128 q_2 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_130 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_119 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_131 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_132 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_131 x_2 q_3 p_1 hyp_2 (thm_123 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_133 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_132 p_2 x_3 q_1 hyp_1 hyp_3 (thm_124 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_134 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_133 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_135 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_134 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_136 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_130 q_1 p_2) (thm_135 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_137 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_129 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_136 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_138 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_139 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (thm_106 t_1) (thm_107 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.true t_1) t_1) => thm_138 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_140 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_141 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_140 t_1) (thm_140 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_142 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_5 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_143 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_144 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (thm_141 t_1) (thm_142 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) => thm_143 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_145 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_6 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_146 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_147 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_100 t_1) (thm_145 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) => thm_146 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_148 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_149 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_148 t_1) (thm_148 t_1).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_150 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true).

(; Theorem: |- ((= \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_151 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_150 thm_150.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T))) ;)

(; dict ;)

def thm_152 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true) thm_74 thm_151.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_153 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_154 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_153 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_155 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_154 t_1 hyp_1) thm_7.

(; Theorem: |- t ;)

(; dict ;)

def thm_156 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_157 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_156 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_7).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_158 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_155 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_157 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> t) t)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_159 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_158 t_1) (hol.imp t_1 t_1).

(; Theorem: |- ((Data.Bool.==> t) t) ;)

(; dict ;)

def thm_160 : t_1 : hol.term hol.bool -> hol.proof (hol.imp t_1 t_1) :=
  t_1 : hol.term hol.bool => thm_8 t_1.

(; Theorem: |- ((= ((Data.Bool.==> t) t)) Data.Bool.T) ;)

(; dict ;)

def thm_161 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.imp t_1 t_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_159 t_1) (thm_160 t_1).

(; Theorem: |- ((= (= ((Data.Bool.==> t) t))) (= Data.Bool.T)) ;)

(; dict ;)

def thm_162 : t_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) (hol.imp t_1 t_1) hol.true thm_87 (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_148 t_1) (thm_161 t_1)).

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_163 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_164 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true)) :=
  t_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.imp t_1 t_1)) (hol.eq hol.bool hol.true) hol.true hol.true (thm_162 t_1) thm_163.

(; Theorem: |- ((= ((= Data.Bool.T) Data.Bool.T)) ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_165 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.SYM hol.bool (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool hol.true hol.true) (thm_164 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_166 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_1 t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool hol.true hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_165 t_1) thm_163.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_167 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_168 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (thm_149 t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.eq hol.bool (hol.imp t_2 t_2) hol.true)) thm_152 thm_166 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) => thm_167 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_169 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)).

(; Theorem: |- ((= ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_170 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_169 t_1) (thm_169 t_1).

(; Theorem: |- ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)) ;)

(; dict ;)

def thm_171 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) :=
  t_1 : hol.term hol.bool => thm_9 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))) ;)

(; dict ;)

def thm_172 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (thm_168 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)) (thm_170 t_1) (thm_171 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_173 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_147 t_1) (thm_172 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_174 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (thm_144 t_1) (thm_173 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))))) ;)

(; dict ;)

def thm_175 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (thm_139 t_1) (thm_174 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))))) ;)

(; dict ;)

def thm_176 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))))) :=
  t_1 : hol.term hol.bool => thm_175 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_177 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_129 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t))))) ;)

(; dict ;)

def thm_178 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.imp hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.imp t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_2) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_2 t_2) hol.true) (hol.eq hol.bool (hol.imp t_2 hol.false) (hol.not t_2))))))) thm_104 thm_176 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))))) => thm_177 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_179 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_129 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.==> t) t)) Data.Bool.T)) ((= ((Data.Bool.==> t) Data.Bool.F)) (Data.Bool.~ t)))) ;)

(; dict ;)

def thm_180 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (thm_178 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))))) => thm_179 t_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_181 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_121 q_1 p_2 hyp_1 p_2.

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_182 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_125 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_183 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_182 p_2 q_1 hyp_1 hyp_2) (thm_124 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_184 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_183 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_185 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_184 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_186 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_181 q_1 p_2 hyp_1 (thm_185 q_1 p_2).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_187 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_186 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1))) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) t)) Data.Bool.T) ;)

(; dict ;)

def thm_188 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_180 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.and (hol.eq hol.bool (hol.imp t_1 t_1) hol.true) (hol.eq hol.bool (hol.imp t_1 hol.false) (hol.not t_1)))) => thm_187 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.F) z)) Data.Bool.T) ;)

(; dict ;)

def thm_189 : z_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.false z_1) hol.true) :=
  z_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (hol.eq hol.bool (hol.imp hol.false t_1) hol.true) (thm_101 t_1) (thm_188 t_1)) z_1.

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_190 : z_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.imp hol.false z_1)) (hol.and hol.true)) :=
  z_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.imp hol.false z_1) hol.true thm_99 (thm_189 z_1).

(; Theorem: |- ((= ((Data.Bool.==> y) z)) ((Data.Bool.==> y) z)) ;)

(; dict ;)

def thm_191 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp y_2 z_1) (hol.imp y_2 z_1)) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.REFL hol.bool (hol.imp y_2 z_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) z))) ;)

(; dict ;)

def thm_192 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.and hol.true (hol.imp y_1 z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.imp hol.false z_2)) (hol.and hol.true) (hol.imp y_1 z_2) (hol.imp y_1 z_2) (thm_190 z_2) (thm_191 z_2 y_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_193 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_194 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_193 t_1) (thm_193 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_195 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_196 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_195 thm_195.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_197 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_74 thm_196.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_198 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_10 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_199 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_200 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_193 t_1) (thm_198 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_199 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_201 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_202 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_201 t_1) (thm_201 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_203 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_11 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_204 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_205 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_202 t_1) (thm_203 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_204 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_206 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_207 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_206 t_1) (thm_206 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_208 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_12 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_209 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_210 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_207 t_1) (thm_208 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_209 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_211 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_212 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_211 t_1) (thm_211 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_213 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_13 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_214 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_215 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_212 t_1) (thm_213 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_214 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_216 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_217 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_216 t_1) (thm_216 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_218 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_14 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_219 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_215 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_217 t_1) (thm_218 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_220 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_210 t_1) (thm_219 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_221 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_205 t_1) (thm_220 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_222 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_200 t_1) (thm_221 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_223 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_222 t_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_224 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_186 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_225 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_197 thm_223 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_224 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) z))) ((Data.Bool.==> y) z)) ;)

(; dict ;)

def thm_226 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true (hol.imp y_2 z_1)) (hol.imp y_2 z_1)) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_194 t_1) (thm_225 t_1)) (hol.imp y_2 z_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> y) z)) ;)

(; dict ;)

def thm_227 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp y_1 z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.and hol.true (hol.imp y_1 z_2)) (hol.imp y_1 z_2) (thm_192 y_1 z_2) (thm_226 z_2 y_1).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z)))) (Data.Bool.==> ((Data.Bool.==> y) z))) ;)

(; dict ;)

def thm_228 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2))) (hol.imp (hol.imp y_1 z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp y_1 z_2) thm_98 (thm_227 y_1 z_2).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; dict ;)

def thm_229 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ;)

(; dict ;)

def thm_230 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_229 t_1) (thm_229 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_231 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_232 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) thm_231 thm_231.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))))) ;)

(; dict ;)

def thm_233 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) thm_74 thm_232.

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_234 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ;)

(; dict ;)

def thm_235 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (thm_234 t_1) (thm_234 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T) ;)

(; dict ;)

def thm_236 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) :=
  t_1 : hol.term hol.bool => thm_15 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_237 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_238 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (thm_235 t_1) (thm_236 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.true t_1) hol.true) => thm_237 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_239 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_240 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (thm_239 t_1) (thm_239 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_241 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) :=
  t_1 : hol.term hol.bool => thm_16 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_242 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_243 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (thm_240 t_1) (thm_241 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) => thm_242 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t)) t) ;)

(; dict ;)

def thm_244 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_17 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_245 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_246 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_229 t_1) (thm_244 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) => thm_245 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; dict ;)

def thm_247 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ;)

(; dict ;)

def thm_248 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (thm_247 t_1) (thm_247 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) Data.Bool.F)) t) ;)

(; dict ;)

def thm_249 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) :=
  t_1 : hol.term hol.bool => thm_18 t_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_250 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_251 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (thm_248 t_1) (thm_249 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.or t_1 hol.false) t_1) => thm_250 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_252 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool.\/ t) t)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_253 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (thm_252 t_1) (thm_252 t_1).

(; Theorem: |- ((= ((Data.Bool.\/ t) t)) t) ;)

(; dict ;)

def thm_254 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_19 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)) ;)

(; dict ;)

def thm_255 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (thm_251 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.or t_1 t_1) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1) (thm_253 t_1) (thm_254 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_256 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (thm_246 t_1) (thm_255 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_257 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (thm_243 t_1) (thm_256 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))))) ;)

(; dict ;)

def thm_258 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (thm_238 t_1) (thm_257 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.T) t)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))))) ;)

(; dict ;)

def thm_259 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_258 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_260 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_129 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.T)) Data.Bool.T)) ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t)))) ;)

(; dict ;)

def thm_261 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_2) hol.true) (hol.and (hol.eq hol.bool (hol.or t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_2) t_2) (hol.and (hol.eq hol.bool (hol.or t_2 hol.false) t_2) (hol.eq hol.bool (hol.or t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.or hol.true t_2) hol.true) (hol.and (hol.eq hol.bool (hol.or t_2 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_2) t_2) (hol.and (hol.eq hol.bool (hol.or t_2 hol.false) t_2) (hol.eq hol.bool (hol.or t_2 t_2) t_2)))))) thm_233 thm_259 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.true t_1) hol.true) (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))))) => thm_260 t_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_262 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_129 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool.\/ Data.Bool.F) t)) t)) ((Data.Bool./\ ((= ((Data.Bool.\/ t) Data.Bool.F)) t)) ((= ((Data.Bool.\/ t) t)) t))) ;)

(; dict ;)

def thm_263 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (thm_261 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or t_1 hol.true) hol.true) (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)))) => thm_262 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t)) t) ;)

(; dict ;)

def thm_264 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) -> hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_186 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1)) (hol.eq hol.bool (hol.or hol.false t_1) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) t)) t) ;)

(; dict ;)

def thm_265 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_263 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.and (hol.eq hol.bool (hol.or t_1 hol.false) t_1) (hol.eq hol.bool (hol.or t_1 t_1) t_1))) => thm_264 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.F) y)) y) ;)

(; dict ;)

def thm_266 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.false y_1) y_1) :=
  y_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or hol.false t_1) t_1) (hol.eq hol.bool (hol.or hol.false t_1) t_1) (thm_230 t_1) (thm_265 t_1)) y_1.

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y))) (Data.Bool.==> y)) ;)

(; dict ;)

def thm_267 : y_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.or hol.false y_1)) (hol.imp y_1)) :=
  y_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.or hol.false y_1) y_1 thm_98 (thm_266 y_1).

(; Theorem: |- ((= z) z) ;)

(; dict ;)

def thm_268 : z_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool z_1 z_1) :=
  z_1 : hol.term hol.bool => hol.REFL hol.bool z_1.

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z)) ((Data.Bool.==> y) z)) ;)

(; dict ;)

def thm_269 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.or hol.false y_2) z_1) (hol.imp y_2 z_1)) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.or hol.false y_2)) (hol.imp y_2) z_1 z_1 (thm_267 y_2) (thm_268 z_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z))) ((Data.Bool.==> ((Data.Bool.==> y) z)) ((Data.Bool.==> y) z))) ;)

(; dict ;)

def thm_270 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2)) (hol.imp (hol.imp y_1 z_2) (hol.imp y_1 z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2))) (hol.imp (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2) (hol.imp y_1 z_2) (thm_228 y_1 z_2) (thm_269 z_2 y_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.==> y) z)) ((Data.Bool.==> y) z))) Data.Bool.T) ;)

(; dict ;)

def thm_271 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.imp y_2 z_1) (hol.imp y_2 z_1)) hol.true) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_161 t_1) (hol.imp y_2 z_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z))) Data.Bool.T) ;)

(; dict ;)

def thm_272 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2)) hol.true) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2)) (hol.imp (hol.imp y_1 z_2) (hol.imp y_1 z_2)) hol.true (thm_270 y_1 z_2) (thm_271 z_2 y_1).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z))) ;)

(; dict ;)

def thm_273 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.SYM hol.bool (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2)) hol.true (thm_272 y_1 z_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.F) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.F) y)) z)) ;)

(; dict ;)

def thm_274 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.EQ_MP hol.true (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2)) (thm_273 y_1 z_2) thm_7.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)) ;)

(; dict ;)

def thm_275 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool x_3 hol.false) -> hol.proof (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_3 hol.false) => hol.EQ_MP (hol.imp (hol.and (hol.imp hol.false z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.false y_1) z_2)) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (thm_97 x_3 y_1 z_2 hyp_1) (thm_274 y_1 z_2).

(; Theorem: |- ((Data.Bool.==> ((= x) Data.Bool.F)) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ;)

(; dict ;)

def thm_276 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool x_3 hol.false) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_3 hol.false) => thm_275 y_1 z_2 x_3 hyp_1.

(; Theorem: |- ((= (= (\lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z)) x))) (= (\lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z)) x))) ;)

(; dict ;)

def thm_277 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1)) (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1)).

(; Theorem: |- ((= (\lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z)) Data.Bool.T)) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z))) ;)

(; dict ;)

def thm_278 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__15713_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15713_3 y_1) z_2)) hol.true) (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.true y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__15713_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15713_3 y_1) z_2)) hol.true.

(; Theorem: |- ((= ((= (\lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z)) x)) (\lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z)) Data.Bool.T))) ((= (\lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z)) x)) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z)))) ;)

(; dict ;)

def thm_279 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1) ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) hol.true)) (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1) (hol.imp (hol.and (hol.imp hol.true z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.true y_2) z_3)))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1)) (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1)) ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) hol.true) (hol.imp (hol.and (hol.imp hol.true z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.true y_2) z_3)) (thm_277 x_1 y_2 z_3) (thm_278 y_2 z_3).

(; Theorem: |- ((= (\lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z)) x)) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ;)

(; dict ;)

def thm_280 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1) (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1.

(; Theorem: |- ((= (= (\lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z)) x))) (= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))) ;)

(; dict ;)

def thm_281 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1)) (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1) (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)) thm_87 (thm_280 x_1 y_2 z_3).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z))) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z))) ;)

(; dict ;)

def thm_282 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.true y_1) z_2)) (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.true y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.true y_1) z_2)).

(; Theorem: |- ((= ((= (\lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z)) x)) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z)))) ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z)))) ;)

(; dict ;)

def thm_283 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1) (hol.imp (hol.and (hol.imp hol.true z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.true y_2) z_3))) (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)) (hol.imp (hol.and (hol.imp hol.true z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.true y_2) z_3)))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1)) (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) (hol.imp (hol.and (hol.imp hol.true z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.true y_2) z_3)) (hol.imp (hol.and (hol.imp hol.true z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.true y_2) z_3)) (thm_281 x_1 y_2 z_3) (thm_282 y_2 z_3).

(; Theorem: |- ((= ((= (\lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z)) x)) (\lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z)) Data.Bool.T))) ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z)))) ;)

(; dict ;)

def thm_284 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1) ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) hol.true)) (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)) (hol.imp (hol.and (hol.imp hol.true z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.true y_2) z_3)))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1) ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) hol.true)) (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1) (hol.imp (hol.and (hol.imp hol.true z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.true y_2) z_3))) (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)) (hol.imp (hol.and (hol.imp hol.true z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.true y_2) z_3))) (thm_279 x_1 y_2 z_3) (thm_283 x_1 y_2 z_3).

(; Theorem: |- ((= \lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z))) \lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z))) ;)

(; dict ;)

def thm_285 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__15713_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15713_3 y_1) z_2)) (__15713_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15713_3 y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__15713_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15713_3 y_1) z_2)).

(; Theorem: |- ((= x) Data.Bool.T) ;)

(; dict ;)

def thm_286 : x_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.true) -> hol.proof (hol.eq hol.bool x_1 hol.true) :=
  x_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.true) => hyp_1.

(; Theorem: |- ((= (\lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z)) x)) (\lambda _15713. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> _15713) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ _15713) y)) z)) Data.Bool.T)) ;)

(; dict ;)

def thm_287 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.true) -> hol.proof (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1) ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) hol.true)) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.true) => hol.APP_THM hol.bool hol.bool (__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) (__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or __15713_4 y_2) z_3)) x_1 hol.true (thm_285 y_2 z_3) (thm_286 x_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z))) ;)

(; dict ;)

def thm_288 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool x_3 hol.true) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.true y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_3 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15713_4 y_1) z_2)) x_3) ((__15713_4 : hol.term hol.bool => hol.imp (hol.and (hol.imp __15713_4 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or __15713_4 y_1) z_2)) hol.true)) (hol.eq hol.bool (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.true y_1) z_2))) (thm_284 x_3 y_1 z_2) (thm_287 x_3 y_1 z_2 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z))) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ;)

(; dict ;)

def thm_289 : x_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> z_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.imp hol.true z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.true y_2) z_3)) (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.true) => hol.SYM hol.bool (hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)) (hol.imp (hol.and (hol.imp hol.true z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or hol.true y_2) z_3)) (thm_288 y_2 z_3 x_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> Data.Bool.T) z)) z) ;)

(; dict ;)

def thm_290 : z_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp hol.true z_1) z_1) :=
  z_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_107 t_1) z_1.

(; Theorem: |- ((= (Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z))) (Data.Bool./\ z)) ;)

(; dict ;)

def thm_291 : z_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.imp hol.true z_1)) (hol.and z_1)) :=
  z_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.imp hol.true z_1) z_1 thm_99 (thm_290 z_1).

(; Theorem: |- ((= ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z))) ((Data.Bool./\ z) ((Data.Bool.==> y) z))) ;)

(; dict ;)

def thm_292 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.and z_2 (hol.imp y_1 z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and (hol.imp hol.true z_2)) (hol.and z_2) (hol.imp y_1 z_2) (hol.imp y_1 z_2) (thm_291 z_2) (thm_191 z_2 y_1).

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z)))) (Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z)))) ;)

(; dict ;)

def thm_293 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2))) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.and z_2 (hol.imp y_1 z_2)) thm_98 (thm_292 y_1 z_2).

(; Theorem: |- ((= ((Data.Bool.\/ Data.Bool.T) y)) Data.Bool.T) ;)

(; dict ;)

def thm_294 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or hol.true y_1) hol.true) :=
  y_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_236 t_1) y_1.

(; Theorem: |- ((= (Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y))) (Data.Bool.==> Data.Bool.T)) ;)

(; dict ;)

def thm_295 : y_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.imp (hol.or hol.true y_1)) (hol.imp hol.true)) :=
  y_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.imp hol.imp (hol.or hol.true y_1) hol.true thm_98 (thm_294 y_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z)) ((Data.Bool.==> Data.Bool.T) z)) ;)

(; dict ;)

def thm_296 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.or hol.true y_2) z_1) (hol.imp hol.true z_1)) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.or hol.true y_2)) (hol.imp hol.true) z_1 z_1 (thm_295 y_2) (thm_268 z_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z)) z) ;)

(; dict ;)

def thm_297 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.or hol.true y_2) z_1) z_1) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.or hol.true y_2) z_1) (hol.imp hol.true z_1) z_1 (thm_296 z_1 y_2) (thm_290 z_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z))) ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ;)

(; dict ;)

def thm_298 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.true y_1) z_2)) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2))) (hol.imp (hol.and z_2 (hol.imp y_1 z_2))) (hol.imp (hol.or hol.true y_1) z_2) z_2 (thm_293 y_1 z_2) (thm_297 z_2 y_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z))) ;)

(; dict ;)

def thm_299 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.true y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.SYM hol.bool (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.true y_1) z_2)) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (thm_298 y_1 z_2).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ;)

(; dict ;)

def thm_300 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ;)

(; dict ;)

def thm_301 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.SYM hol.bool (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (thm_300 y_1 z_2).

(; Theorem: |- ((= (= (\lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719) z))) (= (\lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719) z))) ;)

(; dict ;)

def thm_302 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1)) (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1))) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1)).

(; Theorem: |- ((= (\lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719) Data.Bool.F)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F)) ;)

(; dict ;)

def thm_303 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__15719_2 : hol.term hol.bool => hol.imp (hol.and __15719_2 (hol.imp y_1 __15719_2)) __15719_2) hol.false) (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false)) :=
  y_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__15719_2 : hol.term hol.bool => hol.imp (hol.and __15719_2 (hol.imp y_1 __15719_2)) __15719_2) hol.false.

(; Theorem: |- ((= ((= (\lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719) z)) (\lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719) Data.Bool.F))) ((= (\lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719) z)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F))) ;)

(; dict ;)

def thm_304 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1) ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) hol.false)) (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1) (hol.imp (hol.and hol.false (hol.imp y_2 hol.false)) hol.false))) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1)) (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1)) ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) hol.false) (hol.imp (hol.and hol.false (hol.imp y_2 hol.false)) hol.false) (thm_302 z_1 y_2) (thm_303 y_2).

(; Theorem: |- ((= (\lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719) z)) ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ;)

(; dict ;)

def thm_305 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1) (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1)) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1.

(; Theorem: |- ((= (= (\lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719) z))) (= ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z))) ;)

(; dict ;)

def thm_306 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1)) (hol.eq hol.bool (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1))) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1) (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1) thm_87 (thm_305 z_1 y_2).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F)) ;)

(; dict ;)

def thm_307 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false) (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false)) :=
  y_1 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false).

(; Theorem: |- ((= ((= (\lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719) z)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F))) ((= ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F))) ;)

(; dict ;)

def thm_308 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1) (hol.imp (hol.and hol.false (hol.imp y_2 hol.false)) hol.false)) (hol.eq hol.bool (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1) (hol.imp (hol.and hol.false (hol.imp y_2 hol.false)) hol.false))) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1)) (hol.eq hol.bool (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1)) (hol.imp (hol.and hol.false (hol.imp y_2 hol.false)) hol.false) (hol.imp (hol.and hol.false (hol.imp y_2 hol.false)) hol.false) (thm_306 z_1 y_2) (thm_307 y_2).

(; Theorem: |- ((= ((= (\lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719) z)) (\lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719) Data.Bool.F))) ((= ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F))) ;)

(; dict ;)

def thm_309 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1) ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) hol.false)) (hol.eq hol.bool (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1) (hol.imp (hol.and hol.false (hol.imp y_2 hol.false)) hol.false))) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1) ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) hol.false)) (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1) (hol.imp (hol.and hol.false (hol.imp y_2 hol.false)) hol.false)) (hol.eq hol.bool (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1) (hol.imp (hol.and hol.false (hol.imp y_2 hol.false)) hol.false)) (thm_304 z_1 y_2) (thm_308 z_1 y_2).

(; Theorem: |- ((= \lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719)) \lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719)) ;)

(; dict ;)

def thm_310 : y_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__15719_2 : hol.term hol.bool => hol.imp (hol.and __15719_2 (hol.imp y_1 __15719_2)) __15719_2) (__15719_2 : hol.term hol.bool => hol.imp (hol.and __15719_2 (hol.imp y_1 __15719_2)) __15719_2)) :=
  y_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__15719_2 : hol.term hol.bool => hol.imp (hol.and __15719_2 (hol.imp y_1 __15719_2)) __15719_2).

(; Theorem: |- ((= z) Data.Bool.F) ;)

(; dict ;)

def thm_311 : z_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool z_1 hol.false) -> hol.proof (hol.eq hol.bool z_1 hol.false) :=
  z_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool z_1 hol.false) => hyp_1.

(; Theorem: |- ((= (\lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719) z)) (\lambda _15719. ((Data.Bool.==> ((Data.Bool./\ _15719) ((Data.Bool.==> y) _15719))) _15719) Data.Bool.F)) ;)

(; dict ;)

def thm_312 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool z_1 hol.false) -> hol.proof (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1) ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) hol.false)) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool z_1 hol.false) => hol.APP_THM hol.bool hol.bool (__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) (__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_2 __15719_3)) __15719_3) z_1 hol.false (thm_310 y_2) (thm_311 z_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F)) ;)

(; dict ;)

def thm_313 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool z_2 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool z_2 hol.false) => hol.EQ_MP (hol.eq hol.bool ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_1 __15719_3)) __15719_3) z_2) ((__15719_3 : hol.term hol.bool => hol.imp (hol.and __15719_3 (hol.imp y_1 __15719_3)) __15719_3) hol.false)) (hol.eq hol.bool (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false)) (thm_309 z_2 y_1) (thm_312 z_2 y_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F)) ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ;)

(; dict ;)

def thm_314 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool z_1 hol.false) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and hol.false (hol.imp y_2 hol.false)) hol.false) (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1)) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool z_1 hol.false) => hol.SYM hol.bool (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1) (hol.imp (hol.and hol.false (hol.imp y_2 hol.false)) hol.false) (thm_313 y_2 z_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F)) (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F)))) ;)

(; dict ;)

def thm_315 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false) (hol.not (hol.and hol.false (hol.imp y_1 hol.false)))) :=
  y_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_171 t_1) (hol.and hol.false (hol.imp y_1 hol.false)).

(; Theorem: |- ((= Data.Bool.~) Data.Bool.~) ;)

(; dict ;)

def thm_316 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) hol.not hol.not) :=
  hol.REFL (hol.arr hol.bool hol.bool) hol.not.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F) ;)

(; dict ;)

def thm_317 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false (hol.imp y_1 hol.false)) hol.false) :=
  y_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_208 t_1) (hol.imp y_1 hol.false).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F)))) (Data.Bool.~ Data.Bool.F)) ;)

(; dict ;)

def thm_318 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and hol.false (hol.imp y_1 hol.false))) (hol.not hol.false)) :=
  y_1 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool hol.not hol.not (hol.and hol.false (hol.imp y_1 hol.false)) hol.false thm_316 (thm_317 y_1).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_319 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_320 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_319 thm_319.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_321 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.REFL hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false).

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ;)

(; dict ;)

def thm_322 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false)) :=
  hol.TRANS hol.bool (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_321 thm_321.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_323 : hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T))) ;)

(; dict ;)

def thm_324 : hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) :=
  hol.PROVE_HYP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true))) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.true) hol.false) thm_322 thm_20) (hyp_1 : hol.proof (hol.eq hol.bool (hol.not hol.true) hol.false) => thm_323 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((= (Data.Bool.~ Data.Bool.T)) Data.Bool.F)) ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_325 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) :=
  hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) thm_324 (hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_319 thm_21).

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_326 : hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) -> hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true) :=
  hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_129 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true) hyp_1.

(; Theorem: |- ((= (Data.Bool.~ Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_327 : hol.proof (hol.eq hol.bool (hol.not hol.false) hol.true) :=
  hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_325 (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.not hol.true) hol.false) (hol.eq hol.bool (hol.not hol.false) hol.true)) => thm_326 hyp_1).

(; Theorem: |- ((= (Data.Bool.~ ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F)))) Data.Bool.T) ;)

(; dict ;)

def thm_328 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.not (hol.and hol.false (hol.imp y_1 hol.false))) hol.true) :=
  y_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.not (hol.and hol.false (hol.imp y_1 hol.false))) (hol.not hol.false) hol.true (thm_318 y_1) (hol.EQ_MP (hol.eq hol.bool (hol.not hol.false) hol.true) (hol.eq hol.bool (hol.not hol.false) hol.true) thm_320 thm_327).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_329 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false) hol.true) :=
  y_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false) (hol.not (hol.and hol.false (hol.imp y_1 hol.false))) hol.true (thm_315 y_1) (thm_328 y_1).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F)) ;)

(; dict ;)

def thm_330 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false)) :=
  y_1 : hol.term hol.bool => hol.SYM hol.bool (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false) hol.true (thm_329 y_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ Data.Bool.F) ((Data.Bool.==> y) Data.Bool.F))) Data.Bool.F) ;)

(; dict ;)

def thm_331 : y_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false) :=
  y_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false) (thm_330 y_1) thm_7.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z) ;)

(; dict ;)

def thm_332 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool z_2 hol.false) -> hol.proof (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool z_2 hol.false) => hol.EQ_MP (hol.imp (hol.and hol.false (hol.imp y_1 hol.false)) hol.false) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (thm_314 z_2 y_1 hyp_1) (thm_331 y_1).

(; Theorem: |- ((Data.Bool.==> ((= z) Data.Bool.F)) ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ;)

(; dict ;)

def thm_333 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool z_2 hol.false) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool z_2 hol.false) => thm_332 y_1 z_2 hyp_1.

(; Theorem: |- ((= (= (\lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717) z))) (= (\lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717) z))) ;)

(; dict ;)

def thm_334 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1)) (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1))) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1)).

(; Theorem: |- ((= (\lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717) Data.Bool.T)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) Data.Bool.T))) Data.Bool.T)) ;)

(; dict ;)

def thm_335 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__15717_2 : hol.term hol.bool => hol.imp (hol.and __15717_2 (hol.imp y_1 __15717_2)) __15717_2) hol.true) (hol.imp (hol.and hol.true (hol.imp y_1 hol.true)) hol.true)) :=
  y_1 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__15717_2 : hol.term hol.bool => hol.imp (hol.and __15717_2 (hol.imp y_1 __15717_2)) __15717_2) hol.true.

(; Theorem: |- ((= ((= (\lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717) z)) (\lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717) Data.Bool.T))) ((= (\lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717) z)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) Data.Bool.T))) Data.Bool.T))) ;)

(; dict ;)

def thm_336 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1) ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) hol.true)) (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1) (hol.imp (hol.and hol.true (hol.imp y_2 hol.true)) hol.true))) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1)) (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1)) ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) hol.true) (hol.imp (hol.and hol.true (hol.imp y_2 hol.true)) hol.true) (thm_334 z_1 y_2) (thm_335 y_2).

(; Theorem: |- ((= (\lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717) z)) ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ;)

(; dict ;)

def thm_337 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1) (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1)) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1.

(; Theorem: |- ((= (= (\lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717) z))) (= ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z))) ;)

(; dict ;)

def thm_338 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1)) (hol.eq hol.bool (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1))) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) (hol.eq hol.bool) (hol.eq hol.bool) ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1) (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1) thm_87 (thm_337 z_1 y_2).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) Data.Bool.T))) Data.Bool.T)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) Data.Bool.T))) Data.Bool.T)) ;)

(; dict ;)

def thm_339 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and hol.true (hol.imp y_1 hol.true)) hol.true) (hol.imp (hol.and hol.true (hol.imp y_1 hol.true)) hol.true)) :=
  y_1 : hol.term hol.bool => hol.REFL hol.bool (hol.imp (hol.and hol.true (hol.imp y_1 hol.true)) hol.true).

(; Theorem: |- ((= ((= (\lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717) z)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) Data.Bool.T))) Data.Bool.T))) ((= ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) Data.Bool.T))) Data.Bool.T))) ;)

(; dict ;)

def thm_340 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1) (hol.imp (hol.and hol.true (hol.imp y_2 hol.true)) hol.true)) (hol.eq hol.bool (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1) (hol.imp (hol.and hol.true (hol.imp y_2 hol.true)) hol.true))) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1)) (hol.eq hol.bool (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1)) (hol.imp (hol.and hol.true (hol.imp y_2 hol.true)) hol.true) (hol.imp (hol.and hol.true (hol.imp y_2 hol.true)) hol.true) (thm_338 z_1 y_2) (thm_339 y_2).

(; Theorem: |- ((= ((= (\lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717) z)) (\lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717) Data.Bool.T))) ((= ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) Data.Bool.T))) Data.Bool.T))) ;)

(; dict ;)

def thm_341 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1) ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) hol.true)) (hol.eq hol.bool (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1) (hol.imp (hol.and hol.true (hol.imp y_2 hol.true)) hol.true))) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1) ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) hol.true)) (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1) (hol.imp (hol.and hol.true (hol.imp y_2 hol.true)) hol.true)) (hol.eq hol.bool (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1) (hol.imp (hol.and hol.true (hol.imp y_2 hol.true)) hol.true)) (thm_336 z_1 y_2) (thm_340 z_1 y_2).

(; Theorem: |- ((= \lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717)) \lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717)) ;)

(; dict ;)

def thm_342 : y_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (__15717_2 : hol.term hol.bool => hol.imp (hol.and __15717_2 (hol.imp y_1 __15717_2)) __15717_2) (__15717_2 : hol.term hol.bool => hol.imp (hol.and __15717_2 (hol.imp y_1 __15717_2)) __15717_2)) :=
  y_1 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (__15717_2 : hol.term hol.bool => hol.imp (hol.and __15717_2 (hol.imp y_1 __15717_2)) __15717_2).

(; Theorem: |- ((= z) Data.Bool.T) ;)

(; dict ;)

def thm_343 : z_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool z_1 hol.true) -> hol.proof (hol.eq hol.bool z_1 hol.true) :=
  z_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool z_1 hol.true) => hyp_1.

(; Theorem: |- ((= (\lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717) z)) (\lambda _15717. ((Data.Bool.==> ((Data.Bool./\ _15717) ((Data.Bool.==> y) _15717))) _15717) Data.Bool.T)) ;)

(; dict ;)

def thm_344 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool z_1 hol.true) -> hol.proof (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1) ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) hol.true)) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool z_1 hol.true) => hol.APP_THM hol.bool hol.bool (__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) (__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_2 __15717_3)) __15717_3) z_1 hol.true (thm_342 y_2) (thm_343 z_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) Data.Bool.T))) Data.Bool.T)) ;)

(; dict ;)

def thm_345 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool z_2 hol.true) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (hol.imp (hol.and hol.true (hol.imp y_1 hol.true)) hol.true)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool z_2 hol.true) => hol.EQ_MP (hol.eq hol.bool ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_1 __15717_3)) __15717_3) z_2) ((__15717_3 : hol.term hol.bool => hol.imp (hol.and __15717_3 (hol.imp y_1 __15717_3)) __15717_3) hol.true)) (hol.eq hol.bool (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (hol.imp (hol.and hol.true (hol.imp y_1 hol.true)) hol.true)) (thm_341 z_2 y_1) (thm_344 z_2 y_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) Data.Bool.T))) Data.Bool.T)) ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ;)

(; dict ;)

def thm_346 : z_1 : hol.term hol.bool -> y_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool z_1 hol.true) -> hol.proof (hol.eq hol.bool (hol.imp (hol.and hol.true (hol.imp y_2 hol.true)) hol.true) (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1)) :=
  z_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool z_1 hol.true) => hol.SYM hol.bool (hol.imp (hol.and z_1 (hol.imp y_2 z_1)) z_1) (hol.imp (hol.and hol.true (hol.imp y_2 hol.true)) hol.true) (thm_345 y_2 z_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool.==> ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) Data.Bool.T))) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_347 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.imp (hol.and hol.true (hol.imp y_1 hol.true)) hol.true) hol.true) :=
  y_1 : hol.term hol.bool => (t_1 : hol.term hol.bool => thm_142 t_1) (hol.and hol.true (hol.imp y_1 hol.true)).

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool.==> ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) Data.Bool.T))) Data.Bool.T)) ;)

(; dict ;)

def thm_348 : y_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool hol.true (hol.imp (hol.and hol.true (hol.imp y_1 hol.true)) hol.true)) :=
  y_1 : hol.term hol.bool => hol.SYM hol.bool (hol.imp (hol.and hol.true (hol.imp y_1 hol.true)) hol.true) hol.true (thm_347 y_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ Data.Bool.T) ((Data.Bool.==> y) Data.Bool.T))) Data.Bool.T) ;)

(; dict ;)

def thm_349 : y_1 : hol.term hol.bool -> hol.proof (hol.imp (hol.and hol.true (hol.imp y_1 hol.true)) hol.true) :=
  y_1 : hol.term hol.bool => hol.EQ_MP hol.true (hol.imp (hol.and hol.true (hol.imp y_1 hol.true)) hol.true) (thm_348 y_1) thm_7.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z) ;)

(; dict ;)

def thm_350 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool z_2 hol.true) -> hol.proof (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool z_2 hol.true) => hol.EQ_MP (hol.imp (hol.and hol.true (hol.imp y_1 hol.true)) hol.true) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (thm_346 z_2 y_1 hyp_1) (thm_349 y_1).

(; Theorem: |- ((Data.Bool.==> ((= z) Data.Bool.T)) ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z)) ;)

(; dict ;)

def thm_351 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool z_2 hol.true) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool z_2 hol.true) => thm_350 y_1 z_2 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((= z) Data.Bool.T)) ((= z) Data.Bool.F)) ;)

(; dict ;)

def thm_352 : z_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool z_1 hol.true) (hol.eq hol.bool z_1 hol.false)) :=
  z_1 : hol.term hol.bool => thm_22 z_1.

(; Theorem: |- ((= (= ((Data.Bool.\/ P) Q))) (= ((Data.Bool.\/ P) Q))) ;)

(; dict ;)

def thm_353 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_354 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q))) ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))))) ;)

(; dict ;)

def thm_355 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_353 Q_1 P_2) (thm_354 Q_1 P_2).

(; Theorem: |- ((= (= (Data.Bool.\/ P))) (= (Data.Bool.\/ P))) ;)

(; dict ;)

def thm_356 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_357 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1.

(; Theorem: |- ((= ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P))) ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))))) ;)

(; dict ;)

def thm_358 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))))) :=
  P_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))) (thm_356 P_1) (thm_357 P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_359 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool P_1 P_1) :=
  P_1 : hol.term hol.bool => hol.REFL hol.bool P_1.

(; Theorem: |- ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) ;)

(; dict ;)

def thm_360 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1 P_1 thm_23 (thm_359 P_1).

(; Theorem: |- ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_361 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) (thm_358 P_1) (thm_360 P_1).

(; Theorem: |- ((= Q) Q) ;)

(; dict ;)

def thm_362 : Q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool Q_1 Q_1) :=
  Q_1 : hol.term hol.bool => hol.REFL hol.bool Q_1.

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) ;)

(; dict ;)

def thm_363 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or P_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1 Q_1 (thm_361 P_2) (thm_362 Q_1).

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_364 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) (thm_355 Q_1 P_2) (thm_363 Q_1 P_2).

(; Theorem: |- ((Data.Bool.\/ P) Q) ;)

(; dict ;)

def thm_365 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.or P_2 Q_1) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))) ;)

(; dict ;)

def thm_366 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hol.EQ_MP (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_364 Q_1 P_2) (thm_365 Q_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> P) R)) ((Data.Bool.==> ((Data.Bool.==> Q) R)) R)) ;)

(; dict ;)

def thm_367 : Q_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> P_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_3 Q_1) -> hol.proof (hol.imp (hol.imp P_3 R_2) (hol.imp (hol.imp Q_1 R_2) R_2)) :=
  Q_1 : hol.term hol.bool => R_2 : hol.term hol.bool => P_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_3 Q_1) => thm_366 Q_1 P_3 hyp_1 R_2.

(; Theorem: |- ((Data.Bool.==> P) R) ;)

(; dict ;)

def thm_368 : R_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_1) -> hol.proof (hol.imp P_2 R_1) :=
  R_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Q) R)) R) ;)

(; dict ;)

def thm_369 : P_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_1 R_2) -> hyp_2 : hol.proof (hol.or P_1 Q_3) -> hol.proof (hol.imp (hol.imp Q_3 R_2) R_2) :=
  P_1 : hol.term hol.bool => R_2 : hol.term hol.bool => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_1 R_2) => hyp_2 : hol.proof (hol.or P_1 Q_3) => thm_367 Q_3 R_2 P_1 hyp_2 (thm_368 R_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> Q) R) ;)

(; dict ;)

def thm_370 : R_1 : hol.term hol.bool -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp Q_2 R_1) -> hol.proof (hol.imp Q_2 R_1) :=
  R_1 : hol.term hol.bool => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp Q_2 R_1) => hyp_1.

(; Theorem: |- R ;)

(; dict ;)

def thm_371 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> R_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_3) -> hyp_2 : hol.proof (hol.imp Q_1 R_3) -> hyp_3 : hol.proof (hol.or P_2 Q_1) -> hol.proof R_3 :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_369 P_2 R_3 Q_1 hyp_1 hyp_3 (thm_370 R_3 Q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z) ;)

(; dict ;)

def thm_372 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool z_2 hol.false) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool z_2 hol.true) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool z_2 hol.true) (hol.eq hol.bool z_2 hol.false)) -> hol.proof (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool z_2 hol.false) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool z_2 hol.true) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool z_2 hol.true) (hol.eq hol.bool z_2 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_371 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool z_2 hol.false) (hol.eq hol.bool z_2 hol.true) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z) ;)

(; dict ;)

def thm_373 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool z_2 hol.false) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool z_2 hol.true) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) -> hol.proof (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool z_2 hol.false) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool z_2 hol.true) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) => hol.PROVE_HYP (hol.or (hol.eq hol.bool z_2 hol.true) (hol.eq hol.bool z_2 hol.false)) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (thm_352 z_2) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool z_2 hol.true) (hol.eq hol.bool z_2 hol.false)) => thm_372 y_1 z_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z) ;)

(; dict ;)

def thm_374 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool z_2 hol.false) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) -> hol.proof (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool z_2 hol.false) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool z_2 hol.true) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (thm_351 y_1 z_2) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool z_2 hol.true) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) => thm_373 y_1 z_2 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ z) ((Data.Bool.==> y) z))) z) ;)

(; dict ;)

def thm_375 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool z_2 hol.false) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (thm_333 y_1 z_2) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool z_2 hol.false) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2)) => thm_374 y_1 z_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> Data.Bool.T) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ Data.Bool.T) y)) z)) ;)

(; dict ;)

def thm_376 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.true y_1) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => hol.EQ_MP (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.true y_1) z_2)) (thm_299 y_1 z_2) (hol.EQ_MP (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (hol.imp (hol.and z_2 (hol.imp y_1 z_2)) z_2) (thm_301 y_1 z_2) (thm_375 y_1 z_2)).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)) ;)

(; dict ;)

def thm_377 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool x_3 hol.true) -> hol.proof (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_3 hol.true) => hol.EQ_MP (hol.imp (hol.and (hol.imp hol.true z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or hol.true y_1) z_2)) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (thm_289 x_3 y_1 z_2 hyp_1) (thm_376 y_1 z_2).

(; Theorem: |- ((Data.Bool.==> ((= x) Data.Bool.T)) ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ;)

(; dict ;)

def thm_378 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool x_3 hol.true) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_3 hol.true) => thm_377 y_1 z_2 x_3 hyp_1.

(; Theorem: |- ((Data.Bool.\/ ((= x) Data.Bool.T)) ((= x) Data.Bool.F)) ;)

(; dict ;)

def thm_379 : x_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool x_1 hol.true) (hol.eq hol.bool x_1 hol.false)) :=
  x_1 : hol.term hol.bool => thm_22 x_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)) ;)

(; dict ;)

def thm_380 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool x_3 hol.false) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool x_3 hol.true) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool x_3 hol.true) (hol.eq hol.bool x_3 hol.false)) -> hol.proof (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool x_3 hol.false) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool x_3 hol.true) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool x_3 hol.true) (hol.eq hol.bool x_3 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_371 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool x_3 hol.false) (hol.eq hol.bool x_3 hol.true) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) hyp_2 hyp_1 hyp_3.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)) ;)

(; dict ;)

def thm_381 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool x_3 hol.false) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool x_3 hol.true) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) -> hol.proof (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool x_3 hol.false) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool x_3 hol.true) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) => hol.PROVE_HYP (hol.or (hol.eq hol.bool x_3 hol.true) (hol.eq hol.bool x_3 hol.false)) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (thm_379 x_3) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool x_3 hol.true) (hol.eq hol.bool x_3 hol.false)) => thm_380 y_1 z_2 x_3 hyp_1 hyp_2 hyp_3).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)) ;)

(; dict ;)

def thm_382 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool x_3 hol.false) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) -> hol.proof (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool x_3 hol.false) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool x_3 hol.true) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (thm_378 y_1 z_2 x_3) (hyp_2 : hol.proof (hol.imp (hol.eq hol.bool x_3 hol.true) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) => thm_381 y_1 z_2 x_3 hyp_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)) ;)

(; dict ;)

def thm_383 : y_1 : hol.term hol.bool -> z_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hol.proof (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) :=
  y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hol.PROVE_HYP (hol.imp (hol.eq hol.bool x_3 hol.false) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (thm_276 y_1 z_2 x_3) (hyp_1 : hol.proof (hol.imp (hol.eq hol.bool x_3 hol.false) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2))) => thm_382 y_1 z_2 x_3 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))) ;)

(; dict ;)

def thm_384 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3))) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => z_3 : hol.term hol.bool => hol.EQ_MP (hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3)) (hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3)) (thm_64 y_1 z_3 x_2) (hol.EQ_MP (hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3)) (hol.imp (hol.and (hol.imp x_2 z_3) (hol.imp y_1 z_3)) (hol.imp (hol.or x_2 y_1) z_3)) (thm_64 y_1 z_3 x_2) (thm_383 y_1 z_3 x_2)).

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z)))) ;)

(; dict ;)

def thm_385 : x_1 : hol.term hol.bool -> hol.proof (hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) :=
  x_1 : hol.term hol.bool => y_2 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) (hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))) (thm_83 y_2 x_1) (thm_384 y_2 x_1).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> x) z)) ((Data.Bool.==> y) z))) ((Data.Bool.==> ((Data.Bool.\/ x) y)) z))))) ;)

(; dict ;)

def thm_386 : hol.proof (hol.forall hol.bool (x_1 : hol.term hol.bool => hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3))))) :=
  x_1 : hol.term hol.bool => hol.EQ_MP (hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) (hol.forall hol.bool (y_2 : hol.term hol.bool => hol.forall hol.bool (z_3 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_1 z_3) (hol.imp y_2 z_3)) (hol.imp (hol.or x_1 y_2) z_3)))) (thm_80 x_1) (thm_385 x_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> ((= x) Data.Option.none)) ((= ((Data.Option.map Function.id) x)) x))) ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map Function.id) x)) x)))) ((Data.Bool.==> ((Data.Bool.\/ ((= x) Data.Option.none)) (Data.Bool.? \lambda a. ((= x) (Data.Option.some a))))) ((= ((Data.Option.map Function.id) x)) x))) ;)

(; dict ;)

def thm_387 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp (hol.and (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1))) (hol.imp (hol.or (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => (y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hol.EQ_MP (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (hol.imp (hol.and (hol.imp x_3 z_2) (hol.imp y_1 z_2)) (hol.imp (hol.or x_3 y_1) z_2)) (thm_65 y_1 z_2 x_3) (thm_73 (hol.EQ_MP (hol.forall hol.bool (x_4 : hol.term hol.bool => hol.forall hol.bool (y_5 : hol.term hol.bool => hol.forall hol.bool (z_6 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_4 z_6) (hol.imp y_5 z_6)) (hol.imp (hol.or x_4 y_5) z_6))))) (hol.forall hol.bool (x_4 : hol.term hol.bool => hol.forall hol.bool (y_5 : hol.term hol.bool => hol.forall hol.bool (z_6 : hol.term hol.bool => hol.imp (hol.and (hol.imp x_4 z_6) (hol.imp y_5 z_6)) (hol.imp (hol.or x_4 y_5) z_6))))) thm_77 thm_386) x_3 y_1 z_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))).

(; Theorem: |- ((= x) Data.Option.none) ;)

(; dict ;)

def thm_388 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hyp_1.

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_389 : A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) (hol.arr (Data_2EOption_2Eoption A) hol.bool)) (hol.eq (Data_2EOption_2Eoption A)) (hol.eq (Data_2EOption_2Eoption A))) :=
  A : hol.type => hol.REFL (hol.arr (Data_2EOption_2Eoption A) (hol.arr (Data_2EOption_2Eoption A) hol.bool)) (hol.eq (Data_2EOption_2Eoption A)).

(; Theorem: |- ((= (Data.Option.map Function.id)) (Data.Option.map Function.id)) ;)

(; dict ;)

def thm_390 : A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)))) :=
  A : hol.type => hol.REFL (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))).

(; Theorem: |- ((= ((Data.Option.map Function.id) x)) ((Data.Option.map Function.id) Data.Option.none)) ;)

(; dict ;)

def thm_391 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) (Data_2EOption_2Enone (Data_2EOption_2Eoption A)))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.APP_THM (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A)) (thm_390 A) (thm_388 A x_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none)) ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none)) ;)

(; dict ;)

def thm_392 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B))) (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B))).

(; Theorem: |- ((= ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none)) ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none)) ;)

(; dict ;)

def thm_393 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B))) (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B))) (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B))) (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B))) (thm_392 A B f_1) (thm_392 A B f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda a. ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a)))))) ((Data.Bool./\ (Data.Bool.! \lambda f. ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda a. ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a))))))) ;)

(; dict ;)

def thm_394 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2))))) (hol.and (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2))))))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2))))) hyp_1.

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda a. ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a)))))) ((Data.Bool./\ (Data.Bool.! \lambda f. ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda a. ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a))))))) ;)

(; dict ;)

def thm_395 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2))))) (hol.and (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2))))))) :=
  B : hol.type => A : hol.type => hol.PROVE_HYP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2))))) (hol.and (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2))))))) (thm_24 B A) (hyp_1 : hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) => thm_394 B A hyp_1).

(; Theorem: |- ((Data.Bool./\ (Data.Bool.! \lambda f. ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda a. ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a)))))) ;)

(; dict ;)

def thm_396 : B : hol.type -> A : hol.type -> hol.proof (hol.and (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2))))) (hol.and (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2)))))) (thm_395 B A) (thm_25 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none)) ;)

(; dict ;)

def thm_397 : B : hol.type -> A : hol.type -> hyp_1 : hol.proof (hol.and (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2)))))) -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) :=
  B : hol.type => A : hol.type => hyp_1 : hol.proof (hol.and (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2)))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_186 q_1 p_2 hyp_1) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) hyp_1.

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none)) ;)

(; dict ;)

def thm_398 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) :=
  B : hol.type => A : hol.type => hol.PROVE_HYP (hol.and (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) (thm_396 B A) (hyp_1 : hol.proof (hol.and (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2)))))) => thm_397 B A hyp_1).

(; Theorem: |- ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none) ;)

(; dict ;)

def thm_399 : A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B))) :=
  A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => thm_398 B A f_1.

(; Theorem: |- ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none) ;)

(; dict ;)

def thm_400 : A : hol.type -> f_1 : hol.term (hol.arr A A) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) :=
  A : hol.type => f_1 : hol.term (hol.arr A A) => (A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B))) (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B))) (thm_393 A B f_1) (thm_399 A B f_1)) A A f_1.

(; Theorem: |- ((= ((Data.Option.map Function.id) Data.Option.none)) Data.Option.none) ;)

(; dict ;)

def thm_401 : A : hol.type -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) :=
  A : hol.type => (A : hol.type => f_1 : hol.term (hol.arr A A) => thm_400 A f_1) A (Function_2Eid (hol.arr A A)).

(; Theorem: |- ((= ((Data.Option.map Function.id) x)) Data.Option.none) ;)

(; dict ;)

def thm_402 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.TRANS (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption A)) (thm_391 A x_1 hyp_1) (thm_401 A).

(; Theorem: |- ((= (= ((Data.Option.map Function.id) x))) (= Data.Option.none)) ;)

(; dict ;)

def thm_403 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) hol.bool) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1)) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Enone (Data_2EOption_2Eoption A)))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.APP_THM (Data_2EOption_2Eoption A) (hol.arr (Data_2EOption_2Eoption A) hol.bool) (hol.eq (Data_2EOption_2Eoption A)) (hol.eq (Data_2EOption_2Eoption A)) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) (Data_2EOption_2Enone (Data_2EOption_2Eoption A)) (thm_389 A) (thm_402 A x_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Option.map Function.id) x)) x)) ((= Data.Option.none) Data.Option.none)) ;)

(; dict ;)

def thm_404 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Enone (Data_2EOption_2Eoption A)) (Data_2EOption_2Enone (Data_2EOption_2Eoption A)))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.APP_THM (Data_2EOption_2Eoption A) hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1)) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A)) (thm_403 A x_1 hyp_1) (thm_388 A x_1 hyp_1).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_405 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_406 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_405 A x_1) (thm_405 A x_1).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_407 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_408 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_409 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_408 A) (thm_408 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_410 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_407 A) (thm_409 A).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_411 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_158 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_412 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_26 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_413 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_411 A x_1) (thm_412 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_414 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_405 A x_1) (thm_413 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_415 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption A) x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_406 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_410 A) (thm_414 A) x_1)) (Data_2EOption_2Eoption A) x_1.

(; Theorem: |- ((= ((= Data.Option.none) Data.Option.none)) Data.Bool.T) ;)

(; dict ;)

def thm_416 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Enone (Data_2EOption_2Eoption A)) (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) hol.true) :=
  A : hol.type => (A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => thm_415 A x_1) A (Data_2EOption_2Enone (Data_2EOption_2Eoption A)).

(; Theorem: |- ((= ((= ((Data.Option.map Function.id) x)) x)) Data.Bool.T) ;)

(; dict ;)

def thm_417 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) hol.true) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.TRANS hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Enone (Data_2EOption_2Eoption A)) (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) hol.true (thm_404 A x_1 hyp_1) (thm_416 A).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Option.map Function.id) x)) x)) ;)

(; dict ;)

def thm_418 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq hol.bool hol.true (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.SYM hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) hol.true (thm_417 A x_1 hyp_1).

(; Theorem: |- ((= ((Data.Option.map Function.id) x)) x) ;)

(; dict ;)

def thm_419 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.EQ_MP hol.true (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (thm_418 A x_1 hyp_1) thm_7.

(; Theorem: |- ((= ((Data.Option.map Function.id) x)) x) ;)

(; dict ;)

def thm_420 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.PROVE_HYP (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (thm_388 A x_1 hyp_1) (hyp_2 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => thm_419 A x_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= x) Data.Option.none)) ((= ((Data.Option.map Function.id) x)) x)) ;)

(; dict ;)

def thm_421 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => thm_420 A x_1 hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map Function.id) x)) x))) ((Data.Bool./\ ((Data.Bool.==> ((= x) Data.Option.none)) ((= ((Data.Option.map Function.id) x)) x))) ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map Function.id) x)) x)))) ;)

(; dict ;)

def thm_422 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.and (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map Function.id) x)) x))) ((Data.Bool./\ ((Data.Bool.==> ((= x) Data.Option.none)) ((= ((Data.Option.map Function.id) x)) x))) ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map Function.id) x)) x)))) ;)

(; dict ;)

def thm_423 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.and (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hol.PROVE_HYP (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.and (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)))) (thm_421 A x_1) (hyp_1 : hol.proof (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) => thm_422 A x_1 hyp_1).

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_424 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_425 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.eq hol.bool p_1 q_2) => hol.EQ_MP p_1 q_2 (thm_424 q_2 p_1 hyp_2) (thm_123 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> p) q) ;)

(; dict ;)

def thm_426 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) -> hol.proof (hol.imp p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => hyp_2 : hol.proof p_2 => thm_425 p_2 q_1 hyp_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= p) q)) ((Data.Bool.==> p) q)) ;)

(; dict ;)

def thm_427 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp (hol.eq hol.bool p_2 q_1) (hol.imp p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool p_2 q_1) => thm_426 q_1 p_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_428 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => thm_427 q_1 p_2) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_429 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_430 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_431 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_429 A P_1) (thm_430 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_432 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_433 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_27 A) (thm_432 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_434 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_431 A P_1) (thm_433 A P_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_435 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => thm_428 A P_1 (thm_434 A P_1).

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_436 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)) ;)

(; dict ;)

def thm_437 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_435 A P_1 (thm_436 A P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_438 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_437 A P_2 hyp_1 Q_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_439 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_440 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) -> hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) -> hol.proof Q_2 :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) Q_2)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) => thm_438 A Q_2 P_1 hyp_2 (thm_439 A Q_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? P)) Q) ;)

(; dict ;)

def thm_441 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_2 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) => thm_440 A P_2 Q_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) ((Data.Bool.==> (Data.Bool.? P)) Q)) ;)

(; dict ;)

def thm_442 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => thm_441 A Q_1 P_2 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda a. ((= x) (Data.Option.some a)) x)) ((= ((Data.Option.map Function.id) x)) x)))) ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map Function.id) x)) x))) ;)

(; dict ;)

def thm_443 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp (hol.forall A (x_2 : hol.term A => hol.imp ((a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) x_2) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_442 A Q_1 P_2) A (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)).

(; Theorem: |- ((= x) (Data.Option.some a)) ;)

(; dict ;)

def thm_444 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hyp_1.

(; Theorem: |- ((= ((Data.Option.map Function.id) x)) ((Data.Option.map Function.id) (Data.Option.some a))) ;)

(; dict ;)

def thm_445 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.APP_THM (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1) (thm_390 A) (thm_444 A a_1 x_2 hyp_1).

(; Theorem: |- ((= ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a)))) ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a)))) ;)

(; dict ;)

def thm_446 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_2 a_1))) (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_2 a_1)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_2 a_1))).

(; Theorem: |- ((= ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a)))) ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a)))) ;)

(; dict ;)

def thm_447 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_2 a_1))) (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_2 a_1)))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_2 a_1))) (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_2 a_1))) (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_2 a_1))) (thm_446 A B a_1 f_2) (thm_446 A B a_1 f_2).

(; Theorem: |- (Data.Bool.! \lambda a. ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a)))) ;)

(; dict ;)

def thm_448 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall A (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_1 a_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_25 B A f_1.

(; Theorem: |- ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a))) ;)

(; dict ;)

def thm_449 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_2 a_1))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A B) => thm_448 B A f_2 a_1.

(; Theorem: |- ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a))) ;)

(; dict ;)

def thm_450 : A : hol.type -> a_1 : hol.term A -> f_2 : hol.term (hol.arr A A) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) f_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) (f_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A A) => (A : hol.type => B : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_2 a_1))) (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) f_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (f_2 a_1))) (thm_447 A B a_1 f_2) (thm_449 A B a_1 f_2)) A A a_1 f_2.

(; Theorem: |- ((= ((Data.Option.map Function.id) (Data.Option.some a))) (Data.Option.some (Function.id a))) ;)

(; dict ;)

def thm_451 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) (Function_2Eid (hol.arr A A) a_1))) :=
  A : hol.type => a_1 : hol.term A => (A : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A A) => thm_450 A a_1 f_2) A a_1 (Function_2Eid (hol.arr A A)).

(; Theorem: |- ((= Data.Option.some) Data.Option.some) ;)

(; dict ;)

def thm_452 : A : hol.type -> hol.proof (hol.eq (hol.arr A (Data_2EOption_2Eoption A)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A))) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)))) :=
  A : hol.type => hol.REFL (hol.arr A (Data_2EOption_2Eoption A)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A))).

(; Theorem: |- ((= (Function.id a)) a) ;)

(; dict ;)

def thm_453 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq A (Function_2Eid (hol.arr A A) a_1) a_1) :=
  A : hol.type => a_1 : hol.term A => (A : hol.type => x_1 : hol.term A => thm_54 A x_1) A a_1.

(; Theorem: |- ((= (Data.Option.some (Function.id a))) (Data.Option.some a)) ;)

(; dict ;)

def thm_454 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) (Function_2Eid (hol.arr A A) a_1)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) :=
  A : hol.type => a_1 : hol.term A => hol.APP_THM A (Data_2EOption_2Eoption A) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A))) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A) a_1) a_1 (thm_452 A) (thm_453 A a_1).

(; Theorem: |- ((= ((Data.Option.map Function.id) (Data.Option.some a))) (Data.Option.some a)) ;)

(; dict ;)

def thm_455 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) :=
  A : hol.type => a_1 : hol.term A => hol.TRANS (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) (Function_2Eid (hol.arr A A) a_1)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1) (thm_451 A a_1) (thm_454 A a_1).

(; Theorem: |- ((= ((Data.Option.map Function.id) x)) (Data.Option.some a)) ;)

(; dict ;)

def thm_456 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.TRANS (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1) (thm_445 A a_1 x_2 hyp_1) (thm_455 A a_1).

(; Theorem: |- ((= (= ((Data.Option.map Function.id) x))) (= (Data.Option.some a))) ;)

(; dict ;)

def thm_457 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) hol.bool) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2)) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.APP_THM (Data_2EOption_2Eoption A) (hol.arr (Data_2EOption_2Eoption A) hol.bool) (hol.eq (Data_2EOption_2Eoption A)) (hol.eq (Data_2EOption_2Eoption A)) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1) (thm_389 A) (thm_456 A a_1 x_2 hyp_1).

(; Theorem: |- ((= ((= ((Data.Option.map Function.id) x)) x)) ((= (Data.Option.some a)) (Data.Option.some a))) ;)

(; dict ;)

def thm_458 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) x_2) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.APP_THM (Data_2EOption_2Eoption A) hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2)) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1) (thm_457 A a_1 x_2 hyp_1) (thm_444 A a_1 x_2 hyp_1).

(; Theorem: |- ((= ((= (Data.Option.some a)) (Data.Option.some a))) Data.Bool.T) ;)

(; dict ;)

def thm_459 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) hol.true) :=
  A : hol.type => a_1 : hol.term A => (A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => thm_415 A x_1) A (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1).

(; Theorem: |- ((= ((= ((Data.Option.map Function.id) x)) x)) Data.Bool.T) ;)

(; dict ;)

def thm_460 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) x_2) hol.true) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.TRANS hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) x_2) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) hol.true (thm_458 A a_1 x_2 hyp_1) (thm_459 A a_1).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Option.map Function.id) x)) x)) ;)

(; dict ;)

def thm_461 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq hol.bool hol.true (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) x_2)) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.SYM hol.bool (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) x_2) hol.true (thm_460 A a_1 x_2 hyp_1).

(; Theorem: |- ((= ((Data.Option.map Function.id) x)) x) ;)

(; dict ;)

def thm_462 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) x_2) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.EQ_MP hol.true (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) x_2) (thm_461 A a_1 x_2 hyp_1) thm_7.

(; Theorem: |- ((= ((Data.Option.map Function.id) x)) x) ;)

(; dict ;)

def thm_463 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) x_2) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.PROVE_HYP (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) x_2) (thm_444 A a_1 x_2 hyp_1) (hyp_2 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => thm_462 A a_1 x_2 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= x) (Data.Option.some a))) ((= ((Data.Option.map Function.id) x)) x)) ;)

(; dict ;)

def thm_464 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) x_2)) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => thm_463 A a_1 x_2 hyp_1.

(; Theorem: |- ((= (\lambda a. ((= x) (Data.Option.some a)) a)) ((= x) (Data.Option.some a))) ;)

(; dict ;)

def thm_465 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.eq hol.bool ((a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) a_1) (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1))) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hol.BETA_CONV A hol.bool (a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) a_1.

(; Theorem: |- (\lambda a. ((= x) (Data.Option.some a)) a) ;)

(; dict ;)

def thm_466 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof ((a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) a_1) -> hol.proof ((a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) a_1) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof ((a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) a_1) => hyp_1.

(; Theorem: |- ((= x) (Data.Option.some a)) ;)

(; dict ;)

def thm_467 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof ((a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) a_1) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof ((a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) a_1) => hol.EQ_MP ((a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) a_1) (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (thm_465 A a_1 x_2) (thm_466 A a_1 x_2 hyp_1).

(; Theorem: |- ((= ((Data.Option.map Function.id) x)) x) ;)

(; dict ;)

def thm_468 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof ((a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) a_1) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) x_2) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof ((a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) a_1) => thm_464 A a_1 x_2 (thm_467 A a_1 x_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda a. ((= x) (Data.Option.some a)) a)) ((= ((Data.Option.map Function.id) x)) x)) ;)

(; dict ;)

def thm_469 : A : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp ((a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) a_1) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_2) x_2)) :=
  A : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof ((a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) a_1) => thm_468 A a_1 x_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda a. ((Data.Bool.==> (\lambda a. ((= x) (Data.Option.some a)) a)) ((= ((Data.Option.map Function.id) x)) x))) ;)

(; dict ;)

def thm_470 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.forall A (a_2 : hol.term A => hol.imp ((a_3 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) a_2) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => a_2 : hol.term A => thm_469 A a_2 x_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map Function.id) x)) x)) ;)

(; dict ;)

def thm_471 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => thm_443 A x_1 (thm_470 A x_1).

(; Theorem: |- (Data.Bool.? \lambda a. ((= x) (Data.Option.some a))) ;)

(; dict ;)

def thm_472 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) => hyp_1.

(; Theorem: |- ((= ((Data.Option.map Function.id) x)) x) ;)

(; dict ;)

def thm_473 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) => thm_471 A x_1 (thm_472 A x_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> ((= x) Data.Option.none)) ((= ((Data.Option.map Function.id) x)) x))) ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map Function.id) x)) x))) ;)

(; dict ;)

def thm_474 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.and (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => hol.EQ_MP (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.and (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1))) (thm_423 A x_1) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2))) => thm_473 A x_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ ((= x) Data.Option.none)) (Data.Bool.? \lambda a. ((= x) (Data.Option.some a))))) ((= ((Data.Option.map Function.id) x)) x)) ;)

(; dict ;)

def thm_475 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp (hol.or (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)))) (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => thm_387 A x_1 (thm_474 A x_1).

(; Theorem: |- ((Data.Bool.\/ ((= x) Data.Option.none)) (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ;)

(; dict ;)

def thm_476 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.or (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_2 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_2)))) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => (A : hol.type => thm_28 A) A x_1.

(; Theorem: |- ((= ((Data.Option.map Function.id) x)) x) ;)

(; dict ;)

def thm_477 : A : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => thm_475 A x_1 (thm_476 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((Data.Option.map Function.id) x)) x)) ;)

(; dict ;)

def thm_478 : A : hol.type -> hol.proof (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) :=
  A : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => thm_477 A x_1.

(; Theorem: |- ((= (Data.Option.map Function.id)) Function.id) ;)

(; dict ;)

def thm_479 : A : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)))) :=
  A : hol.type => hol.EQ_MP (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A))) (Function_2Eid (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A)))) (thm_60 A) (hol.EQ_MP (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption A) (Data_2EOption_2Emap (hol.arr (hol.arr A A) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption A))) (Function_2Eid (hol.arr A A)) x_1) x_1)) (thm_63 A) (thm_478 A)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_480 : C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C))) :=
  C : hol.type => B : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (hol.forall (hol.arr B C)).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))))) \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))))) ;)

(; dict ;)

def thm_481 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.REFL (hol.arr (hol.arr B C) hol.bool) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))))) \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))))) ;)

(; dict ;)

def thm_482 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.TRANS (hol.arr (hol.arr B C) hol.bool) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))) (thm_481 A C B) (thm_481 A C B).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))))) ;)

(; dict ;)

def thm_483 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C)) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))) (thm_480 C B) (thm_482 A C B).

(; Theorem: |- ((= \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ;)

(; dict ;)

def thm_484 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.REFL (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))).

(; Theorem: |- ((= \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ;)

(; dict ;)

def thm_485 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))) (thm_484 C B A f_1) (thm_484 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))))) (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))))) ;)

(; dict ;)

def thm_486 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))) (thm_33 B A) (thm_485 C B A f_1).

(; Theorem: |- ((= \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) ;)

(; dict ;)

def thm_487 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) hol.bool) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.REFL (hol.arr (Data_2EOption_2Eoption A) hol.bool) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))).

(; Theorem: |- ((= \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) ;)

(; dict ;)

def thm_488 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) hol.bool) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.TRANS (hol.arr (Data_2EOption_2Eoption A) hol.bool) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))) (thm_487 B C A g_1 f_2) (thm_487 B C A g_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ;)

(; dict ;)

def thm_489 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr (Data_2EOption_2Eoption A) hol.bool) hol.bool (hol.forall (Data_2EOption_2Eoption A)) (hol.forall (Data_2EOption_2Eoption A)) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))) (thm_50 A) (thm_488 B C A g_1 f_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ ((Data.Bool.==> ((= x) Data.Option.none)) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))))) ((Data.Bool.==> ((Data.Bool.\/ ((= x) Data.Option.none)) (Data.Bool.? \lambda a. ((= x) (Data.Option.some a))))) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ;)

(; dict ;)

def thm_490 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> x_3 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp (hol.and (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))))) (hol.imp (hol.or (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4)))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => x_3 : hol.term (Data_2EOption_2Eoption A) => (y_1 : hol.term hol.bool => z_2 : hol.term hol.bool => x_3 : hol.term hol.bool => thm_383 y_1 z_2 x_3) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))) (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_491 : C : hol.type -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption C) (hol.arr (Data_2EOption_2Eoption C) hol.bool)) (hol.eq (Data_2EOption_2Eoption C)) (hol.eq (Data_2EOption_2Eoption C))) :=
  C : hol.type => hol.REFL (hol.arr (Data_2EOption_2Eoption C) (hol.arr (Data_2EOption_2Eoption C) hol.bool)) (hol.eq (Data_2EOption_2Eoption C)).

(; Theorem: |- ((= (Data.Option.map ((Function.o f) g))) (Data.Option.map ((Function.o f) g))) ;)

(; dict ;)

def thm_492 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.REFL (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1)).

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map ((Function.o f) g)) Data.Option.none)) ;)

(; dict ;)

def thm_493 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) (Data_2EOption_2Enone (Data_2EOption_2Eoption A)))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.APP_THM (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2)) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A)) (thm_492 B C A g_2 f_3) (thm_388 A x_1 hyp_1).

(; Theorem: |- ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none) ;)

(; dict ;)

def thm_494 : A : hol.type -> C : hol.type -> f_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption C))) :=
  A : hol.type => C : hol.type => f_1 : hol.term (hol.arr A C) => (A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => thm_399 A B f_1) A C f_1.

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) Data.Option.none)) Data.Option.none) ;)

(; dict ;)

def thm_495 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption C))) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => (A : hol.type => C : hol.type => f_1 : hol.term (hol.arr A C) => thm_494 A C f_1) A C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1).

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) x)) Data.Option.none) ;)

(; dict ;)

def thm_496 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Enone (Data_2EOption_2Eoption C))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.TRANS (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption C)) (thm_493 B A C x_1 g_2 f_3 hyp_1) (thm_495 B A C g_2 f_3).

(; Theorem: |- ((= (= ((Data.Option.map ((Function.o f) g)) x))) (= Data.Option.none)) ;)

(; dict ;)

def thm_497 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption C) hol.bool) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1)) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Enone (Data_2EOption_2Eoption C)))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.APP_THM (Data_2EOption_2Eoption C) (hol.arr (Data_2EOption_2Eoption C) hol.bool) (hol.eq (Data_2EOption_2Eoption C)) (hol.eq (Data_2EOption_2Eoption C)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Enone (Data_2EOption_2Eoption C)) (thm_491 C) (thm_496 B A C x_1 g_2 f_3 hyp_1).

(; Theorem: |- ((= (Data.Option.map f)) (Data.Option.map f)) ;)

(; dict ;)

def thm_498 : C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1)) :=
  C : hol.type => B : hol.type => f_1 : hol.term (hol.arr B C) => hol.REFL (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1).

(; Theorem: |- ((= (Data.Option.map g)) (Data.Option.map g)) ;)

(; dict ;)

def thm_499 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => hol.REFL (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1).

(; Theorem: |- ((= ((Data.Option.map g) x)) ((Data.Option.map g) Data.Option.none)) ;)

(; dict ;)

def thm_500 : A : hol.type -> B : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 (Data_2EOption_2Enone (Data_2EOption_2Eoption A)))) :=
  A : hol.type => B : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.APP_THM (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A)) (thm_499 B A g_2) (thm_388 A x_1 hyp_1).

(; Theorem: |- ((= ((Data.Option.map g) Data.Option.none)) Data.Option.none) ;)

(; dict ;)

def thm_501 : A : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B))) :=
  A : hol.type => B : hol.type => g_1 : hol.term (hol.arr A B) => (A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => thm_399 A B f_1) A B g_1.

(; Theorem: |- ((= ((Data.Option.map g) x)) Data.Option.none) ;)

(; dict ;)

def thm_502 : A : hol.type -> B : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1) (Data_2EOption_2Enone (Data_2EOption_2Eoption B))) :=
  A : hol.type => B : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.TRANS (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)) (thm_500 A B x_1 g_2 hyp_1) (thm_501 A B g_2).

(; Theorem: |- ((= ((Data.Option.map f) ((Data.Option.map g) x))) ((Data.Option.map f) Data.Option.none)) ;)

(; dict ;)

def thm_503 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1)) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption B)))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.APP_THM (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1) (Data_2EOption_2Enone (Data_2EOption_2Eoption B)) (thm_498 C B f_3) (thm_502 A B x_1 g_2 hyp_1).

(; Theorem: |- ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none) ;)

(; dict ;)

def thm_504 : B : hol.type -> C : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption B))) (Data_2EOption_2Enone (Data_2EOption_2Eoption C))) :=
  B : hol.type => C : hol.type => f_1 : hol.term (hol.arr B C) => (A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A B) => thm_399 A B f_1) B C f_1.

(; Theorem: |- ((= ((Data.Option.map f) ((Data.Option.map g) x))) Data.Option.none) ;)

(; dict ;)

def thm_505 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1)) (Data_2EOption_2Enone (Data_2EOption_2Eoption C))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.TRANS (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1)) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption B))) (Data_2EOption_2Enone (Data_2EOption_2Eoption C)) (thm_503 A B C x_1 g_2 f_3 hyp_1) (thm_504 B C f_3).

(; Theorem: |- ((= ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) ((= Data.Option.none) Data.Option.none)) ;)

(; dict ;)

def thm_506 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Enone (Data_2EOption_2Eoption C)) (Data_2EOption_2Enone (Data_2EOption_2Eoption C)))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.APP_THM (Data_2EOption_2Eoption C) hol.bool (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1)) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Enone (Data_2EOption_2Eoption C))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1)) (Data_2EOption_2Enone (Data_2EOption_2Eoption C)) (thm_497 B A C x_1 g_2 f_3 hyp_1) (thm_505 A B C x_1 g_2 f_3 hyp_1).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_507 : C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption C) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption C) x_1 x_1) hol.true) :=
  C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption C) => (A : hol.type => x_1 : hol.term A => thm_413 A x_1) (Data_2EOption_2Eoption C) x_1.

(; Theorem: |- ((= ((= Data.Option.none) Data.Option.none)) Data.Bool.T) ;)

(; dict ;)

def thm_508 : C : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Enone (Data_2EOption_2Eoption C)) (Data_2EOption_2Enone (Data_2EOption_2Eoption C))) hol.true) :=
  C : hol.type => (C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption C) => thm_507 C x_1) C (Data_2EOption_2Enone (Data_2EOption_2Eoption C)).

(; Theorem: |- ((= ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) Data.Bool.T) ;)

(; dict ;)

def thm_509 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) hol.true) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.TRANS hol.bool (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Enone (Data_2EOption_2Eoption C)) (Data_2EOption_2Enone (Data_2EOption_2Eoption C))) hol.true (thm_506 B A C x_1 g_2 f_3 hyp_1) (thm_508 C).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) ;)

(; dict ;)

def thm_510 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq hol.bool hol.true (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1)))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.SYM hol.bool (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) hol.true (thm_509 B A C x_1 g_2 f_3 hyp_1).

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))) ;)

(; dict ;)

def thm_511 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.EQ_MP hol.true (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) (thm_510 B A C x_1 g_2 f_3 hyp_1) thm_7.

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))) ;)

(; dict ;)

def thm_512 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => hol.PROVE_HYP (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) (thm_388 A x_1 hyp_1) (hyp_2 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => thm_511 B A C x_1 g_2 f_3 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= x) Data.Option.none)) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) ;)

(; dict ;)

def thm_513 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> x_3 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => x_3 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) => thm_512 B A C x_3 g_1 f_2 hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ((Data.Bool./\ ((Data.Bool.==> ((= x) Data.Option.none)) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))))) ;)

(; dict ;)

def thm_514 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> x_3 : hol.term (Data_2EOption_2Eoption A) -> hyp_1 : hol.proof (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) (hol.and (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => x_3 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_137 p_1 q_2 hyp_1) (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ((Data.Bool./\ ((Data.Bool.==> ((= x) Data.Option.none)) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))))) ;)

(; dict ;)

def thm_515 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> x_3 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) (hol.and (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => x_3 : hol.term (Data_2EOption_2Eoption A) => hol.PROVE_HYP (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) (hol.eq hol.bool (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) (hol.and (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))))) (thm_513 B C A g_1 f_2 x_3) (hyp_1 : hol.proof (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) => thm_514 B C A g_1 f_2 x_3 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (\lambda a. ((= x) (Data.Option.some a)) x)) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))))) ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ;)

(; dict ;)

def thm_516 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> x_3 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp ((a_5 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_5)) x_4) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => x_3 : hol.term (Data_2EOption_2Eoption A) => (A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => thm_442 A Q_1 P_2) A (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4)).

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map ((Function.o f) g)) (Data.Option.some a))) ;)

(; dict ;)

def thm_517 : B : hol.type -> A : hol.type -> C : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1))) :=
  B : hol.type => A : hol.type => C : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.APP_THM (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3)) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1) (thm_492 B C A g_3 f_4) (thm_444 A a_1 x_2 hyp_1).

(; Theorem: |- ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a))) ;)

(; dict ;)

def thm_518 : A : hol.type -> C : hol.type -> a_1 : hol.term A -> f_2 : hol.term (hol.arr A C) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_2 a_1))) :=
  A : hol.type => C : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A C) => (A : hol.type => B : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A B) => thm_449 A B a_1 f_2) A C a_1 f_2.

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) (Data.Option.some a))) (Data.Option.some (((Function.o f) g) a))) ;)

(; dict ;)

def thm_519 : B : hol.type -> A : hol.type -> C : hol.type -> a_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 a_1))) :=
  B : hol.type => A : hol.type => C : hol.type => a_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => (A : hol.type => C : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A C) => thm_518 A C a_1 f_2) A C a_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2).

(; Theorem: |- ((= Data.Option.some) Data.Option.some) ;)

(; dict ;)

def thm_520 : C : hol.type -> hol.proof (hol.eq (hol.arr C (Data_2EOption_2Eoption C)) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C))) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)))) :=
  C : hol.type => hol.REFL (hol.arr C (Data_2EOption_2Eoption C)) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C))).

(; Theorem: |- ((= ((= (((Function.o f) g) x)) (f (g x)))) ((= (((Function.o f) g) x)) (f (g x)))) ;)

(; dict ;)

def thm_521 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1)))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.REFL hol.bool (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))).

(; Theorem: |- ((= ((= (((Function.o f) g) x)) (f (g x)))) ((= (((Function.o f) g) x)) (f (g x)))) ;)

(; dict ;)

def thm_522 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1)))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.TRANS hol.bool (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (thm_521 A B C x_1 g_2 f_3) (thm_521 A B C x_1 g_2 f_3).

(; Theorem: |- (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.o f) g) x)) (f (g x))))) ;)

(; dict ;)

def thm_523 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => thm_29 A C B f_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((= (((Function.o f) g) x)) (f (g x)))) ;)

(; dict ;)

def thm_524 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1 x_3) (f_2 (g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => thm_523 C B A f_2 g_1.

(; Theorem: |- ((= (((Function.o f) g) x)) (f (g x))) ;)

(; dict ;)

def thm_525 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => thm_524 B C A g_2 f_3 x_1.

(; Theorem: |- ((= (((Function.o f) g) a)) (f (g a))) ;)

(; dict ;)

def thm_526 : A : hol.type -> B : hol.type -> C : hol.type -> a_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 a_1) (f_3 (g_2 a_1))) :=
  A : hol.type => B : hol.type => C : hol.type => a_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => (A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => (A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.EQ_MP (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (thm_522 A B C x_1 g_2 f_3) (thm_525 A B C x_1 g_2 f_3)) A B C x_1 g_2 f_3) A B C a_1 g_2 f_3.

(; Theorem: |- ((= (Data.Option.some (((Function.o f) g) a))) (Data.Option.some (f (g a)))) ;)

(; dict ;)

def thm_527 : A : hol.type -> B : hol.type -> C : hol.type -> a_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 a_1)) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_3 (g_2 a_1)))) :=
  A : hol.type => B : hol.type => C : hol.type => a_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.APP_THM C (Data_2EOption_2Eoption C) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C))) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 a_1) (f_3 (g_2 a_1)) (thm_520 C) (thm_526 A B C a_1 g_2 f_3).

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) (Data.Option.some a))) (Data.Option.some (f (g a)))) ;)

(; dict ;)

def thm_528 : B : hol.type -> A : hol.type -> C : hol.type -> a_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_3 (g_2 a_1)))) :=
  B : hol.type => A : hol.type => C : hol.type => a_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.TRANS (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 a_1)) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_3 (g_2 a_1))) (thm_519 B A C a_1 g_2 f_3) (thm_527 A B C a_1 g_2 f_3).

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) x)) (Data.Option.some (f (g a)))) ;)

(; dict ;)

def thm_529 : B : hol.type -> A : hol.type -> C : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_4 (g_3 a_1)))) :=
  B : hol.type => A : hol.type => C : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.TRANS (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_4 (g_3 a_1))) (thm_517 B A C a_1 x_2 g_3 f_4 hyp_1) (thm_528 B A C a_1 g_3 f_4).

(; Theorem: |- ((= (= ((Data.Option.map ((Function.o f) g)) x))) (= (Data.Option.some (f (g a))))) ;)

(; dict ;)

def thm_530 : B : hol.type -> A : hol.type -> C : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption C) hol.bool) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2)) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_4 (g_3 a_1))))) :=
  B : hol.type => A : hol.type => C : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.APP_THM (Data_2EOption_2Eoption C) (hol.arr (Data_2EOption_2Eoption C) hol.bool) (hol.eq (Data_2EOption_2Eoption C)) (hol.eq (Data_2EOption_2Eoption C)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_4 (g_3 a_1))) (thm_491 C) (thm_529 B A C a_1 x_2 g_3 f_4 hyp_1).

(; Theorem: |- ((= ((Data.Option.map g) x)) ((Data.Option.map g) (Data.Option.some a))) ;)

(; dict ;)

def thm_531 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> g_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => g_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.APP_THM (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1) (thm_499 B A g_3) (thm_444 A a_1 x_2 hyp_1).

(; Theorem: |- ((= ((Data.Option.map g) (Data.Option.some a))) (Data.Option.some (g a))) ;)

(; dict ;)

def thm_532 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (g_2 a_1))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => g_2 : hol.term (hol.arr A B) => (A : hol.type => B : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A B) => thm_449 A B a_1 f_2) A B a_1 g_2.

(; Theorem: |- ((= ((Data.Option.map g) x)) (Data.Option.some (g a))) ;)

(; dict ;)

def thm_533 : A : hol.type -> B : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> g_3 : hol.term (hol.arr A B) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (g_3 a_1))) :=
  A : hol.type => B : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => g_3 : hol.term (hol.arr A B) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.TRANS (Data_2EOption_2Eoption B) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (g_3 a_1)) (thm_531 A B a_1 x_2 g_3 hyp_1) (thm_532 A B a_1 g_3).

(; Theorem: |- ((= ((Data.Option.map f) ((Data.Option.map g) x))) ((Data.Option.map f) (Data.Option.some (g a)))) ;)

(; dict ;)

def thm_534 : A : hol.type -> B : hol.type -> C : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2)) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (g_3 a_1)))) :=
  A : hol.type => B : hol.type => C : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.APP_THM (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2) (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (g_3 a_1)) (thm_498 C B f_4) (thm_533 A B a_1 x_2 g_3 hyp_1).

(; Theorem: |- ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a))) ;)

(; dict ;)

def thm_535 : B : hol.type -> C : hol.type -> a_1 : hol.term B -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) a_1)) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_2 a_1))) :=
  B : hol.type => C : hol.type => a_1 : hol.term B => f_2 : hol.term (hol.arr B C) => (A : hol.type => B : hol.type => a_1 : hol.term A => f_2 : hol.term (hol.arr A B) => thm_449 A B a_1 f_2) B C a_1 f_2.

(; Theorem: |- ((= ((Data.Option.map f) (Data.Option.some (g a)))) (Data.Option.some (f (g a)))) ;)

(; dict ;)

def thm_536 : A : hol.type -> B : hol.type -> C : hol.type -> a_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (g_2 a_1))) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_3 (g_2 a_1)))) :=
  A : hol.type => B : hol.type => C : hol.type => a_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => (B : hol.type => C : hol.type => a_1 : hol.term B => f_2 : hol.term (hol.arr B C) => thm_535 B C a_1 f_2) B C (g_2 a_1) f_3.

(; Theorem: |- ((= ((Data.Option.map f) ((Data.Option.map g) x))) (Data.Option.some (f (g a)))) ;)

(; dict ;)

def thm_537 : A : hol.type -> B : hol.type -> C : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2)) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_4 (g_3 a_1)))) :=
  A : hol.type => B : hol.type => C : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.TRANS (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2)) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Esome (hol.arr B (Data_2EOption_2Eoption B)) (g_3 a_1))) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_4 (g_3 a_1))) (thm_534 A B C a_1 x_2 g_3 f_4 hyp_1) (thm_536 A B C a_1 g_3 f_4).

(; Theorem: |- ((= ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) ((= (Data.Option.some (f (g a)))) (Data.Option.some (f (g a))))) ;)

(; dict ;)

def thm_538 : B : hol.type -> A : hol.type -> C : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_4 (g_3 a_1))) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_4 (g_3 a_1))))) :=
  B : hol.type => A : hol.type => C : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.APP_THM (Data_2EOption_2Eoption C) hol.bool (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2)) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_4 (g_3 a_1)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2)) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_4 (g_3 a_1))) (thm_530 B A C a_1 x_2 g_3 f_4 hyp_1) (thm_537 A B C a_1 x_2 g_3 f_4 hyp_1).

(; Theorem: |- ((= ((= (Data.Option.some (f (g a)))) (Data.Option.some (f (g a))))) Data.Bool.T) ;)

(; dict ;)

def thm_539 : A : hol.type -> B : hol.type -> C : hol.type -> a_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_3 (g_2 a_1))) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_3 (g_2 a_1)))) hol.true) :=
  A : hol.type => B : hol.type => C : hol.type => a_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => (C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption C) => thm_507 C x_1) C (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_3 (g_2 a_1))).

(; Theorem: |- ((= ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) Data.Bool.T) ;)

(; dict ;)

def thm_540 : B : hol.type -> A : hol.type -> C : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2))) hol.true) :=
  B : hol.type => A : hol.type => C : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.TRANS hol.bool (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_4 (g_3 a_1))) (Data_2EOption_2Esome (hol.arr C (Data_2EOption_2Eoption C)) (f_4 (g_3 a_1)))) hol.true (thm_538 B A C a_1 x_2 g_3 f_4 hyp_1) (thm_539 A B C a_1 g_3 f_4).

(; Theorem: |- ((= Data.Bool.T) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) ;)

(; dict ;)

def thm_541 : B : hol.type -> A : hol.type -> C : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq hol.bool hol.true (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2)))) :=
  B : hol.type => A : hol.type => C : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.SYM hol.bool (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2))) hol.true (thm_540 B A C a_1 x_2 g_3 f_4 hyp_1).

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))) ;)

(; dict ;)

def thm_542 : B : hol.type -> A : hol.type -> C : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2))) :=
  B : hol.type => A : hol.type => C : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.EQ_MP hol.true (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2))) (thm_541 B A C a_1 x_2 g_3 f_4 hyp_1) thm_7.

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))) ;)

(; dict ;)

def thm_543 : B : hol.type -> A : hol.type -> C : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2))) :=
  B : hol.type => A : hol.type => C : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr B C) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => hol.PROVE_HYP (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2))) (thm_444 A a_1 x_2 hyp_1) (hyp_2 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_1)) => thm_542 B A C a_1 x_2 g_3 f_4 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((= x) (Data.Option.some a))) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) ;)

(; dict ;)

def thm_544 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> a_3 : hol.term A -> x_4 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_4 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_4) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_4)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => a_3 : hol.term A => x_4 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof (hol.eq (Data_2EOption_2Eoption A) x_4 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_3)) => thm_543 B A C a_3 x_4 g_1 f_2 hyp_1.

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))) ;)

(; dict ;)

def thm_545 : B : hol.type -> A : hol.type -> C : hol.type -> a_1 : hol.term A -> x_2 : hol.term (Data_2EOption_2Eoption A) -> g_3 : hol.term (hol.arr A B) -> f_4 : hol.term (hol.arr B C) -> hyp_1 : hol.proof ((a_5 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_5)) a_1) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_4 g_3) x_2) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_4 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_3 x_2))) :=
  B : hol.type => A : hol.type => C : hol.type => a_1 : hol.term A => x_2 : hol.term (Data_2EOption_2Eoption A) => g_3 : hol.term (hol.arr A B) => f_4 : hol.term (hol.arr B C) => hyp_1 : hol.proof ((a_5 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_2 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_5)) a_1) => thm_544 B C A g_3 f_4 a_1 x_2 (thm_467 A a_1 x_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (\lambda a. ((= x) (Data.Option.some a)) a)) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) ;)

(; dict ;)

def thm_546 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> a_3 : hol.term A -> x_4 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp ((a_5 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_4 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_5)) a_3) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_4) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_4)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => a_3 : hol.term A => x_4 : hol.term (Data_2EOption_2Eoption A) => hyp_1 : hol.proof ((a_5 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_4 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_5)) a_3) => thm_545 B A C a_3 x_4 g_1 f_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda a. ((Data.Bool.==> (\lambda a. ((= x) (Data.Option.some a)) a)) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ;)

(; dict ;)

def thm_547 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> x_3 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.forall A (a_4 : hol.term A => hol.imp ((a_5 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_5)) a_4) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => x_3 : hol.term (Data_2EOption_2Eoption A) => a_4 : hol.term A => thm_546 B C A g_1 f_2 a_4 x_3.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) ;)

(; dict ;)

def thm_548 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> x_3 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => x_3 : hol.term (Data_2EOption_2Eoption A) => thm_516 B C A g_1 f_2 x_3 (thm_547 B C A g_1 f_2 x_3).

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))) ;)

(; dict ;)

def thm_549 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_1 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) => thm_548 B C A g_2 f_3 x_1 (thm_472 A x_1 hyp_1).

(; Theorem: |- ((Data.Bool./\ ((Data.Bool.==> ((= x) Data.Option.none)) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ((Data.Bool.==> (Data.Bool.? \lambda a. ((= x) (Data.Option.some a)))) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ;)

(; dict ;)

def thm_550 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> x_3 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.and (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => x_3 : hol.term (Data_2EOption_2Eoption A) => hol.EQ_MP (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) (hol.and (hol.imp (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) (hol.imp (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3))))) (thm_515 B C A g_1 f_2 x_3) (hyp_1 : hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4))) => thm_549 B A C x_3 g_1 f_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.\/ ((= x) Data.Option.none)) (Data.Bool.? \lambda a. ((= x) (Data.Option.some a))))) ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) ;)

(; dict ;)

def thm_551 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> x_3 : hol.term (Data_2EOption_2Eoption A) -> hol.proof (hol.imp (hol.or (hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Enone (Data_2EOption_2Eoption A))) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) (a_4 : hol.term A => hol.eq (Data_2EOption_2Eoption A) x_3 (Data_2EOption_2Esome (hol.arr A (Data_2EOption_2Eoption A)) a_4)))) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => x_3 : hol.term (Data_2EOption_2Eoption A) => thm_490 B C A g_1 f_2 x_3 (thm_550 B C A g_1 f_2 x_3).

(; Theorem: |- ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))) ;)

(; dict ;)

def thm_552 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => thm_551 B C A g_2 f_3 x_1 (thm_476 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))) ;)

(; dict ;)

def thm_553 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => x_3 : hol.term (Data_2EOption_2Eoption A) => thm_552 B A C x_3 g_1 f_2.

(; Theorem: |- (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))))) ;)

(; dict ;)

def thm_554 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => g_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))) (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))) (thm_489 B C A g_2 f_1) (thm_553 B C A g_2 f_1).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))))) ;)

(; dict ;)

def thm_555 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr B C) => hol.EQ_MP (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3))))) (thm_486 C B A f_1) (thm_554 C B A f_1).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))))) ;)

(; thm ;)

def thm_556 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.EQ_MP (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_3)))))) (thm_483 A C B) (thm_555 A C B).

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_557 : C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) -> f_2 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) f_2 g_1) (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (f_2 x_3) (g_1 x_3)))) :=
  C : hol.type => A : hol.type => g_1 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) => f_2 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_47 B A g_1 f_2) (Data_2EOption_2Eoption C) (Data_2EOption_2Eoption A) g_1 f_2.

(; Theorem: |- ((= ((= ((Function.o (Data.Option.map f)) (Data.Option.map g))) (Data.Option.map ((Function.o f) g)))) (Data.Bool.! \lambda x. ((= (((Function.o (Data.Option.map f)) (Data.Option.map g)) x)) ((Data.Option.map ((Function.o f) g)) x)))) ;)

(; dict ;)

def thm_558 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1))) (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => (C : hol.type => A : hol.type => g_1 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) => f_2 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) => thm_557 C A g_1 f_2) C A (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1)).

(; Theorem: |- ((= (((Function.o f) g) x)) (f (g x))) ;)

(; dict ;)

def thm_559 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) -> f_3 : hol.term (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) f_3 g_2 x_1) (f_3 (g_2 x_1))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) => f_3 : hol.term (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) => (A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => thm_525 A B C x_1 g_2 f_3) (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C) x_1 g_2 f_3.

(; Theorem: |- ((= (((Function.o (Data.Option.map f)) (Data.Option.map g)) x)) ((Data.Option.map f) ((Data.Option.map g) x))) ;)

(; dict ;)

def thm_560 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => (A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) => f_3 : hol.term (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) => thm_559 A B C x_1 g_2 f_3) A B C x_1 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3).

(; Theorem: |- ((= (= (((Function.o (Data.Option.map f)) (Data.Option.map g)) x))) (= ((Data.Option.map f) ((Data.Option.map g) x)))) ;)

(; dict ;)

def thm_561 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption C) hol.bool) (hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2) x_1)) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1)))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.APP_THM (Data_2EOption_2Eoption C) (hol.arr (Data_2EOption_2Eoption C) hol.bool) (hol.eq (Data_2EOption_2Eoption C)) (hol.eq (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1)) (thm_491 C) (thm_560 A B C x_1 g_2 f_3).

(; Theorem: |- ((= ((= (((Function.o (Data.Option.map f)) (Data.Option.map g)) x)) ((Data.Option.map ((Function.o f) g)) x))) ((= ((Data.Option.map f) ((Data.Option.map g) x))) ((Data.Option.map f) ((Data.Option.map g) x)))) ;)

(; dict ;)

def thm_562 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1)) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1)) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1)))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.APP_THM (Data_2EOption_2Eoption C) hol.bool (hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2) x_1)) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1)) (thm_561 A B C x_1 g_2 f_3) (thm_552 B A C x_1 g_2 f_3).

(; Theorem: |- ((= ((= ((Data.Option.map f) ((Data.Option.map g) x))) ((Data.Option.map f) ((Data.Option.map g) x)))) Data.Bool.T) ;)

(; dict ;)

def thm_563 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1)) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) hol.true) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => (C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption C) => thm_507 C x_1) C (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1)).

(; Theorem: |- ((= ((= (((Function.o (Data.Option.map f)) (Data.Option.map g)) x)) ((Data.Option.map ((Function.o f) g)) x))) Data.Bool.T) ;)

(; dict ;)

def thm_564 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term (Data_2EOption_2Eoption A) -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1)) hol.true) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term (Data_2EOption_2Eoption A) => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.TRANS hol.bool (hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2) x_1) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) x_1)) (hol.eq (Data_2EOption_2Eoption C) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1)) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_3 (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2 x_1))) hol.true (thm_562 A B C x_1 g_2 f_3) (thm_563 A B C x_1 g_2 f_3).

(; Theorem: |- ((= \lambda x. ((= (((Function.o (Data.Option.map f)) (Data.Option.map g)) x)) ((Data.Option.map ((Function.o f) g)) x))) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_565 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (Data_2EOption_2Eoption A) hol.bool) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3)) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.true)) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.ABS_THM (Data_2EOption_2Eoption A) hol.bool (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3)) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.true) (x_3 : hol.term (Data_2EOption_2Eoption A) => thm_564 A B C x_3 g_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (((Function.o (Data.Option.map f)) (Data.Option.map g)) x)) ((Data.Option.map ((Function.o f) g)) x)))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_566 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3))) (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.true))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr (Data_2EOption_2Eoption A) hol.bool) hol.bool (hol.forall (Data_2EOption_2Eoption A)) (hol.forall (Data_2EOption_2Eoption A)) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3)) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.true) (thm_50 A) (thm_565 B C A g_1 f_2).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_567 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_568 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (thm_567 A t_1) (thm_567 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_569 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_30 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_570 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EOption_2Eoption A) (x_2 : hol.term (Data_2EOption_2Eoption A) => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (thm_568 A t_1) (thm_569 A t_1)) (Data_2EOption_2Eoption A) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_571 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EOption_2Eoption A) (x_1 : hol.term (Data_2EOption_2Eoption A) => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => thm_570 A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (((Function.o (Data.Option.map f)) (Data.Option.map g)) x)) ((Data.Option.map ((Function.o f) g)) x)))) Data.Bool.T) ;)

(; dict ;)

def thm_572 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3))) hol.true) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.TRANS hol.bool (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3))) (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.true)) hol.true (thm_566 B C A g_1 f_2) (thm_571 A).

(; Theorem: |- ((= ((= ((Function.o (Data.Option.map f)) (Data.Option.map g))) (Data.Option.map ((Function.o f) g)))) Data.Bool.T) ;)

(; dict ;)

def thm_573 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1))) hol.true) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.TRANS hol.bool (hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1))) (hol.forall (Data_2EOption_2Eoption A) (x_3 : hol.term (Data_2EOption_2Eoption A) => hol.eq (Data_2EOption_2Eoption C) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_2) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_1) x_3) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) x_3))) hol.true (thm_558 B C A g_1 f_2) (thm_572 B C A g_1 f_2).

(; Theorem: |- ((= \lambda g. ((= ((Function.o (Data.Option.map f)) (Data.Option.map g))) (Data.Option.map ((Function.o f) g)))) \lambda g. Data.Bool.T) ;)

(; dict ;)

def thm_574 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2))) (g_2 : hol.term (hol.arr A B) => hol.true)) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2))) (g_2 : hol.term (hol.arr A B) => hol.true) (g_2 : hol.term (hol.arr A B) => thm_573 B C A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= ((Function.o (Data.Option.map f)) (Data.Option.map g))) (Data.Option.map ((Function.o f) g))))) (Data.Bool.! \lambda g. Data.Bool.T)) ;)

(; dict ;)

def thm_575 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2)))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.true))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2))) (g_2 : hol.term (hol.arr A B) => hol.true) (thm_33 B A) (thm_574 C B A f_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda g. t)) t)) ((= (Data.Bool.! \lambda g. t)) t)) ;)

(; dict ;)

def thm_576 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda g. t)) t)) ;)

(; dict ;)

def thm_577 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1) (thm_567 A t_1) (thm_576 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. t)) t) ;)

(; dict ;)

def thm_578 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1) (thm_577 A t_1) (thm_569 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. t)) t) ;)

(; dict ;)

def thm_579 : B : hol.type -> A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => t_1)) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_578 A t_1) (hol.arr A B) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda g. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_580 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_1 : hol.term (hol.arr A B) => hol.true)) hol.true) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => t_1 : hol.term hol.bool => thm_579 B A t_1) B A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= ((Function.o (Data.Option.map f)) (Data.Option.map g))) (Data.Option.map ((Function.o f) g))))) Data.Bool.T) ;)

(; dict ;)

def thm_581 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2)))) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.TRANS hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2)))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.true)) hol.true (thm_575 C B A f_1) (thm_580 B A).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= ((Function.o (Data.Option.map f)) (Data.Option.map g))) (Data.Option.map ((Function.o f) g))))) \lambda f. Data.Bool.T) ;)

(; dict ;)

def thm_582 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2)))) (f_1 : hol.term (hol.arr B C) => hol.true)) :=
  A : hol.type => C : hol.type => B : hol.type => hol.ABS_THM (hol.arr B C) hol.bool (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2)))) (f_1 : hol.term (hol.arr B C) => hol.true) (f_1 : hol.term (hol.arr B C) => thm_581 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((Function.o (Data.Option.map f)) (Data.Option.map g))) (Data.Option.map ((Function.o f) g)))))) (Data.Bool.! \lambda f. Data.Bool.T)) ;)

(; dict ;)

def thm_583 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.true))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C)) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2)))) (f_1 : hol.term (hol.arr B C) => hol.true) (thm_480 C B) (thm_582 A C B).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda f. t)) t)) ((= (Data.Bool.! \lambda f. t)) t)) ;)

(; dict ;)

def thm_584 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda f. t)) t)) ;)

(; dict ;)

def thm_585 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1) (thm_567 A t_1) (thm_584 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. t)) t) ;)

(; dict ;)

def thm_586 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1) (thm_585 A t_1) (thm_569 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. t)) t) ;)

(; dict ;)

def thm_587 : C : hol.type -> B : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_2 : hol.term (hol.arr B C) => t_1)) t_1) :=
  C : hol.type => B : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_586 A t_1) (hol.arr B C) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda f. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_588 : C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.true)) hol.true) :=
  C : hol.type => B : hol.type => (C : hol.type => B : hol.type => t_1 : hol.term hol.bool => thm_587 C B t_1) C B hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((Function.o (Data.Option.map f)) (Data.Option.map g))) (Data.Option.map ((Function.o f) g)))))) Data.Bool.T) ;)

(; dict ;)

def thm_589 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2))))) hol.true) :=
  A : hol.type => C : hol.type => B : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.true)) hol.true (thm_583 A C B) (thm_588 C B).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((Function.o (Data.Option.map f)) (Data.Option.map g))) (Data.Option.map ((Function.o f) g)))))) ;)

(; dict ;)

def thm_590 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2)))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.SYM hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2))))) hol.true (thm_589 A C B).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((Function.o (Data.Option.map f)) (Data.Option.map g))) (Data.Option.map ((Function.o f) g))))) ;)

(; dict ;)

def thm_591 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.EQ_MP hol.true (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)) (Function_2Eo (hol.arr (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C)) (hol.arr (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B)) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C)))) (Data_2EOption_2Emap (hol.arr (hol.arr B C) (hol.arr (Data_2EOption_2Eoption B) (Data_2EOption_2Eoption C))) f_1) (Data_2EOption_2Emap (hol.arr (hol.arr A B) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption B))) g_2)) (Data_2EOption_2Emap (hol.arr (hol.arr A C) (hol.arr (Data_2EOption_2Eoption A) (Data_2EOption_2Eoption C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2))))) (thm_590 A C B) thm_7.
