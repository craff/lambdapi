
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME bool_2Dclass_2Da7.

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))).

(; axiom ;)

thm_1 : hol.proof hol.true.

(; axiom ;)

thm_2 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.or (hol.eq hol.bool t_1 hol.true) (hol.eq hol.bool t_1 hol.false))).

(; axiom ;)

thm_3 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.or (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp p_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1))).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_7 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.true t_1) t_1)).

(; axiom ;)

thm_8 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.true) t_1)).

(; axiom ;)

thm_9 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and hol.false t_1) hol.false)).

(; axiom ;)

thm_10 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 hol.false) hol.false)).

(; axiom ;)

thm_11 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.and t_1 t_1) t_1)).

(; axiom ;)

thm_12 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_1 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (p_1 x_3) q_2)) q_2))).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_13 : hol.proof (hol.eq (hol.arr (hol.arr (hol.arr hol.bool hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr hol.bool hol.bool)) (hol.forall (hol.arr hol.bool hol.bool))) :=
  hol.REFL (hol.arr (hol.arr (hol.arr hol.bool hol.bool) hol.bool) hol.bool) (hol.forall (hol.arr hol.bool hol.bool)).

(; Theorem: |- ((= \lambda p. ((Data.Bool.==> ((Data.Bool./\ (p Data.Bool.F)) (p Data.Bool.T))) (Data.Bool.! \lambda x. (p x)))) \lambda p. ((Data.Bool.==> ((Data.Bool./\ (p Data.Bool.F)) (p Data.Bool.T))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_14 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)))) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2))).

(; Theorem: |- ((= \lambda p. ((Data.Bool.==> ((Data.Bool./\ (p Data.Bool.F)) (p Data.Bool.T))) (Data.Bool.! \lambda x. (p x)))) \lambda p. ((Data.Bool.==> ((Data.Bool./\ (p Data.Bool.F)) (p Data.Bool.T))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_15 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)))) :=
  hol.TRANS (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2))) thm_14 thm_14.

(; Theorem: |- ((= (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (p Data.Bool.F)) (p Data.Bool.T))) (Data.Bool.! \lambda x. (p x))))) (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (p Data.Bool.F)) (p Data.Bool.T))) (Data.Bool.! \lambda x. (p x))))) ;)

(; dict ;)

def thm_16 : hol.proof (hol.eq hol.bool (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)))) (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2))))) :=
  hol.APP_THM (hol.arr (hol.arr hol.bool hol.bool) hol.bool) hol.bool (hol.forall (hol.arr hol.bool hol.bool)) (hol.forall (hol.arr hol.bool hol.bool)) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2))) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2))) thm_13 thm_15.

(; Theorem: |- ((Data.Bool./\ (p Data.Bool.F)) (p Data.Bool.T)) ;)

(; dict ;)

def thm_17 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) -> hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) => hyp_1.

(; Theorem: |- ((= (= ((Data.Bool./\ p) q))) (= ((Data.Bool./\ p) q))) ;)

(; dict ;)

def thm_18 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.and p_2 q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_19 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q))) ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_20 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.and p_2 q_1)) (hol.eq hol.bool (hol.and p_2 q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_18 q_1 p_2) (thm_19 q_1 p_2).

(; Theorem: |- ((= (= (Data.Bool./\ p))) (= (Data.Bool./\ p))) ;)

(; dict ;)

def thm_21 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1))) :=
  p_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_22 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1.

(; Theorem: |- ((= ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p))) ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)))) ;)

(; dict ;)

def thm_23 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)))) :=
  p_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3)) (thm_21 p_1) (thm_22 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_24 : p_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool p_1 p_1) :=
  p_1 : hol.term hol.bool => hol.REFL hol.bool p_1.

(; Theorem: |- ((= (Data.Bool./\ p)) (\lambda p. \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) p)) ;)

(; dict ;)

def thm_25 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) :=
  p_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1 p_1 thm_0 (thm_24 p_1).

(; Theorem: |- ((= (Data.Bool./\ p)) \lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_26 : p_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) :=
  p_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) p_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.and p_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_1 (hol.imp q_2 x_3)) x_3))) (thm_23 p_1) (thm_25 p_1).

(; Theorem: |- ((= q) q) ;)

(; dict ;)

def thm_27 : q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool q_1 q_1) :=
  q_1 : hol.term hol.bool => hol.REFL hol.bool q_1.

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (\lambda q. (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) q)) ;)

(; dict ;)

def thm_28 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.and p_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1 q_1 (thm_26 p_2) (thm_27 q_1).

(; Theorem: |- ((= ((Data.Bool./\ p) q)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ;)

(; dict ;)

def thm_29 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and p_2 q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (x_4 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_3 x_4)) x_4)) q_1)) (hol.eq hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3))) (thm_20 q_1 p_2) (thm_28 q_1 p_2).

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_30 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_31 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => hol.EQ_MP (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_29 q_1 p_2) (thm_30 q_1 p_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) p))) p) ;)

(; dict ;)

def thm_32 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 p_2)) p_2) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_31 q_1 p_2 hyp_1 p_2.

(; Theorem: |- p ;)

(; dict ;)

def thm_33 : p_1 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof p_1 :=
  p_1 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_34 : q_1 : hol.term hol.bool -> hyp_1 : hol.proof q_1 -> hol.proof q_1 :=
  q_1 : hol.term hol.bool => hyp_1 : hol.proof q_1 => hyp_1.

(; Theorem: |- ((= p) q) ;)

(; dict ;)

def thm_35 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.eq hol.bool p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.PROP_EXT p_2 q_1 (hyp_3 : hol.proof q_1 => thm_33 p_2 hyp_1) (hyp_3 : hol.proof p_2 => thm_34 q_1 hyp_2).

(; Theorem: |- ((= q) p) ;)

(; dict ;)

def thm_36 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.eq hol.bool q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.SYM hol.bool p_1 q_2 (thm_35 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- p ;)

(; dict ;)

def thm_37 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP q_1 p_2 (thm_36 p_2 q_1 hyp_1 hyp_2) (thm_34 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> q) p) ;)

(; dict ;)

def thm_38 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 p_1) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_37 q_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) p)) ;)

(; dict ;)

def thm_39 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 p_2)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_38 p_2 q_1 hyp_1.

(; Theorem: |- p ;)

(; dict ;)

def thm_40 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof p_2 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_32 q_1 p_2 hyp_1 (thm_39 q_1 p_2).

(; Theorem: |- (p Data.Bool.F) ;)

(; dict ;)

def thm_41 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) -> hol.proof (p_1 hol.false) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_40 q_1 p_2 hyp_1) (p_1 hol.true) (p_1 hol.false) hyp_1.

(; Theorem: |- (p Data.Bool.F) ;)

(; dict ;)

def thm_42 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) -> hol.proof (p_1 hol.false) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) => hol.PROVE_HYP (hol.and (p_1 hol.false) (p_1 hol.true)) (p_1 hol.false) (thm_17 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) => thm_41 p_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) q))) q) ;)

(; dict ;)

def thm_43 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_2 q_1) -> hol.proof (hol.imp (hol.imp p_2 (hol.imp q_1 q_1)) q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_31 q_1 p_2 hyp_1 q_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_44 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof q_2 -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => hol.EQ_MP p_1 q_2 (thm_35 q_2 p_1 hyp_1 hyp_2) (thm_33 p_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> q) q) ;)

(; dict ;)

def thm_45 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.imp q_2 q_2) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof q_2 => thm_44 p_1 q_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) q)) ;)

(; dict ;)

def thm_46 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.imp p_2 (hol.imp q_1 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => thm_45 p_2 q_1 hyp_1.

(; Theorem: |- q ;)

(; dict ;)

def thm_47 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and p_1 q_2) -> hol.proof q_2 :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_43 q_2 p_1 hyp_1 (thm_46 q_2 p_1).

(; Theorem: |- (p Data.Bool.T) ;)

(; dict ;)

def thm_48 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) -> hol.proof (p_1 hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_47 p_1 q_2 hyp_1) (p_1 hol.false) (p_1 hol.true) hyp_1.

(; Theorem: |- (p Data.Bool.T) ;)

(; dict ;)

def thm_49 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) -> hol.proof (p_1 hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) => hol.PROVE_HYP (hol.and (p_1 hol.false) (p_1 hol.true)) (p_1 hol.true) (thm_17 p_1 hyp_1) (hyp_2 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) => thm_48 p_1 hyp_2).

(; Theorem: |- (p Data.Bool.F) ;)

(; dict ;)

def thm_50 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_1 hol.false) -> hol.proof (p_1 hol.false) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_1 hol.false) => hyp_1.

(; Theorem: |- (p Data.Bool.T) ;)

(; dict ;)

def thm_51 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_1 hol.true) -> hol.proof (p_1 hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_52 : hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool) (hol.forall hol.bool)) :=
  hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.forall hol.bool).

(; Theorem: |- ((= \lambda x. (p x)) \lambda x. (p x)) ;)

(; dict ;)

def thm_53 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (x_2 : hol.term hol.bool => p_1 x_2) (x_2 : hol.term hol.bool => p_1 x_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (x_2 : hol.term hol.bool => p_1 x_2).

(; Theorem: |- ((= \lambda x. (p x)) \lambda x. (p x)) ;)

(; dict ;)

def thm_54 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (x_2 : hol.term hol.bool => p_1 x_2) (x_2 : hol.term hol.bool => p_1 x_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.TRANS (hol.arr hol.bool hol.bool) (x_2 : hol.term hol.bool => p_1 x_2) (x_2 : hol.term hol.bool => p_1 x_2) (x_2 : hol.term hol.bool => p_1 x_2) (thm_53 p_1) (thm_53 p_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (p x))) (Data.Bool.! \lambda x. (p x))) ;)

(; dict ;)

def thm_55 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (x_2 : hol.term hol.bool => p_1 x_2) (x_2 : hol.term hol.bool => p_1 x_2) thm_52 (thm_54 p_1).

(; Theorem: |- ((= p) p) ;)

(; dict ;)

def thm_56 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) p_1 p_1) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) p_1.

(; Theorem: |- ((= ((= x) Data.Bool.F)) ((= x) Data.Bool.F)) ;)

(; dict ;)

def thm_57 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 hol.false) (hol.eq hol.bool x_1 hol.false)) :=
  x_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool x_1 hol.false).

(; Theorem: |- ((= ((= x) Data.Bool.F)) ((= x) Data.Bool.F)) ;)

(; dict ;)

def thm_58 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 hol.false) (hol.eq hol.bool x_1 hol.false)) :=
  x_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool x_1 hol.false) (hol.eq hol.bool x_1 hol.false) (hol.eq hol.bool x_1 hol.false) (thm_57 x_1) (thm_57 x_1).

(; Theorem: |- ((= x) Data.Bool.F) ;)

(; dict ;)

def thm_59 : x_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.false) -> hol.proof (hol.eq hol.bool x_1 hol.false) :=
  x_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.false) => hyp_1.

(; Theorem: |- ((= (p x)) (p Data.Bool.F)) ;)

(; dict ;)

def thm_60 : x_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.false) -> hol.proof (hol.eq hol.bool (p_2 x_1) (p_2 hol.false)) :=
  x_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.false) => hol.APP_THM hol.bool hol.bool p_2 p_2 x_1 hol.false (thm_56 p_2) (hol.EQ_MP (hol.eq hol.bool x_1 hol.false) (hol.eq hol.bool x_1 hol.false) (thm_58 x_1) (thm_59 x_1 hyp_1)).

(; Theorem: |- ((= ((= (p Data.Bool.F)) Data.Bool.T)) ((= (p Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_61 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 hol.false) hol.true) (hol.eq hol.bool (p_1 hol.false) hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_1 hol.false) hol.true).

(; Theorem: |- ((= ((= (p Data.Bool.F)) Data.Bool.T)) ((= (p Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_62 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 hol.false) hol.true) (hol.eq hol.bool (p_1 hol.false) hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_1 hol.false) hol.true) (hol.eq hol.bool (p_1 hol.false) hol.true) (hol.eq hol.bool (p_1 hol.false) hol.true) (thm_61 p_1) (thm_61 p_1).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_63 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_64 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_63 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_65 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_64 t_1 hyp_1) thm_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_66 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_67 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_66 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_1).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_68 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_65 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_67 t_1 hyp_1).

(; Theorem: |- ((= (p Data.Bool.F)) ((= (p Data.Bool.F)) Data.Bool.T)) ;)

(; dict ;)

def thm_69 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (p_1 hol.false) (hol.eq hol.bool (p_1 hol.false) hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => (t_1 : hol.term hol.bool => thm_68 t_1) (p_1 hol.false).

(; Theorem: |- ((= (p Data.Bool.F)) Data.Bool.T) ;)

(; dict ;)

def thm_70 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_1 hol.false) -> hol.proof (hol.eq hol.bool (p_1 hol.false) hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_1 hol.false) => hol.EQ_MP (p_1 hol.false) (hol.eq hol.bool (p_1 hol.false) hol.true) (thm_69 p_1) (thm_50 p_1 hyp_1).

(; Theorem: |- ((= (p x)) Data.Bool.T) ;)

(; dict ;)

def thm_71 : x_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_2 hol.false) -> hyp_2 : hol.proof (hol.eq hol.bool x_1 hol.false) -> hol.proof (hol.eq hol.bool (p_2 x_1) hol.true) :=
  x_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_2 hol.false) => hyp_2 : hol.proof (hol.eq hol.bool x_1 hol.false) => hol.TRANS hol.bool (p_2 x_1) (p_2 hol.false) hol.true (thm_60 x_1 p_2 hyp_2) (hol.EQ_MP (hol.eq hol.bool (p_2 hol.false) hol.true) (hol.eq hol.bool (p_2 hol.false) hol.true) (thm_62 p_2) (thm_70 p_2 hyp_1)).

(; Theorem: |- ((= Data.Bool.T) (p x)) ;)

(; dict ;)

def thm_72 : x_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_2 hol.false) -> hyp_2 : hol.proof (hol.eq hol.bool x_1 hol.false) -> hol.proof (hol.eq hol.bool hol.true (p_2 x_1)) :=
  x_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_2 hol.false) => hyp_2 : hol.proof (hol.eq hol.bool x_1 hol.false) => hol.SYM hol.bool (p_2 x_1) hol.true (thm_71 x_1 p_2 hyp_1 hyp_2).

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_73 : x_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_2 hol.false) -> hyp_2 : hol.proof (hol.eq hol.bool x_1 hol.false) -> hol.proof (p_2 x_1) :=
  x_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_2 hol.false) => hyp_2 : hol.proof (hol.eq hol.bool x_1 hol.false) => hol.EQ_MP hol.true (p_2 x_1) (thm_72 x_1 p_2 hyp_1 hyp_2) thm_1.

(; Theorem: |- ((Data.Bool.==> ((= x) Data.Bool.F)) (p x)) ;)

(; dict ;)

def thm_74 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (p_1 hol.false) -> hol.proof (hol.imp (hol.eq hol.bool x_2 hol.false) (p_1 x_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => x_2 : hol.term hol.bool => hyp_1 : hol.proof (p_1 hol.false) => hyp_2 : hol.proof (hol.eq hol.bool x_2 hol.false) => thm_73 x_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((= ((= x) Data.Bool.T)) ((= x) Data.Bool.T)) ;)

(; dict ;)

def thm_75 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 hol.true) (hol.eq hol.bool x_1 hol.true)) :=
  x_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool x_1 hol.true).

(; Theorem: |- ((= ((= x) Data.Bool.T)) ((= x) Data.Bool.T)) ;)

(; dict ;)

def thm_76 : x_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_1 hol.true) (hol.eq hol.bool x_1 hol.true)) :=
  x_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool x_1 hol.true) (hol.eq hol.bool x_1 hol.true) (hol.eq hol.bool x_1 hol.true) (thm_75 x_1) (thm_75 x_1).

(; Theorem: |- ((= x) Data.Bool.T) ;)

(; dict ;)

def thm_77 : x_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.true) -> hol.proof (hol.eq hol.bool x_1 hol.true) :=
  x_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.true) => hyp_1.

(; Theorem: |- ((= (p x)) (p Data.Bool.T)) ;)

(; dict ;)

def thm_78 : x_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.true) -> hol.proof (hol.eq hol.bool (p_2 x_1) (p_2 hol.true)) :=
  x_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.eq hol.bool x_1 hol.true) => hol.APP_THM hol.bool hol.bool p_2 p_2 x_1 hol.true (thm_56 p_2) (hol.EQ_MP (hol.eq hol.bool x_1 hol.true) (hol.eq hol.bool x_1 hol.true) (thm_76 x_1) (thm_77 x_1 hyp_1)).

(; Theorem: |- ((= ((= (p Data.Bool.T)) Data.Bool.T)) ((= (p Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_79 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 hol.true) hol.true) (hol.eq hol.bool (p_1 hol.true) hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.REFL hol.bool (hol.eq hol.bool (p_1 hol.true) hol.true).

(; Theorem: |- ((= ((= (p Data.Bool.T)) Data.Bool.T)) ((= (p Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_80 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (p_1 hol.true) hol.true) (hol.eq hol.bool (p_1 hol.true) hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.TRANS hol.bool (hol.eq hol.bool (p_1 hol.true) hol.true) (hol.eq hol.bool (p_1 hol.true) hol.true) (hol.eq hol.bool (p_1 hol.true) hol.true) (thm_79 p_1) (thm_79 p_1).

(; Theorem: |- ((= (p Data.Bool.T)) ((= (p Data.Bool.T)) Data.Bool.T)) ;)

(; dict ;)

def thm_81 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.eq hol.bool (p_1 hol.true) (hol.eq hol.bool (p_1 hol.true) hol.true)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => (t_1 : hol.term hol.bool => thm_68 t_1) (p_1 hol.true).

(; Theorem: |- ((= (p Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_82 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_1 hol.true) -> hol.proof (hol.eq hol.bool (p_1 hol.true) hol.true) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_1 hol.true) => hol.EQ_MP (p_1 hol.true) (hol.eq hol.bool (p_1 hol.true) hol.true) (thm_81 p_1) (thm_51 p_1 hyp_1).

(; Theorem: |- ((= (p x)) Data.Bool.T) ;)

(; dict ;)

def thm_83 : x_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_2 hol.true) -> hyp_2 : hol.proof (hol.eq hol.bool x_1 hol.true) -> hol.proof (hol.eq hol.bool (p_2 x_1) hol.true) :=
  x_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_2 hol.true) => hyp_2 : hol.proof (hol.eq hol.bool x_1 hol.true) => hol.TRANS hol.bool (p_2 x_1) (p_2 hol.true) hol.true (thm_78 x_1 p_2 hyp_2) (hol.EQ_MP (hol.eq hol.bool (p_2 hol.true) hol.true) (hol.eq hol.bool (p_2 hol.true) hol.true) (thm_80 p_2) (thm_82 p_2 hyp_1)).

(; Theorem: |- ((= Data.Bool.T) (p x)) ;)

(; dict ;)

def thm_84 : x_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_2 hol.true) -> hyp_2 : hol.proof (hol.eq hol.bool x_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true (p_2 x_1)) :=
  x_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_2 hol.true) => hyp_2 : hol.proof (hol.eq hol.bool x_1 hol.true) => hol.SYM hol.bool (p_2 x_1) hol.true (thm_83 x_1 p_2 hyp_1 hyp_2).

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_85 : x_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_2 hol.true) -> hyp_2 : hol.proof (hol.eq hol.bool x_1 hol.true) -> hol.proof (p_2 x_1) :=
  x_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_2 hol.true) => hyp_2 : hol.proof (hol.eq hol.bool x_1 hol.true) => hol.EQ_MP hol.true (p_2 x_1) (thm_84 x_1 p_2 hyp_1 hyp_2) thm_1.

(; Theorem: |- ((Data.Bool.==> ((= x) Data.Bool.T)) (p x)) ;)

(; dict ;)

def thm_86 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> x_2 : hol.term hol.bool -> hyp_1 : hol.proof (p_1 hol.true) -> hol.proof (hol.imp (hol.eq hol.bool x_2 hol.true) (p_1 x_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => x_2 : hol.term hol.bool => hyp_1 : hol.proof (p_1 hol.true) => hyp_2 : hol.proof (hol.eq hol.bool x_2 hol.true) => thm_85 x_2 p_1 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool.\/ ((= x) Data.Bool.T)) ((= x) Data.Bool.F)) ;)

(; dict ;)

def thm_87 : x_1 : hol.term hol.bool -> hol.proof (hol.or (hol.eq hol.bool x_1 hol.true) (hol.eq hol.bool x_1 hol.false)) :=
  x_1 : hol.term hol.bool => thm_2 x_1.

(; Theorem: |- ((= (= ((Data.Bool.\/ P) Q))) (= ((Data.Bool.\/ P) Q))) ;)

(; dict ;)

def thm_88 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (hol.or P_2 Q_1)).

(; Theorem: |- ((= (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_89 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.BETA_CONV hol.bool hol.bool (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1.

(; Theorem: |- ((= ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q))) ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))))) ;)

(; dict ;)

def thm_90 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (hol.or P_2 Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1)) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_88 Q_1 P_2) (thm_89 Q_1 P_2).

(; Theorem: |- ((= (= (Data.Bool.\/ P))) (= (Data.Bool.\/ P))) ;)

(; dict ;)

def thm_91 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1))) :=
  P_1 : hol.term hol.bool => hol.REFL (hol.arr (hol.arr hol.bool hol.bool) hol.bool) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)).

(; Theorem: |- ((= (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_92 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.BETA_CONV hol.bool (hol.arr hol.bool hol.bool) (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1.

(; Theorem: |- ((= ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P))) ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))))) ;)

(; dict ;)

def thm_93 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))))) :=
  P_1 : hol.term hol.bool => hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1)) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3))) (thm_91 P_1) (thm_92 P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_94 : P_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool P_1 P_1) :=
  P_1 : hol.term hol.bool => hol.REFL hol.bool P_1.

(; Theorem: |- ((= (Data.Bool.\/ P)) (\lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) P)) ;)

(; dict ;)

def thm_95 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) :=
  P_1 : hol.term hol.bool => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.or (p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1 P_1 thm_3 (thm_94 P_1).

(; Theorem: |- ((= (Data.Bool.\/ P)) \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; dict ;)

def thm_96 : P_1 : hol.term hol.bool -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) :=
  P_1 : hol.term hol.bool => hol.EQ_MP (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) ((p_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp p_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) P_1)) (hol.eq (hol.arr hol.bool hol.bool) (hol.or P_1) (q_2 : hol.term hol.bool => hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_1 r_3) (hol.imp (hol.imp q_2 r_3) r_3)))) (thm_93 P_1) (thm_95 P_1).

(; Theorem: |- ((= Q) Q) ;)

(; dict ;)

def thm_97 : Q_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool Q_1 Q_1) :=
  Q_1 : hol.term hol.bool => hol.REFL hol.bool Q_1.

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (\lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r))) Q)) ;)

(; dict ;)

def thm_98 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.APP_THM hol.bool hol.bool (hol.or P_2) (q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1 Q_1 (thm_96 P_2) (thm_97 Q_1).

(; Theorem: |- ((= ((Data.Bool.\/ P) Q)) (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r)))) ;)

(; dict ;)

def thm_99 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.or P_2 Q_1) ((q_3 : hol.term hol.bool => hol.forall hol.bool (r_4 : hol.term hol.bool => hol.imp (hol.imp P_2 r_4) (hol.imp (hol.imp q_3 r_4) r_4))) Q_1)) (hol.eq hol.bool (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3)))) (thm_90 Q_1 P_2) (thm_98 Q_1 P_2).

(; Theorem: |- ((Data.Bool.\/ P) Q) ;)

(; dict ;)

def thm_100 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.or P_2 Q_1) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> P) r)) ((Data.Bool.==> ((Data.Bool.==> Q) r)) r))) ;)

(; dict ;)

def thm_101 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_2 Q_1) -> hol.proof (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_2 Q_1) => hol.EQ_MP (hol.or P_2 Q_1) (hol.forall hol.bool (r_3 : hol.term hol.bool => hol.imp (hol.imp P_2 r_3) (hol.imp (hol.imp Q_1 r_3) r_3))) (thm_99 Q_1 P_2) (thm_100 Q_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> P) R)) ((Data.Bool.==> ((Data.Bool.==> Q) R)) R)) ;)

(; dict ;)

def thm_102 : Q_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> P_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.or P_3 Q_1) -> hol.proof (hol.imp (hol.imp P_3 R_2) (hol.imp (hol.imp Q_1 R_2) R_2)) :=
  Q_1 : hol.term hol.bool => R_2 : hol.term hol.bool => P_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.or P_3 Q_1) => thm_101 Q_1 P_3 hyp_1 R_2.

(; Theorem: |- ((Data.Bool.==> P) R) ;)

(; dict ;)

def thm_103 : R_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_1) -> hol.proof (hol.imp P_2 R_1) :=
  R_1 : hol.term hol.bool => P_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_1) => hyp_1.

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> Q) R)) R) ;)

(; dict ;)

def thm_104 : P_1 : hol.term hol.bool -> R_2 : hol.term hol.bool -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_1 R_2) -> hyp_2 : hol.proof (hol.or P_1 Q_3) -> hol.proof (hol.imp (hol.imp Q_3 R_2) R_2) :=
  P_1 : hol.term hol.bool => R_2 : hol.term hol.bool => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_1 R_2) => hyp_2 : hol.proof (hol.or P_1 Q_3) => thm_102 Q_3 R_2 P_1 hyp_2 (thm_103 R_2 P_1 hyp_1).

(; Theorem: |- ((Data.Bool.==> Q) R) ;)

(; dict ;)

def thm_105 : R_1 : hol.term hol.bool -> Q_2 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp Q_2 R_1) -> hol.proof (hol.imp Q_2 R_1) :=
  R_1 : hol.term hol.bool => Q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp Q_2 R_1) => hyp_1.

(; Theorem: |- R ;)

(; dict ;)

def thm_106 : Q_1 : hol.term hol.bool -> P_2 : hol.term hol.bool -> R_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp P_2 R_3) -> hyp_2 : hol.proof (hol.imp Q_1 R_3) -> hyp_3 : hol.proof (hol.or P_2 Q_1) -> hol.proof R_3 :=
  Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_104 P_2 R_3 Q_1 hyp_1 hyp_3 (thm_105 R_3 Q_1 hyp_2).

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_107 : x_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool x_1 hol.false) (p_2 x_1)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool x_1 hol.true) (p_2 x_1)) -> hyp_3 : hol.proof (hol.or (hol.eq hol.bool x_1 hol.true) (hol.eq hol.bool x_1 hol.false)) -> hol.proof (p_2 x_1) :=
  x_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool x_1 hol.false) (p_2 x_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool x_1 hol.true) (p_2 x_1)) => hyp_3 : hol.proof (hol.or (hol.eq hol.bool x_1 hol.true) (hol.eq hol.bool x_1 hol.false)) => (Q_1 : hol.term hol.bool => P_2 : hol.term hol.bool => R_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp P_2 R_3) => hyp_2 : hol.proof (hol.imp Q_1 R_3) => hyp_3 : hol.proof (hol.or P_2 Q_1) => thm_106 Q_1 P_2 R_3 hyp_1 hyp_2 hyp_3) (hol.eq hol.bool x_1 hol.false) (hol.eq hol.bool x_1 hol.true) (p_2 x_1) hyp_2 hyp_1 hyp_3.

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_108 : x_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.imp (hol.eq hol.bool x_1 hol.false) (p_2 x_1)) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool x_1 hol.true) (p_2 x_1)) -> hol.proof (p_2 x_1) :=
  x_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.imp (hol.eq hol.bool x_1 hol.false) (p_2 x_1)) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool x_1 hol.true) (p_2 x_1)) => hol.PROVE_HYP (hol.or (hol.eq hol.bool x_1 hol.true) (hol.eq hol.bool x_1 hol.false)) (p_2 x_1) (thm_87 x_1) (hyp_3 : hol.proof (hol.or (hol.eq hol.bool x_1 hol.true) (hol.eq hol.bool x_1 hol.false)) => thm_107 x_1 p_2 hyp_1 hyp_2 hyp_3).

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_109 : x_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_2 hol.true) -> hyp_2 : hol.proof (hol.imp (hol.eq hol.bool x_1 hol.false) (p_2 x_1)) -> hol.proof (p_2 x_1) :=
  x_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_2 hol.true) => hyp_2 : hol.proof (hol.imp (hol.eq hol.bool x_1 hol.false) (p_2 x_1)) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool x_1 hol.true) (p_2 x_1)) (p_2 x_1) (thm_86 p_2 x_1 hyp_1) (hyp_3 : hol.proof (hol.imp (hol.eq hol.bool x_1 hol.true) (p_2 x_1)) => thm_108 x_1 p_2 hyp_2 hyp_3).

(; Theorem: |- (p x) ;)

(; dict ;)

def thm_110 : x_1 : hol.term hol.bool -> p_2 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_2 hol.false) -> hyp_2 : hol.proof (p_2 hol.true) -> hol.proof (p_2 x_1) :=
  x_1 : hol.term hol.bool => p_2 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_2 hol.false) => hyp_2 : hol.proof (p_2 hol.true) => hol.PROVE_HYP (hol.imp (hol.eq hol.bool x_1 hol.false) (p_2 x_1)) (p_2 x_1) (thm_74 p_2 x_1 hyp_1) (hyp_3 : hol.proof (hol.imp (hol.eq hol.bool x_1 hol.false) (p_2 x_1)) => thm_109 x_1 p_2 hyp_2 hyp_3).

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_111 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_1 hol.false) -> hyp_2 : hol.proof (p_1 hol.true) -> hol.proof (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_1 hol.false) => hyp_2 : hol.proof (p_1 hol.true) => x_2 : hol.term hol.bool => thm_110 x_2 p_1 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_112 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_1 hol.false) -> hyp_2 : hol.proof (p_1 hol.true) -> hol.proof (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_1 hol.false) => hyp_2 : hol.proof (p_1 hol.true) => hol.PROVE_HYP (p_1 hol.true) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)) (thm_51 p_1 hyp_2) (hyp_3 : hol.proof (p_1 hol.true) => hol.EQ_MP (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)) (thm_55 p_1) (thm_111 p_1 hyp_1 hyp_3)).

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_113 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_1 hol.false) -> hyp_2 : hol.proof (p_1 hol.true) -> hol.proof (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_1 hol.false) => hyp_2 : hol.proof (p_1 hol.true) => hol.PROVE_HYP (p_1 hol.false) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)) (thm_50 p_1 hyp_1) (hyp_3 : hol.proof (p_1 hol.false) => thm_112 p_1 hyp_3 hyp_2).

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_114 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (p_1 hol.false) -> hyp_2 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) -> hol.proof (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (p_1 hol.false) => hyp_2 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) => hol.PROVE_HYP (p_1 hol.true) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)) (thm_49 p_1 hyp_2) (hyp_3 : hol.proof (p_1 hol.true) => thm_113 p_1 hyp_1 hyp_3).

(; Theorem: |- (Data.Bool.! \lambda x. (p x)) ;)

(; dict ;)

def thm_115 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hyp_1 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) -> hol.proof (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) => hol.PROVE_HYP (p_1 hol.false) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)) (thm_42 p_1 hyp_1) (hyp_2 : hol.proof (p_1 hol.false) => thm_114 p_1 hyp_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool./\ (p Data.Bool.F)) (p Data.Bool.T))) (Data.Bool.! \lambda x. (p x))) ;)

(; dict ;)

def thm_116 : p_1 : hol.term (hol.arr hol.bool hol.bool) -> hol.proof (hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => hyp_1 : hol.proof (hol.and (p_1 hol.false) (p_1 hol.true)) => thm_115 p_1 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (p Data.Bool.F)) (p Data.Bool.T))) (Data.Bool.! \lambda x. (p x)))) ;)

(; dict ;)

def thm_117 : hol.proof (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)))) :=
  p_1 : hol.term (hol.arr hol.bool hol.bool) => thm_116 p_1.

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (p Data.Bool.F)) (p Data.Bool.T))) (Data.Bool.! \lambda x. (p x)))) ;)

(; thm ;)

def thm_118 : hol.proof (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)))) :=
  hol.EQ_MP (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)))) (hol.forall (hol.arr hol.bool hol.bool) (p_1 : hol.term (hol.arr hol.bool hol.bool) => hol.imp (hol.and (p_1 hol.false) (p_1 hol.true)) (hol.forall hol.bool (x_2 : hol.term hol.bool => p_1 x_2)))) thm_16 thm_117.

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_119 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b))))) \lambda a. (Data.Bool.! \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b))))) ;)

(; dict ;)

def thm_120 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))) (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))))) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))).

(; Theorem: |- ((= \lambda a. (Data.Bool.! \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b))))) \lambda a. (Data.Bool.! \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b))))) ;)

(; dict ;)

def thm_121 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))) (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))))) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))) (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))) (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))) (thm_120 A) (thm_120 A).

(; Theorem: |- ((= (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b)))))) (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b)))))) ;)

(; dict ;)

def thm_122 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))))) (hol.forall A (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))) (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))) (thm_119 A) (thm_121 A).

(; Theorem: |- ((= \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b)))) \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b)))) ;)

(; dict ;)

def thm_123 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))) (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))) :=
  A : hol.type => a_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))).

(; Theorem: |- ((= \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b)))) \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b)))) ;)

(; dict ;)

def thm_124 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))) (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))) :=
  A : hol.type => a_1 : hol.term A => hol.TRANS (hol.arr A hol.bool) (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))) (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))) (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))) (thm_123 A a_1) (thm_123 A a_1).

(; Theorem: |- ((= (Data.Bool.! \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b))))) (Data.Bool.! \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b))))) ;)

(; dict ;)

def thm_125 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))) (hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))))) :=
  A : hol.type => a_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))) (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))) (thm_119 A) (thm_124 A a_1).

(; Theorem: |- ((= (\lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b)) \lambda x. (((Data.Bool.cond x) b) a))) ((Data.Bool./\ ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F)) a)) ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T)) b))) ;)

(; dict ;)

def thm_126 : A : hol.type -> b_1 : hol.term A -> a_2 : hol.term A -> hol.proof (hol.eq hol.bool ((f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_2) (hol.eq A (f_3 hol.true) b_1)) (x_3 : hol.term hol.bool => hol.cond A x_3 b_1 a_2)) (hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_1 a_2) hol.false) a_2) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_1 a_2) hol.true) b_1))) :=
  A : hol.type => b_1 : hol.term A => a_2 : hol.term A => hol.BETA_CONV (hol.arr hol.bool A) hol.bool (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_2) (hol.eq A (f_3 hol.true) b_1)) (x_3 : hol.term hol.bool => hol.cond A x_3 b_1 a_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F)) a)) ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T)) b))) (\lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b)) \lambda x. (((Data.Bool.cond x) b) a))) ;)

(; dict ;)

def thm_127 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2)) ((f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)) (x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.SYM hol.bool ((f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)) (x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1)) (hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2)) (thm_126 A b_2 a_1).

(; Theorem: |- ((= Data.Bool./\) Data.Bool./\) ;)

(; dict ;)

def thm_128 : hol.proof (hol.eq (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and hol.and) :=
  hol.REFL (hol.arr hol.bool (hol.arr hol.bool hol.bool)) hol.and.

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_129 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A hol.bool)) (hol.eq A) (hol.eq A)) :=
  A : hol.type => hol.REFL (hol.arr A (hol.arr A hol.bool)) (hol.eq A).

(; Theorem: |- ((= (\lambda x. (((Data.Bool.cond x) b) a) x)) (((Data.Bool.cond x) b) a)) ;)

(; dict ;)

def thm_130 : A : hol.type -> x_1 : hol.term hol.bool -> a_2 : hol.term A -> b_3 : hol.term A -> hol.proof (hol.eq A ((x_4 : hol.term hol.bool => hol.cond A x_4 b_3 a_2) x_1) (hol.cond A x_1 b_3 a_2)) :=
  A : hol.type => x_1 : hol.term hol.bool => a_2 : hol.term A => b_3 : hol.term A => hol.BETA_CONV hol.bool A (x_4 : hol.term hol.bool => hol.cond A x_4 b_3 a_2) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. (((Data.Bool.cond x) b) a) x)) \lambda x. (((Data.Bool.cond x) b) a)) ;)

(; dict ;)

def thm_131 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool A) (x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) (x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.ABS_THM hol.bool A (x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) (x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) (x_3 : hol.term hol.bool => thm_130 A x_3 a_1 b_2).

(; Theorem: |- ((= Data.Bool.F) Data.Bool.F) ;)

(; dict ;)

def thm_132 : hol.proof (hol.eq hol.bool hol.false hol.false) :=
  hol.REFL hol.bool hol.false.

(; Theorem: |- ((= (\lambda x. (\lambda x. (((Data.Bool.cond x) b) a) x) Data.Bool.F)) (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F)) ;)

(; dict ;)

def thm_133 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq A ((x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) hol.false) ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false)) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.APP_THM hol.bool A (x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) (x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false hol.false (thm_131 A a_1 b_2) thm_132.

(; Theorem: |- ((= (= (\lambda x. (\lambda x. (((Data.Bool.cond x) b) a) x) Data.Bool.F))) (= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F))) ;)

(; dict ;)

def thm_134 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A ((x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) hol.false)) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false))) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) ((x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) hol.false) ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) (thm_129 A) (thm_133 A a_1 b_2).

(; Theorem: |- ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F)) (((Data.Bool.cond Data.Bool.F) b) a)) ;)

(; dict ;)

def thm_135 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) (hol.cond A hol.false b_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.BETA_CONV hol.bool A (x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false.

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. (((Data.Bool.cond x) b) a) x) Data.Bool.F)) (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F))) ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F)) (((Data.Bool.cond Data.Bool.F) b) a))) ;)

(; dict ;)

def thm_136 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) hol.false) ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false)) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) (hol.cond A hol.false b_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A ((x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) hol.false)) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false)) ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) (hol.cond A hol.false b_2 a_1) (thm_134 A a_1 b_2) (thm_135 A a_1 b_2).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_137 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_138 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (thm_137 A t2_1 t1_2) (thm_137 A t2_1 t1_2).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_139 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))).

(; Theorem: |- ((= \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_140 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (thm_139 A) (thm_139 A).

(; Theorem: |- ((= (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))))) (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))))) ;)

(; dict ;)

def thm_141 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (thm_119 A) (thm_140 A).

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_142 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) :=
  A : hol.type => t1_1 : hol.term A => hol.REFL (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)).

(; Theorem: |- ((= \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_143 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) :=
  A : hol.type => t1_1 : hol.term A => hol.TRANS (hol.arr A hol.bool) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (thm_142 A t1_1) (thm_142 A t1_1).

(; Theorem: |- ((= (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_144 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => t1_1 : hol.term A => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) (thm_119 A) (thm_143 A t1_1).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ;)

(; dict ;)

def thm_145 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.REFL hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ;)

(; dict ;)

def thm_146 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (thm_145 A t2_1 t1_2) (thm_145 A t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ;)

(; dict ;)

def thm_147 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1)) :=
  A : hol.type => t1_1 : hol.term A => thm_4 A t1_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1) ;)

(; dict ;)

def thm_148 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_147 A t1_2 t2_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x))) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_149 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hol.SYM hol.bool (hol.and p_2 q_1) (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (thm_29 q_1 p_2).

(; Theorem: |- ((Data.Bool.==> p) ((Data.Bool.==> q) x)) ;)

(; dict ;)

def thm_150 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) -> hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> q) x) ;)

(; dict ;)

def thm_151 : p_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> q_3 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) -> hol.proof (hol.imp q_3 x_2) :=
  p_1 : hol.term hol.bool => x_2 : hol.term hol.bool => q_3 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hyp_2 : hol.proof (hol.imp p_1 (hol.imp q_3 x_2)) => thm_150 x_2 q_3 p_1 hyp_2 (thm_33 p_1 hyp_1).

(; Theorem: |- x ;)

(; dict ;)

def thm_152 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> x_3 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) -> hol.proof x_3 :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => x_3 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hyp_3 : hol.proof (hol.imp p_2 (hol.imp q_1 x_3)) => thm_151 p_2 x_3 q_1 hyp_1 hyp_3 (thm_34 q_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x) ;)

(; dict ;)

def thm_153 : x_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> p_3 : hol.term hol.bool -> hyp_1 : hol.proof p_3 -> hyp_2 : hol.proof q_2 -> hol.proof (hol.imp (hol.imp p_3 (hol.imp q_2 x_1)) x_1) :=
  x_1 : hol.term hol.bool => q_2 : hol.term hol.bool => p_3 : hol.term hol.bool => hyp_1 : hol.proof p_3 => hyp_2 : hol.proof q_2 => hyp_3 : hol.proof (hol.imp p_3 (hol.imp q_2 x_1)) => thm_152 q_2 p_3 x_1 hyp_1 hyp_2 hyp_3.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((Data.Bool.==> p) ((Data.Bool.==> q) x))) x)) ;)

(; dict ;)

def thm_154 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => x_3 : hol.term hol.bool => thm_153 x_3 q_1 p_2 hyp_1 hyp_2.

(; Theorem: |- ((Data.Bool./\ p) q) ;)

(; dict ;)

def thm_155 : q_1 : hol.term hol.bool -> p_2 : hol.term hol.bool -> hyp_1 : hol.proof p_2 -> hyp_2 : hol.proof q_1 -> hol.proof (hol.and p_2 q_1) :=
  q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof p_2 => hyp_2 : hol.proof q_1 => hol.EQ_MP (hol.forall hol.bool (x_3 : hol.term hol.bool => hol.imp (hol.imp p_2 (hol.imp q_1 x_3)) x_3)) (hol.and p_2 q_1) (thm_149 q_1 p_2) (thm_154 q_1 p_2 hyp_1 hyp_2).

(; Theorem: |- ((= q) ((Data.Bool./\ p) q)) ;)

(; dict ;)

def thm_156 : p_1 : hol.term hol.bool -> q_2 : hol.term hol.bool -> hyp_1 : hol.proof p_1 -> hol.proof (hol.eq hol.bool q_2 (hol.and p_1 q_2)) :=
  p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => hol.PROP_EXT q_2 (hol.and p_1 q_2) (hyp_2 : hol.proof (hol.and p_1 q_2) => thm_47 p_1 q_2 hyp_2) (hyp_2 : hol.proof q_2 => thm_155 q_2 p_1 hyp_1 hyp_2).

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_157 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hyp_1 : hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_156 p_1 q_2 hyp_1) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) hyp_1.

(; Theorem: |- ((= ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_158 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1))) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.PROVE_HYP (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq hol.bool (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1))) ((A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (thm_146 A t2_1 t1_2) (thm_148 A t2_1 t1_2)) A t2_1 t1_2) (hyp_1 : hol.proof (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) => thm_157 A t2_1 t1_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda t2. ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_159 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.forall A (t2_2 : hol.term A => hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)) :=
  A : hol.type => t1_1 : hol.term A => thm_5 A t1_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2) ;)

(; dict ;)

def thm_160 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_159 A t1_2 t2_1.

(; Theorem: |- ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)) ;)

(; dict ;)

def thm_161 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) (thm_158 A t2_1 t1_2) ((A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (thm_137 A t2_1 t1_2) (thm_160 A t2_1 t1_2)) A t2_1 t1_2).

(; Theorem: |- (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2))) ;)

(; dict ;)

def thm_162 : A : hol.type -> t1_1 : hol.term A -> hol.proof (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) :=
  A : hol.type => t1_1 : hol.term A => t2_2 : hol.term A => thm_161 A t2_2 t1_1.

(; Theorem: |- (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool./\ ((= (((Data.Bool.cond Data.Bool.T) t1) t2)) t1)) ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2)))) ;)

(; dict ;)

def thm_163 : A : hol.type -> hol.proof (hol.forall A (t1_1 : hol.term A => hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2)))) :=
  A : hol.type => t1_1 : hol.term A => hol.EQ_MP (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (hol.forall A (t2_2 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_1 t2_2) t1_1) (hol.eq A (hol.cond A hol.false t1_1 t2_2) t2_2))) (thm_144 A t1_1) (thm_162 A t1_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2) ;)

(; dict ;)

def thm_164 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hyp_1 : hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) -> hol.proof (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hyp_1 : hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_1 q_2) => thm_47 p_1 q_2 hyp_1) (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) hyp_1.

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) t1) t2)) t2) ;)

(; dict ;)

def thm_165 : A : hol.type -> t2_1 : hol.term A -> t1_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) :=
  A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.PROVE_HYP (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.EQ_MP (hol.forall A (t1_3 : hol.term A => hol.forall A (t2_4 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_3 t2_4) t1_3) (hol.eq A (hol.cond A hol.false t1_3 t2_4) t2_4)))) (hol.forall A (t1_3 : hol.term A => hol.forall A (t2_4 : hol.term A => hol.and (hol.eq A (hol.cond A hol.true t1_3 t2_4) t1_3) (hol.eq A (hol.cond A hol.false t1_3 t2_4) t2_4)))) (thm_141 A) (thm_163 A) t1_2 t2_1) (hyp_1 : hol.proof (hol.and (hol.eq A (hol.cond A hol.true t1_2 t2_1) t1_2) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1)) => thm_164 A t2_1 t1_2 hyp_1).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.F) b) a)) a) ;)

(; dict ;)

def thm_166 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.false b_2 a_1) a_1) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => hol.EQ_MP (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (hol.eq A (hol.cond A hol.false t1_2 t2_1) t2_1) (thm_138 A t2_1 t1_2) (thm_165 A t2_1 t1_2)) A t2_1 t1_2) A a_1 b_2.

(; Theorem: |- ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F)) a) ;)

(; dict ;)

def thm_167 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.TRANS A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) (hol.cond A hol.false b_2 a_1) a_1 (hol.EQ_MP (hol.eq A ((x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) hol.false) ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false)) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) (hol.cond A hol.false b_2 a_1)) (thm_136 A a_1 b_2) (thm_133 A a_1 b_2)) (thm_166 A a_1 b_2).

(; Theorem: |- ((= (= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F))) (= a)) ;)

(; dict ;)

def thm_168 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false)) (hol.eq A a_1)) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1 (thm_129 A) (thm_167 A a_1 b_2).

(; Theorem: |- ((= a) a) ;)

(; dict ;)

def thm_169 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq A a_1 a_1) :=
  A : hol.type => a_1 : hol.term A => hol.REFL A a_1.

(; Theorem: |- ((= ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F)) a)) ((= a) a)) ;)

(; dict ;)

def thm_170 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) (hol.eq A a_1 a_1)) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false)) (hol.eq A a_1) a_1 a_1 (thm_168 A a_1 b_2) (thm_169 A a_1).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_171 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_172 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_171 A x_1) (thm_171 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_173 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_174 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_173 A) (thm_173 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_175 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_119 A) (thm_174 A).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_176 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_68 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_177 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_6 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_178 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_176 A x_1) (thm_177 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_179 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_171 A x_1) (thm_178 A x_1)) A x_1.

(; Theorem: |- ((= ((= a) a)) Data.Bool.T) ;)

(; dict ;)

def thm_180 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A a_1 a_1) hol.true) :=
  A : hol.type => a_1 : hol.term A => (A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_172 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_175 A) (thm_179 A) x_1)) A x_1) A a_1.

(; Theorem: |- ((= ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F)) a)) Data.Bool.T) ;)

(; dict ;)

def thm_181 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) hol.true) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.TRANS hol.bool (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) (hol.eq A a_1 a_1) hol.true (thm_170 A a_1 b_2) (thm_180 A a_1).

(; Theorem: |- ((= (Data.Bool./\ ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F)) a))) (Data.Bool./\ Data.Bool.T)) ;)

(; dict ;)

def thm_182 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1)) (hol.and hol.true)) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.APP_THM hol.bool (hol.arr hol.bool hol.bool) hol.and hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) hol.true thm_128 (thm_181 A a_1 b_2).

(; Theorem: |- ((= Data.Bool.T) Data.Bool.T) ;)

(; dict ;)

def thm_183 : hol.proof (hol.eq hol.bool hol.true hol.true) :=
  hol.REFL hol.bool hol.true.

(; Theorem: |- ((= (\lambda x. (\lambda x. (((Data.Bool.cond x) b) a) x) Data.Bool.T)) (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T)) ;)

(; dict ;)

def thm_184 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq A ((x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) hol.true) ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true)) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.APP_THM hol.bool A (x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) (x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true hol.true (thm_131 A a_1 b_2) thm_183.

(; Theorem: |- ((= (= (\lambda x. (\lambda x. (((Data.Bool.cond x) b) a) x) Data.Bool.T))) (= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T))) ;)

(; dict ;)

def thm_185 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A ((x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) hol.true)) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true))) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) ((x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) hol.true) ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) (thm_129 A) (thm_184 A a_1 b_2).

(; Theorem: |- ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T)) (((Data.Bool.cond Data.Bool.T) b) a)) ;)

(; dict ;)

def thm_186 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) (hol.cond A hol.true b_2 a_1)) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.BETA_CONV hol.bool A (x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true.

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. (((Data.Bool.cond x) b) a) x) Data.Bool.T)) (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T))) ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T)) (((Data.Bool.cond Data.Bool.T) b) a))) ;)

(; dict ;)

def thm_187 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) hol.true) ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true)) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) (hol.cond A hol.true b_2 a_1))) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A ((x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) hol.true)) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true)) ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) (hol.cond A hol.true b_2 a_1) (thm_185 A a_1 b_2) (thm_186 A a_1 b_2).

(; Theorem: |- ((= (((Data.Bool.cond Data.Bool.T) b) a)) b) ;)

(; dict ;)

def thm_188 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq A (hol.cond A hol.true b_2 a_1) b_2) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => (A : hol.type => t2_1 : hol.term A => t1_2 : hol.term A => thm_148 A t2_1 t1_2) A a_1 b_2.

(; Theorem: |- ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T)) b) ;)

(; dict ;)

def thm_189 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.TRANS A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) (hol.cond A hol.true b_2 a_1) b_2 (hol.EQ_MP (hol.eq A ((x_3 : hol.term hol.bool => (x_4 : hol.term hol.bool => hol.cond A x_4 b_2 a_1) x_3) hol.true) ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true)) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) (hol.cond A hol.true b_2 a_1)) (thm_187 A a_1 b_2) (thm_184 A a_1 b_2)) (thm_188 A a_1 b_2).

(; Theorem: |- ((= (= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T))) (= b)) ;)

(; dict ;)

def thm_190 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true)) (hol.eq A b_2)) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2 (thm_129 A) (thm_189 A a_1 b_2).

(; Theorem: |- ((= b) b) ;)

(; dict ;)

def thm_191 : A : hol.type -> b_1 : hol.term A -> hol.proof (hol.eq A b_1 b_1) :=
  A : hol.type => b_1 : hol.term A => hol.REFL A b_1.

(; Theorem: |- ((= ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T)) b)) ((= b) b)) ;)

(; dict ;)

def thm_192 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2) (hol.eq A b_2 b_2)) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true)) (hol.eq A b_2) b_2 b_2 (thm_190 A a_1 b_2) (thm_191 A b_2).

(; Theorem: |- ((= ((= b) b)) Data.Bool.T) ;)

(; dict ;)

def thm_193 : A : hol.type -> b_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A b_1 b_1) hol.true) :=
  A : hol.type => b_1 : hol.term A => (A : hol.type => x_1 : hol.term A => thm_178 A x_1) A b_1.

(; Theorem: |- ((= ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T)) b)) Data.Bool.T) ;)

(; dict ;)

def thm_194 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2) hol.true) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.TRANS hol.bool (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2) (hol.eq A b_2 b_2) hol.true (thm_192 A a_1 b_2) (thm_193 A b_2).

(; Theorem: |- ((= ((Data.Bool./\ ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F)) a)) ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T)) b))) ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) ;)

(; dict ;)

def thm_195 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2)) (hol.and hol.true hol.true)) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.APP_THM hol.bool hol.bool (hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1)) (hol.and hol.true) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2) hol.true (thm_182 A a_1 b_2) (thm_194 A a_1 b_2).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_196 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ;)

(; dict ;)

def thm_197 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_196 t_1) (thm_196 t_1).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_198 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.REFL (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))).

(; Theorem: |- ((= \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_199 : hol.proof (hol.eq (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  hol.TRANS (hol.arr hol.bool hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_198 thm_198.

(; Theorem: |- ((= (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))))) ;)

(; dict ;)

def thm_200 : hol.proof (hol.eq hol.bool (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))))) :=
  hol.APP_THM (hol.arr hol.bool hol.bool) hol.bool (hol.forall hol.bool) (hol.forall hol.bool) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) thm_52 thm_199.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_201 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_7 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_202 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_156 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_203 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_196 t_1) (thm_201 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) => thm_202 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_204 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ;)

(; dict ;)

def thm_205 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_204 t_1) (thm_204 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.T)) t) ;)

(; dict ;)

def thm_206 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) :=
  t_1 : hol.term hol.bool => thm_8 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_207 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_156 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_208 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (thm_205 t_1) (thm_206 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.true) t_1) => thm_207 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_209 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ;)

(; dict ;)

def thm_210 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_209 t_1) (thm_209 t_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F) ;)

(; dict ;)

def thm_211 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) :=
  t_1 : hol.term hol.bool => thm_9 t_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_212 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_156 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_213 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.EQ_MP (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (thm_210 t_1) (thm_211 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and hol.false t_1) hol.false) => thm_212 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_214 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ;)

(; dict ;)

def thm_215 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_214 t_1) (thm_214 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F) ;)

(; dict ;)

def thm_216 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) :=
  t_1 : hol.term hol.bool => thm_10 t_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_217 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => (p_1 : hol.term hol.bool => q_2 : hol.term hol.bool => hyp_1 : hol.proof p_1 => thm_156 p_1 q_2 hyp_1) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1) hyp_1.

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_218 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (thm_215 t_1) (thm_216 t_1)) (hyp_1 : hol.proof (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) => thm_217 t_1 hyp_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_219 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1).

(; Theorem: |- ((= ((= ((Data.Bool./\ t) t)) t)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_220 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_219 t_1) (thm_219 t_1).

(; Theorem: |- ((= ((Data.Bool./\ t) t)) t) ;)

(; dict ;)

def thm_221 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and t_1 t_1) t_1) :=
  t_1 : hol.term hol.bool => thm_11 t_1.

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)) ;)

(; dict ;)

def thm_222 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (thm_218 t_1) (hol.EQ_MP (hol.eq hol.bool (hol.and t_1 t_1) t_1) (hol.eq hol.bool (hol.and t_1 t_1) t_1) (thm_220 t_1) (thm_221 t_1)).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))) ;)

(; dict ;)

def thm_223 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (thm_213 t_1) (thm_222 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))) ;)

(; dict ;)

def thm_224 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (thm_208 t_1) (thm_223 t_1).

(; Theorem: |- ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t))))) ;)

(; dict ;)

def thm_225 : t_1 : hol.term hol.bool -> hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) :=
  t_1 : hol.term hol.bool => hol.EQ_MP (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (thm_203 t_1) (thm_224 t_1).

(; Theorem: |- (Data.Bool.! \lambda t. ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.T) t)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.T)) t)) ((Data.Bool./\ ((= ((Data.Bool./\ Data.Bool.F) t)) Data.Bool.F)) ((Data.Bool./\ ((= ((Data.Bool./\ t) Data.Bool.F)) Data.Bool.F)) ((= ((Data.Bool./\ t) t)) t)))))) ;)

(; dict ;)

def thm_226 : hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))))) :=
  t_1 : hol.term hol.bool => thm_225 t_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_227 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => (q_1 : hol.term hol.bool => p_2 : hol.term hol.bool => hyp_1 : hol.proof (hol.and p_2 q_1) => thm_40 q_1 p_2 hyp_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1)))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) hyp_1.

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) t)) t) ;)

(; dict ;)

def thm_228 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.and hol.true t_1) t_1) :=
  t_1 : hol.term hol.bool => hol.PROVE_HYP (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.EQ_MP (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) (hol.forall hol.bool (t_2 : hol.term hol.bool => hol.and (hol.eq hol.bool (hol.and hol.true t_2) t_2) (hol.and (hol.eq hol.bool (hol.and t_2 hol.true) t_2) (hol.and (hol.eq hol.bool (hol.and hol.false t_2) hol.false) (hol.and (hol.eq hol.bool (hol.and t_2 hol.false) hol.false) (hol.eq hol.bool (hol.and t_2 t_2) t_2)))))) thm_200 thm_226 t_1) (hyp_1 : hol.proof (hol.and (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.and (hol.eq hol.bool (hol.and t_1 hol.true) t_1) (hol.and (hol.eq hol.bool (hol.and hol.false t_1) hol.false) (hol.and (hol.eq hol.bool (hol.and t_1 hol.false) hol.false) (hol.eq hol.bool (hol.and t_1 t_1) t_1))))) => thm_227 t_1 hyp_1).

(; Theorem: |- ((= ((Data.Bool./\ Data.Bool.T) Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_229 : hol.proof (hol.eq hol.bool (hol.and hol.true hol.true) hol.true) :=
  (t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.and hol.true t_1) t_1) (hol.eq hol.bool (hol.and hol.true t_1) t_1) (thm_197 t_1) (thm_228 t_1)) hol.true.

(; Theorem: |- ((= ((Data.Bool./\ ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F)) a)) ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T)) b))) Data.Bool.T) ;)

(; dict ;)

def thm_230 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2)) hol.true) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.TRANS hol.bool (hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2)) (hol.and hol.true hol.true) hol.true (thm_195 A a_1 b_2) thm_229.

(; Theorem: |- ((= Data.Bool.T) ((Data.Bool./\ ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F)) a)) ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T)) b))) ;)

(; dict ;)

def thm_231 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.eq hol.bool hol.true (hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2))) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.SYM hol.bool (hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2)) hol.true (thm_230 A a_1 b_2).

(; Theorem: |- ((Data.Bool./\ ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.F)) a)) ((= (\lambda x. (((Data.Bool.cond x) b) a) Data.Bool.T)) b)) ;)

(; dict ;)

def thm_232 : A : hol.type -> a_1 : hol.term A -> b_2 : hol.term A -> hol.proof (hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2)) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => hol.EQ_MP hol.true (hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.false) a_1) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_2 a_1) hol.true) b_2)) (thm_231 A a_1 b_2) thm_1.

(; Theorem: |- (\lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b)) \lambda x. (((Data.Bool.cond x) b) a)) ;)

(; dict ;)

def thm_233 : A : hol.type -> b_1 : hol.term A -> a_2 : hol.term A -> hol.proof ((f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_2) (hol.eq A (f_3 hol.true) b_1)) (x_3 : hol.term hol.bool => hol.cond A x_3 b_1 a_2)) :=
  A : hol.type => b_1 : hol.term A => a_2 : hol.term A => hol.EQ_MP (hol.and (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_1 a_2) hol.false) a_2) (hol.eq A ((x_3 : hol.term hol.bool => hol.cond A x_3 b_1 a_2) hol.true) b_1)) ((f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_2) (hol.eq A (f_3 hol.true) b_1)) (x_3 : hol.term hol.bool => hol.cond A x_3 b_1 a_2)) (thm_127 A a_2 b_1) (thm_232 A a_2 b_1).

(; Theorem: |- ((= (= (Data.Bool.? P))) (= (Data.Bool.? P))) ;)

(; dict ;)

def thm_234 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr hol.bool hol.bool) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)).

(; Theorem: |- ((= (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_235 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.BETA_CONV (hol.arr A hol.bool) hol.bool (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1.

(; Theorem: |- ((= ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P))) ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q)))) ;)

(; dict ;)

def thm_236 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM hol.bool hol.bool (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_234 A P_1) (thm_235 A P_1).

(; Theorem: |- ((= P) P) ;)

(; dict ;)

def thm_237 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq (hol.arr A hol.bool) P_1 P_1) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.REFL (hol.arr A hol.bool) P_1.

(; Theorem: |- ((= (Data.Bool.? P)) (\lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q)) P)) ;)

(; dict ;)

def thm_238 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.APP_THM (hol.arr A hol.bool) hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool)) (p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1 P_1 (thm_12 A) (thm_237 A P_1).

(; Theorem: |- ((= (Data.Bool.? P)) (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) ;)

(; dict ;)

def thm_239 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.EQ_MP (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) ((p_2 : hol.term (hol.arr A hol.bool) => hol.forall hol.bool (q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (p_2 x_4) q_3)) q_3)) P_1)) (hol.eq hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2))) (thm_236 A P_1) (thm_238 A P_1).

(; Theorem: |- ((= (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) q))) q))) (Data.Bool.? P)) ;)

(; dict ;)

def thm_240 : A : hol.type -> P_1 : hol.term (hol.arr A hol.bool) -> hol.proof (hol.eq hol.bool (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1)) :=
  A : hol.type => P_1 : hol.term (hol.arr A hol.bool) => hol.SYM hol.bool (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_1) (hol.forall hol.bool (q_2 : hol.term hol.bool => hol.imp (hol.forall A (x_3 : hol.term A => hol.imp (P_1 x_3) q_2)) q_2)) (thm_239 A P_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q)) ;)

(; dict ;)

def thm_241 : A : hol.type -> Q_1 : hol.term hol.bool -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) :=
  A : hol.type => Q_1 : hol.term hol.bool => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.imp (P_2 x_3) Q_1)) => hyp_1.

(; Theorem: |- ((Data.Bool.==> (P x)) Q) ;)

(; dict ;)

def thm_242 : A : hol.type -> Q_1 : hol.term hol.bool -> x_2 : hol.term A -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) -> hol.proof (hol.imp (P_3 x_2) Q_1) :=
  A : hol.type => Q_1 : hol.term hol.bool => x_2 : hol.term A => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_1)) => thm_241 A Q_1 P_3 hyp_1 x_2.

(; Theorem: |- (P x) ;)

(; dict ;)

def thm_243 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (P_2 x_1) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hyp_1.

(; Theorem: |- Q ;)

(; dict ;)

def thm_244 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> Q_3 : hol.term hol.bool -> hyp_1 : hol.proof (P_2 x_1) -> hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) -> hol.proof Q_3 :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => Q_3 : hol.term hol.bool => hyp_1 : hol.proof (P_2 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) => thm_242 A Q_3 x_1 P_2 hyp_2 (thm_243 A x_1 P_2 hyp_1).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q) ;)

(; dict ;)

def thm_245 : A : hol.type -> x_1 : hol.term A -> Q_2 : hol.term hol.bool -> P_3 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_3 x_1) -> hol.proof (hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) Q_2) :=
  A : hol.type => x_1 : hol.term A => Q_2 : hol.term hol.bool => P_3 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_3 x_1) => hyp_2 : hol.proof (hol.forall A (x_4 : hol.term A => hol.imp (P_3 x_4) Q_2)) => thm_244 A x_1 P_3 Q_2 hyp_1 hyp_2.

(; Theorem: |- (Data.Bool.! \lambda Q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (P x)) Q))) Q)) ;)

(; dict ;)

def thm_246 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => Q_3 : hol.term hol.bool => thm_245 A x_1 Q_3 P_2 hyp_1.

(; Theorem: |- (Data.Bool.? P) ;)

(; dict ;)

def thm_247 : A : hol.type -> x_1 : hol.term A -> P_2 : hol.term (hol.arr A hol.bool) -> hyp_1 : hol.proof (P_2 x_1) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) :=
  A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => hol.EQ_MP (hol.forall hol.bool (Q_3 : hol.term hol.bool => hol.imp (hol.forall A (x_4 : hol.term A => hol.imp (P_2 x_4) Q_3)) Q_3)) (Data_2EBool_2E_3F (hol.arr (hol.arr A hol.bool) hol.bool) P_2) (thm_240 A P_2) (thm_246 A x_1 P_2 hyp_1).

(; Theorem: |- (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b))) ;)

(; dict ;)

def thm_248 : A : hol.type -> b_1 : hol.term A -> a_2 : hol.term A -> hyp_1 : hol.proof ((f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_2) (hol.eq A (f_3 hol.true) b_1)) (x_3 : hol.term hol.bool => hol.cond A x_3 b_1 a_2)) -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_2) (hol.eq A (f_3 hol.true) b_1))) :=
  A : hol.type => b_1 : hol.term A => a_2 : hol.term A => hyp_1 : hol.proof ((f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_2) (hol.eq A (f_3 hol.true) b_1)) (x_3 : hol.term hol.bool => hol.cond A x_3 b_1 a_2)) => (A : hol.type => x_1 : hol.term A => P_2 : hol.term (hol.arr A hol.bool) => hyp_1 : hol.proof (P_2 x_1) => thm_247 A x_1 P_2 hyp_1) (hol.arr hol.bool A) (x_3 : hol.term hol.bool => hol.cond A x_3 b_1 a_2) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_2) (hol.eq A (f_3 hol.true) b_1)) hyp_1.

(; Theorem: |- (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b))) ;)

(; dict ;)

def thm_249 : A : hol.type -> b_1 : hol.term A -> a_2 : hol.term A -> hol.proof (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_2) (hol.eq A (f_3 hol.true) b_1))) :=
  A : hol.type => b_1 : hol.term A => a_2 : hol.term A => hol.PROVE_HYP ((f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_2) (hol.eq A (f_3 hol.true) b_1)) (x_3 : hol.term hol.bool => hol.cond A x_3 b_1 a_2)) (Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_2) (hol.eq A (f_3 hol.true) b_1))) (thm_233 A b_1 a_2) (hyp_1 : hol.proof ((f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_2) (hol.eq A (f_3 hol.true) b_1)) (x_3 : hol.term hol.bool => hol.cond A x_3 b_1 a_2)) => thm_248 A b_1 a_2 hyp_1).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b)))) ;)

(; dict ;)

def thm_250 : A : hol.type -> a_1 : hol.term A -> hol.proof (hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))) :=
  A : hol.type => a_1 : hol.term A => b_2 : hol.term A => thm_249 A b_2 a_1.

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b))))) ;)

(; dict ;)

def thm_251 : A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))))) :=
  A : hol.type => a_1 : hol.term A => hol.EQ_MP (hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))) (hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2)))) (thm_125 A a_1) (thm_250 A a_1).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= (f Data.Bool.F)) a)) ((= (f Data.Bool.T)) b))))) ;)

(; thm ;)

def thm_252 : A : hol.type -> hol.proof (hol.forall A (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))))) :=
  A : hol.type => hol.EQ_MP (hol.forall A (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))))) (hol.forall A (a_1 : hol.term A => hol.forall A (b_2 : hol.term A => Data_2EBool_2E_3F (hol.arr (hol.arr (hol.arr hol.bool A) hol.bool) hol.bool) (f_3 : hol.term (hol.arr hol.bool A) => hol.and (hol.eq A (f_3 hol.false) a_1) (hol.eq A (f_3 hol.true) b_2))))) (thm_122 A) (thm_251 A).
