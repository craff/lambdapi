
(; This file was generated by Holide. ;)

#REQUIRE hol.
#NAME function_2Dthm.

Function_2Eo : A : hol.type -> hol.term A.

Function_2Eid : A : hol.type -> hol.term A.

Function_2Econst : A : hol.type -> hol.term A.

Function_2ECombinator_2Es : A : hol.type -> hol.term A.

Function_2Eflip : A : hol.type -> hol.term A.

Function_2ECombinator_2Ew : A : hol.type -> hol.term A.

(; axiom ;)

thm_0 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr B C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3))).

(; axiom ;)

thm_1 : hol.proof hol.true.

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A x_1 x_1)).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (hol.forall hol.bool (t_1 : hol.term hol.bool => hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (hol.eq (hol.arr A A) (Function_2Eid (hol.arr A A)) (x_1 : hol.term A => x_1)).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))).

(; axiom ;)

thm_7 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))).

(; axiom ;)

thm_8 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2)))).

(; axiom ;)

thm_9 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr B A)) (Function_2Econst (hol.arr A (hol.arr B A))) (x_1 : hol.term A => y_2 : hol.term B => x_1)).

(; axiom ;)

thm_10 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))).

(; axiom ;)

thm_11 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2)).

(; axiom ;)

thm_12 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B))) (f_1 : hol.term (hol.arr A (hol.arr A B)) => x_2 : hol.term A => f_1 x_2 x_2)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_13 : C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C))) :=
  C : hol.type => B : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr B C) hol.bool) hol.bool) (hol.forall (hol.arr B C)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_14 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) hol.bool) hol.bool) (hol.forall (hol.arr A B)).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_15 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A) (hol.forall A)) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A hol.bool) hol.bool) (hol.forall A).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_16 : C : hol.type -> hol.proof (hol.eq (hol.arr C (hol.arr C hol.bool)) (hol.eq C) (hol.eq C)) :=
  C : hol.type => hol.REFL (hol.arr C (hol.arr C hol.bool)) (hol.eq C).

(; Theorem: |- ((= ((= ((Function.o f) g)) \lambda x. (f (g x)))) ((= ((Function.o f) g)) \lambda x. (f (g x)))) ;)

(; dict ;)

def thm_17 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.REFL hol.bool (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))).

(; Theorem: |- ((= ((= ((Function.o f) g)) \lambda x. (f (g x)))) ((= ((Function.o f) g)) \lambda x. (f (g x)))) ;)

(; dict ;)

def thm_18 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.TRANS hol.bool (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) (thm_17 B C A g_1 f_2) (thm_17 B C A g_1 f_2).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_19 : C : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A C) (hol.arr (hol.arr A C) hol.bool)) (hol.eq (hol.arr A C)) (hol.eq (hol.arr A C))) :=
  C : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A C) (hol.arr (hol.arr A C) hol.bool)) (hol.eq (hol.arr A C)).

(; Theorem: |- ((= ((= Function.o) \lambda f. \lambda g. \lambda x. (f (g x)))) ((= Function.o) \lambda f. \lambda g. \lambda x. (f (g x)))) ;)

(; dict ;)

def thm_20 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr B C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3))) (hol.eq (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr B C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3)))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.REFL hol.bool (hol.eq (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr B C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3))).

(; Theorem: |- ((= ((= Function.o) \lambda f. \lambda g. \lambda x. (f (g x)))) ((= Function.o) \lambda f. \lambda g. \lambda x. (f (g x)))) ;)

(; dict ;)

def thm_21 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr B C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3))) (hol.eq (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr B C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3)))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr B C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3))) (hol.eq (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr B C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3))) (hol.eq (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr B C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3))) (thm_20 A C B) (thm_20 A C B).

(; Theorem: |- ((= f) f) ;)

(; dict ;)

def thm_22 : C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr B C) f_1 f_1) :=
  C : hol.type => B : hol.type => f_1 : hol.term (hol.arr B C) => hol.REFL (hol.arr B C) f_1.

(; Theorem: |- ((= (Function.o f)) (\lambda f. \lambda g. \lambda x. (f (g x)) f)) ;)

(; dict ;)

def thm_23 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1) ((f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1)) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1 f_1 (hol.EQ_MP (hol.eq (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4))) (hol.eq (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4))) (thm_21 A C B) (thm_0 A C B)) (thm_22 C B f_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_24 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) (hol.arr A C)) (hol.arr (hol.arr (hol.arr A B) (hol.arr A C)) hol.bool)) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C))) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) (hol.arr A C)) (hol.arr (hol.arr (hol.arr A B) (hol.arr A C)) hol.bool)) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C))).

(; Theorem: |- ((= (\lambda f. \lambda g. \lambda x. (f (g x)) f)) \lambda g. \lambda x. (f (g x))) ;)

(; dict ;)

def thm_25 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.BETA_CONV (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)) (f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1.

(; Theorem: |- ((= \lambda f. (\lambda f. \lambda g. \lambda x. (f (g x)) f)) \lambda f. \lambda g. \lambda x. (f (g x))) ;)

(; dict ;)

def thm_26 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) (f_1 : hol.term (hol.arr B C) => (f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1) (f_1 : hol.term (hol.arr B C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.ABS_THM (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)) (f_1 : hol.term (hol.arr B C) => (f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1) (f_1 : hol.term (hol.arr B C) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3)) (f_1 : hol.term (hol.arr B C) => thm_25 C B A f_1).

(; Theorem: |- ((= (\lambda f. (\lambda f. \lambda g. \lambda x. (f (g x)) f) f)) (\lambda f. \lambda g. \lambda x. (f (g x)) f)) ;)

(; dict ;)

def thm_27 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr B C) => (f_3 : hol.term (hol.arr B C) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 (g_4 x_5)) f_2) f_1) ((f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1)) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C)) (f_2 : hol.term (hol.arr B C) => (f_3 : hol.term (hol.arr B C) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 (g_4 x_5)) f_2) (f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1 f_1 (thm_26 A C B) (thm_22 C B f_1).

(; Theorem: |- ((= (= (\lambda f. (\lambda f. \lambda g. \lambda x. (f (g x)) f) f))) (= (\lambda f. \lambda g. \lambda x. (f (g x)) f))) ;)

(; dict ;)

def thm_28 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) (hol.arr A C)) hol.bool) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr B C) => (f_3 : hol.term (hol.arr B C) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 (g_4 x_5)) f_2) f_1)) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr (hol.arr A B) (hol.arr A C)) (hol.arr (hol.arr (hol.arr A B) (hol.arr A C)) hol.bool) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C))) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C))) ((f_2 : hol.term (hol.arr B C) => (f_3 : hol.term (hol.arr B C) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 (g_4 x_5)) f_2) f_1) ((f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1) (thm_24 C B A) (thm_27 C B A f_1).

(; Theorem: |- ((= ((= (\lambda f. (\lambda f. \lambda g. \lambda x. (f (g x)) f) f)) (\lambda f. \lambda g. \lambda x. (f (g x)) f))) ((= (\lambda f. \lambda g. \lambda x. (f (g x)) f)) \lambda g. \lambda x. (f (g x)))) ;)

(; dict ;)

def thm_29 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr B C) => (f_3 : hol.term (hol.arr B C) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 (g_4 x_5)) f_2) f_1) ((f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1)) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr (hol.arr A B) (hol.arr A C)) hol.bool (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr B C) => (f_3 : hol.term (hol.arr B C) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 (g_4 x_5)) f_2) f_1)) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1)) ((f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3)) (thm_28 C B A f_1) (thm_25 C B A f_1).

(; Theorem: |- ((= (Function.o f)) \lambda g. \lambda x. (f (g x))) ;)

(; dict ;)

def thm_30 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.TRANS (hol.arr (hol.arr A B) (hol.arr A C)) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1) ((f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3)) (thm_23 C B A f_1) (hol.EQ_MP (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr B C) => (f_3 : hol.term (hol.arr B C) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 (g_4 x_5)) f_2) f_1) ((f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1)) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr B C) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) f_1) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3))) (thm_29 C B A f_1) (thm_27 C B A f_1)).

(; Theorem: |- ((= g) g) ;)

(; dict ;)

def thm_31 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) g_1 g_1) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => hol.REFL (hol.arr A B) g_1.

(; Theorem: |- ((= ((Function.o f) g)) (\lambda g. \lambda x. (f (g x)) g)) ;)

(; dict ;)

def thm_32 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1)) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr A B) (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2) (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1 g_1 (thm_30 C B A f_2) (thm_31 B A g_1).

(; Theorem: |- ((= (\lambda g. \lambda x. (f (g x)) g)) \lambda x. (f (g x))) ;)

(; dict ;)

def thm_33 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.BETA_CONV (hol.arr A B) (hol.arr A C) (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1.

(; Theorem: |- ((= \lambda g. (\lambda g. \lambda x. (f (g x)) g)) \lambda g. \lambda x. (f (g x))) ;)

(; dict ;)

def thm_34 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) (g_2 : hol.term (hol.arr A B) => (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_1 (g_3 x_4)) g_2) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.ABS_THM (hol.arr A B) (hol.arr A C) (g_2 : hol.term (hol.arr A B) => (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_1 (g_3 x_4)) g_2) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 (g_2 x_3)) (g_2 : hol.term (hol.arr A B) => thm_33 B C A g_2 f_1).

(; Theorem: |- ((= (\lambda g. (\lambda g. \lambda x. (f (g x)) g) g)) (\lambda g. \lambda x. (f (g x)) g)) ;)

(; dict ;)

def thm_35 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 (g_4 x_5)) g_3) g_1) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1)) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr A B) (hol.arr A C) (g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 (g_4 x_5)) g_3) (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1 g_1 (thm_34 C B A f_2) (thm_31 B A g_1).

(; Theorem: |- ((= (= (\lambda g. (\lambda g. \lambda x. (f (g x)) g) g))) (= (\lambda g. \lambda x. (f (g x)) g))) ;)

(; dict ;)

def thm_36 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 (g_4 x_5)) g_3) g_1)) (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr A C) (hol.arr (hol.arr A C) hol.bool) (hol.eq (hol.arr A C)) (hol.eq (hol.arr A C)) ((g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 (g_4 x_5)) g_3) g_1) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1) (thm_19 C A) (thm_35 B C A g_1 f_2).

(; Theorem: |- ((= ((= (\lambda g. (\lambda g. \lambda x. (f (g x)) g) g)) (\lambda g. \lambda x. (f (g x)) g))) ((= (\lambda g. \lambda x. (f (g x)) g)) \lambda x. (f (g x)))) ;)

(; dict ;)

def thm_37 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 (g_4 x_5)) g_3) g_1) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1)) (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1) (x_3 : hol.term A => f_2 (g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr A C) hol.bool (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 (g_4 x_5)) g_3) g_1)) (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1)) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1) (x_3 : hol.term A => f_2 (g_1 x_3)) (thm_36 B C A g_1 f_2) (thm_33 B C A g_1 f_2).

(; Theorem: |- ((= ((Function.o f) g)) \lambda x. (f (g x))) ;)

(; dict ;)

def thm_38 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.TRANS (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1) (x_3 : hol.term A => f_2 (g_1 x_3)) (thm_32 B C A g_1 f_2) (hol.EQ_MP (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 (g_4 x_5)) g_3) g_1) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1)) (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 (g_3 x_4)) g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) (thm_37 B C A g_1 f_2) (thm_35 B C A g_1 f_2)).

(; Theorem: |- ((= (= ((Function.o f) g))) (= \lambda x. (f (g x)))) ;)

(; dict ;)

def thm_39 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1)) (hol.eq (hol.arr A C) (x_3 : hol.term A => f_2 (g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr A C) (hol.arr (hol.arr A C) hol.bool) (hol.eq (hol.arr A C)) (hol.eq (hol.arr A C)) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3)) (thm_19 C A) (thm_38 B C A g_1 f_2).

(; Theorem: |- ((= \lambda x. (f (g x))) \lambda x. (f (g x))) ;)

(; dict ;)

def thm_40 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr A C) (x_3 : hol.term A => f_2 (g_1 x_3)) (x_3 : hol.term A => f_2 (g_1 x_3))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.REFL (hol.arr A C) (x_3 : hol.term A => f_2 (g_1 x_3)).

(; Theorem: |- ((= ((= ((Function.o f) g)) \lambda x. (f (g x)))) ((= \lambda x. (f (g x))) \lambda x. (f (g x)))) ;)

(; dict ;)

def thm_41 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) (hol.eq (hol.arr A C) (x_3 : hol.term A => f_2 (g_1 x_3)) (x_3 : hol.term A => f_2 (g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr A C) hol.bool (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1)) (hol.eq (hol.arr A C) (x_3 : hol.term A => f_2 (g_1 x_3))) (x_3 : hol.term A => f_2 (g_1 x_3)) (x_3 : hol.term A => f_2 (g_1 x_3)) (thm_39 B C A g_1 f_2) (thm_40 B C A g_1 f_2).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_42 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= ((= ((= x) x)) Data.Bool.T)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_43 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_42 A x_1) (thm_42 A x_1).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_44 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.REFL (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true).

(; Theorem: |- ((= \lambda x. ((= ((= x) x)) Data.Bool.T)) \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_45 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => hol.TRANS (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_44 A) (thm_44 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T))) ;)

(; dict ;)

def thm_46 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_15 A) (thm_45 A).

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_47 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hyp_1.

(; Theorem: |- ((= Data.Bool.T) t) ;)

(; dict ;)

def thm_48 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof (hol.eq hol.bool hol.true t_1) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.SYM hol.bool t_1 hol.true (thm_47 t_1 hyp_1).

(; Theorem: |- t ;)

(; dict ;)

def thm_49 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => hol.EQ_MP hol.true t_1 (thm_48 t_1 hyp_1) thm_1.

(; Theorem: |- t ;)

(; dict ;)

def thm_50 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof t_1 :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hyp_1.

(; Theorem: |- ((= t) Data.Bool.T) ;)

(; dict ;)

def thm_51 : t_1 : hol.term hol.bool -> hyp_1 : hol.proof t_1 -> hol.proof (hol.eq hol.bool t_1 hol.true) :=
  t_1 : hol.term hol.bool => hyp_1 : hol.proof t_1 => hol.PROP_EXT t_1 hol.true (hyp_2 : hol.proof hol.true => thm_50 t_1 hyp_1) (hyp_2 : hol.proof t_1 => thm_1).

(; Theorem: |- ((= t) ((= t) Data.Bool.T)) ;)

(; dict ;)

def thm_52 : t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool t_1 (hol.eq hol.bool t_1 hol.true)) :=
  t_1 : hol.term hol.bool => hol.PROP_EXT t_1 (hol.eq hol.bool t_1 hol.true) (hyp_1 : hol.proof (hol.eq hol.bool t_1 hol.true) => thm_49 t_1 hyp_1) (hyp_1 : hol.proof t_1 => thm_51 t_1 hyp_1).

(; Theorem: |- ((= ((= x) x)) ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_53 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (t_1 : hol.term hol.bool => thm_52 t_1) (hol.eq A x_1 x_1).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_54 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A x_1 x_1) :=
  A : hol.type => x_1 : hol.term A => thm_2 A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_55 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq A x_1 x_1) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_53 A x_1) (thm_54 A x_1).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((= x) x)) Data.Bool.T)) ;)

(; dict ;)

def thm_56 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq hol.bool (hol.eq A x_1 x_1) hol.true)) :=
  A : hol.type => x_1 : hol.term A => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_42 A x_1) (thm_55 A x_1)) A x_1.

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_57 : C : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) x_1 x_1) hol.true) :=
  C : hol.type => A : hol.type => x_1 : hol.term (hol.arr A C) => (A : hol.type => x_1 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (hol.eq hol.bool (hol.eq A x_1 x_1) hol.true) (thm_43 A x_1) (hol.EQ_MP (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (hol.forall A (x_2 : hol.term A => hol.eq hol.bool (hol.eq A x_2 x_2) hol.true)) (thm_46 A) (thm_56 A) x_1)) (hol.arr A C) x_1.

(; Theorem: |- ((= ((= \lambda x. (f (g x))) \lambda x. (f (g x)))) Data.Bool.T) ;)

(; dict ;)

def thm_58 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) (x_3 : hol.term A => f_2 (g_1 x_3)) (x_3 : hol.term A => f_2 (g_1 x_3))) hol.true) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => (C : hol.type => A : hol.type => x_1 : hol.term (hol.arr A C) => thm_57 C A x_1) C A (x_3 : hol.term A => f_2 (g_1 x_3)).

(; Theorem: |- ((= ((= ((Function.o f) g)) \lambda x. (f (g x)))) Data.Bool.T) ;)

(; dict ;)

def thm_59 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) hol.true) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.TRANS hol.bool (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) (hol.eq (hol.arr A C) (x_3 : hol.term A => f_2 (g_1 x_3)) (x_3 : hol.term A => f_2 (g_1 x_3))) hol.true (thm_41 B C A g_1 f_2) (thm_58 B C A g_1 f_2).

(; Theorem: |- ((= \lambda g. ((= ((Function.o f) g)) \lambda x. (f (g x)))) \lambda g. Data.Bool.T) ;)

(; dict ;)

def thm_60 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3))) (g_2 : hol.term (hol.arr A B) => hol.true)) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3))) (g_2 : hol.term (hol.arr A B) => hol.true) (g_2 : hol.term (hol.arr A B) => thm_59 B C A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= ((Function.o f) g)) \lambda x. (f (g x))))) (Data.Bool.! \lambda g. Data.Bool.T)) ;)

(; dict ;)

def thm_61 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3)))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.true))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3))) (g_2 : hol.term (hol.arr A B) => hol.true) (thm_14 B A) (thm_60 C B A f_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda x. t)) t)) ;)

(; dict ;)

def thm_62 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda g. t)) t)) ((= (Data.Bool.! \lambda g. t)) t)) ;)

(; dict ;)

def thm_63 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda g. t)) t)) ;)

(; dict ;)

def thm_64 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1) (thm_62 A t_1) (thm_63 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_65 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => thm_3 A t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda g. t)) t) ;)

(; dict ;)

def thm_66 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (g_2 : hol.term A => t_1)) t_1) (thm_64 A t_1) (thm_65 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. t)) t) ;)

(; dict ;)

def thm_67 : B : hol.type -> A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => t_1)) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_66 A t_1) (hol.arr A B) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda g. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_68 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_1 : hol.term (hol.arr A B) => hol.true)) hol.true) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => t_1 : hol.term hol.bool => thm_67 B A t_1) B A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= ((Function.o f) g)) \lambda x. (f (g x))))) Data.Bool.T) ;)

(; dict ;)

def thm_69 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3)))) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.TRANS hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3)))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.true)) hol.true (thm_61 C B A f_1) (thm_68 B A).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= ((Function.o f) g)) \lambda x. (f (g x))))) \lambda f. Data.Bool.T) ;)

(; dict ;)

def thm_70 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3)))) (f_1 : hol.term (hol.arr B C) => hol.true)) :=
  A : hol.type => C : hol.type => B : hol.type => hol.ABS_THM (hol.arr B C) hol.bool (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3)))) (f_1 : hol.term (hol.arr B C) => hol.true) (f_1 : hol.term (hol.arr B C) => thm_69 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((Function.o f) g)) \lambda x. (f (g x)))))) (Data.Bool.! \lambda f. Data.Bool.T)) ;)

(; dict ;)

def thm_71 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.true))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C)) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3)))) (f_1 : hol.term (hol.arr B C) => hol.true) (thm_13 C B) (thm_70 A C B).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda f. t)) t)) ((= (Data.Bool.! \lambda f. t)) t)) ;)

(; dict ;)

def thm_72 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda f. t)) t)) ;)

(; dict ;)

def thm_73 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1) (thm_62 A t_1) (thm_72 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. t)) t) ;)

(; dict ;)

def thm_74 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (f_2 : hol.term A => t_1)) t_1) (thm_73 A t_1) (thm_65 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. t)) t) ;)

(; dict ;)

def thm_75 : C : hol.type -> B : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_2 : hol.term (hol.arr B C) => t_1)) t_1) :=
  C : hol.type => B : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_74 A t_1) (hol.arr B C) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda f. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_76 : C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.true)) hol.true) :=
  C : hol.type => B : hol.type => (C : hol.type => B : hol.type => t_1 : hol.term hol.bool => thm_75 C B t_1) C B hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((Function.o f) g)) \lambda x. (f (g x)))))) Data.Bool.T) ;)

(; dict ;)

def thm_77 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3))))) hol.true) :=
  A : hol.type => C : hol.type => B : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.true)) hol.true (thm_71 A C B) (thm_76 C B).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((Function.o f) g)) \lambda x. (f (g x)))))) ;)

(; dict ;)

def thm_78 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.SYM hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3))))) hol.true (thm_77 A C B).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((Function.o f) g)) \lambda x. (f (g x))))) ;)

(; dict ;)

def thm_79 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.EQ_MP hol.true (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3))))) (thm_78 A C B) thm_1.

(; Theorem: |- (Data.Bool.! \lambda g. ((= ((Function.o f) g)) \lambda x. (f (g x)))) ;)

(; dict ;)

def thm_80 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2) (x_3 : hol.term A => f_1 (g_2 x_3)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => thm_79 A C B f_1.

(; Theorem: |- ((= (((Function.o f) g) x)) (\lambda x. (f (g x)) x)) ;)

(; dict ;)

def thm_81 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) ((x_4 : hol.term A => f_3 (g_2 x_4)) x_1)) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.APP_THM A C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) (x_4 : hol.term A => f_3 (g_2 x_4)) x_1 x_1 ((B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.EQ_MP (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) (thm_18 B C A g_1 f_2) (thm_80 C B A f_2 g_1)) B C A g_2 f_3) (thm_54 A x_1).

(; Theorem: |- ((= (= (((Function.o f) g) x))) (= (\lambda x. (f (g x)) x))) ;)

(; dict ;)

def thm_82 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr C hol.bool) (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1)) (hol.eq C ((x_4 : hol.term A => f_3 (g_2 x_4)) x_1))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.APP_THM C (hol.arr C hol.bool) (hol.eq C) (hol.eq C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) ((x_4 : hol.term A => f_3 (g_2 x_4)) x_1) (thm_16 C) (thm_81 A B C x_1 g_2 f_3).

(; Theorem: |- ((= (f (g x))) (f (g x))) ;)

(; dict ;)

def thm_83 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq C (f_3 (g_2 x_1)) (f_3 (g_2 x_1))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.REFL C (f_3 (g_2 x_1)).

(; Theorem: |- ((= ((= (((Function.o f) g) x)) (f (g x)))) ((= (\lambda x. (f (g x)) x)) (f (g x)))) ;)

(; dict ;)

def thm_84 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 (g_2 x_1))) (hol.eq C ((x_4 : hol.term A => f_3 (g_2 x_4)) x_1) (f_3 (g_2 x_1)))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.APP_THM C hol.bool (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1)) (hol.eq C ((x_4 : hol.term A => f_3 (g_2 x_4)) x_1)) (f_3 (g_2 x_1)) (f_3 (g_2 x_1)) (thm_82 A B C x_1 g_2 f_3) (thm_83 A B C x_1 g_2 f_3).

(; Theorem: |- ((= \lambda x. ((= (((Function.o f) g) x)) (f (g x)))) \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x)))) ;)

(; dict ;)

def thm_85 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1 x_3) (f_2 (g_1 x_3))) (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_2 (g_1 x_4)) x_3) (f_2 (g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1 x_3) (f_2 (g_1 x_3))) (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_2 (g_1 x_4)) x_3) (f_2 (g_1 x_3))) (x_3 : hol.term A => thm_84 A B C x_3 g_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (((Function.o f) g) x)) (f (g x))))) (Data.Bool.! \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x))))) ;)

(; dict ;)

def thm_86 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1 x_3) (f_2 (g_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_2 (g_1 x_4)) x_3) (f_2 (g_1 x_3))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1 x_3) (f_2 (g_1 x_3))) (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_2 (g_1 x_4)) x_3) (f_2 (g_1 x_3))) (thm_15 A) (thm_85 B C A g_1 f_2).

(; Theorem: |- ((= \lambda g. (Data.Bool.! \lambda x. ((= (((Function.o f) g) x)) (f (g x))))) \lambda g. (Data.Bool.! \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x))))) ;)

(; dict ;)

def thm_87 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => thm_86 B C A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.o f) g) x)) (f (g x)))))) (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x)))))) ;)

(; dict ;)

def thm_88 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))) (thm_14 B A) (thm_87 C B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.o f) g) x)) (f (g x)))))) \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x)))))) ;)

(; dict ;)

def thm_89 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.ABS_THM (hol.arr B C) hol.bool (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => thm_88 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.o f) g) x)) (f (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x))))))) ;)

(; dict ;)

def thm_90 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3)))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3))))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C)) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3))))) (thm_13 C B) (thm_89 A C B).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.o f) g) x)) (f (g x))))))) ;)

(; dict ;)

def thm_91 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3))))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.SYM hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3)))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))))) (thm_90 A C B).

(; Theorem: |- ((= (\lambda x. (f (g x)) x)) (f (g x))) ;)

(; dict ;)

def thm_92 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq C ((x_4 : hol.term A => f_3 (g_2 x_4)) x_1) (f_3 (g_2 x_1))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.BETA_CONV A C (x_4 : hol.term A => f_3 (g_2 x_4)) x_1.

(; Theorem: |- ((= (= (\lambda x. (f (g x)) x))) (= (f (g x)))) ;)

(; dict ;)

def thm_93 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr C hol.bool) (hol.eq C ((x_4 : hol.term A => f_3 (g_2 x_4)) x_1)) (hol.eq C (f_3 (g_2 x_1)))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.APP_THM C (hol.arr C hol.bool) (hol.eq C) (hol.eq C) ((x_4 : hol.term A => f_3 (g_2 x_4)) x_1) (f_3 (g_2 x_1)) (thm_16 C) (thm_92 B A C x_1 g_2 f_3).

(; Theorem: |- ((= ((= (\lambda x. (f (g x)) x)) (f (g x)))) ((= (f (g x))) (f (g x)))) ;)

(; dict ;)

def thm_94 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq C ((x_4 : hol.term A => f_3 (g_2 x_4)) x_1) (f_3 (g_2 x_1))) (hol.eq C (f_3 (g_2 x_1)) (f_3 (g_2 x_1)))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr B C) => hol.APP_THM C hol.bool (hol.eq C ((x_4 : hol.term A => f_3 (g_2 x_4)) x_1)) (hol.eq C (f_3 (g_2 x_1))) (f_3 (g_2 x_1)) (f_3 (g_2 x_1)) (thm_93 B A C x_1 g_2 f_3) (thm_83 A B C x_1 g_2 f_3).

(; Theorem: |- ((= \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x)))) \lambda x. ((= (f (g x))) (f (g x)))) ;)

(; dict ;)

def thm_95 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_2 (g_1 x_4)) x_3) (f_2 (g_1 x_3))) (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_2 (g_1 x_4)) x_3) (f_2 (g_1 x_3))) (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3))) (x_3 : hol.term A => thm_94 B A C x_3 g_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x))))) (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x))))) ;)

(; dict ;)

def thm_96 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_2 (g_1 x_4)) x_3) (f_2 (g_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_2 (g_1 x_4)) x_3) (f_2 (g_1 x_3))) (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3))) (thm_15 A) (thm_95 B C A g_1 f_2).

(; Theorem: |- ((= \lambda g. (Data.Bool.! \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x))))) \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x))))) ;)

(; dict ;)

def thm_97 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => thm_96 B C A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x)))))) (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x)))))) ;)

(; dict ;)

def thm_98 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))) (thm_14 B A) (thm_97 C B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x)))))) \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x)))))) ;)

(; dict ;)

def thm_99 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.ABS_THM (hol.arr B C) hol.bool (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => thm_98 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x))))))) ;)

(; dict ;)

def thm_100 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C)) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) (thm_13 C B) (thm_99 A C B).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x))))))) ;)

(; dict ;)

def thm_101 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3))))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.SYM hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))))) (thm_100 A C B).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x)))))) \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x)))))) ;)

(; dict ;)

def thm_102 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.REFL (hol.arr (hol.arr B C) hol.bool) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x)))))) \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x)))))) ;)

(; dict ;)

def thm_103 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.TRANS (hol.arr (hol.arr B C) hol.bool) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) (thm_102 A C B) (thm_102 A C B).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x))))))) ;)

(; dict ;)

def thm_104 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C)) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) (thm_13 C B) (thm_103 A C B).

(; Theorem: |- ((= \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x))))) \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x))))) ;)

(; dict ;)

def thm_105 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.REFL (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))).

(; Theorem: |- ((= \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x))))) \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x))))) ;)

(; dict ;)

def thm_106 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))) (thm_105 C B A f_1) (thm_105 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x)))))) (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x)))))) ;)

(; dict ;)

def thm_107 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))) (thm_14 B A) (thm_106 C B A f_1).

(; Theorem: |- ((= \lambda x. ((= (f (g x))) (f (g x)))) \lambda x. ((= (f (g x))) (f (g x)))) ;)

(; dict ;)

def thm_108 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3))) (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.REFL (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3))).

(; Theorem: |- ((= \lambda x. ((= (f (g x))) (f (g x)))) \lambda x. ((= (f (g x))) (f (g x)))) ;)

(; dict ;)

def thm_109 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3))) (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.TRANS (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3))) (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3))) (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3))) (thm_108 B C A g_1 f_2) (thm_108 B C A g_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x))))) (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x))))) ;)

(; dict ;)

def thm_110 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3))))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3))) (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3))) (thm_15 A) (thm_109 B C A g_1 f_2).

(; Theorem: |- (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x)))) ;)

(; dict ;)

def thm_111 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.forall A (x_3 : hol.term A => hol.eq C (f_2 (g_1 x_3)) (f_2 (g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => x_3 : hol.term A => thm_83 A B C x_3 g_1 f_2.

(; Theorem: |- (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x))))) ;)

(; dict ;)

def thm_112 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr B C) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr B C) => g_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))) (hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))) (thm_110 B C A g_2 f_1) (thm_111 B C A g_2 f_1).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (f (g x))) (f (g x)))))) ;)

(; dict ;)

def thm_113 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr B C) => hol.EQ_MP (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3))))) (thm_107 C B A f_1) (thm_112 C B A f_1).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (\lambda x. (f (g x)) x)) (f (g x)))))) ;)

(; dict ;)

def thm_114 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.EQ_MP (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))))) (thm_101 A C B) (hol.EQ_MP (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (f_1 (g_2 x_3)) (f_1 (g_2 x_3)))))) (thm_104 A C B) (thm_113 A C B)).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.o f) g) x)) (f (g x)))))) ;)

(; dict ;)

def thm_115 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3)))))) :=
  A : hol.type => C : hol.type => B : hol.type => hol.EQ_MP (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C ((x_4 : hol.term A => f_1 (g_2 x_4)) x_3) (f_1 (g_2 x_3)))))) (hol.forall (hol.arr B C) (f_1 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 (g_2 x_3)))))) (thm_91 A C B) (thm_114 A C B).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_116 : D : hol.type -> C : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr C D) hol.bool) hol.bool) (hol.forall (hol.arr C D)) (hol.forall (hol.arr C D))) :=
  D : hol.type => C : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr C D) hol.bool) hol.bool) (hol.forall (hol.arr C D)).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))))) \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))))) ;)

(; dict ;)

def thm_117 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr C D) hol.bool) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => hol.REFL (hol.arr (hol.arr C D) hol.bool) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))))) \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))))) ;)

(; dict ;)

def thm_118 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr C D) hol.bool) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => hol.TRANS (hol.arr (hol.arr C D) hol.bool) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (thm_117 A B D C) (thm_117 A B D C).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h))))))) ;)

(; dict ;)

def thm_119 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr C D) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) (hol.forall (hol.arr C D) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))))) :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => hol.APP_THM (hol.arr (hol.arr C D) hol.bool) hol.bool (hol.forall (hol.arr C D)) (hol.forall (hol.arr C D)) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (thm_116 D C) (thm_118 A B D C).

(; Theorem: |- ((= \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h))))) \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h))))) ;)

(; dict ;)

def thm_120 : D : hol.type -> A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) :=
  D : hol.type => A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr C D) => hol.REFL (hol.arr (hol.arr B C) hol.bool) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))).

(; Theorem: |- ((= \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h))))) \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h))))) ;)

(; dict ;)

def thm_121 : D : hol.type -> A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) :=
  D : hol.type => A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr C D) => hol.TRANS (hol.arr (hol.arr B C) hol.bool) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (thm_120 D A C B f_1) (thm_120 D A C B f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))))) (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))))) ;)

(; dict ;)

def thm_122 : D : hol.type -> A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr C D) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) :=
  D : hol.type => A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr C D) => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C)) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (thm_13 C B) (thm_121 D A C B f_1).

(; Theorem: |- ((= \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))) \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))) ;)

(; dict ;)

def thm_123 : C : hol.type -> D : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3))) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)))) :=
  C : hol.type => D : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr C D) => hol.REFL (hol.arr (hol.arr A B) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3))).

(; Theorem: |- ((= \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))) \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))) ;)

(; dict ;)

def thm_124 : C : hol.type -> D : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3))) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)))) :=
  C : hol.type => D : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr C D) => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3))) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3))) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3))) (thm_123 C D B A g_1 f_2) (thm_123 C D B A g_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h))))) (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h))))) ;)

(; dict ;)

def thm_125 : C : hol.type -> D : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr C D) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)))) (hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3))))) :=
  C : hol.type => D : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr C D) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3))) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3))) (thm_14 B A) (thm_124 C D B A g_1 f_2).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_126 : D : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A D) (hol.arr (hol.arr A D) hol.bool)) (hol.eq (hol.arr A D)) (hol.eq (hol.arr A D))) :=
  D : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A D) (hol.arr (hol.arr A D) hol.bool)) (hol.eq (hol.arr A D)).

(; Theorem: |- ((= ((Function.o f) g)) \lambda x. (f (g x))) ;)

(; dict ;)

def thm_127 : B : hol.type -> D : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B D) -> hol.proof (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) :=
  B : hol.type => D : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B D) => (B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => thm_38 B C A g_1 f_2) B D A g_1 f_2.

(; Theorem: |- ((= ((Function.o ((Function.o f) g)) h)) \lambda x. (((Function.o f) g) (h x))) ;)

(; dict ;)

def thm_128 : C : hol.type -> B : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1) (x_4 : hol.term A => Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2 (h_1 x_4))) :=
  C : hol.type => B : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => (B : hol.type => D : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B D) => thm_127 B D A g_1 f_2) B D A h_1 (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2).

(; Theorem: |- ((= ((Function.o f) g)) \lambda x. (f (g x))) ;)

(; dict ;)

def thm_129 : C : hol.type -> D : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr B D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) (x_3 : hol.term B => f_2 (g_1 x_3))) :=
  C : hol.type => D : hol.type => B : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr C D) => (B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => thm_38 B C A g_1 f_2) C D B g_1 f_2.

(; Theorem: |- ((= (h x)) (h x)) ;)

(; dict ;)

def thm_130 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (h_2 x_1) (h_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => hol.REFL B (h_2 x_1).

(; Theorem: |- ((= (((Function.o f) g) (h x))) (\lambda x. (f (g x)) (h x))) ;)

(; dict ;)

def thm_131 : A : hol.type -> B : hol.type -> C : hol.type -> D : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> f_4 : hol.term (hol.arr C D) -> hol.proof (hol.eq D (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_4 g_3 (h_2 x_1)) ((x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1))) :=
  A : hol.type => B : hol.type => C : hol.type => D : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => f_4 : hol.term (hol.arr C D) => hol.APP_THM B D (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_4 g_3) (x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1) (h_2 x_1) (thm_129 C D B g_3 f_4) (thm_130 A B x_1 h_2).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_132 : D : hol.type -> hol.proof (hol.eq (hol.arr D (hol.arr D hol.bool)) (hol.eq D) (hol.eq D)) :=
  D : hol.type => hol.REFL (hol.arr D (hol.arr D hol.bool)) (hol.eq D).

(; Theorem: |- ((= (\lambda x. (f (g x)) x)) (f (g x))) ;)

(; dict ;)

def thm_133 : C : hol.type -> B : hol.type -> D : hol.type -> x_1 : hol.term B -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq D ((x_4 : hol.term B => f_3 (g_2 x_4)) x_1) (f_3 (g_2 x_1))) :=
  C : hol.type => B : hol.type => D : hol.type => x_1 : hol.term B => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => hol.BETA_CONV B D (x_4 : hol.term B => f_3 (g_2 x_4)) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. (f (g x)) x)) \lambda x. (f (g x))) ;)

(; dict ;)

def thm_134 : C : hol.type -> D : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr B D) (x_3 : hol.term B => (x_4 : hol.term B => f_2 (g_1 x_4)) x_3) (x_3 : hol.term B => f_2 (g_1 x_3))) :=
  C : hol.type => D : hol.type => B : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr C D) => hol.ABS_THM B D (x_3 : hol.term B => (x_4 : hol.term B => f_2 (g_1 x_4)) x_3) (x_3 : hol.term B => f_2 (g_1 x_3)) (x_3 : hol.term B => thm_133 C B D x_3 g_1 f_2).

(; Theorem: |- ((= (\lambda x. (\lambda x. (f (g x)) x) (h x))) (\lambda x. (f (g x)) (h x))) ;)

(; dict ;)

def thm_135 : A : hol.type -> C : hol.type -> B : hol.type -> D : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> f_4 : hol.term (hol.arr C D) -> hol.proof (hol.eq D ((x_5 : hol.term B => (x_6 : hol.term B => f_4 (g_3 x_6)) x_5) (h_2 x_1)) ((x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1))) :=
  A : hol.type => C : hol.type => B : hol.type => D : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => f_4 : hol.term (hol.arr C D) => hol.APP_THM B D (x_5 : hol.term B => (x_6 : hol.term B => f_4 (g_3 x_6)) x_5) (x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1) (h_2 x_1) (thm_134 C D B g_3 f_4) (thm_130 A B x_1 h_2).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. (f (g x)) x) (h x)))) (= (\lambda x. (f (g x)) (h x)))) ;)

(; dict ;)

def thm_136 : A : hol.type -> C : hol.type -> B : hol.type -> D : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> f_4 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr D hol.bool) (hol.eq D ((x_5 : hol.term B => (x_6 : hol.term B => f_4 (g_3 x_6)) x_5) (h_2 x_1))) (hol.eq D ((x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1)))) :=
  A : hol.type => C : hol.type => B : hol.type => D : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => f_4 : hol.term (hol.arr C D) => hol.APP_THM D (hol.arr D hol.bool) (hol.eq D) (hol.eq D) ((x_5 : hol.term B => (x_6 : hol.term B => f_4 (g_3 x_6)) x_5) (h_2 x_1)) ((x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1)) (thm_132 D) (thm_135 A C B D x_1 h_2 g_3 f_4).

(; Theorem: |- ((= (\lambda x. (f (g x)) (h x))) (f (g (h x)))) ;)

(; dict ;)

def thm_137 : A : hol.type -> C : hol.type -> B : hol.type -> D : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> f_4 : hol.term (hol.arr C D) -> hol.proof (hol.eq D ((x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1)) (f_4 (g_3 (h_2 x_1)))) :=
  A : hol.type => C : hol.type => B : hol.type => D : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => f_4 : hol.term (hol.arr C D) => hol.BETA_CONV B D (x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1).

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. (f (g x)) x) (h x))) (\lambda x. (f (g x)) (h x)))) ((= (\lambda x. (f (g x)) (h x))) (f (g (h x))))) ;)

(; dict ;)

def thm_138 : A : hol.type -> C : hol.type -> B : hol.type -> D : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> f_4 : hol.term (hol.arr C D) -> hol.proof (hol.eq hol.bool (hol.eq D ((x_5 : hol.term B => (x_6 : hol.term B => f_4 (g_3 x_6)) x_5) (h_2 x_1)) ((x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1))) (hol.eq D ((x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1)) (f_4 (g_3 (h_2 x_1))))) :=
  A : hol.type => C : hol.type => B : hol.type => D : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => f_4 : hol.term (hol.arr C D) => hol.APP_THM D hol.bool (hol.eq D ((x_5 : hol.term B => (x_6 : hol.term B => f_4 (g_3 x_6)) x_5) (h_2 x_1))) (hol.eq D ((x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1))) ((x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1)) (f_4 (g_3 (h_2 x_1))) (thm_136 A C B D x_1 h_2 g_3 f_4) (thm_137 A C B D x_1 h_2 g_3 f_4).

(; Theorem: |- ((= (((Function.o f) g) (h x))) (f (g (h x)))) ;)

(; dict ;)

def thm_139 : A : hol.type -> B : hol.type -> C : hol.type -> D : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> f_4 : hol.term (hol.arr C D) -> hol.proof (hol.eq D (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_4 g_3 (h_2 x_1)) (f_4 (g_3 (h_2 x_1)))) :=
  A : hol.type => B : hol.type => C : hol.type => D : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => f_4 : hol.term (hol.arr C D) => hol.TRANS D (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_4 g_3 (h_2 x_1)) ((x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1)) (f_4 (g_3 (h_2 x_1))) (thm_131 A B C D x_1 h_2 g_3 f_4) (hol.EQ_MP (hol.eq D ((x_5 : hol.term B => (x_6 : hol.term B => f_4 (g_3 x_6)) x_5) (h_2 x_1)) ((x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1))) (hol.eq D ((x_5 : hol.term B => f_4 (g_3 x_5)) (h_2 x_1)) (f_4 (g_3 (h_2 x_1)))) (thm_138 A C B D x_1 h_2 g_3 f_4) (thm_135 A C B D x_1 h_2 g_3 f_4)).

(; Theorem: |- ((= \lambda x. (((Function.o f) g) (h x))) \lambda x. (f (g (h x)))) ;)

(; dict ;)

def thm_140 : B : hol.type -> C : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr A D) (x_4 : hol.term A => Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2 (h_1 x_4)) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4)))) :=
  B : hol.type => C : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => hol.ABS_THM A D (x_4 : hol.term A => Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2 (h_1 x_4)) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4))) (x_4 : hol.term A => thm_139 A B C D x_4 h_1 g_2 f_3).

(; Theorem: |- ((= ((Function.o ((Function.o f) g)) h)) \lambda x. (f (g (h x)))) ;)

(; dict ;)

def thm_141 : C : hol.type -> B : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4)))) :=
  C : hol.type => B : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => hol.TRANS (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1) (x_4 : hol.term A => Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2 (h_1 x_4)) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4))) (thm_128 C B D A h_1 g_2 f_3) (thm_140 B C D A h_1 g_2 f_3).

(; Theorem: |- ((= (= ((Function.o ((Function.o f) g)) h))) (= \lambda x. (f (g (h x))))) ;)

(; dict ;)

def thm_142 : C : hol.type -> B : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr (hol.arr A D) hol.bool) (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1)) (hol.eq (hol.arr A D) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4))))) :=
  C : hol.type => B : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => hol.APP_THM (hol.arr A D) (hol.arr (hol.arr A D) hol.bool) (hol.eq (hol.arr A D)) (hol.eq (hol.arr A D)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4))) (thm_126 D A) (thm_141 C B D A h_1 g_2 f_3).

(; Theorem: |- ((= ((Function.o f) g)) \lambda x. (f (g x))) ;)

(; dict ;)

def thm_143 : C : hol.type -> D : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A C) -> f_2 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) :=
  C : hol.type => D : hol.type => A : hol.type => g_1 : hol.term (hol.arr A C) => f_2 : hol.term (hol.arr C D) => (B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => thm_38 B C A g_1 f_2) C D A g_1 f_2.

(; Theorem: |- ((= ((Function.o f) ((Function.o g) h))) \lambda x. (f (((Function.o g) h) x))) ;)

(; dict ;)

def thm_144 : B : hol.type -> C : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1)) (x_4 : hol.term A => f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1 x_4))) :=
  B : hol.type => C : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => (C : hol.type => D : hol.type => A : hol.type => g_1 : hol.term (hol.arr A C) => f_2 : hol.term (hol.arr C D) => thm_143 C D A g_1 f_2) C D A (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1) f_3.

(; Theorem: |- ((= f) f) ;)

(; dict ;)

def thm_145 : D : hol.type -> C : hol.type -> f_1 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr C D) f_1 f_1) :=
  D : hol.type => C : hol.type => f_1 : hol.term (hol.arr C D) => hol.REFL (hol.arr C D) f_1.

(; Theorem: |- ((= ((Function.o g) h)) \lambda x. (g (h x))) ;)

(; dict ;)

def thm_146 : B : hol.type -> C : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr A C) (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1) (x_3 : hol.term A => g_2 (h_1 x_3))) :=
  B : hol.type => C : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => (B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => thm_38 B C A g_1 f_2) B C A h_1 g_2.

(; Theorem: |- ((= (((Function.o g) h) x)) (\lambda x. (g (h x)) x)) ;)

(; dict ;)

def thm_147 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_3 h_2 x_1) ((x_4 : hol.term A => g_3 (h_2 x_4)) x_1)) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => hol.APP_THM A C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_3 h_2) (x_4 : hol.term A => g_3 (h_2 x_4)) x_1 x_1 (thm_146 B C A h_2 g_3) (thm_54 A x_1).

(; Theorem: |- ((= (\lambda x. (g (h x)) x)) (g (h x))) ;)

(; dict ;)

def thm_148 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq C ((x_4 : hol.term A => g_3 (h_2 x_4)) x_1) (g_3 (h_2 x_1))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => hol.BETA_CONV A C (x_4 : hol.term A => g_3 (h_2 x_4)) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. (g (h x)) x)) \lambda x. (g (h x))) ;)

(; dict ;)

def thm_149 : B : hol.type -> C : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr A C) (x_3 : hol.term A => (x_4 : hol.term A => g_2 (h_1 x_4)) x_3) (x_3 : hol.term A => g_2 (h_1 x_3))) :=
  B : hol.type => C : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => hol.ABS_THM A C (x_3 : hol.term A => (x_4 : hol.term A => g_2 (h_1 x_4)) x_3) (x_3 : hol.term A => g_2 (h_1 x_3)) (x_3 : hol.term A => thm_148 B A C x_3 h_1 g_2).

(; Theorem: |- ((= (\lambda x. (\lambda x. (g (h x)) x) x)) (\lambda x. (g (h x)) x)) ;)

(; dict ;)

def thm_150 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq C ((x_4 : hol.term A => (x_5 : hol.term A => g_3 (h_2 x_5)) x_4) x_1) ((x_4 : hol.term A => g_3 (h_2 x_4)) x_1)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => hol.APP_THM A C (x_4 : hol.term A => (x_5 : hol.term A => g_3 (h_2 x_5)) x_4) (x_4 : hol.term A => g_3 (h_2 x_4)) x_1 x_1 (thm_149 B C A h_2 g_3) (thm_54 A x_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. (g (h x)) x) x))) (= (\lambda x. (g (h x)) x))) ;)

(; dict ;)

def thm_151 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq (hol.arr C hol.bool) (hol.eq C ((x_4 : hol.term A => (x_5 : hol.term A => g_3 (h_2 x_5)) x_4) x_1)) (hol.eq C ((x_4 : hol.term A => g_3 (h_2 x_4)) x_1))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => hol.APP_THM C (hol.arr C hol.bool) (hol.eq C) (hol.eq C) ((x_4 : hol.term A => (x_5 : hol.term A => g_3 (h_2 x_5)) x_4) x_1) ((x_4 : hol.term A => g_3 (h_2 x_4)) x_1) (thm_16 C) (thm_150 B A C x_1 h_2 g_3).

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. (g (h x)) x) x)) (\lambda x. (g (h x)) x))) ((= (\lambda x. (g (h x)) x)) (g (h x)))) ;)

(; dict ;)

def thm_152 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq C ((x_4 : hol.term A => (x_5 : hol.term A => g_3 (h_2 x_5)) x_4) x_1) ((x_4 : hol.term A => g_3 (h_2 x_4)) x_1)) (hol.eq C ((x_4 : hol.term A => g_3 (h_2 x_4)) x_1) (g_3 (h_2 x_1)))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => hol.APP_THM C hol.bool (hol.eq C ((x_4 : hol.term A => (x_5 : hol.term A => g_3 (h_2 x_5)) x_4) x_1)) (hol.eq C ((x_4 : hol.term A => g_3 (h_2 x_4)) x_1)) ((x_4 : hol.term A => g_3 (h_2 x_4)) x_1) (g_3 (h_2 x_1)) (thm_151 B A C x_1 h_2 g_3) (thm_148 B A C x_1 h_2 g_3).

(; Theorem: |- ((= (((Function.o g) h) x)) (g (h x))) ;)

(; dict ;)

def thm_153 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> hol.proof (hol.eq C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_3 h_2 x_1) (g_3 (h_2 x_1))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => hol.TRANS C (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_3 h_2 x_1) ((x_4 : hol.term A => g_3 (h_2 x_4)) x_1) (g_3 (h_2 x_1)) (thm_147 A B C x_1 h_2 g_3) (hol.EQ_MP (hol.eq C ((x_4 : hol.term A => (x_5 : hol.term A => g_3 (h_2 x_5)) x_4) x_1) ((x_4 : hol.term A => g_3 (h_2 x_4)) x_1)) (hol.eq C ((x_4 : hol.term A => g_3 (h_2 x_4)) x_1) (g_3 (h_2 x_1))) (thm_152 B A C x_1 h_2 g_3) (thm_150 B A C x_1 h_2 g_3)).

(; Theorem: |- ((= (f (((Function.o g) h) x))) (f (g (h x)))) ;)

(; dict ;)

def thm_154 : A : hol.type -> B : hol.type -> C : hol.type -> D : hol.type -> x_1 : hol.term A -> h_2 : hol.term (hol.arr A B) -> g_3 : hol.term (hol.arr B C) -> f_4 : hol.term (hol.arr C D) -> hol.proof (hol.eq D (f_4 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_3 h_2 x_1)) (f_4 (g_3 (h_2 x_1)))) :=
  A : hol.type => B : hol.type => C : hol.type => D : hol.type => x_1 : hol.term A => h_2 : hol.term (hol.arr A B) => g_3 : hol.term (hol.arr B C) => f_4 : hol.term (hol.arr C D) => hol.APP_THM C D f_4 f_4 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_3 h_2 x_1) (g_3 (h_2 x_1)) (thm_145 D C f_4) (thm_153 A B C x_1 h_2 g_3).

(; Theorem: |- ((= \lambda x. (f (((Function.o g) h) x))) \lambda x. (f (g (h x)))) ;)

(; dict ;)

def thm_155 : B : hol.type -> C : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr A D) (x_4 : hol.term A => f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1 x_4)) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4)))) :=
  B : hol.type => C : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => hol.ABS_THM A D (x_4 : hol.term A => f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1 x_4)) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4))) (x_4 : hol.term A => thm_154 A B C D x_4 h_1 g_2 f_3).

(; Theorem: |- ((= ((Function.o f) ((Function.o g) h))) \lambda x. (f (g (h x)))) ;)

(; dict ;)

def thm_156 : B : hol.type -> C : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1)) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4)))) :=
  B : hol.type => C : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => hol.TRANS (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1)) (x_4 : hol.term A => f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1 x_4)) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4))) (thm_144 B C D A h_1 g_2 f_3) (thm_155 B C D A h_1 g_2 f_3).

(; Theorem: |- ((= ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))) ((= \lambda x. (f (g (h x)))) \lambda x. (f (g (h x))))) ;)

(; dict ;)

def thm_157 : C : hol.type -> B : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1))) (hol.eq (hol.arr A D) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4))) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4))))) :=
  C : hol.type => B : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => hol.APP_THM (hol.arr A D) hol.bool (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1)) (hol.eq (hol.arr A D) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4)))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1)) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4))) (thm_142 C B D A h_1 g_2 f_3) (thm_156 B C D A h_1 g_2 f_3).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_158 : D : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A D) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A D) x_1 x_1) hol.true) :=
  D : hol.type => A : hol.type => x_1 : hol.term (hol.arr A D) => (A : hol.type => x_1 : hol.term A => thm_55 A x_1) (hol.arr A D) x_1.

(; Theorem: |- ((= ((= \lambda x. (f (g (h x)))) \lambda x. (f (g (h x))))) Data.Bool.T) ;)

(; dict ;)

def thm_159 : B : hol.type -> C : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A D) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4))) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4)))) hol.true) :=
  B : hol.type => C : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => (D : hol.type => A : hol.type => x_1 : hol.term (hol.arr A D) => thm_158 D A x_1) D A (x_4 : hol.term A => f_3 (g_2 (h_1 x_4))).

(; Theorem: |- ((= ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))) Data.Bool.T) ;)

(; dict ;)

def thm_160 : C : hol.type -> B : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1))) hol.true) :=
  C : hol.type => B : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => hol.TRANS hol.bool (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1))) (hol.eq (hol.arr A D) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4))) (x_4 : hol.term A => f_3 (g_2 (h_1 x_4)))) hol.true (thm_157 C B D A h_1 g_2 f_3) (thm_159 B C D A h_1 g_2 f_3).

(; Theorem: |- ((= Data.Bool.T) ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))) ;)

(; dict ;)

def thm_161 : C : hol.type -> B : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq hol.bool hol.true (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1)))) :=
  C : hol.type => B : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => hol.SYM hol.bool (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1))) hol.true (thm_160 C B D A h_1 g_2 f_3).

(; Theorem: |- ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h))) ;)

(; dict ;)

def thm_162 : C : hol.type -> B : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1))) :=
  C : hol.type => B : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => hol.EQ_MP hol.true (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1))) (thm_161 C B D A h_1 g_2 f_3) thm_1.

(; Theorem: |- (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))) ;)

(; dict ;)

def thm_163 : C : hol.type -> D : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr C D) -> hol.proof (hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)))) :=
  C : hol.type => D : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr C D) => h_3 : hol.term (hol.arr A B) => thm_162 C B D A h_3 g_1 f_2.

(; Theorem: |- (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h))))) ;)

(; dict ;)

def thm_164 : D : hol.type -> A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr C D) -> hol.proof (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) :=
  D : hol.type => A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr C D) => g_2 : hol.term (hol.arr B C) => hol.EQ_MP (hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))) (thm_125 C D B A g_2 f_1) (thm_163 C D B A g_2 f_1).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))))) ;)

(; dict ;)

def thm_165 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (hol.forall (hol.arr C D) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => f_1 : hol.term (hol.arr C D) => hol.EQ_MP (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3))))) (thm_122 D A C B f_1) (thm_164 D A C B f_1).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))))) ;)

(; thm ;)

def thm_166 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (hol.forall (hol.arr C D) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => hol.EQ_MP (hol.forall (hol.arr C D) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) (hol.forall (hol.arr C D) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)))))) (thm_119 A B D C) (thm_165 A B D C).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))))) \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))))) ;)

(; dict ;)

def thm_167 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr C D) hol.bool) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))))) :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => hol.REFL (hol.arr (hol.arr C D) hol.bool) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))))) \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))))) ;)

(; dict ;)

def thm_168 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr C D) hol.bool) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))))) :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => hol.TRANS (hol.arr (hol.arr C D) hol.bool) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))) (thm_167 A B D C) (thm_167 A B D C).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h)))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h)))))) ;)

(; dict ;)

def thm_169 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr C D) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))))) (hol.forall (hol.arr C D) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))))) :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => hol.APP_THM (hol.arr (hol.arr C D) hol.bool) hol.bool (hol.forall (hol.arr C D)) (hol.forall (hol.arr C D)) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))) (thm_116 D C) (thm_168 A B D C).

(; Theorem: |- ((= \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h)))) \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h)))) ;)

(; dict ;)

def thm_170 : D : hol.type -> A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))) :=
  D : hol.type => A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr C D) => hol.REFL (hol.arr (hol.arr B C) hol.bool) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))).

(; Theorem: |- ((= \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h)))) \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h)))) ;)

(; dict ;)

def thm_171 : D : hol.type -> A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr (hol.arr B C) hol.bool) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))) :=
  D : hol.type => A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr C D) => hol.TRANS (hol.arr (hol.arr B C) hol.bool) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))) (thm_170 D A C B f_1) (thm_170 D A C B f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))))) (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))))) ;)

(; dict ;)

def thm_172 : D : hol.type -> A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr C D) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))) (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))))) :=
  D : hol.type => A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr C D) => hol.APP_THM (hol.arr (hol.arr B C) hol.bool) hol.bool (hol.forall (hol.arr B C)) (hol.forall (hol.arr B C)) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))) (thm_13 C B) (thm_171 D A C B f_1).

(; Theorem: |- ((= \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))) \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))) ;)

(; dict ;)

def thm_173 : C : hol.type -> D : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3)) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3))) :=
  C : hol.type => D : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr C D) => hol.REFL (hol.arr (hol.arr A B) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3)).

(; Theorem: |- ((= \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))) \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))) ;)

(; dict ;)

def thm_174 : C : hol.type -> D : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3)) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3))) :=
  C : hol.type => D : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr C D) => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3)) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3)) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3)) (thm_173 C D B A g_1 f_2) (thm_173 C D B A g_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h)))) (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h)))) ;)

(; dict ;)

def thm_175 : C : hol.type -> D : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr C D) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3))) (hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3)))) :=
  C : hol.type => D : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr C D) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3)) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3)) (thm_14 B A) (thm_174 C D B A g_1 f_2).

(; Theorem: |- ((= ((Data.Bool.==> ((= x) y)) ((= y) x))) ((Data.Bool.==> ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_176 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)).

(; Theorem: |- ((= ((Data.Bool.==> ((= x) y)) ((= y) x))) ((Data.Bool.==> ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_177 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_176 A y_1 x_2) (thm_176 A y_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_178 : A : hol.type -> hyp_1 : hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) :=
  A : hol.type => hyp_1 : hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) => hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_179 : A : hol.type -> x_1 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A x_2 y_3) (hol.eq A y_3 x_2)))) -> hol.proof (hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A x_2 y_3) (hol.eq A y_3 x_2)))) => thm_178 A hyp_1 x_1.

(; Theorem: |- ((Data.Bool.==> ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_180 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq A x_3 y_4) (hol.eq A y_4 x_3)))) -> hol.proof (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq A x_3 y_4) (hol.eq A y_4 x_3)))) => thm_179 A x_2 hyp_1 y_1.

(; Theorem: |- ((= x) y) ;)

(; dict ;)

def thm_181 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_2 y_1) -> hol.proof (hol.eq A x_2 y_1) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_2 y_1) => hyp_1.

(; Theorem: |- ((= y) x) ;)

(; dict ;)

def thm_182 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq A x_3 y_4) (hol.eq A y_4 x_3)))) -> hyp_2 : hol.proof (hol.eq A x_1 y_2) -> hol.proof (hol.eq A y_2 x_1) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq A x_3 y_4) (hol.eq A y_4 x_3)))) => hyp_2 : hol.proof (hol.eq A x_1 y_2) => thm_180 A y_2 x_1 hyp_1 (thm_181 A y_2 x_1 hyp_2).

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x))))) ((= y) x)) ;)

(; dict ;)

def thm_183 : A : hol.type -> x_1 : hol.term A -> y_2 : hol.term A -> hyp_1 : hol.proof (hol.eq A x_1 y_2) -> hol.proof (hol.imp (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq A x_3 y_4) (hol.eq A y_4 x_3)))) (hol.eq A y_2 x_1)) :=
  A : hol.type => x_1 : hol.term A => y_2 : hol.term A => hyp_1 : hol.proof (hol.eq A x_1 y_2) => hyp_2 : hol.proof (hol.forall A (x_3 : hol.term A => hol.forall A (y_4 : hol.term A => hol.imp (hol.eq A x_3 y_4) (hol.eq A y_4 x_3)))) => thm_182 A x_1 y_2 hyp_2 hyp_1.

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_184 : A : hol.type -> y_1 : hol.term A -> hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A x_2 y_3) (hol.eq A y_3 x_2)))) -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => hyp_1 : hol.proof (hol.forall A (x_2 : hol.term A => hol.forall A (y_3 : hol.term A => hol.imp (hol.eq A x_2 y_3) (hol.eq A y_3 x_2)))) => x_2 : hol.term A => hyp_2 : hol.proof (hol.eq A x_2 y_1) => thm_183 A x_2 y_1 hyp_2 (thm_178 A hyp_1).

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_185 : A : hol.type -> hyp_1 : hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) -> hol.proof (hol.forall A (y_1 : hol.term A => hol.forall A (x_2 : hol.term A => hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)))) :=
  A : hol.type => hyp_1 : hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) => y_1 : hol.term A => thm_184 A y_1 hyp_1.

(; Theorem: |- ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= x) y)) ((= y) x))))) (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) y)) ((= y) x))))) ;)

(; dict ;)

def thm_186 : A : hol.type -> hol.proof (hol.imp (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) (hol.forall A (y_1 : hol.term A => hol.forall A (x_2 : hol.term A => hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))))) :=
  A : hol.type => hyp_1 : hol.proof (hol.forall A (x_1 : hol.term A => hol.forall A (y_2 : hol.term A => hol.imp (hol.eq A x_1 y_2) (hol.eq A y_2 x_1)))) => thm_185 A hyp_1.

(; Theorem: |- (Data.Bool.! \lambda y. (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) y)) ((= y) x)))) ;)

(; dict ;)

def thm_187 : A : hol.type -> hol.proof (hol.forall A (y_1 : hol.term A => hol.forall A (x_2 : hol.term A => hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)))) :=
  A : hol.type => thm_186 A (thm_4 A).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.==> ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_188 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.forall A (x_2 : hol.term A => hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => thm_187 A y_1.

(; Theorem: |- ((Data.Bool.==> ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_189 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_188 A y_1 x_2.

(; Theorem: |- ((Data.Bool.==> ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_190 : D : hol.type -> A : hol.type -> y_1 : hol.term (hol.arr A D) -> x_2 : hol.term (hol.arr A D) -> hol.proof (hol.imp (hol.eq (hol.arr A D) x_2 y_1) (hol.eq (hol.arr A D) y_1 x_2)) :=
  D : hol.type => A : hol.type => y_1 : hol.term (hol.arr A D) => x_2 : hol.term (hol.arr A D) => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.imp (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_177 A y_1 x_2) (thm_189 A y_1 x_2)) (hol.arr A D) y_1 x_2.

(; Theorem: |- ((Data.Bool.==> ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))) ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))) ;)

(; dict ;)

def thm_191 : C : hol.type -> B : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.imp (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1))) (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1))) :=
  C : hol.type => B : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => (D : hol.type => A : hol.type => y_1 : hol.term (hol.arr A D) => x_2 : hol.term (hol.arr A D) => thm_190 D A y_1 x_2) D A (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1).

(; Theorem: |- ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h)) ;)

(; dict ;)

def thm_192 : B : hol.type -> C : hol.type -> D : hol.type -> A : hol.type -> h_1 : hol.term (hol.arr A B) -> g_2 : hol.term (hol.arr B C) -> f_3 : hol.term (hol.arr C D) -> hol.proof (hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_3 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_1)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_3 g_2) h_1)) :=
  B : hol.type => C : hol.type => D : hol.type => A : hol.type => h_1 : hol.term (hol.arr A B) => g_2 : hol.term (hol.arr B C) => f_3 : hol.term (hol.arr C D) => thm_191 C B D A h_1 g_2 f_3 (thm_162 C B D A h_1 g_2 f_3).

(; Theorem: |- (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))) ;)

(; dict ;)

def thm_193 : C : hol.type -> D : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr C D) -> hol.proof (hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_2 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_1 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_2 g_1) h_3))) :=
  C : hol.type => D : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr C D) => h_3 : hol.term (hol.arr A B) => thm_192 B C D A h_3 g_1 f_2.

(; Theorem: |- (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h)))) ;)

(; dict ;)

def thm_194 : D : hol.type -> A : hol.type -> C : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr C D) -> hol.proof (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))) :=
  D : hol.type => A : hol.type => C : hol.type => B : hol.type => f_1 : hol.term (hol.arr C D) => g_2 : hol.term (hol.arr B C) => hol.EQ_MP (hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))) (hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))) (thm_175 C D B A g_2 f_1) (thm_193 C D B A g_2 f_1).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))))) ;)

(; dict ;)

def thm_195 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (hol.forall (hol.arr C D) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))))) :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => f_1 : hol.term (hol.arr C D) => hol.EQ_MP (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))) (hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3)))) (thm_172 D A C B f_1) (thm_194 D A C B f_1).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))))) ;)

(; thm ;)

def thm_196 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (hol.forall (hol.arr C D) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))))) :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => hol.EQ_MP (hol.forall (hol.arr C D) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))))) (hol.forall (hol.arr C D) (f_1 : hol.term (hol.arr C D) => hol.forall (hol.arr B C) (g_2 : hol.term (hol.arr B C) => hol.forall (hol.arr A B) (h_3 : hol.term (hol.arr A B) => hol.eq (hol.arr A D) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr A C) (hol.arr A D))) f_1 (Function_2Eo (hol.arr (hol.arr B C) (hol.arr (hol.arr A B) (hol.arr A C))) g_2 h_3)) (Function_2Eo (hol.arr (hol.arr B D) (hol.arr (hol.arr A B) (hol.arr A D))) (Function_2Eo (hol.arr (hol.arr C D) (hol.arr (hol.arr B C) (hol.arr B D))) f_1 g_2) h_3))))) (thm_169 A B D C) (thm_195 A B D C).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_197 : A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr A hol.bool)) (hol.eq A) (hol.eq A)) :=
  A : hol.type => hol.REFL (hol.arr A (hol.arr A hol.bool)) (hol.eq A).

(; Theorem: |- ((= ((= Function.id) \lambda x. x)) ((= Function.id) \lambda x. x)) ;)

(; dict ;)

def thm_198 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A A) (Function_2Eid (hol.arr A A)) (x_1 : hol.term A => x_1)) (hol.eq (hol.arr A A) (Function_2Eid (hol.arr A A)) (x_1 : hol.term A => x_1))) :=
  A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr A A) (Function_2Eid (hol.arr A A)) (x_1 : hol.term A => x_1)).

(; Theorem: |- ((= ((= Function.id) \lambda x. x)) ((= Function.id) \lambda x. x)) ;)

(; dict ;)

def thm_199 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A A) (Function_2Eid (hol.arr A A)) (x_1 : hol.term A => x_1)) (hol.eq (hol.arr A A) (Function_2Eid (hol.arr A A)) (x_1 : hol.term A => x_1))) :=
  A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr A A) (Function_2Eid (hol.arr A A)) (x_1 : hol.term A => x_1)) (hol.eq (hol.arr A A) (Function_2Eid (hol.arr A A)) (x_1 : hol.term A => x_1)) (hol.eq (hol.arr A A) (Function_2Eid (hol.arr A A)) (x_1 : hol.term A => x_1)) (thm_198 A) (thm_198 A).

(; Theorem: |- ((= (Function.id x)) (\lambda x. x x)) ;)

(; dict ;)

def thm_200 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A (Function_2Eid (hol.arr A A) x_1) ((x_2 : hol.term A => x_2) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A A (Function_2Eid (hol.arr A A)) (x_2 : hol.term A => x_2) x_1 x_1 (hol.EQ_MP (hol.eq (hol.arr A A) (Function_2Eid (hol.arr A A)) (x_2 : hol.term A => x_2)) (hol.eq (hol.arr A A) (Function_2Eid (hol.arr A A)) (x_2 : hol.term A => x_2)) (thm_199 A) (thm_5 A)) (thm_54 A x_1).

(; Theorem: |- ((= (\lambda x. x x)) x) ;)

(; dict ;)

def thm_201 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A ((x_2 : hol.term A => x_2) x_1) x_1) :=
  A : hol.type => x_1 : hol.term A => hol.BETA_CONV A A (x_2 : hol.term A => x_2) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. x x)) \lambda x. x) ;)

(; dict ;)

def thm_202 : A : hol.type -> hol.proof (hol.eq (hol.arr A A) (x_1 : hol.term A => (x_2 : hol.term A => x_2) x_1) (x_1 : hol.term A => x_1)) :=
  A : hol.type => hol.ABS_THM A A (x_1 : hol.term A => (x_2 : hol.term A => x_2) x_1) (x_1 : hol.term A => x_1) (x_1 : hol.term A => thm_201 A x_1).

(; Theorem: |- ((= (\lambda x. (\lambda x. x x) x)) (\lambda x. x x)) ;)

(; dict ;)

def thm_203 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A ((x_2 : hol.term A => (x_3 : hol.term A => x_3) x_2) x_1) ((x_2 : hol.term A => x_2) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A A (x_2 : hol.term A => (x_3 : hol.term A => x_3) x_2) (x_2 : hol.term A => x_2) x_1 x_1 (thm_202 A) (thm_54 A x_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. x x) x))) (= (\lambda x. x x))) ;)

(; dict ;)

def thm_204 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A ((x_2 : hol.term A => (x_3 : hol.term A => x_3) x_2) x_1)) (hol.eq A ((x_2 : hol.term A => x_2) x_1))) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) ((x_2 : hol.term A => (x_3 : hol.term A => x_3) x_2) x_1) ((x_2 : hol.term A => x_2) x_1) (thm_197 A) (thm_203 A x_1).

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. x x) x)) (\lambda x. x x))) ((= (\lambda x. x x)) x)) ;)

(; dict ;)

def thm_205 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((x_2 : hol.term A => (x_3 : hol.term A => x_3) x_2) x_1) ((x_2 : hol.term A => x_2) x_1)) (hol.eq A ((x_2 : hol.term A => x_2) x_1) x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A hol.bool (hol.eq A ((x_2 : hol.term A => (x_3 : hol.term A => x_3) x_2) x_1)) (hol.eq A ((x_2 : hol.term A => x_2) x_1)) ((x_2 : hol.term A => x_2) x_1) x_1 (thm_204 A x_1) (thm_201 A x_1).

(; Theorem: |- ((= (Function.id x)) x) ;)

(; dict ;)

def thm_206 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS A (Function_2Eid (hol.arr A A) x_1) ((x_2 : hol.term A => x_2) x_1) x_1 (thm_200 A x_1) (hol.EQ_MP (hol.eq A ((x_2 : hol.term A => (x_3 : hol.term A => x_3) x_2) x_1) ((x_2 : hol.term A => x_2) x_1)) (hol.eq A ((x_2 : hol.term A => x_2) x_1) x_1) (thm_205 A x_1) (thm_203 A x_1)).

(; Theorem: |- ((= (= (Function.id x))) (= x)) ;)

(; dict ;)

def thm_207 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (Function_2Eid (hol.arr A A) x_1)) (hol.eq A x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (Function_2Eid (hol.arr A A) x_1) x_1 (thm_197 A) (thm_206 A x_1).

(; Theorem: |- ((= ((= (Function.id x)) x)) ((= x) x)) ;)

(; dict ;)

def thm_208 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) (hol.eq A x_1 x_1)) :=
  A : hol.type => x_1 : hol.term A => hol.APP_THM A hol.bool (hol.eq A (Function_2Eid (hol.arr A A) x_1)) (hol.eq A x_1) x_1 x_1 (thm_207 A x_1) (thm_54 A x_1).

(; Theorem: |- ((= ((= (Function.id x)) x)) Data.Bool.T) ;)

(; dict ;)

def thm_209 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) hol.true) :=
  A : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) (hol.eq A x_1 x_1) hol.true (thm_208 A x_1) (thm_55 A x_1).

(; Theorem: |- ((= \lambda x. ((= (Function.id x)) x)) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_210 : A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) (x_1 : hol.term A => hol.true)) :=
  A : hol.type => hol.ABS_THM A hol.bool (x_1 : hol.term A => hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) (x_1 : hol.term A => hol.true) (x_1 : hol.term A => thm_209 A x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (Function.id x)) x))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_211 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1)) (hol.forall A (x_1 : hol.term A => hol.true))) :=
  A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1) (x_1 : hol.term A => hol.true) (thm_15 A) (thm_210 A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_212 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => thm_65 A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (Function.id x)) x))) Data.Bool.T) ;)

(; dict ;)

def thm_213 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1)) hol.true) :=
  A : hol.type => hol.TRANS hol.bool (hol.forall A (x_1 : hol.term A => hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1)) (hol.forall A (x_1 : hol.term A => hol.true)) hol.true (thm_211 A) (thm_212 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda x. ((= (Function.id x)) x))) ;)

(; dict ;)

def thm_214 : A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall A (x_1 : hol.term A => hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1))) :=
  A : hol.type => hol.SYM hol.bool (hol.forall A (x_1 : hol.term A => hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1)) hol.true (thm_213 A).

(; Theorem: |- (Data.Bool.! \lambda x. ((= (Function.id x)) x)) ;)

(; dict ;)

def thm_215 : A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1)) :=
  A : hol.type => hol.EQ_MP hol.true (hol.forall A (x_1 : hol.term A => hol.eq A (Function_2Eid (hol.arr A A) x_1) x_1)) (thm_214 A) thm_1.

(; Theorem: |- ((= \lambda f. ((= ((Function.o Function.id) f)) f)) \lambda f. ((= ((Function.o Function.id) f)) f)) ;)

(; dict ;)

def thm_216 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1)) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1).

(; Theorem: |- ((= \lambda f. ((= ((Function.o Function.id) f)) f)) \lambda f. ((= ((Function.o Function.id) f)) f)) ;)

(; dict ;)

def thm_217 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1)) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1) (thm_216 B A) (thm_216 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. ((= ((Function.o Function.id) f)) f))) (Data.Bool.! \lambda f. ((= ((Function.o Function.id) f)) f))) ;)

(; dict ;)

def thm_218 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1)) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1) (thm_14 B A) (thm_217 B A).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_219 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))).

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_220 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_219 B A g_1 f_2) (thm_219 B A g_1 f_2).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_221 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.REFL hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)).

(; Theorem: |- ((= ((= ((= x) y)) ((= y) x))) ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_222 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2))) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_221 A y_1 x_2) (thm_221 A y_1 x_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= ((= x) y)) ((= y) x))) ;)

(; dict ;)

def thm_223 : A : hol.type -> x_1 : hol.term A -> hol.proof (hol.forall A (y_2 : hol.term A => hol.eq hol.bool (hol.eq A x_1 y_2) (hol.eq A y_2 x_1))) :=
  A : hol.type => x_1 : hol.term A => thm_6 A x_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_224 : A : hol.type -> y_1 : hol.term A -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) :=
  A : hol.type => y_1 : hol.term A => x_2 : hol.term A => thm_223 A x_2 y_1.

(; Theorem: |- ((= ((= x) y)) ((= y) x)) ;)

(; dict ;)

def thm_225 : y_1 : hol.term hol.bool -> x_2 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool x_2 y_1) (hol.eq hol.bool y_1 x_2)) :=
  y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => (A : hol.type => y_1 : hol.term A => x_2 : hol.term A => hol.EQ_MP (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (hol.eq hol.bool (hol.eq A x_2 y_1) (hol.eq A y_1 x_2)) (thm_222 A y_1 x_2) (thm_224 A y_1 x_2)) hol.bool y_1 x_2.

(; Theorem: |- ((= ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_226 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => (y_1 : hol.term hol.bool => x_2 : hol.term hol.bool => thm_225 y_1 x_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3))) (hol.eq (hol.arr A B) f_2 g_1).

(; Theorem: |- ((= \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))) ;)

(; dict ;)

def thm_227 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (g_2 : hol.term (hol.arr A B) => thm_226 B A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_228 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)) (thm_14 B A) (thm_227 B A f_1).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g)))) ;)

(; dict ;)

def thm_229 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) hol.bool (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (f_1 : hol.term (hol.arr A B) => thm_228 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) ;)

(; dict ;)

def thm_230 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2))) (thm_14 B A) (thm_229 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ((= f) g))))) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))))) ;)

(; dict ;)

def thm_231 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (thm_230 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))))) ;)

(; dict ;)

def thm_232 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))) (hol.eq (hol.arr A B) f_1 g_2)))) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3)))))) (thm_231 B A) (thm_7 B A).

(; Theorem: |- (Data.Bool.! \lambda g. ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x))))) ;)

(; dict ;)

def thm_233 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.eq hol.bool (hol.eq (hol.arr A B) f_1 g_2) (hol.forall A (x_3 : hol.term A => hol.eq B (f_1 x_3) (g_2 x_3))))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_232 B A f_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_234 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_233 B A f_2 g_1.

(; Theorem: |- ((= ((= ((Function.o Function.id) f)) f)) (Data.Bool.! \lambda x. ((= (((Function.o Function.id) f) x)) (f x)))) ;)

(; dict ;)

def thm_235 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1) (hol.forall A (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1 x_2) (f_1 x_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (hol.eq hol.bool (hol.eq (hol.arr A B) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq B (f_2 x_3) (g_1 x_3)))) (thm_220 B A g_1 f_2) (thm_234 B A g_1 f_2)) B A g_1 f_2) B A f_1 (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_236 : B : hol.type -> hol.proof (hol.eq (hol.arr B (hol.arr B hol.bool)) (hol.eq B) (hol.eq B)) :=
  B : hol.type => hol.REFL (hol.arr B (hol.arr B hol.bool)) (hol.eq B).

(; Theorem: |- ((= ((Function.o f) g)) \lambda x. (f (g x))) ;)

(; dict ;)

def thm_237 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr B B) -> hol.proof (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B B) => (B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => thm_38 B C A g_1 f_2) B B A g_1 f_2.

(; Theorem: |- ((= ((Function.o Function.id) f)) \lambda x. (Function.id (f x))) ;)

(; dict ;)

def thm_238 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) (x_2 : hol.term A => Function_2Eid (hol.arr B B) (f_1 x_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B B) => thm_237 B A g_1 f_2) B A f_1 (Function_2Eid (hol.arr B B)).

(; Theorem: |- ((= (Function.id x)) x) ;)

(; dict ;)

def thm_239 : B : hol.type -> x_1 : hol.term B -> hol.proof (hol.eq B (Function_2Eid (hol.arr B B) x_1) x_1) :=
  B : hol.type => x_1 : hol.term B => (A : hol.type => x_1 : hol.term A => thm_206 A x_1) B x_1.

(; Theorem: |- ((= (Function.id (f x))) (f x)) ;)

(; dict ;)

def thm_240 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (Function_2Eid (hol.arr B B) (f_2 x_1)) (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => (B : hol.type => x_1 : hol.term B => thm_239 B x_1) B (f_2 x_1).

(; Theorem: |- ((= \lambda x. (Function.id (f x))) \lambda x. (f x)) ;)

(; dict ;)

def thm_241 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => Function_2Eid (hol.arr B B) (f_1 x_2)) (x_2 : hol.term A => f_1 x_2)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM A B (x_2 : hol.term A => Function_2Eid (hol.arr B B) (f_1 x_2)) (x_2 : hol.term A => f_1 x_2) (x_2 : hol.term A => thm_240 A B x_2 f_1).

(; Theorem: |- ((= ((Function.o Function.id) f)) \lambda x. (f x)) ;)

(; dict ;)

def thm_242 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) (x_2 : hol.term A => f_1 x_2)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) (x_2 : hol.term A => Function_2Eid (hol.arr B B) (f_1 x_2)) (x_2 : hol.term A => f_1 x_2) (thm_238 B A f_1) (thm_241 B A f_1).

(; Theorem: |- ((= (((Function.o Function.id) f) x)) (\lambda x. (f x) x)) ;)

(; dict ;)

def thm_243 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_2 x_1) ((x_3 : hol.term A => f_2 x_3) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM A B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_2) (x_3 : hol.term A => f_2 x_3) x_1 x_1 (thm_242 B A f_2) (thm_54 A x_1).

(; Theorem: |- ((= ((= (\lambda x. (f x) y)) (f y))) ((= (\lambda x. (f x) y)) (f y))) ;)

(; dict ;)

def thm_244 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.REFL hol.bool (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)).

(; Theorem: |- ((= ((= (\lambda x. (f x) y)) (f y))) ((= (\lambda x. (f x) y)) (f y))) ;)

(; dict ;)

def thm_245 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1))) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (thm_244 A B y_1 f_2) (thm_244 A B y_1 f_2).

(; Theorem: |- (Data.Bool.! \lambda y. ((= (\lambda x. (f x) y)) (f y))) ;)

(; dict ;)

def thm_246 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.forall A (y_2 : hol.term A => hol.eq B ((x_3 : hol.term A => f_1 x_3) y_2) (f_1 y_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_8 B A f_1.

(; Theorem: |- ((= (\lambda x. (f x) y)) (f y)) ;)

(; dict ;)

def thm_247 : A : hol.type -> B : hol.type -> y_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) :=
  A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => thm_246 B A f_2 y_1.

(; Theorem: |- ((= (\lambda x_1. (f x_1) x)) (f x)) ;)

(; dict ;)

def thm_248 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B ((x__1_3 : hol.term A => f_2 x__1_3) x_1) (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => (A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => (A : hol.type => B : hol.type => y_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.EQ_MP (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3) y_1) (f_2 y_1)) (thm_245 A B y_1 f_2) (thm_247 A B y_1 f_2)) A B y_1 f_2) A B x_1 f_2.

(; Theorem: |- ((= (((Function.o Function.id) f) x)) (f x)) ;)

(; dict ;)

def thm_249 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_2 x_1) (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.TRANS B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_2 x_1) ((x_3 : hol.term A => f_2 x_3) x_1) (f_2 x_1) (thm_243 A B x_1 f_2) (thm_248 A B x_1 f_2).

(; Theorem: |- ((= (= (((Function.o Function.id) f) x))) (= (f x))) ;)

(; dict ;)

def thm_250 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_2 x_1)) (hol.eq B (f_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_2 x_1) (f_2 x_1) (thm_236 B) (thm_249 A B x_1 f_2).

(; Theorem: |- ((= (f x)) (f x)) ;)

(; dict ;)

def thm_251 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (f_2 x_1) (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.REFL B (f_2 x_1).

(; Theorem: |- ((= ((= (((Function.o Function.id) f) x)) (f x))) ((= (f x)) (f x))) ;)

(; dict ;)

def thm_252 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_2 x_1) (f_2 x_1)) (hol.eq B (f_2 x_1) (f_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM B hol.bool (hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_2 x_1)) (hol.eq B (f_2 x_1)) (f_2 x_1) (f_2 x_1) (thm_250 A B x_1 f_2) (thm_251 A B x_1 f_2).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_253 : B : hol.type -> x_1 : hol.term B -> hol.proof (hol.eq hol.bool (hol.eq B x_1 x_1) hol.true) :=
  B : hol.type => x_1 : hol.term B => (A : hol.type => x_1 : hol.term A => thm_55 A x_1) B x_1.

(; Theorem: |- ((= ((= (f x)) (f x))) Data.Bool.T) ;)

(; dict ;)

def thm_254 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (f_2 x_1) (f_2 x_1)) hol.true) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => (B : hol.type => x_1 : hol.term B => thm_253 B x_1) B (f_2 x_1).

(; Theorem: |- ((= ((= (((Function.o Function.id) f) x)) (f x))) Data.Bool.T) ;)

(; dict ;)

def thm_255 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_2 x_1) (f_2 x_1)) hol.true) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_2 x_1) (f_2 x_1)) (hol.eq B (f_2 x_1) (f_2 x_1)) hol.true (thm_252 A B x_1 f_2) (thm_254 A B x_1 f_2).

(; Theorem: |- ((= \lambda x. ((= (((Function.o Function.id) f) x)) (f x))) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_256 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1 x_2) (f_1 x_2)) (x_2 : hol.term A => hol.true)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1 x_2) (f_1 x_2)) (x_2 : hol.term A => hol.true) (x_2 : hol.term A => thm_255 A B x_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (((Function.o Function.id) f) x)) (f x)))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_257 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1 x_2) (f_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.true))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1 x_2) (f_1 x_2)) (x_2 : hol.term A => hol.true) (thm_15 A) (thm_256 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (((Function.o Function.id) f) x)) (f x)))) Data.Bool.T) ;)

(; dict ;)

def thm_258 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1 x_2) (f_1 x_2))) hol.true) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.forall A (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1 x_2) (f_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.true)) hol.true (thm_257 B A f_1) (thm_212 A).

(; Theorem: |- ((= ((= ((Function.o Function.id) f)) f)) Data.Bool.T) ;)

(; dict ;)

def thm_259 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1) hol.true) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1) (hol.forall A (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1 x_2) (f_1 x_2))) hol.true (thm_235 B A f_1) (thm_258 B A f_1).

(; Theorem: |- ((= Data.Bool.T) ((= ((Function.o Function.id) f)) f)) ;)

(; dict ;)

def thm_260 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool hol.true (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.SYM hol.bool (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1) hol.true (thm_259 B A f_1).

(; Theorem: |- ((= ((Function.o Function.id) f)) f) ;)

(; dict ;)

def thm_261 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.EQ_MP hol.true (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1) (thm_260 B A f_1) thm_1.

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Function.o Function.id) f)) f)) ;)

(; dict ;)

def thm_262 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_261 B A f_1.

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Function.o Function.id) f)) f)) ;)

(; thm ;)

def thm_263 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1)) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1)) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr B B) (hol.arr (hol.arr A B) (hol.arr A B))) (Function_2Eid (hol.arr B B)) f_1) f_1)) (thm_218 B A) (thm_262 B A).

(; Theorem: |- ((= \lambda f. ((= ((Function.o f) Function.id)) f)) \lambda f. ((= ((Function.o f) Function.id)) f)) ;)

(; dict ;)

def thm_264 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1)) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1).

(; Theorem: |- ((= \lambda f. ((= ((Function.o f) Function.id)) f)) \lambda f. ((= ((Function.o f) Function.id)) f)) ;)

(; dict ;)

def thm_265 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1)) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A B) hol.bool) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1) (thm_264 B A) (thm_264 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. ((= ((Function.o f) Function.id)) f))) (Data.Bool.! \lambda f. ((= ((Function.o f) Function.id)) f))) ;)

(; dict ;)

def thm_266 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1)) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1) (thm_14 B A) (thm_265 B A).

(; Theorem: |- ((= ((= ((Function.o f) Function.id)) f)) (Data.Bool.! \lambda x. ((= (((Function.o f) Function.id) x)) (f x)))) ;)

(; dict ;)

def thm_267 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1) (hol.forall A (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A)) x_2) (f_1 x_2)))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_234 B A g_1 f_2) B A f_1 (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))).

(; Theorem: |- ((= ((Function.o f) g)) \lambda x. (f (g x))) ;)

(; dict ;)

def thm_268 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A A) -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_2 g_1) (x_3 : hol.term A => f_2 (g_1 x_3))) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A A) => f_2 : hol.term (hol.arr A B) => (B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr B C) => thm_38 B C A g_1 f_2) A B A g_1 f_2.

(; Theorem: |- ((= ((Function.o f) Function.id)) \lambda x. (f (Function.id x))) ;)

(; dict ;)

def thm_269 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) (x_2 : hol.term A => f_1 (Function_2Eid (hol.arr A A) x_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A A) => f_2 : hol.term (hol.arr A B) => thm_268 B A g_1 f_2) B A (Function_2Eid (hol.arr A A)) f_1.

(; Theorem: |- ((= f) f) ;)

(; dict ;)

def thm_270 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) f_1 f_1) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.REFL (hol.arr A B) f_1.

(; Theorem: |- ((= (f (Function.id x))) (f x)) ;)

(; dict ;)

def thm_271 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (f_2 (Function_2Eid (hol.arr A A) x_1)) (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM A B f_2 f_2 (Function_2Eid (hol.arr A A) x_1) x_1 (thm_270 B A f_2) (thm_206 A x_1).

(; Theorem: |- ((= \lambda x. (f (Function.id x))) \lambda x. (f x)) ;)

(; dict ;)

def thm_272 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => f_1 (Function_2Eid (hol.arr A A) x_2)) (x_2 : hol.term A => f_1 x_2)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM A B (x_2 : hol.term A => f_1 (Function_2Eid (hol.arr A A) x_2)) (x_2 : hol.term A => f_1 x_2) (x_2 : hol.term A => thm_271 A B x_2 f_1).

(; Theorem: |- ((= ((Function.o f) Function.id)) \lambda x. (f x)) ;)

(; dict ;)

def thm_273 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) (x_2 : hol.term A => f_1 x_2)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) (x_2 : hol.term A => f_1 (Function_2Eid (hol.arr A A) x_2)) (x_2 : hol.term A => f_1 x_2) (thm_269 B A f_1) (thm_272 B A f_1).

(; Theorem: |- ((= (((Function.o f) Function.id) x)) (\lambda x. (f x) x)) ;)

(; dict ;)

def thm_274 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_2 (Function_2Eid (hol.arr A A)) x_1) ((x_3 : hol.term A => f_2 x_3) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM A B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_2 (Function_2Eid (hol.arr A A))) (x_3 : hol.term A => f_2 x_3) x_1 x_1 (thm_273 B A f_2) (thm_54 A x_1).

(; Theorem: |- ((= (((Function.o f) Function.id) x)) (f x)) ;)

(; dict ;)

def thm_275 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_2 (Function_2Eid (hol.arr A A)) x_1) (f_2 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.TRANS B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_2 (Function_2Eid (hol.arr A A)) x_1) ((x_3 : hol.term A => f_2 x_3) x_1) (f_2 x_1) (thm_274 A B x_1 f_2) (thm_248 A B x_1 f_2).

(; Theorem: |- ((= (= (((Function.o f) Function.id) x))) (= (f x))) ;)

(; dict ;)

def thm_276 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_2 (Function_2Eid (hol.arr A A)) x_1)) (hol.eq B (f_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_2 (Function_2Eid (hol.arr A A)) x_1) (f_2 x_1) (thm_236 B) (thm_275 A B x_1 f_2).

(; Theorem: |- ((= ((= (((Function.o f) Function.id) x)) (f x))) ((= (f x)) (f x))) ;)

(; dict ;)

def thm_277 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_2 (Function_2Eid (hol.arr A A)) x_1) (f_2 x_1)) (hol.eq B (f_2 x_1) (f_2 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.APP_THM B hol.bool (hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_2 (Function_2Eid (hol.arr A A)) x_1)) (hol.eq B (f_2 x_1)) (f_2 x_1) (f_2 x_1) (thm_276 A B x_1 f_2) (thm_251 A B x_1 f_2).

(; Theorem: |- ((= ((= (((Function.o f) Function.id) x)) (f x))) Data.Bool.T) ;)

(; dict ;)

def thm_278 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_2 (Function_2Eid (hol.arr A A)) x_1) (f_2 x_1)) hol.true) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_2 (Function_2Eid (hol.arr A A)) x_1) (f_2 x_1)) (hol.eq B (f_2 x_1) (f_2 x_1)) hol.true (thm_277 A B x_1 f_2) (thm_254 A B x_1 f_2).

(; Theorem: |- ((= \lambda x. ((= (((Function.o f) Function.id) x)) (f x))) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_279 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A)) x_2) (f_1 x_2)) (x_2 : hol.term A => hol.true)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A)) x_2) (f_1 x_2)) (x_2 : hol.term A => hol.true) (x_2 : hol.term A => thm_278 A B x_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (((Function.o f) Function.id) x)) (f x)))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_280 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A)) x_2) (f_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.true))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A)) x_2) (f_1 x_2)) (x_2 : hol.term A => hol.true) (thm_15 A) (thm_279 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (((Function.o f) Function.id) x)) (f x)))) Data.Bool.T) ;)

(; dict ;)

def thm_281 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A)) x_2) (f_1 x_2))) hol.true) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.forall A (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A)) x_2) (f_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.true)) hol.true (thm_280 B A f_1) (thm_212 A).

(; Theorem: |- ((= ((= ((Function.o f) Function.id)) f)) Data.Bool.T) ;)

(; dict ;)

def thm_282 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1) hol.true) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1) (hol.forall A (x_2 : hol.term A => hol.eq B (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A)) x_2) (f_1 x_2))) hol.true (thm_267 B A f_1) (thm_281 B A f_1).

(; Theorem: |- ((= Data.Bool.T) ((= ((Function.o f) Function.id)) f)) ;)

(; dict ;)

def thm_283 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool hol.true (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.SYM hol.bool (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1) hol.true (thm_282 B A f_1).

(; Theorem: |- ((= ((Function.o f) Function.id)) f) ;)

(; dict ;)

def thm_284 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => hol.EQ_MP hol.true (hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1) (thm_283 B A f_1) thm_1.

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Function.o f) Function.id)) f)) ;)

(; dict ;)

def thm_285 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A B) => thm_284 B A f_1.

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Function.o f) Function.id)) f)) ;)

(; thm ;)

def thm_286 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1)) :=
  B : hol.type => A : hol.type => hol.EQ_MP (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1)) (hol.forall (hol.arr A B) (f_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A B) (Function_2Eo (hol.arr (hol.arr A B) (hol.arr (hol.arr A A) (hol.arr A B))) f_1 (Function_2Eid (hol.arr A A))) f_1)) (thm_266 B A) (thm_285 B A).

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_287 : B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B) (hol.forall B)) :=
  B : hol.type => hol.REFL (hol.arr (hol.arr B hol.bool) hol.bool) (hol.forall B).

(; Theorem: |- ((= ((= Function.const) \lambda x. \lambda y. x)) ((= Function.const) \lambda x. \lambda y. x)) ;)

(; dict ;)

def thm_288 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B A)) (Function_2Econst (hol.arr A (hol.arr B A))) (x_1 : hol.term A => y_2 : hol.term B => x_1)) (hol.eq (hol.arr A (hol.arr B A)) (Function_2Econst (hol.arr A (hol.arr B A))) (x_1 : hol.term A => y_2 : hol.term B => x_1))) :=
  B : hol.type => A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr A (hol.arr B A)) (Function_2Econst (hol.arr A (hol.arr B A))) (x_1 : hol.term A => y_2 : hol.term B => x_1)).

(; Theorem: |- ((= ((= Function.const) \lambda x. \lambda y. x)) ((= Function.const) \lambda x. \lambda y. x)) ;)

(; dict ;)

def thm_289 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B A)) (Function_2Econst (hol.arr A (hol.arr B A))) (x_1 : hol.term A => y_2 : hol.term B => x_1)) (hol.eq (hol.arr A (hol.arr B A)) (Function_2Econst (hol.arr A (hol.arr B A))) (x_1 : hol.term A => y_2 : hol.term B => x_1))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr A (hol.arr B A)) (Function_2Econst (hol.arr A (hol.arr B A))) (x_1 : hol.term A => y_2 : hol.term B => x_1)) (hol.eq (hol.arr A (hol.arr B A)) (Function_2Econst (hol.arr A (hol.arr B A))) (x_1 : hol.term A => y_2 : hol.term B => x_1)) (hol.eq (hol.arr A (hol.arr B A)) (Function_2Econst (hol.arr A (hol.arr B A))) (x_1 : hol.term A => y_2 : hol.term B => x_1)) (thm_288 B A) (thm_288 B A).

(; Theorem: |- ((= (Function.const x)) (\lambda x. \lambda y. x x)) ;)

(; dict ;)

def thm_290 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B A) (Function_2Econst (hol.arr A (hol.arr B A)) x_1) ((x_2 : hol.term A => y_3 : hol.term B => x_2) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.APP_THM A (hol.arr B A) (Function_2Econst (hol.arr A (hol.arr B A))) (x_2 : hol.term A => y_3 : hol.term B => x_2) x_1 x_1 (hol.EQ_MP (hol.eq (hol.arr A (hol.arr B A)) (Function_2Econst (hol.arr A (hol.arr B A))) (x_2 : hol.term A => y_3 : hol.term B => x_2)) (hol.eq (hol.arr A (hol.arr B A)) (Function_2Econst (hol.arr A (hol.arr B A))) (x_2 : hol.term A => y_3 : hol.term B => x_2)) (thm_289 B A) (thm_9 B A)) (thm_54 A x_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_291 : A : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B A) (hol.arr (hol.arr B A) hol.bool)) (hol.eq (hol.arr B A)) (hol.eq (hol.arr B A))) :=
  A : hol.type => B : hol.type => hol.REFL (hol.arr (hol.arr B A) (hol.arr (hol.arr B A) hol.bool)) (hol.eq (hol.arr B A)).

(; Theorem: |- ((= (\lambda x. \lambda y. x x)) \lambda y. x) ;)

(; dict ;)

def thm_292 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B A) ((x_2 : hol.term A => y_3 : hol.term B => x_2) x_1) (y_2 : hol.term B => x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.BETA_CONV A (hol.arr B A) (x_2 : hol.term A => y_3 : hol.term B => x_2) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. \lambda y. x x)) \lambda x. \lambda y. x) ;)

(; dict ;)

def thm_293 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr B A)) (x_1 : hol.term A => (x_2 : hol.term A => y_3 : hol.term B => x_2) x_1) (x_1 : hol.term A => y_2 : hol.term B => x_1)) :=
  B : hol.type => A : hol.type => hol.ABS_THM A (hol.arr B A) (x_1 : hol.term A => (x_2 : hol.term A => y_3 : hol.term B => x_2) x_1) (x_1 : hol.term A => y_2 : hol.term B => x_1) (x_1 : hol.term A => thm_292 A B x_1).

(; Theorem: |- ((= (\lambda x. (\lambda x. \lambda y. x x) x)) (\lambda x. \lambda y. x x)) ;)

(; dict ;)

def thm_294 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B A) ((x_2 : hol.term A => (x_3 : hol.term A => y_4 : hol.term B => x_3) x_2) x_1) ((x_2 : hol.term A => y_3 : hol.term B => x_2) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.APP_THM A (hol.arr B A) (x_2 : hol.term A => (x_3 : hol.term A => y_4 : hol.term B => x_3) x_2) (x_2 : hol.term A => y_3 : hol.term B => x_2) x_1 x_1 (thm_293 B A) (thm_54 A x_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. \lambda y. x x) x))) (= (\lambda x. \lambda y. x x))) ;)

(; dict ;)

def thm_295 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr (hol.arr B A) hol.bool) (hol.eq (hol.arr B A) ((x_2 : hol.term A => (x_3 : hol.term A => y_4 : hol.term B => x_3) x_2) x_1)) (hol.eq (hol.arr B A) ((x_2 : hol.term A => y_3 : hol.term B => x_2) x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.APP_THM (hol.arr B A) (hol.arr (hol.arr B A) hol.bool) (hol.eq (hol.arr B A)) (hol.eq (hol.arr B A)) ((x_2 : hol.term A => (x_3 : hol.term A => y_4 : hol.term B => x_3) x_2) x_1) ((x_2 : hol.term A => y_3 : hol.term B => x_2) x_1) (thm_291 A B) (thm_294 A B x_1).

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. \lambda y. x x) x)) (\lambda x. \lambda y. x x))) ((= (\lambda x. \lambda y. x x)) \lambda y. x)) ;)

(; dict ;)

def thm_296 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr B A) ((x_2 : hol.term A => (x_3 : hol.term A => y_4 : hol.term B => x_3) x_2) x_1) ((x_2 : hol.term A => y_3 : hol.term B => x_2) x_1)) (hol.eq (hol.arr B A) ((x_2 : hol.term A => y_3 : hol.term B => x_2) x_1) (y_2 : hol.term B => x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.APP_THM (hol.arr B A) hol.bool (hol.eq (hol.arr B A) ((x_2 : hol.term A => (x_3 : hol.term A => y_4 : hol.term B => x_3) x_2) x_1)) (hol.eq (hol.arr B A) ((x_2 : hol.term A => y_3 : hol.term B => x_2) x_1)) ((x_2 : hol.term A => y_3 : hol.term B => x_2) x_1) (y_2 : hol.term B => x_1) (thm_295 A B x_1) (thm_292 A B x_1).

(; Theorem: |- ((= (Function.const x)) \lambda y. x) ;)

(; dict ;)

def thm_297 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B A) (Function_2Econst (hol.arr A (hol.arr B A)) x_1) (y_2 : hol.term B => x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.TRANS (hol.arr B A) (Function_2Econst (hol.arr A (hol.arr B A)) x_1) ((x_2 : hol.term A => y_3 : hol.term B => x_2) x_1) (y_2 : hol.term B => x_1) (thm_290 A B x_1) (hol.EQ_MP (hol.eq (hol.arr B A) ((x_2 : hol.term A => (x_3 : hol.term A => y_4 : hol.term B => x_3) x_2) x_1) ((x_2 : hol.term A => y_3 : hol.term B => x_2) x_1)) (hol.eq (hol.arr B A) ((x_2 : hol.term A => y_3 : hol.term B => x_2) x_1) (y_2 : hol.term B => x_1)) (thm_296 A B x_1) (thm_294 A B x_1)).

(; Theorem: |- ((= y) y) ;)

(; dict ;)

def thm_298 : B : hol.type -> y_1 : hol.term B -> hol.proof (hol.eq B y_1 y_1) :=
  B : hol.type => y_1 : hol.term B => hol.REFL B y_1.

(; Theorem: |- ((= ((Function.const x) y)) (\lambda y. x y)) ;)

(; dict ;)

def thm_299 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_2 y_1) ((y_3 : hol.term B => x_2) y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.APP_THM B A (Function_2Econst (hol.arr A (hol.arr B A)) x_2) (y_3 : hol.term B => x_2) y_1 y_1 (thm_297 A B x_2) (thm_298 B y_1).

(; Theorem: |- ((= (\lambda y. x y)) x) ;)

(; dict ;)

def thm_300 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq A ((y_3 : hol.term B => x_2) y_1) x_2) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.BETA_CONV B A (y_3 : hol.term B => x_2) y_1.

(; Theorem: |- ((= \lambda y. (\lambda y. x y)) \lambda y. x) ;)

(; dict ;)

def thm_301 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B A) (y_2 : hol.term B => (y_3 : hol.term B => x_1) y_2) (y_2 : hol.term B => x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.ABS_THM B A (y_2 : hol.term B => (y_3 : hol.term B => x_1) y_2) (y_2 : hol.term B => x_1) (y_2 : hol.term B => thm_300 B A y_2 x_1).

(; Theorem: |- ((= (\lambda y. (\lambda y. x y) y)) (\lambda y. x y)) ;)

(; dict ;)

def thm_302 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq A ((y_3 : hol.term B => (y_4 : hol.term B => x_2) y_3) y_1) ((y_3 : hol.term B => x_2) y_1)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.APP_THM B A (y_3 : hol.term B => (y_4 : hol.term B => x_2) y_3) (y_3 : hol.term B => x_2) y_1 y_1 (thm_301 A B x_2) (thm_298 B y_1).

(; Theorem: |- ((= (= (\lambda y. (\lambda y. x y) y))) (= (\lambda y. x y))) ;)

(; dict ;)

def thm_303 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A ((y_3 : hol.term B => (y_4 : hol.term B => x_2) y_3) y_1)) (hol.eq A ((y_3 : hol.term B => x_2) y_1))) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) ((y_3 : hol.term B => (y_4 : hol.term B => x_2) y_3) y_1) ((y_3 : hol.term B => x_2) y_1) (thm_197 A) (thm_302 B A y_1 x_2).

(; Theorem: |- ((= ((= (\lambda y. (\lambda y. x y) y)) (\lambda y. x y))) ((= (\lambda y. x y)) x)) ;)

(; dict ;)

def thm_304 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A ((y_3 : hol.term B => (y_4 : hol.term B => x_2) y_3) y_1) ((y_3 : hol.term B => x_2) y_1)) (hol.eq A ((y_3 : hol.term B => x_2) y_1) x_2)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A ((y_3 : hol.term B => (y_4 : hol.term B => x_2) y_3) y_1)) (hol.eq A ((y_3 : hol.term B => x_2) y_1)) ((y_3 : hol.term B => x_2) y_1) x_2 (thm_303 B A y_1 x_2) (thm_300 B A y_1 x_2).

(; Theorem: |- ((= ((Function.const x) y)) x) ;)

(; dict ;)

def thm_305 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_2 y_1) x_2) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.TRANS A (Function_2Econst (hol.arr A (hol.arr B A)) x_2 y_1) ((y_3 : hol.term B => x_2) y_1) x_2 (thm_299 B A y_1 x_2) (hol.EQ_MP (hol.eq A ((y_3 : hol.term B => (y_4 : hol.term B => x_2) y_3) y_1) ((y_3 : hol.term B => x_2) y_1)) (hol.eq A ((y_3 : hol.term B => x_2) y_1) x_2) (thm_304 B A y_1 x_2) (thm_302 B A y_1 x_2)).

(; Theorem: |- ((= (= ((Function.const x) y))) (= x)) ;)

(; dict ;)

def thm_306 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq (hol.arr A hol.bool) (hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_2 y_1)) (hol.eq A x_2)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.APP_THM A (hol.arr A hol.bool) (hol.eq A) (hol.eq A) (Function_2Econst (hol.arr A (hol.arr B A)) x_2 y_1) x_2 (thm_197 A) (thm_305 B A y_1 x_2).

(; Theorem: |- ((= ((= ((Function.const x) y)) x)) ((= x) x)) ;)

(; dict ;)

def thm_307 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_2 y_1) x_2) (hol.eq A x_2 x_2)) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.APP_THM A hol.bool (hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_2 y_1)) (hol.eq A x_2) x_2 x_2 (thm_306 B A y_1 x_2) (thm_54 A x_2).

(; Theorem: |- ((= ((= ((Function.const x) y)) x)) Data.Bool.T) ;)

(; dict ;)

def thm_308 : B : hol.type -> A : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> hol.proof (hol.eq hol.bool (hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_2 y_1) x_2) hol.true) :=
  B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => hol.TRANS hol.bool (hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_2 y_1) x_2) (hol.eq A x_2 x_2) hol.true (thm_307 B A y_1 x_2) (thm_55 A x_2).

(; Theorem: |- ((= \lambda y. ((= ((Function.const x) y)) x)) \lambda y. Data.Bool.T) ;)

(; dict ;)

def thm_309 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq (hol.arr B hol.bool) (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1) (y_2 : hol.term B => hol.true)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.ABS_THM B hol.bool (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1) (y_2 : hol.term B => hol.true) (y_2 : hol.term B => thm_308 B A y_2 x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= ((Function.const x) y)) x))) (Data.Bool.! \lambda y. Data.Bool.T)) ;)

(; dict ;)

def thm_310 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1)) (hol.forall B (y_2 : hol.term B => hol.true))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1) (y_2 : hol.term B => hol.true) (thm_287 B) (thm_309 A B x_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda y. t)) t)) ((= (Data.Bool.! \lambda y. t)) t)) ;)

(; dict ;)

def thm_311 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.REFL hol.bool (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1).

(; Theorem: |- ((= ((= (Data.Bool.! \lambda x. t)) t)) ((= (Data.Bool.! \lambda y. t)) t)) ;)

(; dict ;)

def thm_312 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1)) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.TRANS hol.bool (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1) (thm_62 A t_1) (thm_311 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. t)) t) ;)

(; dict ;)

def thm_313 : A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1) :=
  A : hol.type => t_1 : hol.term hol.bool => hol.EQ_MP (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => t_1)) t_1) (hol.eq hol.bool (hol.forall A (y_2 : hol.term A => t_1)) t_1) (thm_312 A t_1) (thm_65 A t_1).

(; Theorem: |- ((= (Data.Bool.! \lambda y. t)) t) ;)

(; dict ;)

def thm_314 : B : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => t_1)) t_1) :=
  B : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_313 A t_1) B t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda y. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_315 : B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (y_1 : hol.term B => hol.true)) hol.true) :=
  B : hol.type => (B : hol.type => t_1 : hol.term hol.bool => thm_314 B t_1) B hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= ((Function.const x) y)) x))) Data.Bool.T) ;)

(; dict ;)

def thm_316 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> hol.proof (hol.eq hol.bool (hol.forall B (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1)) hol.true) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => hol.TRANS hol.bool (hol.forall B (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1)) (hol.forall B (y_2 : hol.term B => hol.true)) hol.true (thm_310 A B x_1) (thm_315 B).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((= ((Function.const x) y)) x))) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_317 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A hol.bool) (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1)) (x_1 : hol.term A => hol.true)) :=
  B : hol.type => A : hol.type => hol.ABS_THM A hol.bool (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1)) (x_1 : hol.term A => hol.true) (x_1 : hol.term A => thm_316 A B x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((Function.const x) y)) x)))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_318 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1))) (hol.forall A (x_1 : hol.term A => hol.true))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1)) (x_1 : hol.term A => hol.true) (thm_15 A) (thm_317 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((Function.const x) y)) x)))) Data.Bool.T) ;)

(; dict ;)

def thm_319 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1))) hol.true) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1))) (hol.forall A (x_1 : hol.term A => hol.true)) hol.true (thm_318 B A) (thm_212 A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((Function.const x) y)) x)))) ;)

(; dict ;)

def thm_320 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1)))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1))) hol.true (thm_319 B A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((Function.const x) y)) x))) ;)

(; dict ;)

def thm_321 : B : hol.type -> A : hol.type -> hol.proof (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1))) :=
  B : hol.type => A : hol.type => hol.EQ_MP hol.true (hol.forall A (x_1 : hol.term A => hol.forall B (y_2 : hol.term B => hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_1 y_2) x_1))) (thm_320 B A) thm_1.

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_322 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr B C)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr B C))) (hol.forall (hol.arr A (hol.arr B C)))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A (hol.arr B C)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr B C))).

(; Theorem: |- ((= ((= Function.Combinator.s) \lambda f. \lambda g. \lambda x. ((f x) (g x)))) ((= Function.Combinator.s) \lambda f. \lambda g. \lambda x. ((f x) (g x)))) ;)

(; dict ;)

def thm_323 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))) (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))).

(; Theorem: |- ((= ((= Function.Combinator.s) \lambda f. \lambda g. \lambda x. ((f x) (g x)))) ((= Function.Combinator.s) \lambda f. \lambda g. \lambda x. ((f x) (g x)))) ;)

(; dict ;)

def thm_324 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))) (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))) (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))) (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))) (thm_323 C B A) (thm_323 C B A).

(; Theorem: |- ((= f) f) ;)

(; dict ;)

def thm_325 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A (hol.arr B C)) f_1 f_1) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.REFL (hol.arr A (hol.arr B C)) f_1.

(; Theorem: |- ((= (Function.Combinator.s f)) (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f)) ;)

(; dict ;)

def thm_326 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1)) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1 f_1 (hol.EQ_MP (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4))) (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)))) (f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4))) (thm_324 C B A) (thm_10 C B A)) (thm_325 C B A f_1).

(; Theorem: |- ((= (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f)) \lambda g. \lambda x. ((f x) (g x))) ;)

(; dict ;)

def thm_327 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.BETA_CONV (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)) (f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1.

(; Theorem: |- ((= \lambda f. (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f)) \lambda f. \lambda g. \lambda x. ((f x) (g x))) ;)

(; dict ;)

def thm_328 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => (f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (f_1 : hol.term (hol.arr A (hol.arr B C)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => (f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (f_1 : hol.term (hol.arr A (hol.arr B C)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => thm_327 C B A f_1).

(; Theorem: |- ((= (\lambda f. (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f) f)) (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f)) ;)

(; dict ;)

def thm_329 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 x_5 (g_4 x_5)) f_2) f_1) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1)) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C)) (f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 x_5 (g_4 x_5)) f_2) (f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1 f_1 (thm_328 C B A) (thm_325 C B A f_1).

(; Theorem: |- ((= (= (\lambda f. (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f) f))) (= (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f))) ;)

(; dict ;)

def thm_330 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) (hol.arr A C)) hol.bool) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 x_5 (g_4 x_5)) f_2) f_1)) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr (hol.arr A B) (hol.arr A C)) (hol.arr (hol.arr (hol.arr A B) (hol.arr A C)) hol.bool) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C))) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C))) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 x_5 (g_4 x_5)) f_2) f_1) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (thm_24 C B A) (thm_329 C B A f_1).

(; Theorem: |- ((= ((= (\lambda f. (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f) f)) (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f))) ((= (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f)) \lambda g. \lambda x. ((f x) (g x)))) ;)

(; dict ;)

def thm_331 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 x_5 (g_4 x_5)) f_2) f_1) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1)) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr (hol.arr A B) (hol.arr A C)) hol.bool (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 x_5 (g_4 x_5)) f_2) f_1)) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (thm_330 C B A f_1) (thm_327 C B A f_1).

(; Theorem: |- ((= (Function.Combinator.s f)) \lambda g. \lambda x. ((f x) (g x))) ;)

(; dict ;)

def thm_332 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS (hol.arr (hol.arr A B) (hol.arr A C)) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (thm_326 C B A f_1) (hol.EQ_MP (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_3 x_5 (g_4 x_5)) f_2) f_1) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1)) (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))) (thm_331 C B A f_1) (thm_329 C B A f_1)).

(; Theorem: |- ((= ((Function.Combinator.s f) g)) (\lambda g. \lambda x. ((f x) (g x)) g)) ;)

(; dict ;)

def thm_333 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A C) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1)) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A B) (hol.arr A C) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_2) (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1 g_1 (thm_332 C B A f_2) (thm_31 B A g_1).

(; Theorem: |- ((= (\lambda g. \lambda x. ((f x) (g x)) g)) \lambda x. ((f x) (g x))) ;)

(; dict ;)

def thm_334 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1) (x_3 : hol.term A => f_2 x_3 (g_1 x_3))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.BETA_CONV (hol.arr A B) (hol.arr A C) (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1.

(; Theorem: |- ((= \lambda g. (\lambda g. \lambda x. ((f x) (g x)) g)) \lambda g. \lambda x. ((f x) (g x))) ;)

(; dict ;)

def thm_335 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A C)) (g_2 : hol.term (hol.arr A B) => (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_1 x_4 (g_3 x_4)) g_2) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.ABS_THM (hol.arr A B) (hol.arr A C) (g_2 : hol.term (hol.arr A B) => (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_1 x_4 (g_3 x_4)) g_2) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (g_2 : hol.term (hol.arr A B) => thm_334 B C A g_2 f_1).

(; Theorem: |- ((= (\lambda g. (\lambda g. \lambda x. ((f x) (g x)) g) g)) (\lambda g. \lambda x. ((f x) (g x)) g)) ;)

(; dict ;)

def thm_336 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 x_5 (g_4 x_5)) g_3) g_1) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1)) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A B) (hol.arr A C) (g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 x_5 (g_4 x_5)) g_3) (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1 g_1 (thm_335 C B A f_2) (thm_31 B A g_1).

(; Theorem: |- ((= (= (\lambda g. (\lambda g. \lambda x. ((f x) (g x)) g) g))) (= (\lambda g. \lambda x. ((f x) (g x)) g))) ;)

(; dict ;)

def thm_337 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 x_5 (g_4 x_5)) g_3) g_1)) (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A C) (hol.arr (hol.arr A C) hol.bool) (hol.eq (hol.arr A C)) (hol.eq (hol.arr A C)) ((g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 x_5 (g_4 x_5)) g_3) g_1) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1) (thm_19 C A) (thm_336 B C A g_1 f_2).

(; Theorem: |- ((= ((= (\lambda g. (\lambda g. \lambda x. ((f x) (g x)) g) g)) (\lambda g. \lambda x. ((f x) (g x)) g))) ((= (\lambda g. \lambda x. ((f x) (g x)) g)) \lambda x. ((f x) (g x)))) ;)

(; dict ;)

def thm_338 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 x_5 (g_4 x_5)) g_3) g_1) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1)) (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1) (x_3 : hol.term A => f_2 x_3 (g_1 x_3)))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A C) hol.bool (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 x_5 (g_4 x_5)) g_3) g_1)) (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1)) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1) (x_3 : hol.term A => f_2 x_3 (g_1 x_3)) (thm_337 B C A g_1 f_2) (thm_334 B C A g_1 f_2).

(; Theorem: |- ((= ((Function.Combinator.s f) g)) \lambda x. ((f x) (g x))) ;)

(; dict ;)

def thm_339 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A C) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) (x_3 : hol.term A => f_2 x_3 (g_1 x_3))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS (hol.arr A C) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1) (x_3 : hol.term A => f_2 x_3 (g_1 x_3)) (thm_333 B C A g_1 f_2) (hol.EQ_MP (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => (g_4 : hol.term (hol.arr A B) => x_5 : hol.term A => f_2 x_5 (g_4 x_5)) g_3) g_1) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1)) (hol.eq (hol.arr A C) ((g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) g_1) (x_3 : hol.term A => f_2 x_3 (g_1 x_3))) (thm_338 B C A g_1 f_2) (thm_336 B C A g_1 f_2)).

(; Theorem: |- ((= (((Function.Combinator.s f) g) x)) (\lambda x. ((f x) (g x)) x)) ;)

(; dict ;)

def thm_340 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) ((x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM A C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2) (x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1 x_1 (thm_339 B C A g_2 f_3) (thm_54 A x_1).

(; Theorem: |- ((= (\lambda x. ((f x) (g x)) x)) ((f x) (g x))) ;)

(; dict ;)

def thm_341 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C ((x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1) (f_3 x_1 (g_2 x_1))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.BETA_CONV A C (x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. ((f x) (g x)) x)) \lambda x. ((f x) (g x))) ;)

(; dict ;)

def thm_342 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A C) (x_3 : hol.term A => (x_4 : hol.term A => f_2 x_4 (g_1 x_4)) x_3) (x_3 : hol.term A => f_2 x_3 (g_1 x_3))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.ABS_THM A C (x_3 : hol.term A => (x_4 : hol.term A => f_2 x_4 (g_1 x_4)) x_3) (x_3 : hol.term A => f_2 x_3 (g_1 x_3)) (x_3 : hol.term A => thm_341 B A C x_3 g_1 f_2).

(; Theorem: |- ((= (\lambda x. (\lambda x. ((f x) (g x)) x) x)) (\lambda x. ((f x) (g x)) x)) ;)

(; dict ;)

def thm_343 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C ((x_4 : hol.term A => (x_5 : hol.term A => f_3 x_5 (g_2 x_5)) x_4) x_1) ((x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM A C (x_4 : hol.term A => (x_5 : hol.term A => f_3 x_5 (g_2 x_5)) x_4) (x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1 x_1 (thm_342 B C A g_2 f_3) (thm_54 A x_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. ((f x) (g x)) x) x))) (= (\lambda x. ((f x) (g x)) x))) ;)

(; dict ;)

def thm_344 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr C hol.bool) (hol.eq C ((x_4 : hol.term A => (x_5 : hol.term A => f_3 x_5 (g_2 x_5)) x_4) x_1)) (hol.eq C ((x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C (hol.arr C hol.bool) (hol.eq C) (hol.eq C) ((x_4 : hol.term A => (x_5 : hol.term A => f_3 x_5 (g_2 x_5)) x_4) x_1) ((x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1) (thm_16 C) (thm_343 B A C x_1 g_2 f_3).

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. ((f x) (g x)) x) x)) (\lambda x. ((f x) (g x)) x))) ((= (\lambda x. ((f x) (g x)) x)) ((f x) (g x)))) ;)

(; dict ;)

def thm_345 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C ((x_4 : hol.term A => (x_5 : hol.term A => f_3 x_5 (g_2 x_5)) x_4) x_1) ((x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1)) (hol.eq C ((x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1) (f_3 x_1 (g_2 x_1)))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C hol.bool (hol.eq C ((x_4 : hol.term A => (x_5 : hol.term A => f_3 x_5 (g_2 x_5)) x_4) x_1)) (hol.eq C ((x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1)) ((x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1) (f_3 x_1 (g_2 x_1)) (thm_344 B A C x_1 g_2 f_3) (thm_341 B A C x_1 g_2 f_3).

(; Theorem: |- ((= (((Function.Combinator.s f) g) x)) ((f x) (g x))) ;)

(; dict ;)

def thm_346 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 x_1 (g_2 x_1))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) ((x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1) (f_3 x_1 (g_2 x_1)) (thm_340 B A C x_1 g_2 f_3) (hol.EQ_MP (hol.eq C ((x_4 : hol.term A => (x_5 : hol.term A => f_3 x_5 (g_2 x_5)) x_4) x_1) ((x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1)) (hol.eq C ((x_4 : hol.term A => f_3 x_4 (g_2 x_4)) x_1) (f_3 x_1 (g_2 x_1))) (thm_345 B A C x_1 g_2 f_3) (thm_343 B A C x_1 g_2 f_3)).

(; Theorem: |- ((= (= (((Function.Combinator.s f) g) x))) (= ((f x) (g x)))) ;)

(; dict ;)

def thm_347 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr C hol.bool) (hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1)) (hol.eq C (f_3 x_1 (g_2 x_1)))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C (hol.arr C hol.bool) (hol.eq C) (hol.eq C) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 x_1 (g_2 x_1)) (thm_16 C) (thm_346 B A C x_1 g_2 f_3).

(; Theorem: |- ((= ((f x) (g x))) ((f x) (g x))) ;)

(; dict ;)

def thm_348 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C (f_3 x_2 (g_1 x_2)) (f_3 x_2 (g_1 x_2))) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.REFL C (f_3 x_2 (g_1 x_2)).

(; Theorem: |- ((= ((= (((Function.Combinator.s f) g) x)) ((f x) (g x)))) ((= ((f x) (g x))) ((f x) (g x)))) ;)

(; dict ;)

def thm_349 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 x_1 (g_2 x_1))) (hol.eq C (f_3 x_1 (g_2 x_1)) (f_3 x_1 (g_2 x_1)))) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C hol.bool (hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1)) (hol.eq C (f_3 x_1 (g_2 x_1))) (f_3 x_1 (g_2 x_1)) (f_3 x_1 (g_2 x_1)) (thm_347 B A C x_1 g_2 f_3) (thm_348 B A C g_2 x_1 f_3).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_350 : C : hol.type -> x_1 : hol.term C -> hol.proof (hol.eq hol.bool (hol.eq C x_1 x_1) hol.true) :=
  C : hol.type => x_1 : hol.term C => (A : hol.type => x_1 : hol.term A => thm_55 A x_1) C x_1.

(; Theorem: |- ((= ((= ((f x) (g x))) ((f x) (g x)))) Data.Bool.T) ;)

(; dict ;)

def thm_351 : B : hol.type -> A : hol.type -> C : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C (f_3 x_2 (g_1 x_2)) (f_3 x_2 (g_1 x_2))) hol.true) :=
  B : hol.type => A : hol.type => C : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => (C : hol.type => x_1 : hol.term C => thm_350 C x_1) C (f_3 x_2 (g_1 x_2)).

(; Theorem: |- ((= ((= (((Function.Combinator.s f) g) x)) ((f x) (g x)))) Data.Bool.T) ;)

(; dict ;)

def thm_352 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> g_2 : hol.term (hol.arr A B) -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 x_1 (g_2 x_1))) hol.true) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => g_2 : hol.term (hol.arr A B) => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_3 g_2 x_1) (f_3 x_1 (g_2 x_1))) (hol.eq C (f_3 x_1 (g_2 x_1)) (f_3 x_1 (g_2 x_1))) hol.true (thm_349 B A C x_1 g_2 f_3) (thm_351 B A C g_2 x_1 f_3).

(; Theorem: |- ((= \lambda x. ((= (((Function.Combinator.s f) g) x)) ((f x) (g x)))) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_353 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1 x_3) (f_2 x_3 (g_1 x_3))) (x_3 : hol.term A => hol.true)) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.ABS_THM A hol.bool (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1 x_3) (f_2 x_3 (g_1 x_3))) (x_3 : hol.term A => hol.true) (x_3 : hol.term A => thm_352 B A C x_3 g_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (((Function.Combinator.s f) g) x)) ((f x) (g x))))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_354 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1 x_3) (f_2 x_3 (g_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.true))) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1 x_3) (f_2 x_3 (g_1 x_3))) (x_3 : hol.term A => hol.true) (thm_15 A) (thm_353 B C A g_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (((Function.Combinator.s f) g) x)) ((f x) (g x))))) Data.Bool.T) ;)

(; dict ;)

def thm_355 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1 x_3) (f_2 x_3 (g_1 x_3)))) hol.true) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_2 g_1 x_3) (f_2 x_3 (g_1 x_3)))) (hol.forall A (x_3 : hol.term A => hol.true)) hol.true (thm_354 B C A g_1 f_2) (thm_212 A).

(; Theorem: |- ((= \lambda g. (Data.Bool.! \lambda x. ((= (((Function.Combinator.s f) g) x)) ((f x) (g x))))) \lambda g. Data.Bool.T) ;)

(; dict ;)

def thm_356 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.true)) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.ABS_THM (hol.arr A B) hol.bool (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.true) (g_2 : hol.term (hol.arr A B) => thm_355 B C A g_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.Combinator.s f) g) x)) ((f x) (g x)))))) (Data.Bool.! \lambda g. Data.Bool.T)) ;)

(; dict ;)

def thm_357 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.true))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3)))) (g_2 : hol.term (hol.arr A B) => hol.true) (thm_14 B A) (thm_356 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.Combinator.s f) g) x)) ((f x) (g x)))))) Data.Bool.T) ;)

(; dict ;)

def thm_358 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3))))) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3))))) (hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.true)) hol.true (thm_357 C B A f_1) (thm_68 B A).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.Combinator.s f) g) x)) ((f x) (g x)))))) \lambda f. Data.Bool.T) ;)

(; dict ;)

def thm_359 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B C)) hol.bool) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3))))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true)) :=
  C : hol.type => B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B C)) hol.bool (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3))))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true) (f_1 : hol.term (hol.arr A (hol.arr B C)) => thm_358 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.Combinator.s f) g) x)) ((f x) (g x))))))) (Data.Bool.! \lambda f. Data.Bool.T)) ;)

(; dict ;)

def thm_360 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3)))))) (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B C)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B C))) (hol.forall (hol.arr A (hol.arr B C))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3))))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true) (thm_322 C B A) (thm_359 C B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. t)) t) ;)

(; dict ;)

def thm_361 : C : hol.type -> B : hol.type -> A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_2 : hol.term (hol.arr A (hol.arr B C)) => t_1)) t_1) :=
  C : hol.type => B : hol.type => A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_74 A t_1) (hol.arr A (hol.arr B C)) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda f. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_362 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true)) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => (C : hol.type => B : hol.type => A : hol.type => t_1 : hol.term hol.bool => thm_361 C B A t_1) C B A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.Combinator.s f) g) x)) ((f x) (g x))))))) Data.Bool.T) ;)

(; dict ;)

def thm_363 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3)))))) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3)))))) (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true)) hol.true (thm_360 C B A) (thm_362 C B A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.Combinator.s f) g) x)) ((f x) (g x))))))) ;)

(; dict ;)

def thm_364 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3))))))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3)))))) hol.true (thm_363 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.Combinator.s f) g) x)) ((f x) (g x)))))) ;)

(; dict ;)

def thm_365 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3)))))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.EQ_MP hol.true (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall (hol.arr A B) (g_2 : hol.term (hol.arr A B) => hol.forall A (x_3 : hol.term A => hol.eq C (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B C)) (hol.arr (hol.arr A B) (hol.arr A C))) f_1 g_2 x_3) (f_1 x_3 (g_2 x_3)))))) (thm_364 C B A) thm_1.

(; Theorem: |- ((= ((= Function.flip) \lambda f. \lambda x. \lambda y. ((f y) x))) ((= Function.flip) \lambda f. \lambda x. \lambda y. ((f y) x))) ;)

(; dict ;)

def thm_366 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2)) (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2)).

(; Theorem: |- ((= ((= Function.flip) \lambda f. \lambda x. \lambda y. ((f y) x))) ((= Function.flip) \lambda f. \lambda x. \lambda y. ((f y) x))) ;)

(; dict ;)

def thm_367 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2)) (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2)) (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2)) (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2)) (thm_366 C B A) (thm_366 C B A).

(; Theorem: |- ((= (Function.flip f)) (\lambda f. \lambda x. \lambda y. ((f y) x) f)) ;)

(; dict ;)

def thm_368 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr B (hol.arr A C)) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1)) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)))) (f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1 f_1 (hol.EQ_MP (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)))) (f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3)) (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)))) (f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3)) (thm_367 C B A) (thm_11 C B A)) (thm_325 C B A f_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_369 : C : hol.type -> A : hol.type -> B : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr B (hol.arr A C)) (hol.arr (hol.arr B (hol.arr A C)) hol.bool)) (hol.eq (hol.arr B (hol.arr A C))) (hol.eq (hol.arr B (hol.arr A C)))) :=
  C : hol.type => A : hol.type => B : hol.type => hol.REFL (hol.arr (hol.arr B (hol.arr A C)) (hol.arr (hol.arr B (hol.arr A C)) hol.bool)) (hol.eq (hol.arr B (hol.arr A C))).

(; Theorem: |- ((= (\lambda f. \lambda x. \lambda y. ((f y) x) f)) \lambda x. \lambda y. ((f y) x)) ;)

(; dict ;)

def thm_370 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr B (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1) (x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2)) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.BETA_CONV (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)) (f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1.

(; Theorem: |- ((= \lambda f. (\lambda f. \lambda x. \lambda y. ((f y) x) f)) \lambda f. \lambda x. \lambda y. ((f y) x)) ;)

(; dict ;)

def thm_371 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => (f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1) (f_1 : hol.term (hol.arr A (hol.arr B C)) => x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2)) :=
  C : hol.type => B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => (f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1) (f_1 : hol.term (hol.arr A (hol.arr B C)) => x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2) (f_1 : hol.term (hol.arr A (hol.arr B C)) => thm_370 C A B f_1).

(; Theorem: |- ((= (\lambda f. (\lambda f. \lambda x. \lambda y. ((f y) x) f) f)) (\lambda f. \lambda x. \lambda y. ((f y) x) f)) ;)

(; dict ;)

def thm_372 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr B (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => x_4 : hol.term B => y_5 : hol.term A => f_3 y_5 x_4) f_2) f_1) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1)) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C)) (f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => x_4 : hol.term B => y_5 : hol.term A => f_3 y_5 x_4) f_2) (f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1 f_1 (thm_371 C B A) (thm_325 C B A f_1).

(; Theorem: |- ((= (= (\lambda f. (\lambda f. \lambda x. \lambda y. ((f y) x) f) f))) (= (\lambda f. \lambda x. \lambda y. ((f y) x) f))) ;)

(; dict ;)

def thm_373 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr (hol.arr B (hol.arr A C)) hol.bool) (hol.eq (hol.arr B (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => x_4 : hol.term B => y_5 : hol.term A => f_3 y_5 x_4) f_2) f_1)) (hol.eq (hol.arr B (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1))) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr B (hol.arr A C)) (hol.arr (hol.arr B (hol.arr A C)) hol.bool) (hol.eq (hol.arr B (hol.arr A C))) (hol.eq (hol.arr B (hol.arr A C))) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => x_4 : hol.term B => y_5 : hol.term A => f_3 y_5 x_4) f_2) f_1) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1) (thm_369 C A B) (thm_372 C A B f_1).

(; Theorem: |- ((= ((= (\lambda f. (\lambda f. \lambda x. \lambda y. ((f y) x) f) f)) (\lambda f. \lambda x. \lambda y. ((f y) x) f))) ((= (\lambda f. \lambda x. \lambda y. ((f y) x) f)) \lambda x. \lambda y. ((f y) x))) ;)

(; dict ;)

def thm_374 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr B (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => x_4 : hol.term B => y_5 : hol.term A => f_3 y_5 x_4) f_2) f_1) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1)) (hol.eq (hol.arr B (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1) (x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2))) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr B (hol.arr A C)) hol.bool (hol.eq (hol.arr B (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => x_4 : hol.term B => y_5 : hol.term A => f_3 y_5 x_4) f_2) f_1)) (hol.eq (hol.arr B (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1) (x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2) (thm_373 C A B f_1) (thm_370 C A B f_1).

(; Theorem: |- ((= (Function.flip f)) \lambda x. \lambda y. ((f y) x)) ;)

(; dict ;)

def thm_375 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr B (hol.arr A C)) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1) (x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2)) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS (hol.arr B (hol.arr A C)) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1) (x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2) (thm_368 C A B f_1) (hol.EQ_MP (hol.eq (hol.arr B (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => (f_3 : hol.term (hol.arr A (hol.arr B C)) => x_4 : hol.term B => y_5 : hol.term A => f_3 y_5 x_4) f_2) f_1) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1)) (hol.eq (hol.arr B (hol.arr A C)) ((f_2 : hol.term (hol.arr A (hol.arr B C)) => x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) f_1) (x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2)) (thm_374 C A B f_1) (thm_372 C A B f_1)).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_376 : B : hol.type -> x_1 : hol.term B -> hol.proof (hol.eq B x_1 x_1) :=
  B : hol.type => x_1 : hol.term B => hol.REFL B x_1.

(; Theorem: |- ((= ((Function.flip f) x)) (\lambda x. \lambda y. ((f y) x) x)) ;)

(; dict ;)

def thm_377 : B : hol.type -> C : hol.type -> A : hol.type -> x_1 : hol.term B -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A C) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2 x_1) ((x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1)) :=
  B : hol.type => C : hol.type => A : hol.type => x_1 : hol.term B => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM B (hol.arr A C) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2) (x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1 x_1 (thm_375 C A B f_2) (thm_376 B x_1).

(; Theorem: |- ((= (\lambda x. \lambda y. ((f y) x) x)) \lambda y. ((f y) x)) ;)

(; dict ;)

def thm_378 : B : hol.type -> C : hol.type -> A : hol.type -> x_1 : hol.term B -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A C) ((x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1) (y_3 : hol.term A => f_2 y_3 x_1)) :=
  B : hol.type => C : hol.type => A : hol.type => x_1 : hol.term B => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.BETA_CONV B (hol.arr A C) (x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. \lambda y. ((f y) x) x)) \lambda x. \lambda y. ((f y) x)) ;)

(; dict ;)

def thm_379 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr B (hol.arr A C)) (x_2 : hol.term B => (x_3 : hol.term B => y_4 : hol.term A => f_1 y_4 x_3) x_2) (x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2)) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.ABS_THM B (hol.arr A C) (x_2 : hol.term B => (x_3 : hol.term B => y_4 : hol.term A => f_1 y_4 x_3) x_2) (x_2 : hol.term B => y_3 : hol.term A => f_1 y_3 x_2) (x_2 : hol.term B => thm_378 B C A x_2 f_1).

(; Theorem: |- ((= (\lambda x. (\lambda x. \lambda y. ((f y) x) x) x)) (\lambda x. \lambda y. ((f y) x) x)) ;)

(; dict ;)

def thm_380 : B : hol.type -> C : hol.type -> A : hol.type -> x_1 : hol.term B -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A C) ((x_3 : hol.term B => (x_4 : hol.term B => y_5 : hol.term A => f_2 y_5 x_4) x_3) x_1) ((x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1)) :=
  B : hol.type => C : hol.type => A : hol.type => x_1 : hol.term B => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM B (hol.arr A C) (x_3 : hol.term B => (x_4 : hol.term B => y_5 : hol.term A => f_2 y_5 x_4) x_3) (x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1 x_1 (thm_379 C A B f_2) (thm_376 B x_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. \lambda y. ((f y) x) x) x))) (= (\lambda x. \lambda y. ((f y) x) x))) ;)

(; dict ;)

def thm_381 : B : hol.type -> C : hol.type -> A : hol.type -> x_1 : hol.term B -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr (hol.arr A C) hol.bool) (hol.eq (hol.arr A C) ((x_3 : hol.term B => (x_4 : hol.term B => y_5 : hol.term A => f_2 y_5 x_4) x_3) x_1)) (hol.eq (hol.arr A C) ((x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1))) :=
  B : hol.type => C : hol.type => A : hol.type => x_1 : hol.term B => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A C) (hol.arr (hol.arr A C) hol.bool) (hol.eq (hol.arr A C)) (hol.eq (hol.arr A C)) ((x_3 : hol.term B => (x_4 : hol.term B => y_5 : hol.term A => f_2 y_5 x_4) x_3) x_1) ((x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1) (thm_19 C A) (thm_380 B C A x_1 f_2).

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. \lambda y. ((f y) x) x) x)) (\lambda x. \lambda y. ((f y) x) x))) ((= (\lambda x. \lambda y. ((f y) x) x)) \lambda y. ((f y) x))) ;)

(; dict ;)

def thm_382 : B : hol.type -> C : hol.type -> A : hol.type -> x_1 : hol.term B -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A C) ((x_3 : hol.term B => (x_4 : hol.term B => y_5 : hol.term A => f_2 y_5 x_4) x_3) x_1) ((x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1)) (hol.eq (hol.arr A C) ((x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1) (y_3 : hol.term A => f_2 y_3 x_1))) :=
  B : hol.type => C : hol.type => A : hol.type => x_1 : hol.term B => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A C) hol.bool (hol.eq (hol.arr A C) ((x_3 : hol.term B => (x_4 : hol.term B => y_5 : hol.term A => f_2 y_5 x_4) x_3) x_1)) (hol.eq (hol.arr A C) ((x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1)) ((x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1) (y_3 : hol.term A => f_2 y_3 x_1) (thm_381 B C A x_1 f_2) (thm_378 B C A x_1 f_2).

(; Theorem: |- ((= ((Function.flip f) x)) \lambda y. ((f y) x)) ;)

(; dict ;)

def thm_383 : B : hol.type -> C : hol.type -> A : hol.type -> x_1 : hol.term B -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A C) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2 x_1) (y_3 : hol.term A => f_2 y_3 x_1)) :=
  B : hol.type => C : hol.type => A : hol.type => x_1 : hol.term B => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS (hol.arr A C) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2 x_1) ((x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1) (y_3 : hol.term A => f_2 y_3 x_1) (thm_377 B C A x_1 f_2) (hol.EQ_MP (hol.eq (hol.arr A C) ((x_3 : hol.term B => (x_4 : hol.term B => y_5 : hol.term A => f_2 y_5 x_4) x_3) x_1) ((x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1)) (hol.eq (hol.arr A C) ((x_3 : hol.term B => y_4 : hol.term A => f_2 y_4 x_3) x_1) (y_3 : hol.term A => f_2 y_3 x_1)) (thm_382 B C A x_1 f_2) (thm_380 B C A x_1 f_2)).

(; Theorem: |- ((= y) y) ;)

(; dict ;)

def thm_384 : A : hol.type -> y_1 : hol.term A -> hol.proof (hol.eq A y_1 y_1) :=
  A : hol.type => y_1 : hol.term A => hol.REFL A y_1.

(; Theorem: |- ((= (((Function.flip f) x) y)) (\lambda y. ((f y) x) y)) ;)

(; dict ;)

def thm_385 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term B -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3 x_2 y_1) ((y_4 : hol.term A => f_3 y_4 x_2) y_1)) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term B => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM A C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3 x_2) (y_4 : hol.term A => f_3 y_4 x_2) y_1 y_1 (thm_383 B C A x_2 f_3) (thm_384 A y_1).

(; Theorem: |- ((= (\lambda y. ((f y) x) y)) ((f y) x)) ;)

(; dict ;)

def thm_386 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term B -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C ((y_4 : hol.term A => f_3 y_4 x_2) y_1) (f_3 y_1 x_2)) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term B => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.BETA_CONV A C (y_4 : hol.term A => f_3 y_4 x_2) y_1.

(; Theorem: |- ((= \lambda y. (\lambda y. ((f y) x) y)) \lambda y. ((f y) x)) ;)

(; dict ;)

def thm_387 : B : hol.type -> C : hol.type -> A : hol.type -> x_1 : hol.term B -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A C) (y_3 : hol.term A => (y_4 : hol.term A => f_2 y_4 x_1) y_3) (y_3 : hol.term A => f_2 y_3 x_1)) :=
  B : hol.type => C : hol.type => A : hol.type => x_1 : hol.term B => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.ABS_THM A C (y_3 : hol.term A => (y_4 : hol.term A => f_2 y_4 x_1) y_3) (y_3 : hol.term A => f_2 y_3 x_1) (y_3 : hol.term A => thm_386 B A C y_3 x_1 f_2).

(; Theorem: |- ((= (\lambda y. (\lambda y. ((f y) x) y) y)) (\lambda y. ((f y) x) y)) ;)

(; dict ;)

def thm_388 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term B -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C ((y_4 : hol.term A => (y_5 : hol.term A => f_3 y_5 x_2) y_4) y_1) ((y_4 : hol.term A => f_3 y_4 x_2) y_1)) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term B => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM A C (y_4 : hol.term A => (y_5 : hol.term A => f_3 y_5 x_2) y_4) (y_4 : hol.term A => f_3 y_4 x_2) y_1 y_1 (thm_387 B C A x_2 f_3) (thm_384 A y_1).

(; Theorem: |- ((= (= (\lambda y. (\lambda y. ((f y) x) y) y))) (= (\lambda y. ((f y) x) y))) ;)

(; dict ;)

def thm_389 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term B -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr C hol.bool) (hol.eq C ((y_4 : hol.term A => (y_5 : hol.term A => f_3 y_5 x_2) y_4) y_1)) (hol.eq C ((y_4 : hol.term A => f_3 y_4 x_2) y_1))) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term B => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C (hol.arr C hol.bool) (hol.eq C) (hol.eq C) ((y_4 : hol.term A => (y_5 : hol.term A => f_3 y_5 x_2) y_4) y_1) ((y_4 : hol.term A => f_3 y_4 x_2) y_1) (thm_16 C) (thm_388 B A C y_1 x_2 f_3).

(; Theorem: |- ((= ((= (\lambda y. (\lambda y. ((f y) x) y) y)) (\lambda y. ((f y) x) y))) ((= (\lambda y. ((f y) x) y)) ((f y) x))) ;)

(; dict ;)

def thm_390 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term B -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C ((y_4 : hol.term A => (y_5 : hol.term A => f_3 y_5 x_2) y_4) y_1) ((y_4 : hol.term A => f_3 y_4 x_2) y_1)) (hol.eq C ((y_4 : hol.term A => f_3 y_4 x_2) y_1) (f_3 y_1 x_2))) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term B => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C hol.bool (hol.eq C ((y_4 : hol.term A => (y_5 : hol.term A => f_3 y_5 x_2) y_4) y_1)) (hol.eq C ((y_4 : hol.term A => f_3 y_4 x_2) y_1)) ((y_4 : hol.term A => f_3 y_4 x_2) y_1) (f_3 y_1 x_2) (thm_389 B A C y_1 x_2 f_3) (thm_386 B A C y_1 x_2 f_3).

(; Theorem: |- ((= (((Function.flip f) x) y)) ((f y) x)) ;)

(; dict ;)

def thm_391 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term B -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3 x_2 y_1) (f_3 y_1 x_2)) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term B => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3 x_2 y_1) ((y_4 : hol.term A => f_3 y_4 x_2) y_1) (f_3 y_1 x_2) (thm_385 B A C y_1 x_2 f_3) (hol.EQ_MP (hol.eq C ((y_4 : hol.term A => (y_5 : hol.term A => f_3 y_5 x_2) y_4) y_1) ((y_4 : hol.term A => f_3 y_4 x_2) y_1)) (hol.eq C ((y_4 : hol.term A => f_3 y_4 x_2) y_1) (f_3 y_1 x_2)) (thm_390 B A C y_1 x_2 f_3) (thm_388 B A C y_1 x_2 f_3)).

(; Theorem: |- ((= (= (((Function.flip f) x) y))) (= ((f y) x))) ;)

(; dict ;)

def thm_392 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term B -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr C hol.bool) (hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3 x_2 y_1)) (hol.eq C (f_3 y_1 x_2))) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term B => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C (hol.arr C hol.bool) (hol.eq C) (hol.eq C) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3 x_2 y_1) (f_3 y_1 x_2) (thm_16 C) (thm_391 B A C y_1 x_2 f_3).

(; Theorem: |- ((= ((f y) x)) ((f y) x)) ;)

(; dict ;)

def thm_393 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term B -> y_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C (f_3 y_2 x_1) (f_3 y_2 x_1)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term B => y_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.REFL C (f_3 y_2 x_1).

(; Theorem: |- ((= ((= (((Function.flip f) x) y)) ((f y) x))) ((= ((f y) x)) ((f y) x))) ;)

(; dict ;)

def thm_394 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term B -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3 x_2 y_1) (f_3 y_1 x_2)) (hol.eq C (f_3 y_1 x_2) (f_3 y_1 x_2))) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term B => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C hol.bool (hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3 x_2 y_1)) (hol.eq C (f_3 y_1 x_2)) (f_3 y_1 x_2) (f_3 y_1 x_2) (thm_392 B A C y_1 x_2 f_3) (thm_393 B A C x_2 y_1 f_3).

(; Theorem: |- ((= ((= ((f y) x)) ((f y) x))) Data.Bool.T) ;)

(; dict ;)

def thm_395 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term B -> y_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C (f_3 y_2 x_1) (f_3 y_2 x_1)) hol.true) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term B => y_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => (C : hol.type => x_1 : hol.term C => thm_350 C x_1) C (f_3 y_2 x_1).

(; Theorem: |- ((= ((= (((Function.flip f) x) y)) ((f y) x))) Data.Bool.T) ;)

(; dict ;)

def thm_396 : B : hol.type -> A : hol.type -> C : hol.type -> y_1 : hol.term A -> x_2 : hol.term B -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3 x_2 y_1) (f_3 y_1 x_2)) hol.true) :=
  B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term B => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3 x_2 y_1) (f_3 y_1 x_2)) (hol.eq C (f_3 y_1 x_2) (f_3 y_1 x_2)) hol.true (thm_394 B A C y_1 x_2 f_3) (thm_395 B A C x_2 y_1 f_3).

(; Theorem: |- ((= \lambda y. ((= (((Function.flip f) x) y)) ((f y) x))) \lambda y. Data.Bool.T) ;)

(; dict ;)

def thm_397 : B : hol.type -> C : hol.type -> A : hol.type -> x_1 : hol.term B -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A hol.bool) (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2 x_1 y_3) (f_2 y_3 x_1)) (y_3 : hol.term A => hol.true)) :=
  B : hol.type => C : hol.type => A : hol.type => x_1 : hol.term B => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.ABS_THM A hol.bool (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2 x_1 y_3) (f_2 y_3 x_1)) (y_3 : hol.term A => hol.true) (y_3 : hol.term A => thm_396 B A C y_3 x_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= (((Function.flip f) x) y)) ((f y) x)))) (Data.Bool.! \lambda y. Data.Bool.T)) ;)

(; dict ;)

def thm_398 : B : hol.type -> C : hol.type -> A : hol.type -> x_1 : hol.term B -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2 x_1 y_3) (f_2 y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.true))) :=
  B : hol.type => C : hol.type => A : hol.type => x_1 : hol.term B => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2 x_1 y_3) (f_2 y_3 x_1)) (y_3 : hol.term A => hol.true) (thm_15 A) (thm_397 B C A x_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda y. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_399 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall A (y_1 : hol.term A => hol.true)) hol.true) :=
  A : hol.type => (A : hol.type => t_1 : hol.term hol.bool => thm_313 A t_1) A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda y. ((= (((Function.flip f) x) y)) ((f y) x)))) Data.Bool.T) ;)

(; dict ;)

def thm_400 : B : hol.type -> C : hol.type -> A : hol.type -> x_1 : hol.term B -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2 x_1 y_3) (f_2 y_3 x_1))) hol.true) :=
  B : hol.type => C : hol.type => A : hol.type => x_1 : hol.term B => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2 x_1 y_3) (f_2 y_3 x_1))) (hol.forall A (y_3 : hol.term A => hol.true)) hol.true (thm_398 B C A x_1 f_2) (thm_399 A).

(; Theorem: |- ((= \lambda x. (Data.Bool.! \lambda y. ((= (((Function.flip f) x) y)) ((f y) x)))) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_401 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr B hol.bool) (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2))) (x_2 : hol.term B => hol.true)) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.ABS_THM B hol.bool (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2))) (x_2 : hol.term B => hol.true) (x_2 : hol.term B => thm_400 B C A x_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Function.flip f) x) y)) ((f y) x))))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_402 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall B (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2)))) (hol.forall B (x_2 : hol.term B => hol.true))) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2))) (x_2 : hol.term B => hol.true) (thm_287 B) (thm_401 C A B f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_403 : B : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall B (x_2 : hol.term B => t_1)) t_1) :=
  B : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_65 A t_1) B t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_404 : B : hol.type -> hol.proof (hol.eq hol.bool (hol.forall B (x_1 : hol.term B => hol.true)) hol.true) :=
  B : hol.type => (B : hol.type => t_1 : hol.term hol.bool => thm_403 B t_1) B hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Function.flip f) x) y)) ((f y) x))))) Data.Bool.T) ;)

(; dict ;)

def thm_405 : C : hol.type -> A : hol.type -> B : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall B (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2)))) hol.true) :=
  C : hol.type => A : hol.type => B : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.forall B (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2)))) (hol.forall B (x_2 : hol.term B => hol.true)) hol.true (thm_402 C A B f_1) (thm_404 B).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Function.flip f) x) y)) ((f y) x))))) \lambda f. Data.Bool.T) ;)

(; dict ;)

def thm_406 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B C)) hol.bool) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall B (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true)) :=
  C : hol.type => B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B C)) hol.bool (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall B (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true) (f_1 : hol.term (hol.arr A (hol.arr B C)) => thm_405 C A B f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Function.flip f) x) y)) ((f y) x)))))) (Data.Bool.! \lambda f. Data.Bool.T)) ;)

(; dict ;)

def thm_407 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall B (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2))))) (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B C)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B C))) (hol.forall (hol.arr A (hol.arr B C))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall B (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2)))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true) (thm_322 C B A) (thm_406 C B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Function.flip f) x) y)) ((f y) x)))))) Data.Bool.T) ;)

(; dict ;)

def thm_408 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall B (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2))))) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall B (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2))))) (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true)) hol.true (thm_407 C B A) (thm_362 C B A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Function.flip f) x) y)) ((f y) x)))))) ;)

(; dict ;)

def thm_409 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall B (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2)))))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall B (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2))))) hol.true (thm_408 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Function.flip f) x) y)) ((f y) x))))) ;)

(; dict ;)

def thm_410 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall B (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2))))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.EQ_MP hol.true (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.forall B (x_2 : hol.term B => hol.forall A (y_3 : hol.term A => hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1 x_2 y_3) (f_1 y_3 x_2))))) (thm_409 C B A) thm_1.

(; Theorem: |- ((= Data.Bool.!) Data.Bool.!) ;)

(; dict ;)

def thm_411 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A (hol.arr A B)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr A B))) (hol.forall (hol.arr A (hol.arr A B)))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A (hol.arr A B)) hol.bool) hol.bool) (hol.forall (hol.arr A (hol.arr A B))).

(; Theorem: |- ((= ((= Function.Combinator.w) \lambda f. \lambda x. ((f x) x))) ((= Function.Combinator.w) \lambda f. \lambda x. ((f x) x))) ;)

(; dict ;)

def thm_412 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B))) (f_1 : hol.term (hol.arr A (hol.arr A B)) => x_2 : hol.term A => f_1 x_2 x_2)) (hol.eq (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B))) (f_1 : hol.term (hol.arr A (hol.arr A B)) => x_2 : hol.term A => f_1 x_2 x_2))) :=
  B : hol.type => A : hol.type => hol.REFL hol.bool (hol.eq (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B))) (f_1 : hol.term (hol.arr A (hol.arr A B)) => x_2 : hol.term A => f_1 x_2 x_2)).

(; Theorem: |- ((= ((= Function.Combinator.w) \lambda f. \lambda x. ((f x) x))) ((= Function.Combinator.w) \lambda f. \lambda x. ((f x) x))) ;)

(; dict ;)

def thm_413 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B))) (f_1 : hol.term (hol.arr A (hol.arr A B)) => x_2 : hol.term A => f_1 x_2 x_2)) (hol.eq (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B))) (f_1 : hol.term (hol.arr A (hol.arr A B)) => x_2 : hol.term A => f_1 x_2 x_2))) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.eq (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B))) (f_1 : hol.term (hol.arr A (hol.arr A B)) => x_2 : hol.term A => f_1 x_2 x_2)) (hol.eq (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B))) (f_1 : hol.term (hol.arr A (hol.arr A B)) => x_2 : hol.term A => f_1 x_2 x_2)) (hol.eq (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B))) (f_1 : hol.term (hol.arr A (hol.arr A B)) => x_2 : hol.term A => f_1 x_2 x_2)) (thm_412 B A) (thm_412 B A).

(; Theorem: |- ((= f) f) ;)

(; dict ;)

def thm_414 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq (hol.arr A (hol.arr A B)) f_1 f_1) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.REFL (hol.arr A (hol.arr A B)) f_1.

(; Theorem: |- ((= (Function.Combinator.w f)) (\lambda f. \lambda x. ((f x) x) f)) ;)

(; dict ;)

def thm_415 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq (hol.arr A B) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.APP_THM (hol.arr A (hol.arr A B)) (hol.arr A B) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B))) (f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1 f_1 (hol.EQ_MP (hol.eq (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B))) (f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3)) (hol.eq (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B))) (f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3)) (thm_413 B A) (thm_12 B A)) (thm_414 B A f_1).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_416 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr (hol.arr A B) hol.bool)) (hol.eq (hol.arr A B)) (hol.eq (hol.arr A B))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr A B) (hol.arr (hol.arr A B) hol.bool)) (hol.eq (hol.arr A B)).

(; Theorem: |- ((= (\lambda f. \lambda x. ((f x) x) f)) \lambda x. ((f x) x)) ;)

(; dict ;)

def thm_417 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq (hol.arr A B) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1) (x_2 : hol.term A => f_1 x_2 x_2)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.BETA_CONV (hol.arr A (hol.arr A B)) (hol.arr A B) (f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1.

(; Theorem: |- ((= \lambda f. (\lambda f. \lambda x. ((f x) x) f)) \lambda f. \lambda x. ((f x) x)) ;)

(; dict ;)

def thm_418 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) (f_1 : hol.term (hol.arr A (hol.arr A B)) => (f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1) (f_1 : hol.term (hol.arr A (hol.arr A B)) => x_2 : hol.term A => f_1 x_2 x_2)) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr A B)) (hol.arr A B) (f_1 : hol.term (hol.arr A (hol.arr A B)) => (f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1) (f_1 : hol.term (hol.arr A (hol.arr A B)) => x_2 : hol.term A => f_1 x_2 x_2) (f_1 : hol.term (hol.arr A (hol.arr A B)) => thm_417 B A f_1).

(; Theorem: |- ((= (\lambda f. (\lambda f. \lambda x. ((f x) x) f) f)) (\lambda f. \lambda x. ((f x) x) f)) ;)

(; dict ;)

def thm_419 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq (hol.arr A B) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => (f_3 : hol.term (hol.arr A (hol.arr A B)) => x_4 : hol.term A => f_3 x_4 x_4) f_2) f_1) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.APP_THM (hol.arr A (hol.arr A B)) (hol.arr A B) (f_2 : hol.term (hol.arr A (hol.arr A B)) => (f_3 : hol.term (hol.arr A (hol.arr A B)) => x_4 : hol.term A => f_3 x_4 x_4) f_2) (f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1 f_1 (thm_418 B A) (thm_414 B A f_1).

(; Theorem: |- ((= (= (\lambda f. (\lambda f. \lambda x. ((f x) x) f) f))) (= (\lambda f. \lambda x. ((f x) x) f))) ;)

(; dict ;)

def thm_420 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (hol.eq (hol.arr A B) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => (f_3 : hol.term (hol.arr A (hol.arr A B)) => x_4 : hol.term A => f_3 x_4 x_4) f_2) f_1)) (hol.eq (hol.arr A B) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.APP_THM (hol.arr A B) (hol.arr (hol.arr A B) hol.bool) (hol.eq (hol.arr A B)) (hol.eq (hol.arr A B)) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => (f_3 : hol.term (hol.arr A (hol.arr A B)) => x_4 : hol.term A => f_3 x_4 x_4) f_2) f_1) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1) (thm_416 B A) (thm_419 B A f_1).

(; Theorem: |- ((= ((= (\lambda f. (\lambda f. \lambda x. ((f x) x) f) f)) (\lambda f. \lambda x. ((f x) x) f))) ((= (\lambda f. \lambda x. ((f x) x) f)) \lambda x. ((f x) x))) ;)

(; dict ;)

def thm_421 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A B) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => (f_3 : hol.term (hol.arr A (hol.arr A B)) => x_4 : hol.term A => f_3 x_4 x_4) f_2) f_1) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1)) (hol.eq (hol.arr A B) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1) (x_2 : hol.term A => f_1 x_2 x_2))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.APP_THM (hol.arr A B) hol.bool (hol.eq (hol.arr A B) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => (f_3 : hol.term (hol.arr A (hol.arr A B)) => x_4 : hol.term A => f_3 x_4 x_4) f_2) f_1)) (hol.eq (hol.arr A B) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1)) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1) (x_2 : hol.term A => f_1 x_2 x_2) (thm_420 B A f_1) (thm_417 B A f_1).

(; Theorem: |- ((= (Function.Combinator.w f)) \lambda x. ((f x) x)) ;)

(; dict ;)

def thm_422 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq (hol.arr A B) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1) (x_2 : hol.term A => f_1 x_2 x_2)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.TRANS (hol.arr A B) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1) (x_2 : hol.term A => f_1 x_2 x_2) (thm_415 B A f_1) (hol.EQ_MP (hol.eq (hol.arr A B) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => (f_3 : hol.term (hol.arr A (hol.arr A B)) => x_4 : hol.term A => f_3 x_4 x_4) f_2) f_1) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1)) (hol.eq (hol.arr A B) ((f_2 : hol.term (hol.arr A (hol.arr A B)) => x_3 : hol.term A => f_2 x_3 x_3) f_1) (x_2 : hol.term A => f_1 x_2 x_2)) (thm_421 B A f_1) (thm_419 B A f_1)).

(; Theorem: |- ((= ((Function.Combinator.w f) x)) (\lambda x. ((f x) x) x)) ;)

(; dict ;)

def thm_423 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_2 x_1) ((x_3 : hol.term A => f_2 x_3 x_3) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr A B)) => hol.APP_THM A B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_2) (x_3 : hol.term A => f_2 x_3 x_3) x_1 x_1 (thm_422 B A f_2) (thm_54 A x_1).

(; Theorem: |- ((= (\lambda x. ((f x) x) x)) ((f x) x)) ;)

(; dict ;)

def thm_424 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq B ((x_3 : hol.term A => f_2 x_3 x_3) x_1) (f_2 x_1 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr A B)) => hol.BETA_CONV A B (x_3 : hol.term A => f_2 x_3 x_3) x_1.

(; Theorem: |- ((= \lambda x. (\lambda x. ((f x) x) x)) \lambda x. ((f x) x)) ;)

(; dict ;)

def thm_425 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq (hol.arr A B) (x_2 : hol.term A => (x_3 : hol.term A => f_1 x_3 x_3) x_2) (x_2 : hol.term A => f_1 x_2 x_2)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.ABS_THM A B (x_2 : hol.term A => (x_3 : hol.term A => f_1 x_3 x_3) x_2) (x_2 : hol.term A => f_1 x_2 x_2) (x_2 : hol.term A => thm_424 A B x_2 f_1).

(; Theorem: |- ((= (\lambda x. (\lambda x. ((f x) x) x) x)) (\lambda x. ((f x) x) x)) ;)

(; dict ;)

def thm_426 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq B ((x_3 : hol.term A => (x_4 : hol.term A => f_2 x_4 x_4) x_3) x_1) ((x_3 : hol.term A => f_2 x_3 x_3) x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr A B)) => hol.APP_THM A B (x_3 : hol.term A => (x_4 : hol.term A => f_2 x_4 x_4) x_3) (x_3 : hol.term A => f_2 x_3 x_3) x_1 x_1 (thm_425 B A f_2) (thm_54 A x_1).

(; Theorem: |- ((= (= (\lambda x. (\lambda x. ((f x) x) x) x))) (= (\lambda x. ((f x) x) x))) ;)

(; dict ;)

def thm_427 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B ((x_3 : hol.term A => (x_4 : hol.term A => f_2 x_4 x_4) x_3) x_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3 x_3) x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr A B)) => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) ((x_3 : hol.term A => (x_4 : hol.term A => f_2 x_4 x_4) x_3) x_1) ((x_3 : hol.term A => f_2 x_3 x_3) x_1) (thm_236 B) (thm_426 A B x_1 f_2).

(; Theorem: |- ((= ((= (\lambda x. (\lambda x. ((f x) x) x) x)) (\lambda x. ((f x) x) x))) ((= (\lambda x. ((f x) x) x)) ((f x) x))) ;)

(; dict ;)

def thm_428 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq hol.bool (hol.eq B ((x_3 : hol.term A => (x_4 : hol.term A => f_2 x_4 x_4) x_3) x_1) ((x_3 : hol.term A => f_2 x_3 x_3) x_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3 x_3) x_1) (f_2 x_1 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr A B)) => hol.APP_THM B hol.bool (hol.eq B ((x_3 : hol.term A => (x_4 : hol.term A => f_2 x_4 x_4) x_3) x_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3 x_3) x_1)) ((x_3 : hol.term A => f_2 x_3 x_3) x_1) (f_2 x_1 x_1) (thm_427 A B x_1 f_2) (thm_424 A B x_1 f_2).

(; Theorem: |- ((= ((Function.Combinator.w f) x)) ((f x) x)) ;)

(; dict ;)

def thm_429 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_2 x_1) (f_2 x_1 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr A B)) => hol.TRANS B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_2 x_1) ((x_3 : hol.term A => f_2 x_3 x_3) x_1) (f_2 x_1 x_1) (thm_423 A B x_1 f_2) (hol.EQ_MP (hol.eq B ((x_3 : hol.term A => (x_4 : hol.term A => f_2 x_4 x_4) x_3) x_1) ((x_3 : hol.term A => f_2 x_3 x_3) x_1)) (hol.eq B ((x_3 : hol.term A => f_2 x_3 x_3) x_1) (f_2 x_1 x_1)) (thm_428 A B x_1 f_2) (thm_426 A B x_1 f_2)).

(; Theorem: |- ((= (= ((Function.Combinator.w f) x))) (= ((f x) x))) ;)

(; dict ;)

def thm_430 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq (hol.arr B hol.bool) (hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_2 x_1)) (hol.eq B (f_2 x_1 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr A B)) => hol.APP_THM B (hol.arr B hol.bool) (hol.eq B) (hol.eq B) (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_2 x_1) (f_2 x_1 x_1) (thm_236 B) (thm_429 A B x_1 f_2).

(; Theorem: |- ((= ((f x) x)) ((f x) x)) ;)

(; dict ;)

def thm_431 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq B (f_2 x_1 x_1) (f_2 x_1 x_1)) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr A B)) => hol.REFL B (f_2 x_1 x_1).

(; Theorem: |- ((= ((= ((Function.Combinator.w f) x)) ((f x) x))) ((= ((f x) x)) ((f x) x))) ;)

(; dict ;)

def thm_432 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq hol.bool (hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_2 x_1) (f_2 x_1 x_1)) (hol.eq B (f_2 x_1 x_1) (f_2 x_1 x_1))) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr A B)) => hol.APP_THM B hol.bool (hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_2 x_1)) (hol.eq B (f_2 x_1 x_1)) (f_2 x_1 x_1) (f_2 x_1 x_1) (thm_430 A B x_1 f_2) (thm_431 A B x_1 f_2).

(; Theorem: |- ((= ((= ((f x) x)) ((f x) x))) Data.Bool.T) ;)

(; dict ;)

def thm_433 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq hol.bool (hol.eq B (f_2 x_1 x_1) (f_2 x_1 x_1)) hol.true) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr A B)) => (B : hol.type => x_1 : hol.term B => thm_253 B x_1) B (f_2 x_1 x_1).

(; Theorem: |- ((= ((= ((Function.Combinator.w f) x)) ((f x) x))) Data.Bool.T) ;)

(; dict ;)

def thm_434 : A : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq hol.bool (hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_2 x_1) (f_2 x_1 x_1)) hol.true) :=
  A : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr A B)) => hol.TRANS hol.bool (hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_2 x_1) (f_2 x_1 x_1)) (hol.eq B (f_2 x_1 x_1) (f_2 x_1 x_1)) hol.true (thm_432 A B x_1 f_2) (thm_433 A B x_1 f_2).

(; Theorem: |- ((= \lambda x. ((= ((Function.Combinator.w f) x)) ((f x) x))) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_435 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2)) (x_2 : hol.term A => hol.true)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2)) (x_2 : hol.term A => hol.true) (x_2 : hol.term A => thm_434 A B x_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Function.Combinator.w f) x)) ((f x) x)))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_436 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2))) (hol.forall A (x_2 : hol.term A => hol.true))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2)) (x_2 : hol.term A => hol.true) (thm_15 A) (thm_435 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Function.Combinator.w f) x)) ((f x) x)))) Data.Bool.T) ;)

(; dict ;)

def thm_437 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr A B)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2))) hol.true) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.TRANS hol.bool (hol.forall A (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2))) (hol.forall A (x_2 : hol.term A => hol.true)) hol.true (thm_436 B A f_1) (thm_212 A).

(; Theorem: |- ((= \lambda f. (Data.Bool.! \lambda x. ((= ((Function.Combinator.w f) x)) ((f x) x)))) \lambda f. Data.Bool.T) ;)

(; dict ;)

def thm_438 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr A B)) hol.bool) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.forall A (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2))) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.true)) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr A B)) hol.bool (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.forall A (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2))) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.true) (f_1 : hol.term (hol.arr A (hol.arr A B)) => thm_437 B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. ((= ((Function.Combinator.w f) x)) ((f x) x))))) (Data.Bool.! \lambda f. Data.Bool.T)) ;)

(; dict ;)

def thm_439 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr A B)) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.forall A (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2)))) (hol.forall (hol.arr A (hol.arr A B)) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.true))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr A B)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr A B))) (hol.forall (hol.arr A (hol.arr A B))) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.forall A (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2))) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.true) (thm_411 B A) (thm_438 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. t)) t) ;)

(; dict ;)

def thm_440 : B : hol.type -> A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr A B)) (f_2 : hol.term (hol.arr A (hol.arr A B)) => t_1)) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_74 A t_1) (hol.arr A (hol.arr A B)) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda f. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_441 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr A B)) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.true)) hol.true) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => t_1 : hol.term hol.bool => thm_440 B A t_1) B A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. ((= ((Function.Combinator.w f) x)) ((f x) x))))) Data.Bool.T) ;)

(; dict ;)

def thm_442 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr A B)) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.forall A (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2)))) hol.true) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A (hol.arr A B)) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.forall A (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2)))) (hol.forall (hol.arr A (hol.arr A B)) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.true)) hol.true (thm_439 B A) (thm_441 B A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. ((= ((Function.Combinator.w f) x)) ((f x) x))))) ;)

(; dict ;)

def thm_443 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (hol.arr A (hol.arr A B)) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.forall A (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A (hol.arr A B)) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.forall A (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2)))) hol.true (thm_442 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. ((= ((Function.Combinator.w f) x)) ((f x) x)))) ;)

(; dict ;)

def thm_444 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr A B)) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.forall A (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2)))) :=
  B : hol.type => A : hol.type => hol.EQ_MP hol.true (hol.forall (hol.arr A (hol.arr A B)) (f_1 : hol.term (hol.arr A (hol.arr A B)) => hol.forall A (x_2 : hol.term A => hol.eq B (Function_2ECombinator_2Ew (hol.arr (hol.arr A (hol.arr A B)) (hol.arr A B)) f_1 x_2) (f_1 x_2 x_2)))) (thm_443 B A) thm_1.

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_445 : A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A A) (hol.arr (hol.arr A A) hol.bool)) (hol.eq (hol.arr A A)) (hol.eq (hol.arr A A))) :=
  A : hol.type => hol.REFL (hol.arr (hol.arr A A) (hol.arr (hol.arr A A) hol.bool)) (hol.eq (hol.arr A A)).

(; Theorem: |- ((= Function.Combinator.s) \lambda f. \lambda g. \lambda x. ((f x) (g x))) ;)

(; dict ;)

def thm_446 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A)))) (f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))) :=
  B : hol.type => A : hol.type => (C : hol.type => B : hol.type => A : hol.type => thm_10 C B A) A B A.

(; Theorem: |- ((= Function.const) Function.const) ;)

(; dict ;)

def thm_447 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr A (hol.arr B A)) (Function_2Econst (hol.arr A (hol.arr B A))) (Function_2Econst (hol.arr A (hol.arr B A)))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr A (hol.arr B A)) (Function_2Econst (hol.arr A (hol.arr B A))).

(; Theorem: |- ((= (Function.Combinator.s Function.const)) (\lambda f. \lambda g. \lambda x. ((f x) (g x)) Function.const)) ;)

(; dict ;)

def thm_448 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A)))) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A)) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A)))) (f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A))) (Function_2Econst (hol.arr A (hol.arr B A))) (thm_446 B A) (thm_447 B A).

(; Theorem: |- ((= =) =) ;)

(; dict ;)

def thm_449 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) (hol.arr A A)) (hol.arr (hol.arr (hol.arr A B) (hol.arr A A)) hol.bool)) (hol.eq (hol.arr (hol.arr A B) (hol.arr A A))) (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)))) :=
  B : hol.type => A : hol.type => hol.REFL (hol.arr (hol.arr (hol.arr A B) (hol.arr A A)) (hol.arr (hol.arr (hol.arr A B) (hol.arr A A)) hol.bool)) (hol.eq (hol.arr (hol.arr A B) (hol.arr A A))).

(; Theorem: |- ((= (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f)) \lambda g. \lambda x. ((f x) (g x))) ;)

(; dict ;)

def thm_450 : B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B A)) -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) ((f_2 : hol.term (hol.arr A (hol.arr B A)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))) :=
  B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B A)) => hol.BETA_CONV (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A)) (f_2 : hol.term (hol.arr A (hol.arr B A)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1.

(; Theorem: |- ((= \lambda f. (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f)) \lambda f. \lambda g. \lambda x. ((f x) (g x))) ;)

(; dict ;)

def thm_451 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (f_1 : hol.term (hol.arr A (hol.arr B A)) => (f_2 : hol.term (hol.arr A (hol.arr B A)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3))) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A)) (f_1 : hol.term (hol.arr A (hol.arr B A)) => (f_2 : hol.term (hol.arr A (hol.arr B A)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (f_1 : hol.term (hol.arr A (hol.arr B A)) => thm_450 B A f_1).

(; Theorem: |- ((= (\lambda f. (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f) Function.const)) (\lambda f. \lambda g. \lambda x. ((f x) (g x)) Function.const)) ;)

(; dict ;)

def thm_452 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => (f_2 : hol.term (hol.arr A (hol.arr B A)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (Function_2Econst (hol.arr A (hol.arr B A)))) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A)) (f_1 : hol.term (hol.arr A (hol.arr B A)) => (f_2 : hol.term (hol.arr A (hol.arr B A)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A))) (Function_2Econst (hol.arr A (hol.arr B A))) (thm_451 B A) (thm_447 B A).

(; Theorem: |- ((= (= (\lambda f. (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f) Function.const))) (= (\lambda f. \lambda g. \lambda x. ((f x) (g x)) Function.const))) ;)

(; dict ;)

def thm_453 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr (hol.arr A B) (hol.arr A A)) hol.bool) (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => (f_2 : hol.term (hol.arr A (hol.arr B A)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (Function_2Econst (hol.arr A (hol.arr B A))))) (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A)))))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) (hol.arr A A)) (hol.arr (hol.arr (hol.arr A B) (hol.arr A A)) hol.bool) (hol.eq (hol.arr (hol.arr A B) (hol.arr A A))) (hol.eq (hol.arr (hol.arr A B) (hol.arr A A))) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => (f_2 : hol.term (hol.arr A (hol.arr B A)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (Function_2Econst (hol.arr A (hol.arr B A)))) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A)))) (thm_449 B A) (thm_452 B A).

(; Theorem: |- ((= (\lambda f. \lambda g. \lambda x. ((f x) (g x)) Function.const)) \lambda g. \lambda x. ((Function.const x) (g x))) ;)

(; dict ;)

def thm_454 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A)))) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => Function_2Econst (hol.arr A (hol.arr B A)) x_2 (g_1 x_2))) :=
  B : hol.type => A : hol.type => hol.BETA_CONV (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A)) (f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A))).

(; Theorem: |- ((= ((= (\lambda f. (\lambda f. \lambda g. \lambda x. ((f x) (g x)) f) Function.const)) (\lambda f. \lambda g. \lambda x. ((f x) (g x)) Function.const))) ((= (\lambda f. \lambda g. \lambda x. ((f x) (g x)) Function.const)) \lambda g. \lambda x. ((Function.const x) (g x)))) ;)

(; dict ;)

def thm_455 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => (f_2 : hol.term (hol.arr A (hol.arr B A)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (Function_2Econst (hol.arr A (hol.arr B A)))) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A))))) (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A)))) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => Function_2Econst (hol.arr A (hol.arr B A)) x_2 (g_1 x_2)))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) (hol.arr A A)) hol.bool (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => (f_2 : hol.term (hol.arr A (hol.arr B A)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (Function_2Econst (hol.arr A (hol.arr B A))))) (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A))))) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A)))) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => Function_2Econst (hol.arr A (hol.arr B A)) x_2 (g_1 x_2)) (thm_453 B A) (thm_454 B A).

(; Theorem: |- ((= ((Function.const x) (g x))) x) ;)

(; dict ;)

def thm_456 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> x_2 : hol.term A -> hol.proof (hol.eq A (Function_2Econst (hol.arr A (hol.arr B A)) x_2 (g_1 x_2)) x_2) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => (B : hol.type => A : hol.type => y_1 : hol.term B => x_2 : hol.term A => thm_305 B A y_1 x_2) B A (g_1 x_2) x_2.

(; Theorem: |- ((= \lambda x. ((Function.const x) (g x))) \lambda x. x) ;)

(; dict ;)

def thm_457 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A A) (x_2 : hol.term A => Function_2Econst (hol.arr A (hol.arr B A)) x_2 (g_1 x_2)) (x_2 : hol.term A => x_2)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => hol.ABS_THM A A (x_2 : hol.term A => Function_2Econst (hol.arr A (hol.arr B A)) x_2 (g_1 x_2)) (x_2 : hol.term A => x_2) (x_2 : hol.term A => thm_456 B A g_1 x_2).

(; Theorem: |- ((= \lambda g. \lambda x. ((Function.const x) (g x))) \lambda g. \lambda x. x) ;)

(; dict ;)

def thm_458 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => Function_2Econst (hol.arr A (hol.arr B A)) x_2 (g_1 x_2)) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => x_2)) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) (hol.arr A A) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => Function_2Econst (hol.arr A (hol.arr B A)) x_2 (g_1 x_2)) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => x_2) (g_1 : hol.term (hol.arr A B) => thm_457 B A g_1).

(; Theorem: |- ((= (\lambda f. \lambda g. \lambda x. ((f x) (g x)) Function.const)) \lambda g. \lambda x. x) ;)

(; dict ;)

def thm_459 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A)))) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => x_2)) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A B) (hol.arr A A)) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A)))) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => Function_2Econst (hol.arr A (hol.arr B A)) x_2 (g_1 x_2)) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => x_2) (hol.EQ_MP (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => (f_2 : hol.term (hol.arr A (hol.arr B A)) => g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => f_2 x_4 (g_3 x_4)) f_1) (Function_2Econst (hol.arr A (hol.arr B A)))) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A))))) (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A)))) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => Function_2Econst (hol.arr A (hol.arr B A)) x_2 (g_1 x_2))) (thm_455 B A) (thm_452 B A)) (thm_458 B A).

(; Theorem: |- ((= (Function.Combinator.s Function.const)) \lambda g. \lambda x. x) ;)

(; dict ;)

def thm_460 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A)))) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => x_2)) :=
  B : hol.type => A : hol.type => hol.TRANS (hol.arr (hol.arr A B) (hol.arr A A)) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A)))) ((f_1 : hol.term (hol.arr A (hol.arr B A)) => g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => f_1 x_3 (g_2 x_3)) (Function_2Econst (hol.arr A (hol.arr B A)))) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => x_2) (thm_448 B A) (thm_459 B A).

(; Theorem: |- ((= x) x) ;)

(; dict ;)

def thm_461 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A B) x_1 x_1) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A B) => hol.REFL (hol.arr A B) x_1.

(; Theorem: |- ((= ((Function.Combinator.s Function.const) x)) (\lambda g. \lambda x. x x)) ;)

(; dict ;)

def thm_462 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) ((g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A B) (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A)))) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1 x_1 (thm_460 B A) (thm_461 B A x_1).

(; Theorem: |- ((= (\lambda g. \lambda x. x g)) \lambda x. x) ;)

(; dict ;)

def thm_463 : B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A A) ((g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) g_1) (x_2 : hol.term A => x_2)) :=
  B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => hol.BETA_CONV (hol.arr A B) (hol.arr A A) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) g_1.

(; Theorem: |- ((= \lambda g. (\lambda g. \lambda x. x g)) \lambda g. \lambda x. x) ;)

(; dict ;)

def thm_464 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) (hol.arr A A)) (g_1 : hol.term (hol.arr A B) => (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) g_1) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => x_2)) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) (hol.arr A A) (g_1 : hol.term (hol.arr A B) => (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) g_1) (g_1 : hol.term (hol.arr A B) => x_2 : hol.term A => x_2) (g_1 : hol.term (hol.arr A B) => thm_463 B A g_1).

(; Theorem: |- ((= (\lambda g. (\lambda g. \lambda x. x g) x)) (\lambda g. \lambda x. x x)) ;)

(; dict ;)

def thm_465 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A A) ((g_2 : hol.term (hol.arr A B) => (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => x_4) g_2) x_1) ((g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A B) (hol.arr A A) (g_2 : hol.term (hol.arr A B) => (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => x_4) g_2) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1 x_1 (thm_464 B A) (thm_461 B A x_1).

(; Theorem: |- ((= (= (\lambda g. (\lambda g. \lambda x. x g) x))) (= (\lambda g. \lambda x. x x))) ;)

(; dict ;)

def thm_466 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr A A) hol.bool) (hol.eq (hol.arr A A) ((g_2 : hol.term (hol.arr A B) => (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => x_4) g_2) x_1)) (hol.eq (hol.arr A A) ((g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A A) (hol.arr (hol.arr A A) hol.bool) (hol.eq (hol.arr A A)) (hol.eq (hol.arr A A)) ((g_2 : hol.term (hol.arr A B) => (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => x_4) g_2) x_1) ((g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1) (thm_445 A) (thm_465 B A x_1).

(; Theorem: |- ((= (\lambda g. \lambda x. x x)) \lambda x. x) ;)

(; dict ;)

def thm_467 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A A) ((g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1) (x_2 : hol.term A => x_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A B) => hol.BETA_CONV (hol.arr A B) (hol.arr A A) (g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1.

(; Theorem: |- ((= ((= (\lambda g. (\lambda g. \lambda x. x g) x)) (\lambda g. \lambda x. x x))) ((= (\lambda g. \lambda x. x x)) \lambda x. x)) ;)

(; dict ;)

def thm_468 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A A) ((g_2 : hol.term (hol.arr A B) => (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => x_4) g_2) x_1) ((g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1)) (hol.eq (hol.arr A A) ((g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1) (x_2 : hol.term A => x_2))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A A) hol.bool (hol.eq (hol.arr A A) ((g_2 : hol.term (hol.arr A B) => (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => x_4) g_2) x_1)) (hol.eq (hol.arr A A) ((g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1)) ((g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1) (x_2 : hol.term A => x_2) (thm_466 B A x_1) (thm_467 B A x_1).

(; Theorem: |- ((= ((Function.Combinator.s Function.const) x)) \lambda x. x) ;)

(; dict ;)

def thm_469 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (x_2 : hol.term A => x_2)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A B) => hol.TRANS (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) ((g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1) (x_2 : hol.term A => x_2) (thm_462 B A x_1) (hol.EQ_MP (hol.eq (hol.arr A A) ((g_2 : hol.term (hol.arr A B) => (g_3 : hol.term (hol.arr A B) => x_4 : hol.term A => x_4) g_2) x_1) ((g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1)) (hol.eq (hol.arr A A) ((g_2 : hol.term (hol.arr A B) => x_3 : hol.term A => x_3) x_1) (x_2 : hol.term A => x_2)) (thm_468 B A x_1) (thm_465 B A x_1)).

(; Theorem: |- ((= (= ((Function.Combinator.s Function.const) x))) (= \lambda x. x)) ;)

(; dict ;)

def thm_470 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq (hol.arr (hol.arr A A) hol.bool) (hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1)) (hol.eq (hol.arr A A) (x_2 : hol.term A => x_2))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A A) (hol.arr (hol.arr A A) hol.bool) (hol.eq (hol.arr A A)) (hol.eq (hol.arr A A)) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (x_2 : hol.term A => x_2) (thm_445 A) (thm_469 B A x_1).

(; Theorem: |- ((= ((= ((Function.Combinator.s Function.const) x)) Function.id)) ((= \lambda x. x) \lambda x. x)) ;)

(; dict ;)

def thm_471 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (Function_2Eid (hol.arr A A))) (hol.eq (hol.arr A A) (x_2 : hol.term A => x_2) (x_2 : hol.term A => x_2))) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A B) => hol.APP_THM (hol.arr A A) hol.bool (hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1)) (hol.eq (hol.arr A A) (x_2 : hol.term A => x_2)) (Function_2Eid (hol.arr A A)) (x_2 : hol.term A => x_2) (thm_470 B A x_1) (thm_5 A).

(; Theorem: |- ((= ((= x) x)) Data.Bool.T) ;)

(; dict ;)

def thm_472 : A : hol.type -> x_1 : hol.term (hol.arr A A) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A A) x_1 x_1) hol.true) :=
  A : hol.type => x_1 : hol.term (hol.arr A A) => (A : hol.type => x_1 : hol.term A => thm_55 A x_1) (hol.arr A A) x_1.

(; Theorem: |- ((= ((= \lambda x. x) \lambda x. x)) Data.Bool.T) ;)

(; dict ;)

def thm_473 : A : hol.type -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A A) (x_1 : hol.term A => x_1) (x_1 : hol.term A => x_1)) hol.true) :=
  A : hol.type => (A : hol.type => x_1 : hol.term (hol.arr A A) => thm_472 A x_1) A (x_1 : hol.term A => x_1).

(; Theorem: |- ((= ((= ((Function.Combinator.s Function.const) x)) Function.id)) Data.Bool.T) ;)

(; dict ;)

def thm_474 : B : hol.type -> A : hol.type -> x_1 : hol.term (hol.arr A B) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (Function_2Eid (hol.arr A A))) hol.true) :=
  B : hol.type => A : hol.type => x_1 : hol.term (hol.arr A B) => hol.TRANS hol.bool (hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (Function_2Eid (hol.arr A A))) (hol.eq (hol.arr A A) (x_2 : hol.term A => x_2) (x_2 : hol.term A => x_2)) hol.true (thm_471 B A x_1) (thm_473 A).

(; Theorem: |- ((= \lambda x. ((= ((Function.Combinator.s Function.const) x)) Function.id)) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_475 : B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A B) hol.bool) (x_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (Function_2Eid (hol.arr A A))) (x_1 : hol.term (hol.arr A B) => hol.true)) :=
  B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A B) hol.bool (x_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (Function_2Eid (hol.arr A A))) (x_1 : hol.term (hol.arr A B) => hol.true) (x_1 : hol.term (hol.arr A B) => thm_474 B A x_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Function.Combinator.s Function.const) x)) Function.id))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_476 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (x_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (Function_2Eid (hol.arr A A)))) (hol.forall (hol.arr A B) (x_1 : hol.term (hol.arr A B) => hol.true))) :=
  B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A B) hol.bool) hol.bool (hol.forall (hol.arr A B)) (hol.forall (hol.arr A B)) (x_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (Function_2Eid (hol.arr A A))) (x_1 : hol.term (hol.arr A B) => hol.true) (thm_14 B A) (thm_475 B A).

(; Theorem: |- ((= (Data.Bool.! \lambda x. t)) t) ;)

(; dict ;)

def thm_477 : B : hol.type -> A : hol.type -> t_1 : hol.term hol.bool -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (x_2 : hol.term (hol.arr A B) => t_1)) t_1) :=
  B : hol.type => A : hol.type => t_1 : hol.term hol.bool => (A : hol.type => t_1 : hol.term hol.bool => thm_65 A t_1) (hol.arr A B) t_1.

(; Theorem: |- ((= (Data.Bool.! \lambda x. Data.Bool.T)) Data.Bool.T) ;)

(; dict ;)

def thm_478 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (x_1 : hol.term (hol.arr A B) => hol.true)) hol.true) :=
  B : hol.type => A : hol.type => (B : hol.type => A : hol.type => t_1 : hol.term hol.bool => thm_477 B A t_1) B A hol.true.

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Function.Combinator.s Function.const) x)) Function.id))) Data.Bool.T) ;)

(; dict ;)

def thm_479 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A B) (x_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (Function_2Eid (hol.arr A A)))) hol.true) :=
  B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A B) (x_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (Function_2Eid (hol.arr A A)))) (hol.forall (hol.arr A B) (x_1 : hol.term (hol.arr A B) => hol.true)) hol.true (thm_476 B A) (thm_478 B A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda x. ((= ((Function.Combinator.s Function.const) x)) Function.id))) ;)

(; dict ;)

def thm_480 : B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (hol.arr A B) (x_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (Function_2Eid (hol.arr A A))))) :=
  B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A B) (x_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (Function_2Eid (hol.arr A A)))) hol.true (thm_479 B A).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((Function.Combinator.s Function.const) x)) Function.id)) ;)

(; dict ;)

def thm_481 : B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A B) (x_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (Function_2Eid (hol.arr A A)))) :=
  B : hol.type => A : hol.type => hol.EQ_MP hol.true (hol.forall (hol.arr A B) (x_1 : hol.term (hol.arr A B) => hol.eq (hol.arr A A) (Function_2ECombinator_2Es (hol.arr (hol.arr A (hol.arr B A)) (hol.arr (hol.arr A B) (hol.arr A A))) (Function_2Econst (hol.arr A (hol.arr B A))) x_1) (Function_2Eid (hol.arr A A)))) (thm_480 B A) thm_1.

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_482 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (hol.arr A (hol.arr B C)) -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B C)) f_2 g_1) (hol.forall A (x_3 : hol.term A => hol.eq (hol.arr B C) (f_2 x_3) (g_1 x_3)))) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A (hol.arr B C)) => f_2 : hol.term (hol.arr A (hol.arr B C)) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_234 B A g_1 f_2) (hol.arr B C) A g_1 f_2.

(; Theorem: |- ((= ((= (Function.flip (Function.flip f))) f)) (Data.Bool.! \lambda x. ((= ((Function.flip (Function.flip f)) x)) (f x)))) ;)

(; dict ;)

def thm_483 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B C)) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)) f_1) (hol.forall A (x_2 : hol.term A => hol.eq (hol.arr B C) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1) x_2) (f_1 x_2)))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => (C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A (hol.arr B C)) => f_2 : hol.term (hol.arr A (hol.arr B C)) => thm_482 C B A g_1 f_2) C B A f_1 (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)).

(; Theorem: |- ((= ((= f) g)) (Data.Bool.! \lambda x. ((= (f x)) (g x)))) ;)

(; dict ;)

def thm_484 : C : hol.type -> B : hol.type -> g_1 : hol.term (hol.arr B C) -> f_2 : hol.term (hol.arr B C) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr B C) f_2 g_1) (hol.forall B (x_3 : hol.term B => hol.eq C (f_2 x_3) (g_1 x_3)))) :=
  C : hol.type => B : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr B C) => (B : hol.type => A : hol.type => g_1 : hol.term (hol.arr A B) => f_2 : hol.term (hol.arr A B) => thm_234 B A g_1 f_2) C B g_1 f_2.

(; Theorem: |- ((= ((= ((Function.flip (Function.flip f)) x)) (f x))) (Data.Bool.! \lambda x. ((= (((Function.flip (Function.flip f)) x) x)) ((f x) x)))) ;)

(; dict ;)

def thm_485 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr B C) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2) x_1) (f_2 x_1)) (hol.forall B (x_3 : hol.term B => hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2) x_1 x_3) (f_2 x_1 x_3)))) :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr B C)) => (C : hol.type => B : hol.type => g_1 : hol.term (hol.arr B C) => f_2 : hol.term (hol.arr B C) => thm_484 C B g_1 f_2) C B (f_2 x_1) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2) x_1).

(; Theorem: |- ((= (((Function.flip f) x) y)) ((f y) x)) ;)

(; dict ;)

def thm_486 : A : hol.type -> B : hol.type -> C : hol.type -> y_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr B (hol.arr A C)) -> hol.proof (hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) f_3 x_2 y_1) (f_3 y_1 x_2)) :=
  A : hol.type => B : hol.type => C : hol.type => y_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr B (hol.arr A C)) => (B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term B => f_3 : hol.term (hol.arr A (hol.arr B C)) => thm_391 B A C y_1 x_2 f_3) A B C y_1 x_2 f_3.

(; Theorem: |- ((= (((Function.flip (Function.flip f)) x) x)) (((Function.flip f) x) x)) ;)

(; dict ;)

def thm_487 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3) x_2 x_1) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3 x_1 x_2)) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => (A : hol.type => B : hol.type => C : hol.type => y_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr B (hol.arr A C)) => thm_486 A B C y_1 x_2 f_3) A B C x_1 x_2 (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3).

(; Theorem: |- ((= (((Function.flip f) x) x)) ((f x) x)) ;)

(; dict ;)

def thm_488 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term A -> x_2 : hol.term B -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3 x_2 x_1) (f_3 x_1 x_2)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term A => x_2 : hol.term B => f_3 : hol.term (hol.arr A (hol.arr B C)) => (B : hol.type => A : hol.type => C : hol.type => y_1 : hol.term A => x_2 : hol.term B => f_3 : hol.term (hol.arr A (hol.arr B C)) => thm_391 B A C y_1 x_2 f_3) B A C x_1 x_2 f_3.

(; Theorem: |- ((= (((Function.flip (Function.flip f)) x) x)) ((f x) x)) ;)

(; dict ;)

def thm_489 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3) x_2 x_1) (f_3 x_2 x_1)) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3) x_2 x_1) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3 x_1 x_2) (f_3 x_2 x_1) (thm_487 A B C x_1 x_2 f_3) (thm_488 B A C x_2 x_1 f_3).

(; Theorem: |- ((= (= (((Function.flip (Function.flip f)) x) x))) (= ((f x) x))) ;)

(; dict ;)

def thm_490 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr C hol.bool) (hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3) x_2 x_1)) (hol.eq C (f_3 x_2 x_1))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C (hol.arr C hol.bool) (hol.eq C) (hol.eq C) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3) x_2 x_1) (f_3 x_2 x_1) (thm_16 C) (thm_489 A B C x_1 x_2 f_3).

(; Theorem: |- ((= ((f x) x)) ((f x) x)) ;)

(; dict ;)

def thm_491 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq C (f_3 x_2 x_1) (f_3 x_2 x_1)) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.REFL C (f_3 x_2 x_1).

(; Theorem: |- ((= ((= (((Function.flip (Function.flip f)) x) x)) ((f x) x))) ((= ((f x) x)) ((f x) x))) ;)

(; dict ;)

def thm_492 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3) x_2 x_1) (f_3 x_2 x_1)) (hol.eq C (f_3 x_2 x_1) (f_3 x_2 x_1))) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM C hol.bool (hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3) x_2 x_1)) (hol.eq C (f_3 x_2 x_1)) (f_3 x_2 x_1) (f_3 x_2 x_1) (thm_490 A B C x_1 x_2 f_3) (thm_491 B A C x_1 x_2 f_3).

(; Theorem: |- ((= ((= ((f x) x)) ((f x) x))) Data.Bool.T) ;)

(; dict ;)

def thm_493 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C (f_3 x_2 x_1) (f_3 x_2 x_1)) hol.true) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => (C : hol.type => x_1 : hol.term C => thm_350 C x_1) C (f_3 x_2 x_1).

(; Theorem: |- ((= ((= (((Function.flip (Function.flip f)) x) x)) ((f x) x))) Data.Bool.T) ;)

(; dict ;)

def thm_494 : A : hol.type -> B : hol.type -> C : hol.type -> x_1 : hol.term B -> x_2 : hol.term A -> f_3 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3) x_2 x_1) (f_3 x_2 x_1)) hol.true) :=
  A : hol.type => B : hol.type => C : hol.type => x_1 : hol.term B => x_2 : hol.term A => f_3 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_3) x_2 x_1) (f_3 x_2 x_1)) (hol.eq C (f_3 x_2 x_1) (f_3 x_2 x_1)) hol.true (thm_492 A B C x_1 x_2 f_3) (thm_493 B A C x_1 x_2 f_3).

(; Theorem: |- ((= \lambda x. ((= (((Function.flip (Function.flip f)) x) x)) ((f x) x))) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_495 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr B hol.bool) (x_3 : hol.term B => hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2) x_1 x_3) (f_2 x_1 x_3)) (x_3 : hol.term B => hol.true)) :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.ABS_THM B hol.bool (x_3 : hol.term B => hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2) x_1 x_3) (f_2 x_1 x_3)) (x_3 : hol.term B => hol.true) (x_3 : hol.term B => thm_494 A B C x_3 x_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (((Function.flip (Function.flip f)) x) x)) ((f x) x)))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_496 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall B (x_3 : hol.term B => hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2) x_1 x_3) (f_2 x_1 x_3))) (hol.forall B (x_3 : hol.term B => hol.true))) :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr B hol.bool) hol.bool (hol.forall B) (hol.forall B) (x_3 : hol.term B => hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2) x_1 x_3) (f_2 x_1 x_3)) (x_3 : hol.term B => hol.true) (thm_287 B) (thm_495 A C B x_1 f_2).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= (((Function.flip (Function.flip f)) x) x)) ((f x) x)))) Data.Bool.T) ;)

(; dict ;)

def thm_497 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall B (x_3 : hol.term B => hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2) x_1 x_3) (f_2 x_1 x_3))) hol.true) :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.forall B (x_3 : hol.term B => hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2) x_1 x_3) (f_2 x_1 x_3))) (hol.forall B (x_3 : hol.term B => hol.true)) hol.true (thm_496 A C B x_1 f_2) (thm_404 B).

(; Theorem: |- ((= ((= ((Function.flip (Function.flip f)) x)) (f x))) Data.Bool.T) ;)

(; dict ;)

def thm_498 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term A -> f_2 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr B C) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2) x_1) (f_2 x_1)) hol.true) :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term A => f_2 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.eq (hol.arr B C) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2) x_1) (f_2 x_1)) (hol.forall B (x_3 : hol.term B => hol.eq C (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_2) x_1 x_3) (f_2 x_1 x_3))) hol.true (thm_485 A C B x_1 f_2) (thm_497 A C B x_1 f_2).

(; Theorem: |- ((= \lambda x. ((= ((Function.flip (Function.flip f)) x)) (f x))) \lambda x. Data.Bool.T) ;)

(; dict ;)

def thm_499 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq (hol.arr A hol.bool) (x_2 : hol.term A => hol.eq (hol.arr B C) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1) x_2) (f_1 x_2)) (x_2 : hol.term A => hol.true)) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.ABS_THM A hol.bool (x_2 : hol.term A => hol.eq (hol.arr B C) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1) x_2) (f_1 x_2)) (x_2 : hol.term A => hol.true) (x_2 : hol.term A => thm_498 A C B x_2 f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Function.flip (Function.flip f)) x)) (f x)))) (Data.Bool.! \lambda x. Data.Bool.T)) ;)

(; dict ;)

def thm_500 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.eq (hol.arr B C) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1) x_2) (f_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.true))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.APP_THM (hol.arr A hol.bool) hol.bool (hol.forall A) (hol.forall A) (x_2 : hol.term A => hol.eq (hol.arr B C) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1) x_2) (f_1 x_2)) (x_2 : hol.term A => hol.true) (thm_15 A) (thm_499 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda x. ((= ((Function.flip (Function.flip f)) x)) (f x)))) Data.Bool.T) ;)

(; dict ;)

def thm_501 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.forall A (x_2 : hol.term A => hol.eq (hol.arr B C) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1) x_2) (f_1 x_2))) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.forall A (x_2 : hol.term A => hol.eq (hol.arr B C) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1) x_2) (f_1 x_2))) (hol.forall A (x_2 : hol.term A => hol.true)) hol.true (thm_500 C B A f_1) (thm_212 A).

(; Theorem: |- ((= ((= (Function.flip (Function.flip f))) f)) Data.Bool.T) ;)

(; dict ;)

def thm_502 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (hol.arr A (hol.arr B C)) -> hol.proof (hol.eq hol.bool (hol.eq (hol.arr A (hol.arr B C)) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)) f_1) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.TRANS hol.bool (hol.eq (hol.arr A (hol.arr B C)) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)) f_1) (hol.forall A (x_2 : hol.term A => hol.eq (hol.arr B C) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1) x_2) (f_1 x_2))) hol.true (thm_483 C B A f_1) (thm_501 C B A f_1).

(; Theorem: |- ((= \lambda f. ((= (Function.flip (Function.flip f))) f)) \lambda f. Data.Bool.T) ;)

(; dict ;)

def thm_503 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq (hol.arr (hol.arr A (hol.arr B C)) hol.bool) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.eq (hol.arr A (hol.arr B C)) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)) f_1) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true)) :=
  C : hol.type => B : hol.type => A : hol.type => hol.ABS_THM (hol.arr A (hol.arr B C)) hol.bool (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.eq (hol.arr A (hol.arr B C)) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)) f_1) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true) (f_1 : hol.term (hol.arr A (hol.arr B C)) => thm_502 C B A f_1).

(; Theorem: |- ((= (Data.Bool.! \lambda f. ((= (Function.flip (Function.flip f))) f))) (Data.Bool.! \lambda f. Data.Bool.T)) ;)

(; dict ;)

def thm_504 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.eq (hol.arr A (hol.arr B C)) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)) f_1)) (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.APP_THM (hol.arr (hol.arr A (hol.arr B C)) hol.bool) hol.bool (hol.forall (hol.arr A (hol.arr B C))) (hol.forall (hol.arr A (hol.arr B C))) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.eq (hol.arr A (hol.arr B C)) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)) f_1) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true) (thm_322 C B A) (thm_503 C B A).

(; Theorem: |- ((= (Data.Bool.! \lambda f. ((= (Function.flip (Function.flip f))) f))) Data.Bool.T) ;)

(; dict ;)

def thm_505 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.eq (hol.arr A (hol.arr B C)) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)) f_1)) hol.true) :=
  C : hol.type => B : hol.type => A : hol.type => hol.TRANS hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.eq (hol.arr A (hol.arr B C)) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)) f_1)) (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.true)) hol.true (thm_504 C B A) (thm_362 C B A).

(; Theorem: |- ((= Data.Bool.T) (Data.Bool.! \lambda f. ((= (Function.flip (Function.flip f))) f))) ;)

(; dict ;)

def thm_506 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.eq hol.bool hol.true (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.eq (hol.arr A (hol.arr B C)) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)) f_1))) :=
  C : hol.type => B : hol.type => A : hol.type => hol.SYM hol.bool (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.eq (hol.arr A (hol.arr B C)) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)) f_1)) hol.true (thm_505 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Function.flip (Function.flip f))) f)) ;)

(; dict ;)

def thm_507 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.eq (hol.arr A (hol.arr B C)) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)) f_1)) :=
  C : hol.type => B : hol.type => A : hol.type => hol.EQ_MP hol.true (hol.forall (hol.arr A (hol.arr B C)) (f_1 : hol.term (hol.arr A (hol.arr B C)) => hol.eq (hol.arr A (hol.arr B C)) (Function_2Eflip (hol.arr (hol.arr B (hol.arr A C)) (hol.arr A (hol.arr B C))) (Function_2Eflip (hol.arr (hol.arr A (hol.arr B C)) (hol.arr B (hol.arr A C))) f_1)) f_1)) (thm_506 C B A) thm_1.
